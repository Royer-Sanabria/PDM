/*
 * API_Uart.c
 *
 *  Created on: Dec 3, 2023
 *      Author: Royer Sanabria
 */
#include "main.h"
#include "API_UART.h"

#include <stdlib.h>
#include <string.h>
#define TIME_MAX_WAIT 5000
#define BUFFER_SIZE 3

UART_HandleTypeDef huart2;


char interlineado[]={"\r\n"};
uint8_t rx_buffer[BUFFER_SIZE];
volatile uint8_t rx_data_ready = 0;
 uint8_t UART_Date;

// ******************************************
void UART_Init(void){
MX_USART2_UART_Init();
HAL_UART_Receive_IT(&huart2, (uint8_t *)rx_buffer, BUFFER_SIZE);
}
/*
 Función que inicializa la UART.
*/
//*******************************************




/*
 * Función Lectura datos no bloqueante (Uso de interrupción) de 3 bytes desde la UART2
 * Cuando
 */
uint8_t UART_Read(){
	if (rx_data_ready) {
		rx_data_ready = 0;
		HAL_UART_Receive_IT(&huart2, rx_buffer, BUFFER_SIZE);
		HAL_UART_Transmit(&huart2,UART_Date, strlen(UART_Date), HAL_MAX_DELAY);
	               return UART_Date;
	               UART_Date=0;
	        }
}

recipe_t UART_Recip (){
	recipe_t recipe;
	uint8_t Temperature=UART_Read();
	//uint8_t Time=UART_receiveTime();
	recipe.temperature=Temperature;
	recipe.time=100;
	return recipe;
}



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {

			UART_Date=atoi(rx_buffer);
			HAL_UART_Transmit(&huart2,(uint8_t *)rx_buffer,BUFFER_SIZE, HAL_MAX_DELAY);
			HAL_UART_Transmit(&huart2,(uint8_t *)interlineado, strlen(interlineado), HAL_MAX_DELAY);
    rx_data_ready = 1;

}



void MX_USART2_UART_Init(void)
{
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
}
