/*
 * API_Uart.c
 *
 *  Created on: Dec 3, 2023
 *      Author: Royer Sanabria
 */
#include "main.h"
#include "API_UART.h"

#include <stdlib.h>
#include <string.h>
#define TIME_MAX_WAIT 5000
#define BUFFER_SIZE 3

UART_HandleTypeDef huart2;


static uint8_t temperature,time;
char interlineado[]={"\r\n"};
char rx_buffer[BUFFER_SIZE];
volatile uint8_t rx_data_ready = 0;

// ******************************************
void UART_Init(void){
MX_USART2_UART_Init();
HAL_UART_Receive_IT(&huart2, (uint8_t *)rx_buffer, BUFFER_SIZE);
}
/*
 Función ue inicializa la UART.
*/
//*******************************************





uint8_t UART_receiveTemperature(){

	if (rx_data_ready) {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);

	         // ...

	            // Puedes reiniciar la recepción para estar listo para el próximo conjunto de datos
	            HAL_UART_Receive_IT(&huart2, rx_buffer, BUFFER_SIZE);

	            // Reiniciar la bandera
	            rx_data_ready = 0;
	        }

		/*
	            // Procesar los datos en rx_buffer
		char recipeTemperatura[BUFFER_SIZE];
		char mensaje_solicitud_temperatura[]={"Indique la temperatura receta \r\n"};
		HAL_UART_Transmit(&huart2,(uint8_t *)mensaje_solicitud_temperatura, strlen(mensaje_solicitud_temperatura), HAL_MAX_DELAY);
		HAL_UART_Receive(&huart2,(uint8_t *)recipeTemperatura,BUFFER_SIZE, HAL_MAX_DELAY);
		HAL_UART_Transmit(&huart2,(uint8_t *)recipeTemperatura,BUFFER_SIZE, HAL_MAX_DELAY);
		HAL_UART_Transmit(&huart2,(uint8_t *)interlineado, strlen(interlineado), HAL_MAX_DELAY);
		temperature=atoi(recipeTemperatura);
        // Reiniciar la recepción no bloqueante
	    HAL_UART_Receive_IT(&huart2, rx_buffer, BUFFER_SIZE);
	    rx_data_ready = 0;
	       */
   return temperature;

}


uint8_t UART_receiveTime(){
	if (rx_data_ready) {
	char recipeTiempo[BUFFER_SIZE];
	char mensaje_solicitud_tiempo[]={"Indique el tiempo de receta \r\n"};
	HAL_UART_Transmit(&huart2,(uint8_t *)mensaje_solicitud_tiempo, strlen(mensaje_solicitud_tiempo), HAL_MAX_DELAY);


	HAL_UART_Receive(&huart2,(uint8_t *)recipeTiempo,BUFFER_SIZE, 10000);
	HAL_UART_Transmit(&huart2,(uint8_t *)recipeTiempo,BUFFER_SIZE, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart2,(uint8_t *)interlineado, strlen(interlineado), HAL_MAX_DELAY);
	time=atoi(recipeTiempo);
    // Reiniciar la recepción no bloqueante
    HAL_UART_Receive_IT(&huart2, rx_buffer, BUFFER_SIZE);

	}
    // Reiniciar la bandera
          rx_data_ready = 0;
	return time;
}

recipe_t UART_Recip (){
	recipe_t recipe;
	uint8_t Temperature=UART_receiveTemperature();
	//uint8_t Time=UART_receiveTime();
	recipe.temperature=Temperature;
	recipe.time=100;
	return recipe;
}



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {

		//	temperature=atoi(rx_buffer);
			HAL_UART_Transmit(&huart2,(uint8_t *)rx_buffer,BUFFER_SIZE, HAL_MAX_DELAY);
			HAL_UART_Transmit(&huart2,(uint8_t *)interlineado, strlen(interlineado), HAL_MAX_DELAY);
    rx_data_ready = 1;
}


void MX_USART2_UART_Init(void)
{
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
}
