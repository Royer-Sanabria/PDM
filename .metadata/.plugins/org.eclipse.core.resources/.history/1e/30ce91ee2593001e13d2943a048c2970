/*
 * API_Uart.c
 *
 *  Created on: Dec 3, 2023
 *      Author: Royer Sanabria
 */
#include "main.h"
#include "API_UART.h"
#include "API_debounce.h"


#define TIME_MAX_DELAY 10
#define BUFFER_SIZE 3
#define Null_Int 0

UART_HandleTypeDef huart2;
static char mensaje_lectura_datos[]={"Indique la temperatura de seteo: \r\n"};
static char mensaje_confirmacion_datos[]={"Indique la temperatura de seteo: \r\n"};
static char mensaje_error_datos[]={"Datos incompatible \r\n"};
static char interlineado[]={"\r\n"};


enum Flag_Program flag_program=read_set_temperature;



uint8_t rx_buffer[BUFFER_SIZE];
uint16_t UART_Date;
volatile uint8_t rx_data_ready = 0;
volatile uint8_t program_ready = 0;
static UARTRead_t set_temperature;
static UARTRead_t set_temperature_confirmation;

// ******************************************
void UART_Init(void){
MX_USART2_UART_Init();
HAL_UART_Receive_IT(&huart2, (uint8_t *)rx_buffer, BUFFER_SIZE);
set_temperature.dato=false;
set_temperature_confirmation.dato=false;
}
/*
 Función que inicializa la UART.
*/
//*******************************************




/*
 * Función Lectura datos no bloqueante (Uso de interrupción) de 3 bytes desde la UART2
 */
UARTRead_t UART_Read(){
UARTRead_t UartRead;
	if (rx_data_ready) {
		rx_data_ready = 0;
	    UartRead.dato=UART_Date;
	    UartRead.estado=true;
		HAL_UART_Receive_IT(&huart2, rx_buffer, BUFFER_SIZE);
	    }
	else{
	    UartRead.dato=Null_Int;
	    UartRead.estado=false;
	}
return UartRead;
}


uint16_t UART_Program(){
UART_program_flag();


	switch (flag_program){

	case(read_set_temperature):
		set_temperature=UART_Read();
		if(set_temperature.estado){
		flag_program=confirmation_set_temperature;
		}
		break;

	case (confirmation_set_temperature):

			break;

	default:
			flag_program=read_set_temperature;
	}


return Null_Int;
}



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {

			UART_Date= atoi((char *)rx_buffer);
		 	HAL_UART_Transmit(&huart2,(uint8_t *)rx_buffer,sizeof(rx_buffer), HAL_MAX_DELAY);
			HAL_UART_Transmit(&huart2,(uint8_t *)interlineado, strlen(interlineado), HAL_MAX_DELAY);
			rx_data_ready = 1;
}

void UART_program_flag(){

	if(0==program_ready){
		HAL_UART_Transmit(&huart2,(uint8_t *)mensaje_lectura_datos, strlen(mensaje_lectura_datos), HAL_MAX_DELAY);
		program_ready++;
	}
	else if(1==program_ready){
		HAL_UART_Transmit(&huart2,(uint8_t *)mensaje_confirmacion_datos, strlen(mensaje_confirmacion_datos), HAL_MAX_DELAY);
		program_ready=1;
	}
	else {
		program_ready=0;
	}
}

void MX_USART2_UART_Init(void)
{
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
}
