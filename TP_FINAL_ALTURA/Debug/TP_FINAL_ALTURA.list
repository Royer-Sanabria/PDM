
TP_FINAL_ALTURA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000907c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08009220  08009220  00019220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009648  08009648  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009648  08009648  00019648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009650  08009650  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009650  08009650  00019650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009654  08009654  00019654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  200001e4  0800983c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000560  0800983c  00020560  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e2a3  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026b7  00000000  00000000  0002e4fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bb0  00000000  00000000  00030bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000090f  00000000  00000000  00031768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017c66  00000000  00000000  00032077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000113ab  00000000  00000000  00049cdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a265  00000000  00000000  0005b088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000043fc  00000000  00000000  000e52f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000e96ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009204 	.word	0x08009204

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	08009204 	.word	0x08009204

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295
 8000c76:	f000 b9bb 	b.w	8000ff0 <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f84d 	bl	8000d28 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f840 	bl	8000d28 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f82f 	bl	8000d28 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f821 	bl	8000d28 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b970 	b.w	8000ff0 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9e08      	ldr	r6, [sp, #32]
 8000d2e:	460d      	mov	r5, r1
 8000d30:	4604      	mov	r4, r0
 8000d32:	460f      	mov	r7, r1
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d14a      	bne.n	8000dce <__udivmoddi4+0xa6>
 8000d38:	428a      	cmp	r2, r1
 8000d3a:	4694      	mov	ip, r2
 8000d3c:	d965      	bls.n	8000e0a <__udivmoddi4+0xe2>
 8000d3e:	fab2 f382 	clz	r3, r2
 8000d42:	b143      	cbz	r3, 8000d56 <__udivmoddi4+0x2e>
 8000d44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d48:	f1c3 0220 	rsb	r2, r3, #32
 8000d4c:	409f      	lsls	r7, r3
 8000d4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d52:	4317      	orrs	r7, r2
 8000d54:	409c      	lsls	r4, r3
 8000d56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d5a:	fa1f f58c 	uxth.w	r5, ip
 8000d5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d62:	0c22      	lsrs	r2, r4, #16
 8000d64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d6c:	fb01 f005 	mul.w	r0, r1, r5
 8000d70:	4290      	cmp	r0, r2
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x62>
 8000d74:	eb1c 0202 	adds.w	r2, ip, r2
 8000d78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d7c:	f080 811c 	bcs.w	8000fb8 <__udivmoddi4+0x290>
 8000d80:	4290      	cmp	r0, r2
 8000d82:	f240 8119 	bls.w	8000fb8 <__udivmoddi4+0x290>
 8000d86:	3902      	subs	r1, #2
 8000d88:	4462      	add	r2, ip
 8000d8a:	1a12      	subs	r2, r2, r0
 8000d8c:	b2a4      	uxth	r4, r4
 8000d8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d9a:	fb00 f505 	mul.w	r5, r0, r5
 8000d9e:	42a5      	cmp	r5, r4
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x90>
 8000da2:	eb1c 0404 	adds.w	r4, ip, r4
 8000da6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000daa:	f080 8107 	bcs.w	8000fbc <__udivmoddi4+0x294>
 8000dae:	42a5      	cmp	r5, r4
 8000db0:	f240 8104 	bls.w	8000fbc <__udivmoddi4+0x294>
 8000db4:	4464      	add	r4, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dbc:	1b64      	subs	r4, r4, r5
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11e      	cbz	r6, 8000dca <__udivmoddi4+0xa2>
 8000dc2:	40dc      	lsrs	r4, r3
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0xbc>
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	f000 80ed 	beq.w	8000fb2 <__udivmoddi4+0x28a>
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e9c6 0500 	strd	r0, r5, [r6]
 8000dde:	4608      	mov	r0, r1
 8000de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de4:	fab3 f183 	clz	r1, r3
 8000de8:	2900      	cmp	r1, #0
 8000dea:	d149      	bne.n	8000e80 <__udivmoddi4+0x158>
 8000dec:	42ab      	cmp	r3, r5
 8000dee:	d302      	bcc.n	8000df6 <__udivmoddi4+0xce>
 8000df0:	4282      	cmp	r2, r0
 8000df2:	f200 80f8 	bhi.w	8000fe6 <__udivmoddi4+0x2be>
 8000df6:	1a84      	subs	r4, r0, r2
 8000df8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	4617      	mov	r7, r2
 8000e00:	2e00      	cmp	r6, #0
 8000e02:	d0e2      	beq.n	8000dca <__udivmoddi4+0xa2>
 8000e04:	e9c6 4700 	strd	r4, r7, [r6]
 8000e08:	e7df      	b.n	8000dca <__udivmoddi4+0xa2>
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xe6>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f382 	clz	r3, r2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x210>
 8000e18:	1a8a      	subs	r2, r1, r2
 8000e1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1e:	fa1f fe8c 	uxth.w	lr, ip
 8000e22:	2101      	movs	r1, #1
 8000e24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e28:	fb07 2015 	mls	r0, r7, r5, r2
 8000e2c:	0c22      	lsrs	r2, r4, #16
 8000e2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e32:	fb0e f005 	mul.w	r0, lr, r5
 8000e36:	4290      	cmp	r0, r2
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x124>
 8000e3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e42:	d202      	bcs.n	8000e4a <__udivmoddi4+0x122>
 8000e44:	4290      	cmp	r0, r2
 8000e46:	f200 80cb 	bhi.w	8000fe0 <__udivmoddi4+0x2b8>
 8000e4a:	4645      	mov	r5, r8
 8000e4c:	1a12      	subs	r2, r2, r0
 8000e4e:	b2a4      	uxth	r4, r4
 8000e50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e54:	fb07 2210 	mls	r2, r7, r0, r2
 8000e58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e60:	45a6      	cmp	lr, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x14e>
 8000e64:	eb1c 0404 	adds.w	r4, ip, r4
 8000e68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e6c:	d202      	bcs.n	8000e74 <__udivmoddi4+0x14c>
 8000e6e:	45a6      	cmp	lr, r4
 8000e70:	f200 80bb 	bhi.w	8000fea <__udivmoddi4+0x2c2>
 8000e74:	4610      	mov	r0, r2
 8000e76:	eba4 040e 	sub.w	r4, r4, lr
 8000e7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7e:	e79f      	b.n	8000dc0 <__udivmoddi4+0x98>
 8000e80:	f1c1 0720 	rsb	r7, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e92:	fa20 f307 	lsr.w	r3, r0, r7
 8000e96:	40fd      	lsrs	r5, r7
 8000e98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ea2:	fa1f fe8c 	uxth.w	lr, ip
 8000ea6:	fb09 5518 	mls	r5, r9, r8, r5
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eb0:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb4:	42a5      	cmp	r5, r4
 8000eb6:	fa02 f201 	lsl.w	r2, r2, r1
 8000eba:	fa00 f001 	lsl.w	r0, r0, r1
 8000ebe:	d90b      	bls.n	8000ed8 <__udivmoddi4+0x1b0>
 8000ec0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec8:	f080 8088 	bcs.w	8000fdc <__udivmoddi4+0x2b4>
 8000ecc:	42a5      	cmp	r5, r4
 8000ece:	f240 8085 	bls.w	8000fdc <__udivmoddi4+0x2b4>
 8000ed2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed6:	4464      	add	r4, ip
 8000ed8:	1b64      	subs	r4, r4, r5
 8000eda:	b29d      	uxth	r5, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000eec:	45a6      	cmp	lr, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1da>
 8000ef0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef8:	d26c      	bcs.n	8000fd4 <__udivmoddi4+0x2ac>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	d96a      	bls.n	8000fd4 <__udivmoddi4+0x2ac>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	4464      	add	r4, ip
 8000f02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f06:	fba3 9502 	umull	r9, r5, r3, r2
 8000f0a:	eba4 040e 	sub.w	r4, r4, lr
 8000f0e:	42ac      	cmp	r4, r5
 8000f10:	46c8      	mov	r8, r9
 8000f12:	46ae      	mov	lr, r5
 8000f14:	d356      	bcc.n	8000fc4 <__udivmoddi4+0x29c>
 8000f16:	d053      	beq.n	8000fc0 <__udivmoddi4+0x298>
 8000f18:	b156      	cbz	r6, 8000f30 <__udivmoddi4+0x208>
 8000f1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f22:	fa04 f707 	lsl.w	r7, r4, r7
 8000f26:	40ca      	lsrs	r2, r1
 8000f28:	40cc      	lsrs	r4, r1
 8000f2a:	4317      	orrs	r7, r2
 8000f2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f30:	4618      	mov	r0, r3
 8000f32:	2100      	movs	r1, #0
 8000f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f38:	f1c3 0120 	rsb	r1, r3, #32
 8000f3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f40:	fa20 f201 	lsr.w	r2, r0, r1
 8000f44:	fa25 f101 	lsr.w	r1, r5, r1
 8000f48:	409d      	lsls	r5, r3
 8000f4a:	432a      	orrs	r2, r5
 8000f4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f50:	fa1f fe8c 	uxth.w	lr, ip
 8000f54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f58:	fb07 1510 	mls	r5, r7, r0, r1
 8000f5c:	0c11      	lsrs	r1, r2, #16
 8000f5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f62:	fb00 f50e 	mul.w	r5, r0, lr
 8000f66:	428d      	cmp	r5, r1
 8000f68:	fa04 f403 	lsl.w	r4, r4, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x258>
 8000f6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f76:	d22f      	bcs.n	8000fd8 <__udivmoddi4+0x2b0>
 8000f78:	428d      	cmp	r5, r1
 8000f7a:	d92d      	bls.n	8000fd8 <__udivmoddi4+0x2b0>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4461      	add	r1, ip
 8000f80:	1b49      	subs	r1, r1, r5
 8000f82:	b292      	uxth	r2, r2
 8000f84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f88:	fb07 1115 	mls	r1, r7, r5, r1
 8000f8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f90:	fb05 f10e 	mul.w	r1, r5, lr
 8000f94:	4291      	cmp	r1, r2
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x282>
 8000f98:	eb1c 0202 	adds.w	r2, ip, r2
 8000f9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fa0:	d216      	bcs.n	8000fd0 <__udivmoddi4+0x2a8>
 8000fa2:	4291      	cmp	r1, r2
 8000fa4:	d914      	bls.n	8000fd0 <__udivmoddi4+0x2a8>
 8000fa6:	3d02      	subs	r5, #2
 8000fa8:	4462      	add	r2, ip
 8000faa:	1a52      	subs	r2, r2, r1
 8000fac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fb0:	e738      	b.n	8000e24 <__udivmoddi4+0xfc>
 8000fb2:	4631      	mov	r1, r6
 8000fb4:	4630      	mov	r0, r6
 8000fb6:	e708      	b.n	8000dca <__udivmoddi4+0xa2>
 8000fb8:	4639      	mov	r1, r7
 8000fba:	e6e6      	b.n	8000d8a <__udivmoddi4+0x62>
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	e6fb      	b.n	8000db8 <__udivmoddi4+0x90>
 8000fc0:	4548      	cmp	r0, r9
 8000fc2:	d2a9      	bcs.n	8000f18 <__udivmoddi4+0x1f0>
 8000fc4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	e7a3      	b.n	8000f18 <__udivmoddi4+0x1f0>
 8000fd0:	4645      	mov	r5, r8
 8000fd2:	e7ea      	b.n	8000faa <__udivmoddi4+0x282>
 8000fd4:	462b      	mov	r3, r5
 8000fd6:	e794      	b.n	8000f02 <__udivmoddi4+0x1da>
 8000fd8:	4640      	mov	r0, r8
 8000fda:	e7d1      	b.n	8000f80 <__udivmoddi4+0x258>
 8000fdc:	46d0      	mov	r8, sl
 8000fde:	e77b      	b.n	8000ed8 <__udivmoddi4+0x1b0>
 8000fe0:	3d02      	subs	r5, #2
 8000fe2:	4462      	add	r2, ip
 8000fe4:	e732      	b.n	8000e4c <__udivmoddi4+0x124>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e70a      	b.n	8000e00 <__udivmoddi4+0xd8>
 8000fea:	4464      	add	r4, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e742      	b.n	8000e76 <__udivmoddi4+0x14e>

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff8:	f001 fd48 	bl	8002a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ffc:	f000 f818 	bl	8001030 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001000:	f000 f8d8 	bl	80011b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001004:	f000 f87e 	bl	8001104 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001008:	f000 f8aa 	bl	8001160 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  BMP_280_Init2();
 800100c:	f000 fcd2 	bl	80019b4 <BMP_280_Init2>
 UART_Init2();
 8001010:	f000 fbd4 	bl	80017bc <UART_Init2>
 debounceFSM_init();
 8001014:	f000 fc3a 	bl	800188c <debounceFSM_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
if(readKey()){
 8001018:	f000 fcba 	bl	8001990 <readKey>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d002      	beq.n	8001028 <main+0x34>
	MEF_Init();
 8001022:	f000 fef3 	bl	8001e0c <MEF_Init>
 8001026:	e7f7      	b.n	8001018 <main+0x24>
}
else {
MEF();
 8001028:	f000 fdcc 	bl	8001bc4 <MEF>
if(readKey()){
 800102c:	e7f4      	b.n	8001018 <main+0x24>
	...

08001030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b094      	sub	sp, #80	; 0x50
 8001034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001036:	f107 0320 	add.w	r3, r7, #32
 800103a:	2230      	movs	r2, #48	; 0x30
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f005 fbd9 	bl	80067f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001054:	2300      	movs	r3, #0
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	4b28      	ldr	r3, [pc, #160]	; (80010fc <SystemClock_Config+0xcc>)
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	4a27      	ldr	r2, [pc, #156]	; (80010fc <SystemClock_Config+0xcc>)
 800105e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001062:	6413      	str	r3, [r2, #64]	; 0x40
 8001064:	4b25      	ldr	r3, [pc, #148]	; (80010fc <SystemClock_Config+0xcc>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001070:	2300      	movs	r3, #0
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	4b22      	ldr	r3, [pc, #136]	; (8001100 <SystemClock_Config+0xd0>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800107c:	4a20      	ldr	r2, [pc, #128]	; (8001100 <SystemClock_Config+0xd0>)
 800107e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <SystemClock_Config+0xd0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001090:	2302      	movs	r3, #2
 8001092:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001094:	2301      	movs	r3, #1
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001098:	2310      	movs	r3, #16
 800109a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109c:	2302      	movs	r3, #2
 800109e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010a0:	2300      	movs	r3, #0
 80010a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010a4:	2308      	movs	r3, #8
 80010a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80010a8:	2354      	movs	r3, #84	; 0x54
 80010aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ac:	2302      	movs	r3, #2
 80010ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010b0:	2304      	movs	r3, #4
 80010b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b4:	f107 0320 	add.w	r3, r7, #32
 80010b8:	4618      	mov	r0, r3
 80010ba:	f003 f8b1 	bl	8004220 <HAL_RCC_OscConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010c4:	f000 f8e4 	bl	8001290 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c8:	230f      	movs	r3, #15
 80010ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010cc:	2302      	movs	r3, #2
 80010ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	2102      	movs	r1, #2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f003 fb13 	bl	8004710 <HAL_RCC_ClockConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010f0:	f000 f8ce 	bl	8001290 <Error_Handler>
  }
}
 80010f4:	bf00      	nop
 80010f6:	3750      	adds	r7, #80	; 0x50
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40023800 	.word	0x40023800
 8001100:	40007000 	.word	0x40007000

08001104 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <MX_I2C1_Init+0x50>)
 800110a:	4a13      	ldr	r2, [pc, #76]	; (8001158 <MX_I2C1_Init+0x54>)
 800110c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <MX_I2C1_Init+0x50>)
 8001110:	4a12      	ldr	r2, [pc, #72]	; (800115c <MX_I2C1_Init+0x58>)
 8001112:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <MX_I2C1_Init+0x50>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <MX_I2C1_Init+0x50>)
 800111c:	2200      	movs	r2, #0
 800111e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <MX_I2C1_Init+0x50>)
 8001122:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001126:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <MX_I2C1_Init+0x50>)
 800112a:	2200      	movs	r2, #0
 800112c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <MX_I2C1_Init+0x50>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001134:	4b07      	ldr	r3, [pc, #28]	; (8001154 <MX_I2C1_Init+0x50>)
 8001136:	2200      	movs	r2, #0
 8001138:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <MX_I2C1_Init+0x50>)
 800113c:	2200      	movs	r2, #0
 800113e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001140:	4804      	ldr	r0, [pc, #16]	; (8001154 <MX_I2C1_Init+0x50>)
 8001142:	f002 f8ad 	bl	80032a0 <HAL_I2C_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800114c:	f000 f8a0 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200003a0 	.word	0x200003a0
 8001158:	40005400 	.word	0x40005400
 800115c:	000186a0 	.word	0x000186a0

08001160 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001166:	4a12      	ldr	r2, [pc, #72]	; (80011b0 <MX_USART2_UART_Init+0x50>)
 8001168:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 800116c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001170:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001186:	220c      	movs	r2, #12
 8001188:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001198:	f003 fc9a 	bl	8004ad0 <HAL_UART_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011a2:	f000 f875 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000204 	.word	0x20000204
 80011b0:	40004400 	.word	0x40004400

080011b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	; 0x28
 80011b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	4b2d      	ldr	r3, [pc, #180]	; (8001284 <MX_GPIO_Init+0xd0>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a2c      	ldr	r2, [pc, #176]	; (8001284 <MX_GPIO_Init+0xd0>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b2a      	ldr	r3, [pc, #168]	; (8001284 <MX_GPIO_Init+0xd0>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4b26      	ldr	r3, [pc, #152]	; (8001284 <MX_GPIO_Init+0xd0>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a25      	ldr	r2, [pc, #148]	; (8001284 <MX_GPIO_Init+0xd0>)
 80011f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b23      	ldr	r3, [pc, #140]	; (8001284 <MX_GPIO_Init+0xd0>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <MX_GPIO_Init+0xd0>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a1e      	ldr	r2, [pc, #120]	; (8001284 <MX_GPIO_Init+0xd0>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <MX_GPIO_Init+0xd0>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	4b18      	ldr	r3, [pc, #96]	; (8001284 <MX_GPIO_Init+0xd0>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a17      	ldr	r2, [pc, #92]	; (8001284 <MX_GPIO_Init+0xd0>)
 8001228:	f043 0302 	orr.w	r3, r3, #2
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <MX_GPIO_Init+0xd0>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800123a:	2200      	movs	r2, #0
 800123c:	2120      	movs	r1, #32
 800123e:	4812      	ldr	r0, [pc, #72]	; (8001288 <MX_GPIO_Init+0xd4>)
 8001240:	f001 fffa 	bl	8003238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001244:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124a:	2300      	movs	r3, #0
 800124c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	4619      	mov	r1, r3
 8001258:	480c      	ldr	r0, [pc, #48]	; (800128c <MX_GPIO_Init+0xd8>)
 800125a:	f001 fe51 	bl	8002f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800125e:	2320      	movs	r3, #32
 8001260:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001262:	2301      	movs	r3, #1
 8001264:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126e:	f107 0314 	add.w	r3, r7, #20
 8001272:	4619      	mov	r1, r3
 8001274:	4804      	ldr	r0, [pc, #16]	; (8001288 <MX_GPIO_Init+0xd4>)
 8001276:	f001 fe43 	bl	8002f00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800127a:	bf00      	nop
 800127c:	3728      	adds	r7, #40	; 0x28
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40023800 	.word	0x40023800
 8001288:	40020000 	.word	0x40020000
 800128c:	40020800 	.word	0x40020800

08001290 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001294:	b672      	cpsid	i
}
 8001296:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001298:	e7fe      	b.n	8001298 <Error_Handler+0x8>
	...

0800129c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <HAL_MspInit+0x4c>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	4a0f      	ldr	r2, [pc, #60]	; (80012e8 <HAL_MspInit+0x4c>)
 80012ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b0:	6453      	str	r3, [r2, #68]	; 0x44
 80012b2:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <HAL_MspInit+0x4c>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	603b      	str	r3, [r7, #0]
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <HAL_MspInit+0x4c>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	4a08      	ldr	r2, [pc, #32]	; (80012e8 <HAL_MspInit+0x4c>)
 80012c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012cc:	6413      	str	r3, [r2, #64]	; 0x40
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_MspInit+0x4c>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40023800 	.word	0x40023800

080012ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	; 0x28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a19      	ldr	r2, [pc, #100]	; (8001370 <HAL_I2C_MspInit+0x84>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d12c      	bne.n	8001368 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	4b18      	ldr	r3, [pc, #96]	; (8001374 <HAL_I2C_MspInit+0x88>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a17      	ldr	r2, [pc, #92]	; (8001374 <HAL_I2C_MspInit+0x88>)
 8001318:	f043 0302 	orr.w	r3, r3, #2
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <HAL_I2C_MspInit+0x88>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800132a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800132e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001330:	2312      	movs	r3, #18
 8001332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001338:	2303      	movs	r3, #3
 800133a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800133c:	2304      	movs	r3, #4
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4619      	mov	r1, r3
 8001346:	480c      	ldr	r0, [pc, #48]	; (8001378 <HAL_I2C_MspInit+0x8c>)
 8001348:	f001 fdda 	bl	8002f00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <HAL_I2C_MspInit+0x88>)
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	4a07      	ldr	r2, [pc, #28]	; (8001374 <HAL_I2C_MspInit+0x88>)
 8001356:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800135a:	6413      	str	r3, [r2, #64]	; 0x40
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <HAL_I2C_MspInit+0x88>)
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001368:	bf00      	nop
 800136a:	3728      	adds	r7, #40	; 0x28
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40005400 	.word	0x40005400
 8001374:	40023800 	.word	0x40023800
 8001378:	40020400 	.word	0x40020400

0800137c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	; 0x28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a1d      	ldr	r2, [pc, #116]	; (8001410 <HAL_UART_MspInit+0x94>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d133      	bne.n	8001406 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <HAL_UART_MspInit+0x98>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	4a1b      	ldr	r2, [pc, #108]	; (8001414 <HAL_UART_MspInit+0x98>)
 80013a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ac:	6413      	str	r3, [r2, #64]	; 0x40
 80013ae:	4b19      	ldr	r3, [pc, #100]	; (8001414 <HAL_UART_MspInit+0x98>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <HAL_UART_MspInit+0x98>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a14      	ldr	r2, [pc, #80]	; (8001414 <HAL_UART_MspInit+0x98>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b12      	ldr	r3, [pc, #72]	; (8001414 <HAL_UART_MspInit+0x98>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013d6:	230c      	movs	r3, #12
 80013d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e2:	2303      	movs	r3, #3
 80013e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013e6:	2307      	movs	r3, #7
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	4619      	mov	r1, r3
 80013f0:	4809      	ldr	r0, [pc, #36]	; (8001418 <HAL_UART_MspInit+0x9c>)
 80013f2:	f001 fd85 	bl	8002f00 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	2026      	movs	r0, #38	; 0x26
 80013fc:	f001 fcb7 	bl	8002d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001400:	2026      	movs	r0, #38	; 0x26
 8001402:	f001 fcd0 	bl	8002da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001406:	bf00      	nop
 8001408:	3728      	adds	r7, #40	; 0x28
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40004400 	.word	0x40004400
 8001414:	40023800 	.word	0x40023800
 8001418:	40020000 	.word	0x40020000

0800141c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <NMI_Handler+0x4>

08001422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <HardFault_Handler+0x4>

08001428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800142c:	e7fe      	b.n	800142c <MemManage_Handler+0x4>

0800142e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001432:	e7fe      	b.n	8001432 <BusFault_Handler+0x4>

08001434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <UsageFault_Handler+0x4>

0800143a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001468:	f001 fb62 	bl	8002b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}

08001470 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001474:	4802      	ldr	r0, [pc, #8]	; (8001480 <USART2_IRQHandler+0x10>)
 8001476:	f003 fc3b 	bl	8004cf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000204 	.word	0x20000204

08001484 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return 1;
 8001488:	2301      	movs	r3, #1
}
 800148a:	4618      	mov	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <_kill>:

int _kill(int pid, int sig)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800149e:	f005 f9fd 	bl	800689c <__errno>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2216      	movs	r2, #22
 80014a6:	601a      	str	r2, [r3, #0]
  return -1;
 80014a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <_exit>:

void _exit (int status)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014bc:	f04f 31ff 	mov.w	r1, #4294967295
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ffe7 	bl	8001494 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014c6:	e7fe      	b.n	80014c6 <_exit+0x12>

080014c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	e00a      	b.n	80014f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014da:	f3af 8000 	nop.w
 80014de:	4601      	mov	r1, r0
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	1c5a      	adds	r2, r3, #1
 80014e4:	60ba      	str	r2, [r7, #8]
 80014e6:	b2ca      	uxtb	r2, r1
 80014e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	3301      	adds	r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	dbf0      	blt.n	80014da <_read+0x12>
  }

  return len;
 80014f8:	687b      	ldr	r3, [r7, #4]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b086      	sub	sp, #24
 8001506:	af00      	add	r7, sp, #0
 8001508:	60f8      	str	r0, [r7, #12]
 800150a:	60b9      	str	r1, [r7, #8]
 800150c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	e009      	b.n	8001528 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	1c5a      	adds	r2, r3, #1
 8001518:	60ba      	str	r2, [r7, #8]
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	3301      	adds	r3, #1
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	429a      	cmp	r2, r3
 800152e:	dbf1      	blt.n	8001514 <_write+0x12>
  }
  return len;
 8001530:	687b      	ldr	r3, [r7, #4]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <_close>:

int _close(int file)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001542:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001562:	605a      	str	r2, [r3, #4]
  return 0;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <_isatty>:

int _isatty(int file)
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800157a:	2301      	movs	r3, #1
}
 800157c:	4618      	mov	r0, r3
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
	...

080015a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015ac:	4a14      	ldr	r2, [pc, #80]	; (8001600 <_sbrk+0x5c>)
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <_sbrk+0x60>)
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b8:	4b13      	ldr	r3, [pc, #76]	; (8001608 <_sbrk+0x64>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d102      	bne.n	80015c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c0:	4b11      	ldr	r3, [pc, #68]	; (8001608 <_sbrk+0x64>)
 80015c2:	4a12      	ldr	r2, [pc, #72]	; (800160c <_sbrk+0x68>)
 80015c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <_sbrk+0x64>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d207      	bcs.n	80015e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d4:	f005 f962 	bl	800689c <__errno>
 80015d8:	4603      	mov	r3, r0
 80015da:	220c      	movs	r2, #12
 80015dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015de:	f04f 33ff 	mov.w	r3, #4294967295
 80015e2:	e009      	b.n	80015f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <_sbrk+0x64>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ea:	4b07      	ldr	r3, [pc, #28]	; (8001608 <_sbrk+0x64>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	4a05      	ldr	r2, [pc, #20]	; (8001608 <_sbrk+0x64>)
 80015f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015f6:	68fb      	ldr	r3, [r7, #12]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20018000 	.word	0x20018000
 8001604:	00000400 	.word	0x00000400
 8001608:	20000200 	.word	0x20000200
 800160c:	20000560 	.word	0x20000560

08001610 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <SystemInit+0x20>)
 8001616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800161a:	4a05      	ldr	r2, [pc, #20]	; (8001630 <SystemInit+0x20>)
 800161c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001620:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001634:	f8df d034 	ldr.w	sp, [pc, #52]	; 800166c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001638:	480d      	ldr	r0, [pc, #52]	; (8001670 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800163a:	490e      	ldr	r1, [pc, #56]	; (8001674 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800163c:	4a0e      	ldr	r2, [pc, #56]	; (8001678 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800163e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001640:	e002      	b.n	8001648 <LoopCopyDataInit>

08001642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001646:	3304      	adds	r3, #4

08001648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800164a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800164c:	d3f9      	bcc.n	8001642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800164e:	4a0b      	ldr	r2, [pc, #44]	; (800167c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001650:	4c0b      	ldr	r4, [pc, #44]	; (8001680 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001654:	e001      	b.n	800165a <LoopFillZerobss>

08001656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001658:	3204      	adds	r2, #4

0800165a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800165a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800165c:	d3fb      	bcc.n	8001656 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800165e:	f7ff ffd7 	bl	8001610 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001662:	f005 f921 	bl	80068a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001666:	f7ff fcc5 	bl	8000ff4 <main>
  bx  lr    
 800166a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800166c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001674:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001678:	08009658 	.word	0x08009658
  ldr r2, =_sbss
 800167c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001680:	20000560 	.word	0x20000560

08001684 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001684:	e7fe      	b.n	8001684 <ADC_IRQHandler>

08001686 <delayInit>:
 */

#include "API_Delay.h"

void delayInit(delay_t*delay, tick_t duration)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
 800168e:	6039      	str	r1, [r7, #0]
	delay->running = false;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	721a      	strb	r2, [r3, #8]
	delayWrite(delay, duration);
 8001696:	6839      	ldr	r1, [r7, #0]
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f000 f828 	bl	80016ee <delayWrite>

}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <delayRead>:

bool_t delayRead(delay_t*delay)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
	if(delay->running)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	7a1b      	ldrb	r3, [r3, #8]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00e      	beq.n	80016d4 <delayRead+0x2e>
	{
	if((HAL_GetTick()- delay->startTime)>= delay->duration)
 80016b6:	f001 fa4f 	bl	8002b58 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	1ad2      	subs	r2, r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d30c      	bcc.n	80016e4 <delayRead+0x3e>
		{
		delay->running=false;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	721a      	strb	r2, [r3, #8]
		return true;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e008      	b.n	80016e6 <delayRead+0x40>
		}
	}
	else
	{
		delay->startTime=HAL_GetTick();
 80016d4:	f001 fa40 	bl	8002b58 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	601a      	str	r2, [r3, #0]
		delay->running=true;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	721a      	strb	r2, [r3, #8]
	}
	return false;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <delayWrite>:

void delayWrite(delay_t*delay, tick_t duration)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	6039      	str	r1, [r7, #0]
	delay->duration=duration;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	605a      	str	r2, [r3, #4]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
	...

0800170c <UART_TrasmitSensor>:
static uint8_t rx_buffer[BUFFER_SIZE]; // Buffer que almacena los datos recibidos por la UART por interrupción
static uint16_t UART_Date;
volatile uint8_t rx_data_ready;
static UARTRead_t BUFFER_READ;

void UART_TrasmitSensor(ReadSensor Dato){
 800170c:	b084      	sub	sp, #16
 800170e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af06      	add	r7, sp, #24
 8001716:	f107 0420 	add.w	r4, r7, #32
 800171a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t size;
	sprintf((char *)Data,"Presion: %.2f Pa, Temperatura: %.2f, Altura: %.2f, SetPoint: %.2f \r\n",Dato.Presion, Dato.Temperatura, Dato.altura, Dato.AlturaSet);
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe ff19 	bl	8000558 <__aeabi_f2d>
 8001726:	4682      	mov	sl, r0
 8001728:	468b      	mov	fp, r1
 800172a:	6a3b      	ldr	r3, [r7, #32]
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe ff13 	bl	8000558 <__aeabi_f2d>
 8001732:	4604      	mov	r4, r0
 8001734:	460d      	mov	r5, r1
 8001736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe ff0d 	bl	8000558 <__aeabi_f2d>
 800173e:	4680      	mov	r8, r0
 8001740:	4689      	mov	r9, r1
 8001742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe ff07 	bl	8000558 <__aeabi_f2d>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001752:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001756:	e9cd 4500 	strd	r4, r5, [sp]
 800175a:	4652      	mov	r2, sl
 800175c:	465b      	mov	r3, fp
 800175e:	490a      	ldr	r1, [pc, #40]	; (8001788 <UART_TrasmitSensor+0x7c>)
 8001760:	480a      	ldr	r0, [pc, #40]	; (800178c <UART_TrasmitSensor+0x80>)
 8001762:	f004 ffe5 	bl	8006730 <siprintf>
	HAL_UART_Transmit(&huart2,Data, strlen(Data), Delay_Max_UART);
 8001766:	4809      	ldr	r0, [pc, #36]	; (800178c <UART_TrasmitSensor+0x80>)
 8001768:	f7fe fd8a 	bl	8000280 <strlen>
 800176c:	4603      	mov	r3, r0
 800176e:	b29a      	uxth	r2, r3
 8001770:	2364      	movs	r3, #100	; 0x64
 8001772:	4906      	ldr	r1, [pc, #24]	; (800178c <UART_TrasmitSensor+0x80>)
 8001774:	4806      	ldr	r0, [pc, #24]	; (8001790 <UART_TrasmitSensor+0x84>)
 8001776:	f003 f9f8 	bl	8004b6a <HAL_UART_Transmit>
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001782:	b004      	add	sp, #16
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	08009220 	.word	0x08009220
 800178c:	20000248 	.word	0x20000248
 8001790:	20000204 	.word	0x20000204

08001794 <UART_TrasmitMessage>:

void UART_TrasmitMessage(const char *Message){
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)Message, strlen(Message),Delay_Max_UART);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7fe fd6f 	bl	8000280 <strlen>
 80017a2:	4603      	mov	r3, r0
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	2364      	movs	r3, #100	; 0x64
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	4803      	ldr	r0, [pc, #12]	; (80017b8 <UART_TrasmitMessage+0x24>)
 80017ac:	f003 f9dd 	bl	8004b6a <HAL_UART_Transmit>
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000204 	.word	0x20000204

080017bc <UART_Init2>:

void UART_Init2 (){
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, (uint8_t *)rx_buffer, BUFFER_SIZE);
 80017c0:	2203      	movs	r2, #3
 80017c2:	4903      	ldr	r1, [pc, #12]	; (80017d0 <UART_Init2+0x14>)
 80017c4:	4803      	ldr	r0, [pc, #12]	; (80017d4 <UART_Init2+0x18>)
 80017c6:	f003 fa62 	bl	8004c8e <HAL_UART_Receive_IT>
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000348 	.word	0x20000348
 80017d4:	20000204 	.word	0x20000204

080017d8 <UART_Read>:


UARTRead_t UART_Read(){
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
	if (rx_data_ready) {
 80017de:	4b13      	ldr	r3, [pc, #76]	; (800182c <UART_Read+0x54>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d010      	beq.n	800180a <UART_Read+0x32>
		rx_data_ready = 0;
 80017e8:	4b10      	ldr	r3, [pc, #64]	; (800182c <UART_Read+0x54>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	701a      	strb	r2, [r3, #0]
		BUFFER_READ.estado = true;
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <UART_Read+0x58>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	701a      	strb	r2, [r3, #0]
		BUFFER_READ.dato=UART_Date;
 80017f4:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <UART_Read+0x5c>)
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <UART_Read+0x58>)
 80017fc:	705a      	strb	r2, [r3, #1]
		HAL_UART_Receive_IT(&huart2, rx_buffer, BUFFER_SIZE);
 80017fe:	2203      	movs	r2, #3
 8001800:	490d      	ldr	r1, [pc, #52]	; (8001838 <UART_Read+0x60>)
 8001802:	480e      	ldr	r0, [pc, #56]	; (800183c <UART_Read+0x64>)
 8001804:	f003 fa43 	bl	8004c8e <HAL_UART_Receive_IT>
 8001808:	e002      	b.n	8001810 <UART_Read+0x38>
	}
	else{
	    BUFFER_READ.estado=false;
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <UART_Read+0x58>)
 800180c:	2200      	movs	r2, #0
 800180e:	701a      	strb	r2, [r3, #0]
	}
return BUFFER_READ;
 8001810:	4b07      	ldr	r3, [pc, #28]	; (8001830 <UART_Read+0x58>)
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	80bb      	strh	r3, [r7, #4]
 8001816:	2300      	movs	r3, #0
 8001818:	793a      	ldrb	r2, [r7, #4]
 800181a:	f362 0307 	bfi	r3, r2, #0, #8
 800181e:	797a      	ldrb	r2, [r7, #5]
 8001820:	f362 230f 	bfi	r3, r2, #8, #8
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	2000034e 	.word	0x2000034e
 8001830:	20000350 	.word	0x20000350
 8001834:	2000034c 	.word	0x2000034c
 8001838:	20000348 	.word	0x20000348
 800183c:	20000204 	.word	0x20000204

08001840 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]

	        // Convertir el buffer a un número entero
	        UART_Date = atoi((char *)rx_buffer);
 8001848:	480c      	ldr	r0, [pc, #48]	; (800187c <HAL_UART_RxCpltCallback+0x3c>)
 800184a:	f004 f9b9 	bl	8005bc0 <atoi>
 800184e:	4603      	mov	r3, r0
 8001850:	b29a      	uxth	r2, r3
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <HAL_UART_RxCpltCallback+0x40>)
 8001854:	801a      	strh	r2, [r3, #0]
	        // Reiniciar la recepción
	        HAL_UART_Receive_IT(&huart2, rx_buffer, BUFFER_SIZE);
 8001856:	2203      	movs	r2, #3
 8001858:	4908      	ldr	r1, [pc, #32]	; (800187c <HAL_UART_RxCpltCallback+0x3c>)
 800185a:	480a      	ldr	r0, [pc, #40]	; (8001884 <HAL_UART_RxCpltCallback+0x44>)
 800185c:	f003 fa17 	bl	8004c8e <HAL_UART_Receive_IT>
	        // Transmitir el número recibido (opcional, para depuración)
	        HAL_UART_Transmit(&huart2, (uint8_t *)rx_buffer, sizeof(rx_buffer), Delay_Max_UART);
 8001860:	2364      	movs	r3, #100	; 0x64
 8001862:	2203      	movs	r2, #3
 8001864:	4905      	ldr	r1, [pc, #20]	; (800187c <HAL_UART_RxCpltCallback+0x3c>)
 8001866:	4807      	ldr	r0, [pc, #28]	; (8001884 <HAL_UART_RxCpltCallback+0x44>)
 8001868:	f003 f97f 	bl	8004b6a <HAL_UART_Transmit>
	    	rx_data_ready = 1;
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_UART_RxCpltCallback+0x48>)
 800186e:	2201      	movs	r2, #1
 8001870:	701a      	strb	r2, [r3, #0]
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000348 	.word	0x20000348
 8001880:	2000034c 	.word	0x2000034c
 8001884:	20000204 	.word	0x20000204
 8001888:	2000034e 	.word	0x2000034e

0800188c <debounceFSM_init>:
static bool real_status_button;

/*
 * función de inicio de debounceFSM
 */
void debounceFSM_init(void){
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
	delayInit(&Retardo,delay_control);
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <debounceFSM_init+0x1c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4619      	mov	r1, r3
 8001896:	4805      	ldr	r0, [pc, #20]	; (80018ac <debounceFSM_init+0x20>)
 8001898:	f7ff fef5 	bl	8001686 <delayInit>
	status_mef=buttonUp;
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <debounceFSM_init+0x24>)
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000004 	.word	0x20000004
 80018ac:	20000354 	.word	0x20000354
 80018b0:	20000352 	.word	0x20000352

080018b4 <debounceFSM_update>:

/*
 * Actualizacion de la MEF de estado del botón.
 *
 */
void debounceFSM_update(){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
	switch (status_mef){
 80018b8:	4b31      	ldr	r3, [pc, #196]	; (8001980 <debounceFSM_update+0xcc>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b03      	cmp	r3, #3
 80018be:	d85c      	bhi.n	800197a <debounceFSM_update+0xc6>
 80018c0:	a201      	add	r2, pc, #4	; (adr r2, 80018c8 <debounceFSM_update+0x14>)
 80018c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c6:	bf00      	nop
 80018c8:	080018d9 	.word	0x080018d9
 80018cc:	08001923 	.word	0x08001923
 80018d0:	0800193b 	.word	0x0800193b
 80018d4:	080018f1 	.word	0x080018f1
		case buttonUp:

			if(RESET==HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 80018d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018dc:	4829      	ldr	r0, [pc, #164]	; (8001984 <debounceFSM_update+0xd0>)
 80018de:	f001 fc93 	bl	8003208 <HAL_GPIO_ReadPin>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d141      	bne.n	800196c <debounceFSM_update+0xb8>
				status_mef=buttonFalling;
 80018e8:	4b25      	ldr	r3, [pc, #148]	; (8001980 <debounceFSM_update+0xcc>)
 80018ea:	2203      	movs	r2, #3
 80018ec:	701a      	strb	r2, [r3, #0]
			}
		    break;
 80018ee:	e03d      	b.n	800196c <debounceFSM_update+0xb8>
		case buttonFalling:
			if(delayRead(&Retardo)){
 80018f0:	4825      	ldr	r0, [pc, #148]	; (8001988 <debounceFSM_update+0xd4>)
 80018f2:	f7ff fed8 	bl	80016a6 <delayRead>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d039      	beq.n	8001970 <debounceFSM_update+0xbc>
				if(SET==HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 80018fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001900:	4820      	ldr	r0, [pc, #128]	; (8001984 <debounceFSM_update+0xd0>)
 8001902:	f001 fc81 	bl	8003208 <HAL_GPIO_ReadPin>
 8001906:	4603      	mov	r3, r0
 8001908:	2b01      	cmp	r3, #1
 800190a:	d106      	bne.n	800191a <debounceFSM_update+0x66>
					status_mef=buttonUp;
 800190c:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <debounceFSM_update+0xcc>)
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
					real_status_button=true;
 8001912:	4b1e      	ldr	r3, [pc, #120]	; (800198c <debounceFSM_update+0xd8>)
 8001914:	2201      	movs	r2, #1
 8001916:	701a      	strb	r2, [r3, #0]
				}
				else {
				status_mef=buttonDown;
				}
			}
			break;
 8001918:	e02a      	b.n	8001970 <debounceFSM_update+0xbc>
				status_mef=buttonDown;
 800191a:	4b19      	ldr	r3, [pc, #100]	; (8001980 <debounceFSM_update+0xcc>)
 800191c:	2201      	movs	r2, #1
 800191e:	701a      	strb	r2, [r3, #0]
			break;
 8001920:	e026      	b.n	8001970 <debounceFSM_update+0xbc>

		case buttonDown:
			if (SET==HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 8001922:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001926:	4817      	ldr	r0, [pc, #92]	; (8001984 <debounceFSM_update+0xd0>)
 8001928:	f001 fc6e 	bl	8003208 <HAL_GPIO_ReadPin>
 800192c:	4603      	mov	r3, r0
 800192e:	2b01      	cmp	r3, #1
 8001930:	d120      	bne.n	8001974 <debounceFSM_update+0xc0>
				status_mef=buttonRising;
 8001932:	4b13      	ldr	r3, [pc, #76]	; (8001980 <debounceFSM_update+0xcc>)
 8001934:	2202      	movs	r2, #2
 8001936:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001938:	e01c      	b.n	8001974 <debounceFSM_update+0xc0>

		case buttonRising:
			if(delayRead(&Retardo)){
 800193a:	4813      	ldr	r0, [pc, #76]	; (8001988 <debounceFSM_update+0xd4>)
 800193c:	f7ff feb3 	bl	80016a6 <delayRead>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d018      	beq.n	8001978 <debounceFSM_update+0xc4>
			if(RESET==HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 8001946:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800194a:	480e      	ldr	r0, [pc, #56]	; (8001984 <debounceFSM_update+0xd0>)
 800194c:	f001 fc5c 	bl	8003208 <HAL_GPIO_ReadPin>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d106      	bne.n	8001964 <debounceFSM_update+0xb0>
				status_mef=buttonUp;
 8001956:	4b0a      	ldr	r3, [pc, #40]	; (8001980 <debounceFSM_update+0xcc>)
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]
				real_status_button=true;
 800195c:	4b0b      	ldr	r3, [pc, #44]	; (800198c <debounceFSM_update+0xd8>)
 800195e:	2201      	movs	r2, #1
 8001960:	701a      	strb	r2, [r3, #0]
			}
			else {
				status_mef=buttonDown;
			}
			}
			break;
 8001962:	e009      	b.n	8001978 <debounceFSM_update+0xc4>
				status_mef=buttonDown;
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <debounceFSM_update+0xcc>)
 8001966:	2201      	movs	r2, #1
 8001968:	701a      	strb	r2, [r3, #0]
			break;
 800196a:	e005      	b.n	8001978 <debounceFSM_update+0xc4>
		    break;
 800196c:	bf00      	nop
 800196e:	e004      	b.n	800197a <debounceFSM_update+0xc6>
			break;
 8001970:	bf00      	nop
 8001972:	e002      	b.n	800197a <debounceFSM_update+0xc6>
			break;
 8001974:	bf00      	nop
 8001976:	e000      	b.n	800197a <debounceFSM_update+0xc6>
			break;
 8001978:	bf00      	nop
		default:

	}
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000352 	.word	0x20000352
 8001984:	40020800 	.word	0x40020800
 8001988:	20000354 	.word	0x20000354
 800198c:	20000360 	.word	0x20000360

08001990 <readKey>:

/*
 * Funcion que devuelve un true en caso que haya se haya presionado el botón
 */
bool_t readKey(){
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
	debounceFSM_update();
 8001994:	f7ff ff8e 	bl	80018b4 <debounceFSM_update>
	if(real_status_button){
 8001998:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <readKey+0x20>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d004      	beq.n	80019aa <readKey+0x1a>
		real_status_button=false;
 80019a0:	4b03      	ldr	r3, [pc, #12]	; (80019b0 <readKey+0x20>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
				return true;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e000      	b.n	80019ac <readKey+0x1c>
	}
	else{
	return false;
 80019aa:	2300      	movs	r3, #0
	}
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000360 	.word	0x20000360

080019b4 <BMP_280_Init2>:
static float PointSet=0;
I2C_HandleTypeDef hi2c1;



void BMP_280_Init2(){
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
	Point0=0;
 80019b8:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <BMP_280_Init2+0x40>)
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
	 bmp280_init_default_params(&bmp280.params);
 80019c0:	480d      	ldr	r0, [pc, #52]	; (80019f8 <BMP_280_Init2+0x44>)
 80019c2:	f000 fa35 	bl	8001e30 <bmp280_init_default_params>
		bmp280.addr = BMP280_I2C_ADDRESS_0;
 80019c6:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <BMP_280_Init2+0x48>)
 80019c8:	2276      	movs	r2, #118	; 0x76
 80019ca:	849a      	strh	r2, [r3, #36]	; 0x24
		bmp280.i2c = &hi2c1;
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <BMP_280_Init2+0x48>)
 80019ce:	4a0c      	ldr	r2, [pc, #48]	; (8001a00 <BMP_280_Init2+0x4c>)
 80019d0:	629a      	str	r2, [r3, #40]	; 0x28
		if (!bmp280_init(&bmp280, &bmp280.params)) {
 80019d2:	4909      	ldr	r1, [pc, #36]	; (80019f8 <BMP_280_Init2+0x44>)
 80019d4:	4809      	ldr	r0, [pc, #36]	; (80019fc <BMP_280_Init2+0x48>)
 80019d6:	f000 fba5 	bl	8002124 <bmp280_init>
 80019da:	4603      	mov	r3, r0
 80019dc:	f083 0301 	eor.w	r3, r3, #1
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <BMP_280_Init2+0x36>
			Error_Handler();
 80019e6:	f7ff fc53 	bl	8001290 <Error_Handler>
			}
		HAL_Delay(150);
 80019ea:	2096      	movs	r0, #150	; 0x96
 80019ec:	f001 f8c0 	bl	8002b70 <HAL_Delay>
		}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000398 	.word	0x20000398
 80019f8:	20000390 	.word	0x20000390
 80019fc:	20000364 	.word	0x20000364
 8001a00:	200003a0 	.word	0x200003a0
 8001a04:	00000000 	.word	0x00000000

08001a08 <BMP_280_Read>:

ReadSensor BMP_280_Read(){
 8001a08:	b5b0      	push	{r4, r5, r7, lr}
 8001a0a:	b08c      	sub	sp, #48	; 0x30
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
float pressure, temperature, humidity;
	ReadSensor Dato;
	  	  if (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8001a10:	f107 031c 	add.w	r3, r7, #28
 8001a14:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001a18:	f107 0120 	add.w	r1, r7, #32
 8001a1c:	4850      	ldr	r0, [pc, #320]	; (8001b60 <BMP_280_Read+0x158>)
 8001a1e:	f000 ffe9 	bl	80029f4 <bmp280_read_float>
 8001a22:	4603      	mov	r3, r0
 8001a24:	f083 0301 	eor.w	r3, r3, #1
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <BMP_280_Read+0x2a>
	  	  	  Error_Handler();
 8001a2e:	f7ff fc2f 	bl	8001290 <Error_Handler>
	  	  		}
	  	 float temperatura_kelvin = temperature + 273.15;
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7fe fd8f 	bl	8000558 <__aeabi_f2d>
 8001a3a:	a341      	add	r3, pc, #260	; (adr r3, 8001b40 <BMP_280_Read+0x138>)
 8001a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a40:	f7fe fc2c 	bl	800029c <__adddf3>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4610      	mov	r0, r2
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	f7ff f8b4 	bl	8000bb8 <__aeabi_d2f>
 8001a50:	4603      	mov	r3, r0
 8001a52:	62fb      	str	r3, [r7, #44]	; 0x2c
	  	    // Cálculo de la altitud
	  	    float altitud = (temperatura_kelvin / L) * (1 - exp((R * L) / (g * M) * (log(pressure) - log(P0))));
 8001a54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a56:	f7fe fd7f 	bl	8000558 <__aeabi_f2d>
 8001a5a:	a33b      	add	r3, pc, #236	; (adr r3, 8001b48 <BMP_280_Read+0x140>)
 8001a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a60:	f7fe fefc 	bl	800085c <__aeabi_ddiv>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4614      	mov	r4, r2
 8001a6a:	461d      	mov	r5, r3
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fd72 	bl	8000558 <__aeabi_f2d>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	ec43 2b10 	vmov	d0, r2, r3
 8001a7c:	f007 f800 	bl	8008a80 <log>
 8001a80:	ec51 0b10 	vmov	r0, r1, d0
 8001a84:	a332      	add	r3, pc, #200	; (adr r3, 8001b50 <BMP_280_Read+0x148>)
 8001a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8a:	f7fe fc05 	bl	8000298 <__aeabi_dsub>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	4610      	mov	r0, r2
 8001a94:	4619      	mov	r1, r3
 8001a96:	a330      	add	r3, pc, #192	; (adr r3, 8001b58 <BMP_280_Read+0x150>)
 8001a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9c:	f7fe fdb4 	bl	8000608 <__aeabi_dmul>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	ec43 2b17 	vmov	d7, r2, r3
 8001aa8:	eeb0 0a47 	vmov.f32	s0, s14
 8001aac:	eef0 0a67 	vmov.f32	s1, s15
 8001ab0:	f006 ff9e 	bl	80089f0 <exp>
 8001ab4:	ec53 2b10 	vmov	r2, r3, d0
 8001ab8:	f04f 0000 	mov.w	r0, #0
 8001abc:	4929      	ldr	r1, [pc, #164]	; (8001b64 <BMP_280_Read+0x15c>)
 8001abe:	f7fe fbeb 	bl	8000298 <__aeabi_dsub>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	4629      	mov	r1, r5
 8001aca:	f7fe fd9d 	bl	8000608 <__aeabi_dmul>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f7ff f86f 	bl	8000bb8 <__aeabi_d2f>
 8001ada:	4603      	mov	r3, r0
 8001adc:	62bb      	str	r3, [r7, #40]	; 0x28
	  	  Dato.Temperatura=temperature;
 8001ade:	6a3b      	ldr	r3, [r7, #32]
 8001ae0:	60bb      	str	r3, [r7, #8]
	  	  Dato.Presion=pressure;
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	60fb      	str	r3, [r7, #12]
	  	  Dato.AlturaSet=PointSet;
 8001ae6:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <BMP_280_Read+0x160>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	61bb      	str	r3, [r7, #24]
	  	  Dato.AlturaSet=PointSet;
 8001aec:	4b1e      	ldr	r3, [pc, #120]	; (8001b68 <BMP_280_Read+0x160>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	61bb      	str	r3, [r7, #24]
	  	  if(altitud-Point0<0){
 8001af2:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <BMP_280_Read+0x164>)
 8001af4:	edd3 7a00 	vldr	s15, [r3]
 8001af8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001afc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b08:	d503      	bpl.n	8001b12 <BMP_280_Read+0x10a>
	  		  altitud=0;
 8001b0a:	f04f 0300 	mov.w	r3, #0
 8001b0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b10:	e008      	b.n	8001b24 <BMP_280_Read+0x11c>
	  	  }
	  	  else {
	  		  Dato.altura=altitud-Point0;
 8001b12:	4b16      	ldr	r3, [pc, #88]	; (8001b6c <BMP_280_Read+0x164>)
 8001b14:	edd3 7a00 	vldr	s15, [r3]
 8001b18:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001b1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b20:	edc7 7a04 	vstr	s15, [r7, #16]
	  	  }

return Dato;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	461d      	mov	r5, r3
 8001b28:	f107 0408 	add.w	r4, r7, #8
 8001b2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b30:	6823      	ldr	r3, [r4, #0]
 8001b32:	602b      	str	r3, [r5, #0]
}
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	3730      	adds	r7, #48	; 0x30
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b3c:	f3af 8000 	nop.w
 8001b40:	66666666 	.word	0x66666666
 8001b44:	40711266 	.word	0x40711266
 8001b48:	76c8b439 	.word	0x76c8b439
 8001b4c:	3f7a9fbe 	.word	0x3f7a9fbe
 8001b50:	772bf62a 	.word	0x772bf62a
 8001b54:	40270d5b 	.word	0x40270d5b
 8001b58:	c35d5e69 	.word	0xc35d5e69
 8001b5c:	3fc85b40 	.word	0x3fc85b40
 8001b60:	20000364 	.word	0x20000364
 8001b64:	3ff00000 	.word	0x3ff00000
 8001b68:	2000039c 	.word	0x2000039c
 8001b6c:	20000398 	.word	0x20000398

08001b70 <BMP_280_SetPoint>:
void BMP_280_SetPoint(uint8_t PointS){
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	71fb      	strb	r3, [r7, #7]
	PointSet=PointS;
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	ee07 3a90 	vmov	s15, r3
 8001b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <BMP_280_SetPoint+0x28>)
 8001b86:	edc3 7a00 	vstr	s15, [r3]
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	2000039c 	.word	0x2000039c

08001b9c <BMP_280_ConfigP0>:

void BMP_280_ConfigP0(){
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
	ReadSensor Dato= BMP_280_Read(&hi2c1);
 8001ba2:	1d3b      	adds	r3, r7, #4
 8001ba4:	4905      	ldr	r1, [pc, #20]	; (8001bbc <BMP_280_ConfigP0+0x20>)
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff ff2e 	bl	8001a08 <BMP_280_Read>
	Point0=Dato.altura;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <BMP_280_ConfigP0+0x24>)
 8001bb0:	6013      	str	r3, [r2, #0]
	}
 8001bb2:	bf00      	nop
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	200003a0 	.word	0x200003a0
 8001bc0:	20000398 	.word	0x20000398

08001bc4 <MEF>:
static float Limites[]={0.85, 1.20};
extern UART_HandleTypeDef huart2;
extern I2C_HandleTypeDef hi2c1;


void MEF(){
 8001bc4:	b5b0      	push	{r4, r5, r7, lr}
 8001bc6:	b0a6      	sub	sp, #152	; 0x98
 8001bc8:	af12      	add	r7, sp, #72	; 0x48
	if (flagDelay){
 8001bca:	4b68      	ldr	r3, [pc, #416]	; (8001d6c <MEF+0x1a8>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00e      	beq.n	8001bf0 <MEF+0x2c>
		delayInit(&MyDelay[0], 50);//delay de togleo de alerta alta
 8001bd2:	2132      	movs	r1, #50	; 0x32
 8001bd4:	4866      	ldr	r0, [pc, #408]	; (8001d70 <MEF+0x1ac>)
 8001bd6:	f7ff fd56 	bl	8001686 <delayInit>
		delayInit(&MyDelay[1], 200);//delay de togleo de alerta baja
 8001bda:	21c8      	movs	r1, #200	; 0xc8
 8001bdc:	4865      	ldr	r0, [pc, #404]	; (8001d74 <MEF+0x1b0>)
 8001bde:	f7ff fd52 	bl	8001686 <delayInit>
		delayInit(&MyDelay[2], 100);//delay de print en uart
 8001be2:	2164      	movs	r1, #100	; 0x64
 8001be4:	4864      	ldr	r0, [pc, #400]	; (8001d78 <MEF+0x1b4>)
 8001be6:	f7ff fd4e 	bl	8001686 <delayInit>
	flagDelay=false;
 8001bea:	4b60      	ldr	r3, [pc, #384]	; (8001d6c <MEF+0x1a8>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	701a      	strb	r2, [r3, #0]
	}

	ReadSensor Dato;
	switch (FlagMEF){
 8001bf0:	4b62      	ldr	r3, [pc, #392]	; (8001d7c <MEF+0x1b8>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b05      	cmp	r3, #5
 8001bf6:	f200 80af 	bhi.w	8001d58 <MEF+0x194>
 8001bfa:	a201      	add	r2, pc, #4	; (adr r2, 8001c00 <MEF+0x3c>)
 8001bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c00:	08001c19 	.word	0x08001c19
 8001c04:	08001c45 	.word	0x08001c45
 8001c08:	08001ca3 	.word	0x08001ca3
 8001c0c:	08001ce3 	.word	0x08001ce3
 8001c10:	08001d19 	.word	0x08001d19
 8001c14:	08001c95 	.word	0x08001c95

	case Inicio:
char mensaje[]="Indique la altura de seteo: \r\n";
 8001c18:	4b59      	ldr	r3, [pc, #356]	; (8001d80 <MEF+0x1bc>)
 8001c1a:	f107 041c 	add.w	r4, r7, #28
 8001c1e:	461d      	mov	r5, r3
 8001c20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c24:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001c28:	c407      	stmia	r4!, {r0, r1, r2}
 8001c2a:	8023      	strh	r3, [r4, #0]
 8001c2c:	3402      	adds	r4, #2
 8001c2e:	0c1b      	lsrs	r3, r3, #16
 8001c30:	7023      	strb	r3, [r4, #0]
UART_TrasmitMessage(mensaje);
 8001c32:	f107 031c 	add.w	r3, r7, #28
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fdac 	bl	8001794 <UART_TrasmitMessage>
FlagMEF=Altura_Seteo;
 8001c3c:	4b4f      	ldr	r3, [pc, #316]	; (8001d7c <MEF+0x1b8>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	701a      	strb	r2, [r3, #0]
break;
 8001c42:	e08e      	b.n	8001d62 <MEF+0x19e>

	case Altura_Seteo:
		UARTRead_t AlturaSeteo=UART_Read();
 8001c44:	f7ff fdc8 	bl	80017d8 <UART_Read>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	833b      	strh	r3, [r7, #24]
		if(AlturaSeteo.estado){
 8001c4c:	7e3b      	ldrb	r3, [r7, #24]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 8086 	beq.w	8001d60 <MEF+0x19c>
		    BMP_280_ConfigP0(hi2c1);
 8001c54:	4c4b      	ldr	r4, [pc, #300]	; (8001d84 <MEF+0x1c0>)
 8001c56:	4668      	mov	r0, sp
 8001c58:	f104 0310 	add.w	r3, r4, #16
 8001c5c:	2244      	movs	r2, #68	; 0x44
 8001c5e:	4619      	mov	r1, r3
 8001c60:	f004 fe49 	bl	80068f6 <memcpy>
 8001c64:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c68:	f7ff ff98 	bl	8001b9c <BMP_280_ConfigP0>
		    BMP_280_SetPoint(AlturaSeteo.dato);
 8001c6c:	7e7b      	ldrb	r3, [r7, #25]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff ff7e 	bl	8001b70 <BMP_280_SetPoint>
		     Dato= BMP_280_Read();
 8001c74:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff fec5 	bl	8001a08 <BMP_280_Read>
		    UART_TrasmitSensor(Dato);
 8001c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c88:	f7ff fd40 	bl	800170c <UART_TrasmitSensor>
		    FlagMEF=Control_Alerta;
 8001c8c:	4b3b      	ldr	r3, [pc, #236]	; (8001d7c <MEF+0x1b8>)
 8001c8e:	2205      	movs	r2, #5
 8001c90:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001c92:	e065      	b.n	8001d60 <MEF+0x19c>

	case Control_Alerta:
		FlagMEF=ControlAlerta();
 8001c94:	f000 f87a 	bl	8001d8c <ControlAlerta>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	4b37      	ldr	r3, [pc, #220]	; (8001d7c <MEF+0x1b8>)
 8001c9e:	701a      	strb	r2, [r3, #0]
		break;
 8001ca0:	e05f      	b.n	8001d62 <MEF+0x19e>

	case Alerta_Abajo:
		Dato= BMP_280_Read();
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff feaf 	bl	8001a08 <BMP_280_Read>
 8001caa:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001cae:	463d      	mov	r5, r7
 8001cb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb4:	682b      	ldr	r3, [r5, #0]
 8001cb6:	6023      	str	r3, [r4, #0]
		if(delayRead(&MyDelay[1])) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001cb8:	482e      	ldr	r0, [pc, #184]	; (8001d74 <MEF+0x1b0>)
 8001cba:	f7ff fcf4 	bl	80016a6 <delayRead>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <MEF+0x108>
 8001cc4:	2120      	movs	r1, #32
 8001cc6:	4830      	ldr	r0, [pc, #192]	; (8001d88 <MEF+0x1c4>)
 8001cc8:	f001 facf 	bl	800326a <HAL_GPIO_TogglePin>
		UART_TrasmitSensor(Dato);
 8001ccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001cd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cd6:	f7ff fd19 	bl	800170c <UART_TrasmitSensor>


		FlagMEF= Control_Alerta;
 8001cda:	4b28      	ldr	r3, [pc, #160]	; (8001d7c <MEF+0x1b8>)
 8001cdc:	2205      	movs	r2, #5
 8001cde:	701a      	strb	r2, [r3, #0]
		break;
 8001ce0:	e03f      	b.n	8001d62 <MEF+0x19e>

	case Altura_Alcanzada:
	     Dato= BMP_280_Read();
 8001ce2:	463b      	mov	r3, r7
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff fe8f 	bl	8001a08 <BMP_280_Read>
 8001cea:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001cee:	463d      	mov	r5, r7
 8001cf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cf4:	682b      	ldr	r3, [r5, #0]
 8001cf6:	6023      	str	r3, [r4, #0]
	 	UART_TrasmitSensor(Dato);
 8001cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d02:	f7ff fd03 	bl	800170c <UART_TrasmitSensor>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8001d06:	2201      	movs	r2, #1
 8001d08:	2120      	movs	r1, #32
 8001d0a:	481f      	ldr	r0, [pc, #124]	; (8001d88 <MEF+0x1c4>)
 8001d0c:	f001 fa94 	bl	8003238 <HAL_GPIO_WritePin>
		FlagMEF= Control_Alerta;
 8001d10:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <MEF+0x1b8>)
 8001d12:	2205      	movs	r2, #5
 8001d14:	701a      	strb	r2, [r3, #0]
		break;
 8001d16:	e024      	b.n	8001d62 <MEF+0x19e>

	case Alerta_Arriba:
	     Dato= BMP_280_Read();
 8001d18:	463b      	mov	r3, r7
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff fe74 	bl	8001a08 <BMP_280_Read>
 8001d20:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001d24:	463d      	mov	r5, r7
 8001d26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d2a:	682b      	ldr	r3, [r5, #0]
 8001d2c:	6023      	str	r3, [r4, #0]
	     UART_TrasmitSensor(Dato);
 8001d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d38:	f7ff fce8 	bl	800170c <UART_TrasmitSensor>
		if(delayRead(&MyDelay[0])) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001d3c:	480c      	ldr	r0, [pc, #48]	; (8001d70 <MEF+0x1ac>)
 8001d3e:	f7ff fcb2 	bl	80016a6 <delayRead>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <MEF+0x18c>
 8001d48:	2120      	movs	r1, #32
 8001d4a:	480f      	ldr	r0, [pc, #60]	; (8001d88 <MEF+0x1c4>)
 8001d4c:	f001 fa8d 	bl	800326a <HAL_GPIO_TogglePin>
		FlagMEF= Control_Alerta;
 8001d50:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <MEF+0x1b8>)
 8001d52:	2205      	movs	r2, #5
 8001d54:	701a      	strb	r2, [r3, #0]
		break;
 8001d56:	e004      	b.n	8001d62 <MEF+0x19e>
	default:
	FlagMEF=Inicio;
 8001d58:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <MEF+0x1b8>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	701a      	strb	r2, [r3, #0]
	}
}
 8001d5e:	e000      	b.n	8001d62 <MEF+0x19e>
		break;
 8001d60:	bf00      	nop
}
 8001d62:	bf00      	nop
 8001d64:	3750      	adds	r7, #80	; 0x50
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bdb0      	pop	{r4, r5, r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000008 	.word	0x20000008
 8001d70:	200003f8 	.word	0x200003f8
 8001d74:	20000404 	.word	0x20000404
 8001d78:	20000410 	.word	0x20000410
 8001d7c:	200003f4 	.word	0x200003f4
 8001d80:	08009268 	.word	0x08009268
 8001d84:	200003a0 	.word	0x200003a0
 8001d88:	40020000 	.word	0x40020000

08001d8c <ControlAlerta>:

EstadoAlerta_t ControlAlerta(){
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
	enum EstadoMef Control;
	ReadSensor Dat=BMP_280_Read();
 8001d92:	463b      	mov	r3, r7
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fe37 	bl	8001a08 <BMP_280_Read>
if (Dat.AlturaSet/Dat.altura>=Limites[2]){
 8001d9a:	edd7 6a04 	vldr	s13, [r7, #16]
 8001d9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001da6:	4b18      	ldr	r3, [pc, #96]	; (8001e08 <ControlAlerta+0x7c>)
 8001da8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001dac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db4:	db02      	blt.n	8001dbc <ControlAlerta+0x30>
	Control=Alerta_Abajo;
 8001db6:	2302      	movs	r3, #2
 8001db8:	75fb      	strb	r3, [r7, #23]
 8001dba:	e020      	b.n	8001dfe <ControlAlerta+0x72>
	}
else if(Dat.AlturaSet/Dat.altura>Limites[0] && Dat.AlturaSet/Dat.altura>Limites[1] ) {
 8001dbc:	edd7 6a04 	vldr	s13, [r7, #16]
 8001dc0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <ControlAlerta+0x7c>)
 8001dca:	edd3 7a00 	vldr	s15, [r3]
 8001dce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd6:	dd10      	ble.n	8001dfa <ControlAlerta+0x6e>
 8001dd8:	edd7 6a04 	vldr	s13, [r7, #16]
 8001ddc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001de0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001de4:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <ControlAlerta+0x7c>)
 8001de6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001dea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df2:	dd02      	ble.n	8001dfa <ControlAlerta+0x6e>
	Control=Altura_Alcanzada;
 8001df4:	2303      	movs	r3, #3
 8001df6:	75fb      	strb	r3, [r7, #23]
 8001df8:	e001      	b.n	8001dfe <ControlAlerta+0x72>
}
else {
	Control=Alerta_Arriba;
 8001dfa:	2304      	movs	r3, #4
 8001dfc:	75fb      	strb	r3, [r7, #23]
}
return Control;
 8001dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	2000000c 	.word	0x2000000c

08001e0c <MEF_Init>:
void MEF_Init(){
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
	flagDelay=true;
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <MEF_Init+0x1c>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	701a      	strb	r2, [r3, #0]
	FlagMEF=Inicio;
 8001e16:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <MEF_Init+0x20>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	701a      	strb	r2, [r3, #0]
	}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	20000008 	.word	0x20000008
 8001e2c:	200003f4 	.word	0x200003f4

08001e30 <bmp280_init_default_params>:
#define BMP280_RESET_VALUE     0xB6




void bmp280_init_default_params(bmp280_params_t *params) {
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2203      	movs	r2, #3
 8001e48:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2203      	movs	r2, #3
 8001e4e:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2203      	movs	r2, #3
 8001e54:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2203      	movs	r2, #3
 8001e5a:	715a      	strb	r2, [r3, #5]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08a      	sub	sp, #40	; 0x28
 8001e6c:	af04      	add	r7, sp, #16
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	460b      	mov	r3, r1
 8001e72:	607a      	str	r2, [r7, #4]
 8001e74:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001e82:	7afb      	ldrb	r3, [r7, #11]
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	8af9      	ldrh	r1, [r7, #22]
 8001e88:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e8c:	9302      	str	r3, [sp, #8]
 8001e8e:	2302      	movs	r3, #2
 8001e90:	9301      	str	r3, [sp, #4]
 8001e92:	f107 0314 	add.w	r3, r7, #20
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	2301      	movs	r3, #1
 8001e9a:	f001 fc3f 	bl	800371c <HAL_I2C_Mem_Read>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10b      	bne.n	8001ebc <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001ea4:	7d7b      	ldrb	r3, [r7, #21]
 8001ea6:	021b      	lsls	r3, r3, #8
 8001ea8:	b21a      	sxth	r2, r3
 8001eaa:	7d3b      	ldrb	r3, [r7, #20]
 8001eac:	b21b      	sxth	r3, r3
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	b21b      	sxth	r3, r3
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	801a      	strh	r2, [r3, #0]
		return true;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <read_register16+0x56>
	} else
		return false;
 8001ebc:	2300      	movs	r3, #0

}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001ec6:	b590      	push	{r4, r7, lr}
 8001ec8:	b08b      	sub	sp, #44	; 0x2c
 8001eca:	af04      	add	r7, sp, #16
 8001ecc:	60f8      	str	r0, [r7, #12]
 8001ece:	607a      	str	r2, [r7, #4]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	72fb      	strb	r3, [r7, #11]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001ee6:	7afb      	ldrb	r3, [r7, #11]
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	7abb      	ldrb	r3, [r7, #10]
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	8af9      	ldrh	r1, [r7, #22]
 8001ef0:	f241 3488 	movw	r4, #5000	; 0x1388
 8001ef4:	9402      	str	r4, [sp, #8]
 8001ef6:	9301      	str	r3, [sp, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	2301      	movs	r3, #1
 8001efe:	f001 fc0d 	bl	800371c <HAL_I2C_Mem_Read>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <read_data+0x46>
		return 0;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	e000      	b.n	8001f0e <read_data+0x48>
	else
		return 1;
 8001f0c:	2301      	movs	r3, #1

}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	371c      	adds	r7, #28
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd90      	pop	{r4, r7, pc}

08001f16 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	461a      	mov	r2, r3
 8001f22:	2188      	movs	r1, #136	; 0x88
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff ff9f 	bl	8001e68 <read_register16>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d06f      	beq.n	8002010 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3302      	adds	r3, #2
 8001f34:	461a      	mov	r2, r3
 8001f36:	218a      	movs	r1, #138	; 0x8a
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff ff95 	bl	8001e68 <read_register16>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d065      	beq.n	8002010 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3304      	adds	r3, #4
 8001f48:	461a      	mov	r2, r3
 8001f4a:	218c      	movs	r1, #140	; 0x8c
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff ff8b 	bl	8001e68 <read_register16>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d05b      	beq.n	8002010 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3306      	adds	r3, #6
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	218e      	movs	r1, #142	; 0x8e
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7ff ff81 	bl	8001e68 <read_register16>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d051      	beq.n	8002010 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3308      	adds	r3, #8
 8001f70:	461a      	mov	r2, r3
 8001f72:	2190      	movs	r1, #144	; 0x90
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff ff77 	bl	8001e68 <read_register16>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d047      	beq.n	8002010 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	330a      	adds	r3, #10
 8001f84:	461a      	mov	r2, r3
 8001f86:	2192      	movs	r1, #146	; 0x92
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff ff6d 	bl	8001e68 <read_register16>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d03d      	beq.n	8002010 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	330c      	adds	r3, #12
 8001f98:	461a      	mov	r2, r3
 8001f9a:	2194      	movs	r1, #148	; 0x94
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff ff63 	bl	8001e68 <read_register16>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d033      	beq.n	8002010 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	330e      	adds	r3, #14
 8001fac:	461a      	mov	r2, r3
 8001fae:	2196      	movs	r1, #150	; 0x96
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f7ff ff59 	bl	8001e68 <read_register16>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d029      	beq.n	8002010 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3310      	adds	r3, #16
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	2198      	movs	r1, #152	; 0x98
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7ff ff4f 	bl	8001e68 <read_register16>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d01f      	beq.n	8002010 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3312      	adds	r3, #18
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	219a      	movs	r1, #154	; 0x9a
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff ff45 	bl	8001e68 <read_register16>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d015      	beq.n	8002010 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3314      	adds	r3, #20
 8001fe8:	461a      	mov	r2, r3
 8001fea:	219c      	movs	r1, #156	; 0x9c
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff ff3b 	bl	8001e68 <read_register16>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00b      	beq.n	8002010 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	219e      	movs	r1, #158	; 0x9e
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7ff ff31 	bl	8001e68 <read_register16>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <read_calibration_data+0xfa>

		return true;
 800200c:	2301      	movs	r3, #1
 800200e:	e000      	b.n	8002012 <read_calibration_data+0xfc>
	}

	return false;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 800201a:	b580      	push	{r7, lr}
 800201c:	b084      	sub	sp, #16
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f103 0218 	add.w	r2, r3, #24
 8002028:	2301      	movs	r3, #1
 800202a:	21a1      	movs	r1, #161	; 0xa1
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff ff4a 	bl	8001ec6 <read_data>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d14b      	bne.n	80020d0 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	331a      	adds	r3, #26
 800203c:	461a      	mov	r2, r3
 800203e:	21e1      	movs	r1, #225	; 0xe1
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff ff11 	bl	8001e68 <read_register16>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d041      	beq.n	80020d0 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f103 021c 	add.w	r2, r3, #28
 8002052:	2301      	movs	r3, #1
 8002054:	21e3      	movs	r1, #227	; 0xe3
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff ff35 	bl	8001ec6 <read_data>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d136      	bne.n	80020d0 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8002062:	f107 030e 	add.w	r3, r7, #14
 8002066:	461a      	mov	r2, r3
 8002068:	21e4      	movs	r1, #228	; 0xe4
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff fefc 	bl	8001e68 <read_register16>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d02c      	beq.n	80020d0 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8002076:	f107 030c 	add.w	r3, r7, #12
 800207a:	461a      	mov	r2, r3
 800207c:	21e5      	movs	r1, #229	; 0xe5
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff fef2 	bl	8001e68 <read_register16>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d022      	beq.n	80020d0 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8002090:	2301      	movs	r3, #1
 8002092:	21e7      	movs	r1, #231	; 0xe7
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff ff16 	bl	8001ec6 <read_data>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d117      	bne.n	80020d0 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80020a0:	89fb      	ldrh	r3, [r7, #14]
 80020a2:	011b      	lsls	r3, r3, #4
 80020a4:	b21b      	sxth	r3, r3
 80020a6:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 80020aa:	b21a      	sxth	r2, r3
 80020ac:	89fb      	ldrh	r3, [r7, #14]
 80020ae:	121b      	asrs	r3, r3, #8
 80020b0:	b21b      	sxth	r3, r3
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	b21b      	sxth	r3, r3
 80020b8:	4313      	orrs	r3, r2
 80020ba:	b21a      	sxth	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80020c0:	89bb      	ldrh	r3, [r7, #12]
 80020c2:	091b      	lsrs	r3, r3, #4
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	b21a      	sxth	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	841a      	strh	r2, [r3, #32]

		return true;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e000      	b.n	80020d2 <read_hum_calibration_data+0xb8>
	}

	return false;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 80020da:	b580      	push	{r7, lr}
 80020dc:	b088      	sub	sp, #32
 80020de:	af04      	add	r7, sp, #16
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	460b      	mov	r3, r1
 80020e4:	70fb      	strb	r3, [r7, #3]
 80020e6:	4613      	mov	r3, r2
 80020e8:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80020f6:	78fb      	ldrb	r3, [r7, #3]
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	89f9      	ldrh	r1, [r7, #14]
 80020fc:	f242 7310 	movw	r3, #10000	; 0x2710
 8002100:	9302      	str	r3, [sp, #8]
 8002102:	2301      	movs	r3, #1
 8002104:	9301      	str	r3, [sp, #4]
 8002106:	1cbb      	adds	r3, r7, #2
 8002108:	9300      	str	r3, [sp, #0]
 800210a:	2301      	movs	r3, #1
 800210c:	f001 fa0c 	bl	8003528 <HAL_I2C_Mem_Write>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <write_register8+0x40>
		return false;
 8002116:	2300      	movs	r3, #0
 8002118:	e000      	b.n	800211c <write_register8+0x42>
	else
		return true;
 800211a:	2301      	movs	r3, #1
}
 800211c:	4618      	mov	r0, r3
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002132:	2b76      	cmp	r3, #118	; 0x76
 8002134:	d005      	beq.n	8002142 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800213a:	2b77      	cmp	r3, #119	; 0x77
 800213c:	d001      	beq.n	8002142 <bmp280_init+0x1e>

		return false;
 800213e:	2300      	movs	r3, #0
 8002140:	e099      	b.n	8002276 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002148:	2301      	movs	r3, #1
 800214a:	21d0      	movs	r1, #208	; 0xd0
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff feba 	bl	8001ec6 <read_data>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <bmp280_init+0x38>
		return false;
 8002158:	2300      	movs	r3, #0
 800215a:	e08c      	b.n	8002276 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002162:	2b58      	cmp	r3, #88	; 0x58
 8002164:	d006      	beq.n	8002174 <bmp280_init+0x50>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800216c:	2b60      	cmp	r3, #96	; 0x60
 800216e:	d001      	beq.n	8002174 <bmp280_init+0x50>

		return false;
 8002170:	2300      	movs	r3, #0
 8002172:	e080      	b.n	8002276 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8002174:	22b6      	movs	r2, #182	; 0xb6
 8002176:	21e0      	movs	r1, #224	; 0xe0
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff ffae 	bl	80020da <write_register8>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <bmp280_init+0x64>
		return false;
 8002184:	2300      	movs	r3, #0
 8002186:	e076      	b.n	8002276 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8002188:	f107 020c 	add.w	r2, r7, #12
 800218c:	2301      	movs	r3, #1
 800218e:	21f3      	movs	r1, #243	; 0xf3
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff fe98 	bl	8001ec6 <read_data>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1f5      	bne.n	8002188 <bmp280_init+0x64>
				&& (status & 1) == 0)
 800219c:	7b3b      	ldrb	r3, [r7, #12]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f0      	bne.n	8002188 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff feb5 	bl	8001f16 <read_calibration_data>
 80021ac:	4603      	mov	r3, r0
 80021ae:	f083 0301 	eor.w	r3, r3, #1
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d100      	bne.n	80021ba <bmp280_init+0x96>
 80021b8:	e001      	b.n	80021be <bmp280_init+0x9a>
		return false;
 80021ba:	2300      	movs	r3, #0
 80021bc:	e05b      	b.n	8002276 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80021c4:	2b60      	cmp	r3, #96	; 0x60
 80021c6:	d10a      	bne.n	80021de <bmp280_init+0xba>
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7ff ff26 	bl	800201a <read_hum_calibration_data>
 80021ce:	4603      	mov	r3, r0
 80021d0:	f083 0301 	eor.w	r3, r3, #1
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <bmp280_init+0xba>
		return false;
 80021da:	2300      	movs	r3, #0
 80021dc:	e04b      	b.n	8002276 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	795b      	ldrb	r3, [r3, #5]
 80021e2:	015b      	lsls	r3, r3, #5
 80021e4:	b25a      	sxtb	r2, r3
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	785b      	ldrb	r3, [r3, #1]
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	b25b      	sxtb	r3, r3
 80021ee:	4313      	orrs	r3, r2
 80021f0:	b25b      	sxtb	r3, r3
 80021f2:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
 80021f6:	461a      	mov	r2, r3
 80021f8:	21f5      	movs	r1, #245	; 0xf5
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff ff6d 	bl	80020da <write_register8>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <bmp280_init+0xe6>
		return false;
 8002206:	2300      	movs	r3, #0
 8002208:	e035      	b.n	8002276 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d102      	bne.n	8002218 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	2200      	movs	r2, #0
 8002216:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	78db      	ldrb	r3, [r3, #3]
 800221c:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 800221e:	b25a      	sxtb	r2, r3
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	789b      	ldrb	r3, [r3, #2]
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	b25b      	sxtb	r3, r3
 8002228:	4313      	orrs	r3, r2
 800222a:	b25a      	sxtb	r2, r3
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	b25b      	sxtb	r3, r3
 8002232:	4313      	orrs	r3, r2
 8002234:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8002236:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800223e:	2b60      	cmp	r3, #96	; 0x60
 8002240:	d10d      	bne.n	800225e <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	791b      	ldrb	r3, [r3, #4]
 8002246:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8002248:	7b7b      	ldrb	r3, [r7, #13]
 800224a:	461a      	mov	r2, r3
 800224c:	21f2      	movs	r1, #242	; 0xf2
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff ff43 	bl	80020da <write_register8>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <bmp280_init+0x13a>
			return false;
 800225a:	2300      	movs	r3, #0
 800225c:	e00b      	b.n	8002276 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 800225e:	7bbb      	ldrb	r3, [r7, #14]
 8002260:	461a      	mov	r2, r3
 8002262:	21f4      	movs	r1, #244	; 0xf4
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff ff38 	bl	80020da <write_register8>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <bmp280_init+0x150>
		return false;
 8002270:	2300      	movs	r3, #0
 8002272:	e000      	b.n	8002276 <bmp280_init+0x152>
	}

	return true;
 8002274:	2301      	movs	r3, #1
}
 8002276:	4618      	mov	r0, r3
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 800227e:	b480      	push	{r7}
 8002280:	b087      	sub	sp, #28
 8002282:	af00      	add	r7, sp, #0
 8002284:	60f8      	str	r0, [r7, #12]
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	10da      	asrs	r2, r3, #3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800229c:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80022a0:	12db      	asrs	r3, r3, #11
 80022a2:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	111b      	asrs	r3, r3, #4
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	8812      	ldrh	r2, [r2, #0]
 80022ac:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	1112      	asrs	r2, r2, #4
 80022b2:	68f9      	ldr	r1, [r7, #12]
 80022b4:	8809      	ldrh	r1, [r1, #0]
 80022b6:	1a52      	subs	r2, r2, r1
 80022b8:	fb02 f303 	mul.w	r3, r2, r3
 80022bc:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80022c4:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80022c8:	139b      	asrs	r3, r3, #14
 80022ca:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	441a      	add	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	3380      	adds	r3, #128	; 0x80
 80022e2:	121b      	asrs	r3, r3, #8
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	371c      	adds	r7, #28
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 80022f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022f4:	b0cc      	sub	sp, #304	; 0x130
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 80022fc:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8002300:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8002304:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002308:	17da      	asrs	r2, r3, #31
 800230a:	461c      	mov	r4, r3
 800230c:	4615      	mov	r5, r2
 800230e:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8002312:	f145 3bff 	adc.w	fp, r5, #4294967295
 8002316:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 800231a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800231e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002322:	fb03 f102 	mul.w	r1, r3, r2
 8002326:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800232a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800232e:	fb02 f303 	mul.w	r3, r2, r3
 8002332:	18ca      	adds	r2, r1, r3
 8002334:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002338:	fba3 8903 	umull	r8, r9, r3, r3
 800233c:	eb02 0309 	add.w	r3, r2, r9
 8002340:	4699      	mov	r9, r3
 8002342:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002346:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800234a:	b21b      	sxth	r3, r3
 800234c:	17da      	asrs	r2, r3, #31
 800234e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002352:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002356:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800235a:	4603      	mov	r3, r0
 800235c:	fb03 f209 	mul.w	r2, r3, r9
 8002360:	460b      	mov	r3, r1
 8002362:	fb08 f303 	mul.w	r3, r8, r3
 8002366:	4413      	add	r3, r2
 8002368:	4602      	mov	r2, r0
 800236a:	fba8 1202 	umull	r1, r2, r8, r2
 800236e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002372:	460a      	mov	r2, r1
 8002374:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8002378:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800237c:	4413      	add	r3, r2
 800237e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002382:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8002386:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 800238a:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 800238e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002392:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002396:	b21b      	sxth	r3, r3
 8002398:	17da      	asrs	r2, r3, #31
 800239a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800239e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80023a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80023a6:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80023aa:	462a      	mov	r2, r5
 80023ac:	fb02 f203 	mul.w	r2, r2, r3
 80023b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80023b4:	4621      	mov	r1, r4
 80023b6:	fb01 f303 	mul.w	r3, r1, r3
 80023ba:	441a      	add	r2, r3
 80023bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80023c0:	4621      	mov	r1, r4
 80023c2:	fba3 1301 	umull	r1, r3, r3, r1
 80023c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80023ca:	460b      	mov	r3, r1
 80023cc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80023d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80023d4:	18d3      	adds	r3, r2, r3
 80023d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80023da:	f04f 0000 	mov.w	r0, #0
 80023de:	f04f 0100 	mov.w	r1, #0
 80023e2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80023e6:	462b      	mov	r3, r5
 80023e8:	0459      	lsls	r1, r3, #17
 80023ea:	4623      	mov	r3, r4
 80023ec:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80023f0:	4623      	mov	r3, r4
 80023f2:	0458      	lsls	r0, r3, #17
 80023f4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80023f8:	1814      	adds	r4, r2, r0
 80023fa:	643c      	str	r4, [r7, #64]	; 0x40
 80023fc:	414b      	adcs	r3, r1
 80023fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002400:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002404:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8002408:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800240c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002410:	b21b      	sxth	r3, r3
 8002412:	17da      	asrs	r2, r3, #31
 8002414:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002418:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800241c:	f04f 0000 	mov.w	r0, #0
 8002420:	f04f 0100 	mov.w	r1, #0
 8002424:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002428:	00d9      	lsls	r1, r3, #3
 800242a:	2000      	movs	r0, #0
 800242c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8002430:	1814      	adds	r4, r2, r0
 8002432:	63bc      	str	r4, [r7, #56]	; 0x38
 8002434:	414b      	adcs	r3, r1
 8002436:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002438:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800243c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8002440:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8002444:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002448:	fb03 f102 	mul.w	r1, r3, r2
 800244c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8002450:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002454:	fb02 f303 	mul.w	r3, r2, r3
 8002458:	18ca      	adds	r2, r1, r3
 800245a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800245e:	fba3 1303 	umull	r1, r3, r3, r3
 8002462:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002466:	460b      	mov	r3, r1
 8002468:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800246c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002470:	18d3      	adds	r3, r2, r3
 8002472:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800247a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800247e:	b21b      	sxth	r3, r3
 8002480:	17da      	asrs	r2, r3, #31
 8002482:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002486:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800248a:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800248e:	462b      	mov	r3, r5
 8002490:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002494:	4642      	mov	r2, r8
 8002496:	fb02 f203 	mul.w	r2, r2, r3
 800249a:	464b      	mov	r3, r9
 800249c:	4621      	mov	r1, r4
 800249e:	fb01 f303 	mul.w	r3, r1, r3
 80024a2:	4413      	add	r3, r2
 80024a4:	4622      	mov	r2, r4
 80024a6:	4641      	mov	r1, r8
 80024a8:	fba2 1201 	umull	r1, r2, r2, r1
 80024ac:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80024b0:	460a      	mov	r2, r1
 80024b2:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80024b6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80024ba:	4413      	add	r3, r2
 80024bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80024c0:	f04f 0000 	mov.w	r0, #0
 80024c4:	f04f 0100 	mov.w	r1, #0
 80024c8:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80024cc:	4623      	mov	r3, r4
 80024ce:	0a18      	lsrs	r0, r3, #8
 80024d0:	462b      	mov	r3, r5
 80024d2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80024d6:	462b      	mov	r3, r5
 80024d8:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 80024da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80024de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80024e2:	b21b      	sxth	r3, r3
 80024e4:	17da      	asrs	r2, r3, #31
 80024e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80024ea:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80024ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80024f2:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 80024f6:	464a      	mov	r2, r9
 80024f8:	fb02 f203 	mul.w	r2, r2, r3
 80024fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002500:	4644      	mov	r4, r8
 8002502:	fb04 f303 	mul.w	r3, r4, r3
 8002506:	441a      	add	r2, r3
 8002508:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800250c:	4644      	mov	r4, r8
 800250e:	fba3 4304 	umull	r4, r3, r3, r4
 8002512:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002516:	4623      	mov	r3, r4
 8002518:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800251c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002520:	18d3      	adds	r3, r2, r3
 8002522:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002526:	f04f 0200 	mov.w	r2, #0
 800252a:	f04f 0300 	mov.w	r3, #0
 800252e:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002532:	464c      	mov	r4, r9
 8002534:	0323      	lsls	r3, r4, #12
 8002536:	4644      	mov	r4, r8
 8002538:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800253c:	4644      	mov	r4, r8
 800253e:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8002540:	1884      	adds	r4, r0, r2
 8002542:	633c      	str	r4, [r7, #48]	; 0x30
 8002544:	eb41 0303 	adc.w	r3, r1, r3
 8002548:	637b      	str	r3, [r7, #52]	; 0x34
 800254a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800254e:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8002552:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8002556:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 800255a:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 800255e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8002562:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002566:	88db      	ldrh	r3, [r3, #6]
 8002568:	b29b      	uxth	r3, r3
 800256a:	2200      	movs	r2, #0
 800256c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002570:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002574:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002578:	462b      	mov	r3, r5
 800257a:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800257e:	4642      	mov	r2, r8
 8002580:	fb02 f203 	mul.w	r2, r2, r3
 8002584:	464b      	mov	r3, r9
 8002586:	4621      	mov	r1, r4
 8002588:	fb01 f303 	mul.w	r3, r1, r3
 800258c:	4413      	add	r3, r2
 800258e:	4622      	mov	r2, r4
 8002590:	4641      	mov	r1, r8
 8002592:	fba2 1201 	umull	r1, r2, r2, r1
 8002596:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800259a:	460a      	mov	r2, r1
 800259c:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80025a0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80025a4:	4413      	add	r3, r2
 80025a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	f04f 0300 	mov.w	r3, #0
 80025b2:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80025b6:	4629      	mov	r1, r5
 80025b8:	104a      	asrs	r2, r1, #1
 80025ba:	4629      	mov	r1, r5
 80025bc:	17cb      	asrs	r3, r1, #31
 80025be:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 80025c2:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80025c6:	4313      	orrs	r3, r2
 80025c8:	d101      	bne.n	80025ce <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 80025ca:	2300      	movs	r3, #0
 80025cc:	e148      	b.n	8002860 <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 80025ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80025d2:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80025d6:	17da      	asrs	r2, r3, #31
 80025d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80025da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025dc:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80025e0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 80025e4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80025e8:	105b      	asrs	r3, r3, #1
 80025ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80025ee:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80025f2:	07db      	lsls	r3, r3, #31
 80025f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025f8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80025fc:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002600:	4621      	mov	r1, r4
 8002602:	1a89      	subs	r1, r1, r2
 8002604:	67b9      	str	r1, [r7, #120]	; 0x78
 8002606:	4629      	mov	r1, r5
 8002608:	eb61 0303 	sbc.w	r3, r1, r3
 800260c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800260e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002612:	4622      	mov	r2, r4
 8002614:	462b      	mov	r3, r5
 8002616:	1891      	adds	r1, r2, r2
 8002618:	6239      	str	r1, [r7, #32]
 800261a:	415b      	adcs	r3, r3
 800261c:	627b      	str	r3, [r7, #36]	; 0x24
 800261e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002622:	4621      	mov	r1, r4
 8002624:	1851      	adds	r1, r2, r1
 8002626:	61b9      	str	r1, [r7, #24]
 8002628:	4629      	mov	r1, r5
 800262a:	414b      	adcs	r3, r1
 800262c:	61fb      	str	r3, [r7, #28]
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	f04f 0300 	mov.w	r3, #0
 8002636:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800263a:	4649      	mov	r1, r9
 800263c:	018b      	lsls	r3, r1, #6
 800263e:	4641      	mov	r1, r8
 8002640:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002644:	4641      	mov	r1, r8
 8002646:	018a      	lsls	r2, r1, #6
 8002648:	4641      	mov	r1, r8
 800264a:	1889      	adds	r1, r1, r2
 800264c:	6139      	str	r1, [r7, #16]
 800264e:	4649      	mov	r1, r9
 8002650:	eb43 0101 	adc.w	r1, r3, r1
 8002654:	6179      	str	r1, [r7, #20]
 8002656:	f04f 0200 	mov.w	r2, #0
 800265a:	f04f 0300 	mov.w	r3, #0
 800265e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002662:	4649      	mov	r1, r9
 8002664:	008b      	lsls	r3, r1, #2
 8002666:	4641      	mov	r1, r8
 8002668:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800266c:	4641      	mov	r1, r8
 800266e:	008a      	lsls	r2, r1, #2
 8002670:	4610      	mov	r0, r2
 8002672:	4619      	mov	r1, r3
 8002674:	4603      	mov	r3, r0
 8002676:	4622      	mov	r2, r4
 8002678:	189b      	adds	r3, r3, r2
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	460b      	mov	r3, r1
 800267e:	462a      	mov	r2, r5
 8002680:	eb42 0303 	adc.w	r3, r2, r3
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	f04f 0300 	mov.w	r3, #0
 800268e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8002692:	4649      	mov	r1, r9
 8002694:	008b      	lsls	r3, r1, #2
 8002696:	4641      	mov	r1, r8
 8002698:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800269c:	4641      	mov	r1, r8
 800269e:	008a      	lsls	r2, r1, #2
 80026a0:	4610      	mov	r0, r2
 80026a2:	4619      	mov	r1, r3
 80026a4:	4603      	mov	r3, r0
 80026a6:	4622      	mov	r2, r4
 80026a8:	189b      	adds	r3, r3, r2
 80026aa:	673b      	str	r3, [r7, #112]	; 0x70
 80026ac:	462b      	mov	r3, r5
 80026ae:	460a      	mov	r2, r1
 80026b0:	eb42 0303 	adc.w	r3, r2, r3
 80026b4:	677b      	str	r3, [r7, #116]	; 0x74
 80026b6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80026ba:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80026be:	f7fe facb 	bl	8000c58 <__aeabi_ldivmod>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 80026ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026ce:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80026d2:	b21b      	sxth	r3, r3
 80026d4:	17da      	asrs	r2, r3, #31
 80026d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80026d8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80026da:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80026de:	f04f 0000 	mov.w	r0, #0
 80026e2:	f04f 0100 	mov.w	r1, #0
 80026e6:	0b50      	lsrs	r0, r2, #13
 80026e8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80026ec:	1359      	asrs	r1, r3, #13
 80026ee:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80026f2:	462b      	mov	r3, r5
 80026f4:	fb00 f203 	mul.w	r2, r0, r3
 80026f8:	4623      	mov	r3, r4
 80026fa:	fb03 f301 	mul.w	r3, r3, r1
 80026fe:	4413      	add	r3, r2
 8002700:	4622      	mov	r2, r4
 8002702:	fba2 1200 	umull	r1, r2, r2, r0
 8002706:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800270a:	460a      	mov	r2, r1
 800270c:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8002710:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002714:	4413      	add	r3, r2
 8002716:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800271a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800271e:	f04f 0000 	mov.w	r0, #0
 8002722:	f04f 0100 	mov.w	r1, #0
 8002726:	0b50      	lsrs	r0, r2, #13
 8002728:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800272c:	1359      	asrs	r1, r3, #13
 800272e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002732:	462b      	mov	r3, r5
 8002734:	fb00 f203 	mul.w	r2, r0, r3
 8002738:	4623      	mov	r3, r4
 800273a:	fb03 f301 	mul.w	r3, r3, r1
 800273e:	4413      	add	r3, r2
 8002740:	4622      	mov	r2, r4
 8002742:	fba2 1200 	umull	r1, r2, r2, r0
 8002746:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800274a:	460a      	mov	r2, r1
 800274c:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8002750:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002754:	4413      	add	r3, r2
 8002756:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	f04f 0300 	mov.w	r3, #0
 8002762:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002766:	4621      	mov	r1, r4
 8002768:	0e4a      	lsrs	r2, r1, #25
 800276a:	4629      	mov	r1, r5
 800276c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8002770:	4629      	mov	r1, r5
 8002772:	164b      	asrs	r3, r1, #25
 8002774:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8002778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800277c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002780:	b21b      	sxth	r3, r3
 8002782:	17da      	asrs	r2, r3, #31
 8002784:	663b      	str	r3, [r7, #96]	; 0x60
 8002786:	667a      	str	r2, [r7, #100]	; 0x64
 8002788:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800278c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002790:	462a      	mov	r2, r5
 8002792:	fb02 f203 	mul.w	r2, r2, r3
 8002796:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800279a:	4621      	mov	r1, r4
 800279c:	fb01 f303 	mul.w	r3, r1, r3
 80027a0:	4413      	add	r3, r2
 80027a2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80027a6:	4621      	mov	r1, r4
 80027a8:	fba2 1201 	umull	r1, r2, r2, r1
 80027ac:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80027b0:	460a      	mov	r2, r1
 80027b2:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80027b6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80027ba:	4413      	add	r3, r2
 80027bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	f04f 0300 	mov.w	r3, #0
 80027c8:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80027cc:	4621      	mov	r1, r4
 80027ce:	0cca      	lsrs	r2, r1, #19
 80027d0:	4629      	mov	r1, r5
 80027d2:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80027d6:	4629      	mov	r1, r5
 80027d8:	14cb      	asrs	r3, r1, #19
 80027da:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 80027de:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 80027e2:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80027e6:	1884      	adds	r4, r0, r2
 80027e8:	65bc      	str	r4, [r7, #88]	; 0x58
 80027ea:	eb41 0303 	adc.w	r3, r1, r3
 80027ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027f0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80027f4:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80027f8:	4621      	mov	r1, r4
 80027fa:	1889      	adds	r1, r1, r2
 80027fc:	6539      	str	r1, [r7, #80]	; 0x50
 80027fe:	4629      	mov	r1, r5
 8002800:	eb43 0101 	adc.w	r1, r3, r1
 8002804:	6579      	str	r1, [r7, #84]	; 0x54
 8002806:	f04f 0000 	mov.w	r0, #0
 800280a:	f04f 0100 	mov.w	r1, #0
 800280e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002812:	4623      	mov	r3, r4
 8002814:	0a18      	lsrs	r0, r3, #8
 8002816:	462b      	mov	r3, r5
 8002818:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800281c:	462b      	mov	r3, r5
 800281e:	1219      	asrs	r1, r3, #8
 8002820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002824:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002828:	b21b      	sxth	r3, r3
 800282a:	17da      	asrs	r2, r3, #31
 800282c:	64bb      	str	r3, [r7, #72]	; 0x48
 800282e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 800283c:	464c      	mov	r4, r9
 800283e:	0123      	lsls	r3, r4, #4
 8002840:	4644      	mov	r4, r8
 8002842:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8002846:	4644      	mov	r4, r8
 8002848:	0122      	lsls	r2, r4, #4
 800284a:	1884      	adds	r4, r0, r2
 800284c:	603c      	str	r4, [r7, #0]
 800284e:	eb41 0303 	adc.w	r3, r1, r3
 8002852:	607b      	str	r3, [r7, #4]
 8002854:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002858:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 800285c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 8002860:	4618      	mov	r0, r3
 8002862:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8002866:	46bd      	mov	sp, r7
 8002868:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800286c <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 800286c:	b480      	push	{r7}
 800286e:	b087      	sub	sp, #28
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 800287e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	039a      	lsls	r2, r3, #14
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800288a:	051b      	lsls	r3, r3, #20
 800288c:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002894:	4619      	mov	r1, r3
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	fb01 f303 	mul.w	r3, r1, r3
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80028a2:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 80028aa:	4611      	mov	r1, r2
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	fb01 f202 	mul.w	r2, r1, r2
 80028b2:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80028b4:	68f9      	ldr	r1, [r7, #12]
 80028b6:	7f09      	ldrb	r1, [r1, #28]
 80028b8:	4608      	mov	r0, r1
 80028ba:	6979      	ldr	r1, [r7, #20]
 80028bc:	fb00 f101 	mul.w	r1, r0, r1
 80028c0:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80028c2:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80028c6:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80028ca:	1292      	asrs	r2, r2, #10
 80028cc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 80028d0:	68f9      	ldr	r1, [r7, #12]
 80028d2:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 80028d6:	fb01 f202 	mul.w	r2, r1, r2
 80028da:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80028de:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80028e0:	fb02 f303 	mul.w	r3, r2, r3
 80028e4:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	13db      	asrs	r3, r3, #15
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	13d2      	asrs	r2, r2, #15
 80028ee:	fb02 f303 	mul.w	r3, r2, r3
 80028f2:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	7e12      	ldrb	r2, [r2, #24]
 80028f8:	fb02 f303 	mul.w	r3, r2, r3
 80028fc:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800290a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8002912:	bfa8      	it	ge
 8002914:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8002918:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	131b      	asrs	r3, r3, #12
}
 800291e:	4618      	mov	r0, r3
 8002920:	371c      	adds	r7, #28
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,	uint32_t *humidity) {
 800292a:	b580      	push	{r7, lr}
 800292c:	b08c      	sub	sp, #48	; 0x30
 800292e:	af00      	add	r7, sp, #0
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	607a      	str	r2, [r7, #4]
 8002936:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800293e:	2b60      	cmp	r3, #96	; 0x60
 8002940:	d007      	beq.n	8002952 <bmp280_read_fixed+0x28>
		if (humidity)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <bmp280_read_fixed+0x24>
			*humidity = 0;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 800294e:	2300      	movs	r3, #0
 8002950:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <bmp280_read_fixed+0x32>
 8002958:	2308      	movs	r3, #8
 800295a:	e000      	b.n	800295e <bmp280_read_fixed+0x34>
 800295c:	2306      	movs	r3, #6
 800295e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8002960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002962:	b2db      	uxtb	r3, r3
 8002964:	f107 0218 	add.w	r2, r7, #24
 8002968:	21f7      	movs	r1, #247	; 0xf7
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f7ff faab 	bl	8001ec6 <read_data>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <bmp280_read_fixed+0x50>
		return false;
 8002976:	2300      	movs	r3, #0
 8002978:	e038      	b.n	80029ec <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 800297a:	7e3b      	ldrb	r3, [r7, #24]
 800297c:	031a      	lsls	r2, r3, #12
 800297e:	7e7b      	ldrb	r3, [r7, #25]
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	4313      	orrs	r3, r2
 8002984:	7eba      	ldrb	r2, [r7, #26]
 8002986:	0912      	lsrs	r2, r2, #4
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	4313      	orrs	r3, r2
 800298c:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 800298e:	7efb      	ldrb	r3, [r7, #27]
 8002990:	031a      	lsls	r2, r3, #12
 8002992:	7f3b      	ldrb	r3, [r7, #28]
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	4313      	orrs	r3, r2
 8002998:	7f7a      	ldrb	r2, [r7, #29]
 800299a:	0912      	lsrs	r2, r2, #4
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	4313      	orrs	r3, r2
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 80029a2:	f107 0314 	add.w	r3, r7, #20
 80029a6:	461a      	mov	r2, r3
 80029a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f7ff fc67 	bl	800227e <compensate_temperature>
 80029b0:	4602      	mov	r2, r0
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	461a      	mov	r2, r3
 80029ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f7ff fc97 	bl	80022f0 <compensate_pressure>
 80029c2:	4602      	mov	r2, r0
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	601a      	str	r2, [r3, #0]

	if (humidity) {
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00d      	beq.n	80029ea <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 80029ce:	7fbb      	ldrb	r3, [r7, #30]
 80029d0:	021b      	lsls	r3, r3, #8
 80029d2:	7ffa      	ldrb	r2, [r7, #31]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	461a      	mov	r2, r3
 80029dc:	6a39      	ldr	r1, [r7, #32]
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f7ff ff44 	bl	800286c <compensate_humidity>
 80029e4:	4602      	mov	r2, r0
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	601a      	str	r2, [r3, #0]
	}

	return true;
 80029ea:	2301      	movs	r3, #1
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3730      	adds	r7, #48	; 0x30
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b088      	sub	sp, #32
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
 8002a00:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d002      	beq.n	8002a0e <bmp280_read_float+0x1a>
 8002a08:	f107 0314 	add.w	r3, r7, #20
 8002a0c:	e000      	b.n	8002a10 <bmp280_read_float+0x1c>
 8002a0e:	2300      	movs	r3, #0
 8002a10:	f107 0218 	add.w	r2, r7, #24
 8002a14:	f107 011c 	add.w	r1, r7, #28
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f7ff ff86 	bl	800292a <bmp280_read_fixed>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d028      	beq.n	8002a76 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	ee07 3a90 	vmov	s15, r3
 8002a2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a2e:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002a80 <bmp280_read_float+0x8c>
 8002a32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	ee07 3a90 	vmov	s15, r3
 8002a42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a46:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8002a84 <bmp280_read_float+0x90>
 8002a4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00b      	beq.n	8002a72 <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	ee07 3a90 	vmov	s15, r3
 8002a60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a64:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002a88 <bmp280_read_float+0x94>
 8002a68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <bmp280_read_float+0x84>
	}

	return false;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3720      	adds	r7, #32
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	42c80000 	.word	0x42c80000
 8002a84:	43800000 	.word	0x43800000
 8002a88:	44800000 	.word	0x44800000

08002a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a90:	4b0e      	ldr	r3, [pc, #56]	; (8002acc <HAL_Init+0x40>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a0d      	ldr	r2, [pc, #52]	; (8002acc <HAL_Init+0x40>)
 8002a96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a9c:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <HAL_Init+0x40>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a0a      	ldr	r2, [pc, #40]	; (8002acc <HAL_Init+0x40>)
 8002aa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002aa8:	4b08      	ldr	r3, [pc, #32]	; (8002acc <HAL_Init+0x40>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a07      	ldr	r2, [pc, #28]	; (8002acc <HAL_Init+0x40>)
 8002aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ab4:	2003      	movs	r0, #3
 8002ab6:	f000 f94f 	bl	8002d58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002aba:	200f      	movs	r0, #15
 8002abc:	f000 f808 	bl	8002ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ac0:	f7fe fbec 	bl	800129c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40023c00 	.word	0x40023c00

08002ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ad8:	4b12      	ldr	r3, [pc, #72]	; (8002b24 <HAL_InitTick+0x54>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4b12      	ldr	r3, [pc, #72]	; (8002b28 <HAL_InitTick+0x58>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 f967 	bl	8002dc2 <HAL_SYSTICK_Config>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e00e      	b.n	8002b1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b0f      	cmp	r3, #15
 8002b02:	d80a      	bhi.n	8002b1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b04:	2200      	movs	r2, #0
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	f04f 30ff 	mov.w	r0, #4294967295
 8002b0c:	f000 f92f 	bl	8002d6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b10:	4a06      	ldr	r2, [pc, #24]	; (8002b2c <HAL_InitTick+0x5c>)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	e000      	b.n	8002b1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	20000000 	.word	0x20000000
 8002b28:	20000018 	.word	0x20000018
 8002b2c:	20000014 	.word	0x20000014

08002b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b34:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <HAL_IncTick+0x20>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <HAL_IncTick+0x24>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4413      	add	r3, r2
 8002b40:	4a04      	ldr	r2, [pc, #16]	; (8002b54 <HAL_IncTick+0x24>)
 8002b42:	6013      	str	r3, [r2, #0]
}
 8002b44:	bf00      	nop
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	20000018 	.word	0x20000018
 8002b54:	20000410 	.word	0x20000410

08002b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b5c:	4b03      	ldr	r3, [pc, #12]	; (8002b6c <HAL_GetTick+0x14>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	20000410 	.word	0x20000410

08002b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b78:	f7ff ffee 	bl	8002b58 <HAL_GetTick>
 8002b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b88:	d005      	beq.n	8002b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b8a:	4b0a      	ldr	r3, [pc, #40]	; (8002bb4 <HAL_Delay+0x44>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4413      	add	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b96:	bf00      	nop
 8002b98:	f7ff ffde 	bl	8002b58 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d8f7      	bhi.n	8002b98 <HAL_Delay+0x28>
  {
  }
}
 8002ba8:	bf00      	nop
 8002baa:	bf00      	nop
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000018 	.word	0x20000018

08002bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bc8:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <__NVIC_SetPriorityGrouping+0x44>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002be0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bea:	4a04      	ldr	r2, [pc, #16]	; (8002bfc <__NVIC_SetPriorityGrouping+0x44>)
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	60d3      	str	r3, [r2, #12]
}
 8002bf0:	bf00      	nop
 8002bf2:	3714      	adds	r7, #20
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	e000ed00 	.word	0xe000ed00

08002c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c04:	4b04      	ldr	r3, [pc, #16]	; (8002c18 <__NVIC_GetPriorityGrouping+0x18>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	0a1b      	lsrs	r3, r3, #8
 8002c0a:	f003 0307 	and.w	r3, r3, #7
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	e000ed00 	.word	0xe000ed00

08002c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	db0b      	blt.n	8002c46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c2e:	79fb      	ldrb	r3, [r7, #7]
 8002c30:	f003 021f 	and.w	r2, r3, #31
 8002c34:	4907      	ldr	r1, [pc, #28]	; (8002c54 <__NVIC_EnableIRQ+0x38>)
 8002c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3a:	095b      	lsrs	r3, r3, #5
 8002c3c:	2001      	movs	r0, #1
 8002c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	e000e100 	.word	0xe000e100

08002c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	6039      	str	r1, [r7, #0]
 8002c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	db0a      	blt.n	8002c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	490c      	ldr	r1, [pc, #48]	; (8002ca4 <__NVIC_SetPriority+0x4c>)
 8002c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c76:	0112      	lsls	r2, r2, #4
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c80:	e00a      	b.n	8002c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	4908      	ldr	r1, [pc, #32]	; (8002ca8 <__NVIC_SetPriority+0x50>)
 8002c88:	79fb      	ldrb	r3, [r7, #7]
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	3b04      	subs	r3, #4
 8002c90:	0112      	lsls	r2, r2, #4
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	440b      	add	r3, r1
 8002c96:	761a      	strb	r2, [r3, #24]
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	e000e100 	.word	0xe000e100
 8002ca8:	e000ed00 	.word	0xe000ed00

08002cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b089      	sub	sp, #36	; 0x24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	f1c3 0307 	rsb	r3, r3, #7
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	bf28      	it	cs
 8002cca:	2304      	movcs	r3, #4
 8002ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	2b06      	cmp	r3, #6
 8002cd4:	d902      	bls.n	8002cdc <NVIC_EncodePriority+0x30>
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	3b03      	subs	r3, #3
 8002cda:	e000      	b.n	8002cde <NVIC_EncodePriority+0x32>
 8002cdc:	2300      	movs	r3, #0
 8002cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	43da      	mvns	r2, r3
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	401a      	ands	r2, r3
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfe:	43d9      	mvns	r1, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d04:	4313      	orrs	r3, r2
         );
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3724      	adds	r7, #36	; 0x24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
	...

08002d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d24:	d301      	bcc.n	8002d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d26:	2301      	movs	r3, #1
 8002d28:	e00f      	b.n	8002d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d2a:	4a0a      	ldr	r2, [pc, #40]	; (8002d54 <SysTick_Config+0x40>)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d32:	210f      	movs	r1, #15
 8002d34:	f04f 30ff 	mov.w	r0, #4294967295
 8002d38:	f7ff ff8e 	bl	8002c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d3c:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <SysTick_Config+0x40>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d42:	4b04      	ldr	r3, [pc, #16]	; (8002d54 <SysTick_Config+0x40>)
 8002d44:	2207      	movs	r2, #7
 8002d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	e000e010 	.word	0xe000e010

08002d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f7ff ff29 	bl	8002bb8 <__NVIC_SetPriorityGrouping>
}
 8002d66:	bf00      	nop
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b086      	sub	sp, #24
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	4603      	mov	r3, r0
 8002d76:	60b9      	str	r1, [r7, #8]
 8002d78:	607a      	str	r2, [r7, #4]
 8002d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d80:	f7ff ff3e 	bl	8002c00 <__NVIC_GetPriorityGrouping>
 8002d84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	68b9      	ldr	r1, [r7, #8]
 8002d8a:	6978      	ldr	r0, [r7, #20]
 8002d8c:	f7ff ff8e 	bl	8002cac <NVIC_EncodePriority>
 8002d90:	4602      	mov	r2, r0
 8002d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d96:	4611      	mov	r1, r2
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff ff5d 	bl	8002c58 <__NVIC_SetPriority>
}
 8002d9e:	bf00      	nop
 8002da0:	3718      	adds	r7, #24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b082      	sub	sp, #8
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	4603      	mov	r3, r0
 8002dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff ff31 	bl	8002c1c <__NVIC_EnableIRQ>
}
 8002dba:	bf00      	nop
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7ff ffa2 	bl	8002d14 <SysTick_Config>
 8002dd0:	4603      	mov	r3, r0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b084      	sub	sp, #16
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002de8:	f7ff feb6 	bl	8002b58 <HAL_GetTick>
 8002dec:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d008      	beq.n	8002e0c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2280      	movs	r2, #128	; 0x80
 8002dfe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e052      	b.n	8002eb2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 0216 	bic.w	r2, r2, #22
 8002e1a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695a      	ldr	r2, [r3, #20]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e2a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d103      	bne.n	8002e3c <HAL_DMA_Abort+0x62>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d007      	beq.n	8002e4c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0208 	bic.w	r2, r2, #8
 8002e4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0201 	bic.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e5c:	e013      	b.n	8002e86 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e5e:	f7ff fe7b 	bl	8002b58 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b05      	cmp	r3, #5
 8002e6a:	d90c      	bls.n	8002e86 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2203      	movs	r2, #3
 8002e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e015      	b.n	8002eb2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1e4      	bne.n	8002e5e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e98:	223f      	movs	r2, #63	; 0x3f
 8002e9a:	409a      	lsls	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b083      	sub	sp, #12
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d004      	beq.n	8002ed8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2280      	movs	r2, #128	; 0x80
 8002ed2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e00c      	b.n	8002ef2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2205      	movs	r2, #5
 8002edc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0201 	bic.w	r2, r2, #1
 8002eee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
	...

08002f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b089      	sub	sp, #36	; 0x24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f16:	2300      	movs	r3, #0
 8002f18:	61fb      	str	r3, [r7, #28]
 8002f1a:	e159      	b.n	80031d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	f040 8148 	bne.w	80031ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d005      	beq.n	8002f52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d130      	bne.n	8002fb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43db      	mvns	r3, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4013      	ands	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f88:	2201      	movs	r2, #1
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	43db      	mvns	r3, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4013      	ands	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	091b      	lsrs	r3, r3, #4
 8002f9e:	f003 0201 	and.w	r2, r3, #1
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f003 0303 	and.w	r3, r3, #3
 8002fbc:	2b03      	cmp	r3, #3
 8002fbe:	d017      	beq.n	8002ff0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	2203      	movs	r2, #3
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f003 0303 	and.w	r3, r3, #3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d123      	bne.n	8003044 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	08da      	lsrs	r2, r3, #3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3208      	adds	r2, #8
 8003004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003008:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	f003 0307 	and.w	r3, r3, #7
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	220f      	movs	r2, #15
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4013      	ands	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	691a      	ldr	r2, [r3, #16]
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4313      	orrs	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	08da      	lsrs	r2, r3, #3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3208      	adds	r2, #8
 800303e:	69b9      	ldr	r1, [r7, #24]
 8003040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	2203      	movs	r2, #3
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	43db      	mvns	r3, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4013      	ands	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f003 0203 	and.w	r2, r3, #3
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4313      	orrs	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 80a2 	beq.w	80031ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003086:	2300      	movs	r3, #0
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	4b57      	ldr	r3, [pc, #348]	; (80031e8 <HAL_GPIO_Init+0x2e8>)
 800308c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308e:	4a56      	ldr	r2, [pc, #344]	; (80031e8 <HAL_GPIO_Init+0x2e8>)
 8003090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003094:	6453      	str	r3, [r2, #68]	; 0x44
 8003096:	4b54      	ldr	r3, [pc, #336]	; (80031e8 <HAL_GPIO_Init+0x2e8>)
 8003098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030a2:	4a52      	ldr	r2, [pc, #328]	; (80031ec <HAL_GPIO_Init+0x2ec>)
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	089b      	lsrs	r3, r3, #2
 80030a8:	3302      	adds	r3, #2
 80030aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	220f      	movs	r2, #15
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43db      	mvns	r3, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4013      	ands	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a49      	ldr	r2, [pc, #292]	; (80031f0 <HAL_GPIO_Init+0x2f0>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d019      	beq.n	8003102 <HAL_GPIO_Init+0x202>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a48      	ldr	r2, [pc, #288]	; (80031f4 <HAL_GPIO_Init+0x2f4>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d013      	beq.n	80030fe <HAL_GPIO_Init+0x1fe>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a47      	ldr	r2, [pc, #284]	; (80031f8 <HAL_GPIO_Init+0x2f8>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d00d      	beq.n	80030fa <HAL_GPIO_Init+0x1fa>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a46      	ldr	r2, [pc, #280]	; (80031fc <HAL_GPIO_Init+0x2fc>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d007      	beq.n	80030f6 <HAL_GPIO_Init+0x1f6>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a45      	ldr	r2, [pc, #276]	; (8003200 <HAL_GPIO_Init+0x300>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d101      	bne.n	80030f2 <HAL_GPIO_Init+0x1f2>
 80030ee:	2304      	movs	r3, #4
 80030f0:	e008      	b.n	8003104 <HAL_GPIO_Init+0x204>
 80030f2:	2307      	movs	r3, #7
 80030f4:	e006      	b.n	8003104 <HAL_GPIO_Init+0x204>
 80030f6:	2303      	movs	r3, #3
 80030f8:	e004      	b.n	8003104 <HAL_GPIO_Init+0x204>
 80030fa:	2302      	movs	r3, #2
 80030fc:	e002      	b.n	8003104 <HAL_GPIO_Init+0x204>
 80030fe:	2301      	movs	r3, #1
 8003100:	e000      	b.n	8003104 <HAL_GPIO_Init+0x204>
 8003102:	2300      	movs	r3, #0
 8003104:	69fa      	ldr	r2, [r7, #28]
 8003106:	f002 0203 	and.w	r2, r2, #3
 800310a:	0092      	lsls	r2, r2, #2
 800310c:	4093      	lsls	r3, r2
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4313      	orrs	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003114:	4935      	ldr	r1, [pc, #212]	; (80031ec <HAL_GPIO_Init+0x2ec>)
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	089b      	lsrs	r3, r3, #2
 800311a:	3302      	adds	r3, #2
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003122:	4b38      	ldr	r3, [pc, #224]	; (8003204 <HAL_GPIO_Init+0x304>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	43db      	mvns	r3, r3
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	4013      	ands	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	4313      	orrs	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003146:	4a2f      	ldr	r2, [pc, #188]	; (8003204 <HAL_GPIO_Init+0x304>)
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800314c:	4b2d      	ldr	r3, [pc, #180]	; (8003204 <HAL_GPIO_Init+0x304>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	43db      	mvns	r3, r3
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	4013      	ands	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	4313      	orrs	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003170:	4a24      	ldr	r2, [pc, #144]	; (8003204 <HAL_GPIO_Init+0x304>)
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003176:	4b23      	ldr	r3, [pc, #140]	; (8003204 <HAL_GPIO_Init+0x304>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	43db      	mvns	r3, r3
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4013      	ands	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	4313      	orrs	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800319a:	4a1a      	ldr	r2, [pc, #104]	; (8003204 <HAL_GPIO_Init+0x304>)
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031a0:	4b18      	ldr	r3, [pc, #96]	; (8003204 <HAL_GPIO_Init+0x304>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	43db      	mvns	r3, r3
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4013      	ands	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031c4:	4a0f      	ldr	r2, [pc, #60]	; (8003204 <HAL_GPIO_Init+0x304>)
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	3301      	adds	r3, #1
 80031ce:	61fb      	str	r3, [r7, #28]
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	2b0f      	cmp	r3, #15
 80031d4:	f67f aea2 	bls.w	8002f1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031d8:	bf00      	nop
 80031da:	bf00      	nop
 80031dc:	3724      	adds	r7, #36	; 0x24
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	40023800 	.word	0x40023800
 80031ec:	40013800 	.word	0x40013800
 80031f0:	40020000 	.word	0x40020000
 80031f4:	40020400 	.word	0x40020400
 80031f8:	40020800 	.word	0x40020800
 80031fc:	40020c00 	.word	0x40020c00
 8003200:	40021000 	.word	0x40021000
 8003204:	40013c00 	.word	0x40013c00

08003208 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	460b      	mov	r3, r1
 8003212:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	887b      	ldrh	r3, [r7, #2]
 800321a:	4013      	ands	r3, r2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d002      	beq.n	8003226 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003220:	2301      	movs	r3, #1
 8003222:	73fb      	strb	r3, [r7, #15]
 8003224:	e001      	b.n	800322a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003226:	2300      	movs	r3, #0
 8003228:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800322a:	7bfb      	ldrb	r3, [r7, #15]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	807b      	strh	r3, [r7, #2]
 8003244:	4613      	mov	r3, r2
 8003246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003248:	787b      	ldrb	r3, [r7, #1]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800324e:	887a      	ldrh	r2, [r7, #2]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003254:	e003      	b.n	800325e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003256:	887b      	ldrh	r3, [r7, #2]
 8003258:	041a      	lsls	r2, r3, #16
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	619a      	str	r2, [r3, #24]
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800326a:	b480      	push	{r7}
 800326c:	b085      	sub	sp, #20
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
 8003272:	460b      	mov	r3, r1
 8003274:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800327c:	887a      	ldrh	r2, [r7, #2]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	4013      	ands	r3, r2
 8003282:	041a      	lsls	r2, r3, #16
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	43d9      	mvns	r1, r3
 8003288:	887b      	ldrh	r3, [r7, #2]
 800328a:	400b      	ands	r3, r1
 800328c:	431a      	orrs	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	619a      	str	r2, [r3, #24]
}
 8003292:	bf00      	nop
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
	...

080032a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e12b      	b.n	800350a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d106      	bne.n	80032cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7fe f810 	bl	80012ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2224      	movs	r2, #36	; 0x24
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0201 	bic.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003302:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003304:	f001 fbbc 	bl	8004a80 <HAL_RCC_GetPCLK1Freq>
 8003308:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	4a81      	ldr	r2, [pc, #516]	; (8003514 <HAL_I2C_Init+0x274>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d807      	bhi.n	8003324 <HAL_I2C_Init+0x84>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4a80      	ldr	r2, [pc, #512]	; (8003518 <HAL_I2C_Init+0x278>)
 8003318:	4293      	cmp	r3, r2
 800331a:	bf94      	ite	ls
 800331c:	2301      	movls	r3, #1
 800331e:	2300      	movhi	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	e006      	b.n	8003332 <HAL_I2C_Init+0x92>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4a7d      	ldr	r2, [pc, #500]	; (800351c <HAL_I2C_Init+0x27c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	bf94      	ite	ls
 800332c:	2301      	movls	r3, #1
 800332e:	2300      	movhi	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e0e7      	b.n	800350a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4a78      	ldr	r2, [pc, #480]	; (8003520 <HAL_I2C_Init+0x280>)
 800333e:	fba2 2303 	umull	r2, r3, r2, r3
 8003342:	0c9b      	lsrs	r3, r3, #18
 8003344:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	430a      	orrs	r2, r1
 8003358:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	4a6a      	ldr	r2, [pc, #424]	; (8003514 <HAL_I2C_Init+0x274>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d802      	bhi.n	8003374 <HAL_I2C_Init+0xd4>
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	3301      	adds	r3, #1
 8003372:	e009      	b.n	8003388 <HAL_I2C_Init+0xe8>
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800337a:	fb02 f303 	mul.w	r3, r2, r3
 800337e:	4a69      	ldr	r2, [pc, #420]	; (8003524 <HAL_I2C_Init+0x284>)
 8003380:	fba2 2303 	umull	r2, r3, r2, r3
 8003384:	099b      	lsrs	r3, r3, #6
 8003386:	3301      	adds	r3, #1
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6812      	ldr	r2, [r2, #0]
 800338c:	430b      	orrs	r3, r1
 800338e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800339a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	495c      	ldr	r1, [pc, #368]	; (8003514 <HAL_I2C_Init+0x274>)
 80033a4:	428b      	cmp	r3, r1
 80033a6:	d819      	bhi.n	80033dc <HAL_I2C_Init+0x13c>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	1e59      	subs	r1, r3, #1
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80033b6:	1c59      	adds	r1, r3, #1
 80033b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033bc:	400b      	ands	r3, r1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00a      	beq.n	80033d8 <HAL_I2C_Init+0x138>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	1e59      	subs	r1, r3, #1
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80033d0:	3301      	adds	r3, #1
 80033d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d6:	e051      	b.n	800347c <HAL_I2C_Init+0x1dc>
 80033d8:	2304      	movs	r3, #4
 80033da:	e04f      	b.n	800347c <HAL_I2C_Init+0x1dc>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d111      	bne.n	8003408 <HAL_I2C_Init+0x168>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	1e58      	subs	r0, r3, #1
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6859      	ldr	r1, [r3, #4]
 80033ec:	460b      	mov	r3, r1
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	440b      	add	r3, r1
 80033f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80033f6:	3301      	adds	r3, #1
 80033f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	bf0c      	ite	eq
 8003400:	2301      	moveq	r3, #1
 8003402:	2300      	movne	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	e012      	b.n	800342e <HAL_I2C_Init+0x18e>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	1e58      	subs	r0, r3, #1
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6859      	ldr	r1, [r3, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	0099      	lsls	r1, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	fbb0 f3f3 	udiv	r3, r0, r3
 800341e:	3301      	adds	r3, #1
 8003420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003424:	2b00      	cmp	r3, #0
 8003426:	bf0c      	ite	eq
 8003428:	2301      	moveq	r3, #1
 800342a:	2300      	movne	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <HAL_I2C_Init+0x196>
 8003432:	2301      	movs	r3, #1
 8003434:	e022      	b.n	800347c <HAL_I2C_Init+0x1dc>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10e      	bne.n	800345c <HAL_I2C_Init+0x1bc>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	1e58      	subs	r0, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6859      	ldr	r1, [r3, #4]
 8003446:	460b      	mov	r3, r1
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	440b      	add	r3, r1
 800344c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003450:	3301      	adds	r3, #1
 8003452:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800345a:	e00f      	b.n	800347c <HAL_I2C_Init+0x1dc>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	1e58      	subs	r0, r3, #1
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6859      	ldr	r1, [r3, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	0099      	lsls	r1, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003472:	3301      	adds	r3, #1
 8003474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003478:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	6809      	ldr	r1, [r1, #0]
 8003480:	4313      	orrs	r3, r2
 8003482:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69da      	ldr	r2, [r3, #28]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6911      	ldr	r1, [r2, #16]
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	68d2      	ldr	r2, [r2, #12]
 80034b6:	4311      	orrs	r1, r2
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6812      	ldr	r2, [r2, #0]
 80034bc:	430b      	orrs	r3, r1
 80034be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695a      	ldr	r2, [r3, #20]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0201 	orr.w	r2, r2, #1
 80034ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2220      	movs	r2, #32
 80034f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	000186a0 	.word	0x000186a0
 8003518:	001e847f 	.word	0x001e847f
 800351c:	003d08ff 	.word	0x003d08ff
 8003520:	431bde83 	.word	0x431bde83
 8003524:	10624dd3 	.word	0x10624dd3

08003528 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b088      	sub	sp, #32
 800352c:	af02      	add	r7, sp, #8
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	4608      	mov	r0, r1
 8003532:	4611      	mov	r1, r2
 8003534:	461a      	mov	r2, r3
 8003536:	4603      	mov	r3, r0
 8003538:	817b      	strh	r3, [r7, #10]
 800353a:	460b      	mov	r3, r1
 800353c:	813b      	strh	r3, [r7, #8]
 800353e:	4613      	mov	r3, r2
 8003540:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003542:	f7ff fb09 	bl	8002b58 <HAL_GetTick>
 8003546:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b20      	cmp	r3, #32
 8003552:	f040 80d9 	bne.w	8003708 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	2319      	movs	r3, #25
 800355c:	2201      	movs	r2, #1
 800355e:	496d      	ldr	r1, [pc, #436]	; (8003714 <HAL_I2C_Mem_Write+0x1ec>)
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 fc7f 	bl	8003e64 <I2C_WaitOnFlagUntilTimeout>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800356c:	2302      	movs	r3, #2
 800356e:	e0cc      	b.n	800370a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003576:	2b01      	cmp	r3, #1
 8003578:	d101      	bne.n	800357e <HAL_I2C_Mem_Write+0x56>
 800357a:	2302      	movs	r3, #2
 800357c:	e0c5      	b.n	800370a <HAL_I2C_Mem_Write+0x1e2>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	2b01      	cmp	r3, #1
 8003592:	d007      	beq.n	80035a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 0201 	orr.w	r2, r2, #1
 80035a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2221      	movs	r2, #33	; 0x21
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2240      	movs	r2, #64	; 0x40
 80035c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6a3a      	ldr	r2, [r7, #32]
 80035ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4a4d      	ldr	r2, [pc, #308]	; (8003718 <HAL_I2C_Mem_Write+0x1f0>)
 80035e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035e6:	88f8      	ldrh	r0, [r7, #6]
 80035e8:	893a      	ldrh	r2, [r7, #8]
 80035ea:	8979      	ldrh	r1, [r7, #10]
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	9301      	str	r3, [sp, #4]
 80035f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	4603      	mov	r3, r0
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 fab6 	bl	8003b68 <I2C_RequestMemoryWrite>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d052      	beq.n	80036a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e081      	b.n	800370a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 fd00 	bl	8004010 <I2C_WaitOnTXEFlagUntilTimeout>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00d      	beq.n	8003632 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	2b04      	cmp	r3, #4
 800361c:	d107      	bne.n	800362e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800362c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e06b      	b.n	800370a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	781a      	ldrb	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364c:	3b01      	subs	r3, #1
 800364e:	b29a      	uxth	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003658:	b29b      	uxth	r3, r3
 800365a:	3b01      	subs	r3, #1
 800365c:	b29a      	uxth	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b04      	cmp	r3, #4
 800366e:	d11b      	bne.n	80036a8 <HAL_I2C_Mem_Write+0x180>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003674:	2b00      	cmp	r3, #0
 8003676:	d017      	beq.n	80036a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	781a      	ldrb	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003692:	3b01      	subs	r3, #1
 8003694:	b29a      	uxth	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369e:	b29b      	uxth	r3, r3
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1aa      	bne.n	8003606 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 fcec 	bl	8004092 <I2C_WaitOnBTFFlagUntilTimeout>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00d      	beq.n	80036dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	d107      	bne.n	80036d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e016      	b.n	800370a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2220      	movs	r2, #32
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	e000      	b.n	800370a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003708:	2302      	movs	r3, #2
  }
}
 800370a:	4618      	mov	r0, r3
 800370c:	3718      	adds	r7, #24
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	00100002 	.word	0x00100002
 8003718:	ffff0000 	.word	0xffff0000

0800371c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b08c      	sub	sp, #48	; 0x30
 8003720:	af02      	add	r7, sp, #8
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	4608      	mov	r0, r1
 8003726:	4611      	mov	r1, r2
 8003728:	461a      	mov	r2, r3
 800372a:	4603      	mov	r3, r0
 800372c:	817b      	strh	r3, [r7, #10]
 800372e:	460b      	mov	r3, r1
 8003730:	813b      	strh	r3, [r7, #8]
 8003732:	4613      	mov	r3, r2
 8003734:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003736:	f7ff fa0f 	bl	8002b58 <HAL_GetTick>
 800373a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b20      	cmp	r3, #32
 8003746:	f040 8208 	bne.w	8003b5a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	2319      	movs	r3, #25
 8003750:	2201      	movs	r2, #1
 8003752:	497b      	ldr	r1, [pc, #492]	; (8003940 <HAL_I2C_Mem_Read+0x224>)
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 fb85 	bl	8003e64 <I2C_WaitOnFlagUntilTimeout>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003760:	2302      	movs	r3, #2
 8003762:	e1fb      	b.n	8003b5c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800376a:	2b01      	cmp	r3, #1
 800376c:	d101      	bne.n	8003772 <HAL_I2C_Mem_Read+0x56>
 800376e:	2302      	movs	r3, #2
 8003770:	e1f4      	b.n	8003b5c <HAL_I2C_Mem_Read+0x440>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b01      	cmp	r3, #1
 8003786:	d007      	beq.n	8003798 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0201 	orr.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2222      	movs	r2, #34	; 0x22
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2240      	movs	r2, #64	; 0x40
 80037b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80037c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4a5b      	ldr	r2, [pc, #364]	; (8003944 <HAL_I2C_Mem_Read+0x228>)
 80037d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037da:	88f8      	ldrh	r0, [r7, #6]
 80037dc:	893a      	ldrh	r2, [r7, #8]
 80037de:	8979      	ldrh	r1, [r7, #10]
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	9301      	str	r3, [sp, #4]
 80037e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e6:	9300      	str	r3, [sp, #0]
 80037e8:	4603      	mov	r3, r0
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f000 fa52 	bl	8003c94 <I2C_RequestMemoryRead>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e1b0      	b.n	8003b5c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d113      	bne.n	800382a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003802:	2300      	movs	r3, #0
 8003804:	623b      	str	r3, [r7, #32]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	623b      	str	r3, [r7, #32]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	623b      	str	r3, [r7, #32]
 8003816:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	e184      	b.n	8003b34 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800382e:	2b01      	cmp	r3, #1
 8003830:	d11b      	bne.n	800386a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003840:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003842:	2300      	movs	r3, #0
 8003844:	61fb      	str	r3, [r7, #28]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	61fb      	str	r3, [r7, #28]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	61fb      	str	r3, [r7, #28]
 8003856:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	e164      	b.n	8003b34 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386e:	2b02      	cmp	r3, #2
 8003870:	d11b      	bne.n	80038aa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003880:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003890:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003892:	2300      	movs	r3, #0
 8003894:	61bb      	str	r3, [r7, #24]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	61bb      	str	r3, [r7, #24]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	61bb      	str	r3, [r7, #24]
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	e144      	b.n	8003b34 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038aa:	2300      	movs	r3, #0
 80038ac:	617b      	str	r3, [r7, #20]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	617b      	str	r3, [r7, #20]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	617b      	str	r3, [r7, #20]
 80038be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80038c0:	e138      	b.n	8003b34 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c6:	2b03      	cmp	r3, #3
 80038c8:	f200 80f1 	bhi.w	8003aae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d123      	bne.n	800391c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 fc1b 	bl	8004114 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e139      	b.n	8003b5c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	691a      	ldr	r2, [r3, #16]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	b2d2      	uxtb	r2, r2
 80038f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	1c5a      	adds	r2, r3, #1
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003904:	3b01      	subs	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003910:	b29b      	uxth	r3, r3
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	855a      	strh	r2, [r3, #42]	; 0x2a
 800391a:	e10b      	b.n	8003b34 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003920:	2b02      	cmp	r3, #2
 8003922:	d14e      	bne.n	80039c2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392a:	2200      	movs	r2, #0
 800392c:	4906      	ldr	r1, [pc, #24]	; (8003948 <HAL_I2C_Mem_Read+0x22c>)
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 fa98 	bl	8003e64 <I2C_WaitOnFlagUntilTimeout>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d008      	beq.n	800394c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e10e      	b.n	8003b5c <HAL_I2C_Mem_Read+0x440>
 800393e:	bf00      	nop
 8003940:	00100002 	.word	0x00100002
 8003944:	ffff0000 	.word	0xffff0000
 8003948:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800395a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	691a      	ldr	r2, [r3, #16]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	1c5a      	adds	r2, r3, #1
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003978:	3b01      	subs	r3, #1
 800397a:	b29a      	uxth	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003984:	b29b      	uxth	r3, r3
 8003986:	3b01      	subs	r3, #1
 8003988:	b29a      	uxth	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	691a      	ldr	r2, [r3, #16]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	b2d2      	uxtb	r2, r2
 800399a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	1c5a      	adds	r2, r3, #1
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039aa:	3b01      	subs	r3, #1
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	3b01      	subs	r3, #1
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039c0:	e0b8      	b.n	8003b34 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c8:	2200      	movs	r2, #0
 80039ca:	4966      	ldr	r1, [pc, #408]	; (8003b64 <HAL_I2C_Mem_Read+0x448>)
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f000 fa49 	bl	8003e64 <I2C_WaitOnFlagUntilTimeout>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e0bf      	b.n	8003b5c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	691a      	ldr	r2, [r3, #16]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	1c5a      	adds	r2, r3, #1
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a24:	2200      	movs	r2, #0
 8003a26:	494f      	ldr	r1, [pc, #316]	; (8003b64 <HAL_I2C_Mem_Read+0x448>)
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f000 fa1b 	bl	8003e64 <I2C_WaitOnFlagUntilTimeout>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e091      	b.n	8003b5c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	691a      	ldr	r2, [r3, #16]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a52:	b2d2      	uxtb	r2, r2
 8003a54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	1c5a      	adds	r2, r3, #1
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a64:	3b01      	subs	r3, #1
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	3b01      	subs	r3, #1
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	691a      	ldr	r2, [r3, #16]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	b2d2      	uxtb	r2, r2
 8003a86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	1c5a      	adds	r2, r3, #1
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003aac:	e042      	b.n	8003b34 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 fb2e 	bl	8004114 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e04c      	b.n	8003b5c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	691a      	ldr	r2, [r3, #16]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	b2d2      	uxtb	r2, r2
 8003ace:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad4:	1c5a      	adds	r2, r3, #1
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	3b01      	subs	r3, #1
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	f003 0304 	and.w	r3, r3, #4
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	d118      	bne.n	8003b34 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	691a      	ldr	r2, [r3, #16]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	b2d2      	uxtb	r2, r2
 8003b0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	1c5a      	adds	r2, r3, #1
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f47f aec2 	bne.w	80038c2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2220      	movs	r2, #32
 8003b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b56:	2300      	movs	r3, #0
 8003b58:	e000      	b.n	8003b5c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003b5a:	2302      	movs	r3, #2
  }
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3728      	adds	r7, #40	; 0x28
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	00010004 	.word	0x00010004

08003b68 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b088      	sub	sp, #32
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	4608      	mov	r0, r1
 8003b72:	4611      	mov	r1, r2
 8003b74:	461a      	mov	r2, r3
 8003b76:	4603      	mov	r3, r0
 8003b78:	817b      	strh	r3, [r7, #10]
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	813b      	strh	r3, [r7, #8]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	6a3b      	ldr	r3, [r7, #32]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 f960 	bl	8003e64 <I2C_WaitOnFlagUntilTimeout>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00d      	beq.n	8003bc6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bb8:	d103      	bne.n	8003bc2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bc0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e05f      	b.n	8003c86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bc6:	897b      	ldrh	r3, [r7, #10]
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	461a      	mov	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bd4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	6a3a      	ldr	r2, [r7, #32]
 8003bda:	492d      	ldr	r1, [pc, #180]	; (8003c90 <I2C_RequestMemoryWrite+0x128>)
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f000 f998 	bl	8003f12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d001      	beq.n	8003bec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e04c      	b.n	8003c86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bec:	2300      	movs	r3, #0
 8003bee:	617b      	str	r3, [r7, #20]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	617b      	str	r3, [r7, #20]
 8003c00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c04:	6a39      	ldr	r1, [r7, #32]
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 fa02 	bl	8004010 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00d      	beq.n	8003c2e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d107      	bne.n	8003c2a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e02b      	b.n	8003c86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c2e:	88fb      	ldrh	r3, [r7, #6]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d105      	bne.n	8003c40 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c34:	893b      	ldrh	r3, [r7, #8]
 8003c36:	b2da      	uxtb	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	611a      	str	r2, [r3, #16]
 8003c3e:	e021      	b.n	8003c84 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c40:	893b      	ldrh	r3, [r7, #8]
 8003c42:	0a1b      	lsrs	r3, r3, #8
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c50:	6a39      	ldr	r1, [r7, #32]
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f000 f9dc 	bl	8004010 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00d      	beq.n	8003c7a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	d107      	bne.n	8003c76 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e005      	b.n	8003c86 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c7a:	893b      	ldrh	r3, [r7, #8]
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3718      	adds	r7, #24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	00010002 	.word	0x00010002

08003c94 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b088      	sub	sp, #32
 8003c98:	af02      	add	r7, sp, #8
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	4608      	mov	r0, r1
 8003c9e:	4611      	mov	r1, r2
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	817b      	strh	r3, [r7, #10]
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	813b      	strh	r3, [r7, #8]
 8003caa:	4613      	mov	r3, r2
 8003cac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cbc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ccc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	6a3b      	ldr	r3, [r7, #32]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 f8c2 	bl	8003e64 <I2C_WaitOnFlagUntilTimeout>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00d      	beq.n	8003d02 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cf4:	d103      	bne.n	8003cfe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cfc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e0aa      	b.n	8003e58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d02:	897b      	ldrh	r3, [r7, #10]
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	461a      	mov	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d14:	6a3a      	ldr	r2, [r7, #32]
 8003d16:	4952      	ldr	r1, [pc, #328]	; (8003e60 <I2C_RequestMemoryRead+0x1cc>)
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f000 f8fa 	bl	8003f12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e097      	b.n	8003e58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	617b      	str	r3, [r7, #20]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d40:	6a39      	ldr	r1, [r7, #32]
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 f964 	bl	8004010 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00d      	beq.n	8003d6a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d107      	bne.n	8003d66 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e076      	b.n	8003e58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d6a:	88fb      	ldrh	r3, [r7, #6]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d105      	bne.n	8003d7c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d70:	893b      	ldrh	r3, [r7, #8]
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	611a      	str	r2, [r3, #16]
 8003d7a:	e021      	b.n	8003dc0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d7c:	893b      	ldrh	r3, [r7, #8]
 8003d7e:	0a1b      	lsrs	r3, r3, #8
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d8c:	6a39      	ldr	r1, [r7, #32]
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 f93e 	bl	8004010 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00d      	beq.n	8003db6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d107      	bne.n	8003db2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003db0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e050      	b.n	8003e58 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003db6:	893b      	ldrh	r3, [r7, #8]
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc2:	6a39      	ldr	r1, [r7, #32]
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 f923 	bl	8004010 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00d      	beq.n	8003dec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d107      	bne.n	8003de8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e035      	b.n	8003e58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dfa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	6a3b      	ldr	r3, [r7, #32]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f000 f82b 	bl	8003e64 <I2C_WaitOnFlagUntilTimeout>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00d      	beq.n	8003e30 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e22:	d103      	bne.n	8003e2c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e013      	b.n	8003e58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e30:	897b      	ldrh	r3, [r7, #10]
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	f043 0301 	orr.w	r3, r3, #1
 8003e38:	b2da      	uxtb	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	6a3a      	ldr	r2, [r7, #32]
 8003e44:	4906      	ldr	r1, [pc, #24]	; (8003e60 <I2C_RequestMemoryRead+0x1cc>)
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 f863 	bl	8003f12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e000      	b.n	8003e58 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3718      	adds	r7, #24
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	00010002 	.word	0x00010002

08003e64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	603b      	str	r3, [r7, #0]
 8003e70:	4613      	mov	r3, r2
 8003e72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e74:	e025      	b.n	8003ec2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7c:	d021      	beq.n	8003ec2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e7e:	f7fe fe6b 	bl	8002b58 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d302      	bcc.n	8003e94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d116      	bne.n	8003ec2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	f043 0220 	orr.w	r2, r3, #32
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e023      	b.n	8003f0a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	0c1b      	lsrs	r3, r3, #16
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d10d      	bne.n	8003ee8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	43da      	mvns	r2, r3
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	bf0c      	ite	eq
 8003ede:	2301      	moveq	r3, #1
 8003ee0:	2300      	movne	r3, #0
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	e00c      	b.n	8003f02 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	43da      	mvns	r2, r3
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	bf0c      	ite	eq
 8003efa:	2301      	moveq	r3, #1
 8003efc:	2300      	movne	r3, #0
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	461a      	mov	r2, r3
 8003f02:	79fb      	ldrb	r3, [r7, #7]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d0b6      	beq.n	8003e76 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b084      	sub	sp, #16
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	60f8      	str	r0, [r7, #12]
 8003f1a:	60b9      	str	r1, [r7, #8]
 8003f1c:	607a      	str	r2, [r7, #4]
 8003f1e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f20:	e051      	b.n	8003fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f30:	d123      	bne.n	8003f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f40:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f4a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2220      	movs	r2, #32
 8003f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	f043 0204 	orr.w	r2, r3, #4
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e046      	b.n	8004008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f80:	d021      	beq.n	8003fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f82:	f7fe fde9 	bl	8002b58 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d302      	bcc.n	8003f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d116      	bne.n	8003fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	f043 0220 	orr.w	r2, r3, #32
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e020      	b.n	8004008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	0c1b      	lsrs	r3, r3, #16
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d10c      	bne.n	8003fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	43da      	mvns	r2, r3
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	bf14      	ite	ne
 8003fe2:	2301      	movne	r3, #1
 8003fe4:	2300      	moveq	r3, #0
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	e00b      	b.n	8004002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	43da      	mvns	r2, r3
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	bf14      	ite	ne
 8003ffc:	2301      	movne	r3, #1
 8003ffe:	2300      	moveq	r3, #0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d18d      	bne.n	8003f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800401c:	e02d      	b.n	800407a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f000 f8ce 	bl	80041c0 <I2C_IsAcknowledgeFailed>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e02d      	b.n	800408a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004034:	d021      	beq.n	800407a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004036:	f7fe fd8f 	bl	8002b58 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	429a      	cmp	r2, r3
 8004044:	d302      	bcc.n	800404c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d116      	bne.n	800407a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2220      	movs	r2, #32
 8004056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	f043 0220 	orr.w	r2, r3, #32
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e007      	b.n	800408a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004084:	2b80      	cmp	r3, #128	; 0x80
 8004086:	d1ca      	bne.n	800401e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b084      	sub	sp, #16
 8004096:	af00      	add	r7, sp, #0
 8004098:	60f8      	str	r0, [r7, #12]
 800409a:	60b9      	str	r1, [r7, #8]
 800409c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800409e:	e02d      	b.n	80040fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 f88d 	bl	80041c0 <I2C_IsAcknowledgeFailed>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e02d      	b.n	800410c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b6:	d021      	beq.n	80040fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040b8:	f7fe fd4e 	bl	8002b58 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d302      	bcc.n	80040ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d116      	bne.n	80040fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2220      	movs	r2, #32
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e8:	f043 0220 	orr.w	r2, r3, #32
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e007      	b.n	800410c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	f003 0304 	and.w	r3, r3, #4
 8004106:	2b04      	cmp	r3, #4
 8004108:	d1ca      	bne.n	80040a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004120:	e042      	b.n	80041a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	f003 0310 	and.w	r3, r3, #16
 800412c:	2b10      	cmp	r3, #16
 800412e:	d119      	bne.n	8004164 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f06f 0210 	mvn.w	r2, #16
 8004138:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2220      	movs	r2, #32
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e029      	b.n	80041b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004164:	f7fe fcf8 	bl	8002b58 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	68ba      	ldr	r2, [r7, #8]
 8004170:	429a      	cmp	r2, r3
 8004172:	d302      	bcc.n	800417a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d116      	bne.n	80041a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2220      	movs	r2, #32
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004194:	f043 0220 	orr.w	r2, r3, #32
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e007      	b.n	80041b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b2:	2b40      	cmp	r3, #64	; 0x40
 80041b4:	d1b5      	bne.n	8004122 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d6:	d11b      	bne.n	8004210 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2220      	movs	r2, #32
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	f043 0204 	orr.w	r2, r3, #4
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e000      	b.n	8004212 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
	...

08004220 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e267      	b.n	8004702 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d075      	beq.n	800432a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800423e:	4b88      	ldr	r3, [pc, #544]	; (8004460 <HAL_RCC_OscConfig+0x240>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f003 030c 	and.w	r3, r3, #12
 8004246:	2b04      	cmp	r3, #4
 8004248:	d00c      	beq.n	8004264 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800424a:	4b85      	ldr	r3, [pc, #532]	; (8004460 <HAL_RCC_OscConfig+0x240>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004252:	2b08      	cmp	r3, #8
 8004254:	d112      	bne.n	800427c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004256:	4b82      	ldr	r3, [pc, #520]	; (8004460 <HAL_RCC_OscConfig+0x240>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800425e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004262:	d10b      	bne.n	800427c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004264:	4b7e      	ldr	r3, [pc, #504]	; (8004460 <HAL_RCC_OscConfig+0x240>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d05b      	beq.n	8004328 <HAL_RCC_OscConfig+0x108>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d157      	bne.n	8004328 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e242      	b.n	8004702 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004284:	d106      	bne.n	8004294 <HAL_RCC_OscConfig+0x74>
 8004286:	4b76      	ldr	r3, [pc, #472]	; (8004460 <HAL_RCC_OscConfig+0x240>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a75      	ldr	r2, [pc, #468]	; (8004460 <HAL_RCC_OscConfig+0x240>)
 800428c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	e01d      	b.n	80042d0 <HAL_RCC_OscConfig+0xb0>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800429c:	d10c      	bne.n	80042b8 <HAL_RCC_OscConfig+0x98>
 800429e:	4b70      	ldr	r3, [pc, #448]	; (8004460 <HAL_RCC_OscConfig+0x240>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a6f      	ldr	r2, [pc, #444]	; (8004460 <HAL_RCC_OscConfig+0x240>)
 80042a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042a8:	6013      	str	r3, [r2, #0]
 80042aa:	4b6d      	ldr	r3, [pc, #436]	; (8004460 <HAL_RCC_OscConfig+0x240>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a6c      	ldr	r2, [pc, #432]	; (8004460 <HAL_RCC_OscConfig+0x240>)
 80042b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	e00b      	b.n	80042d0 <HAL_RCC_OscConfig+0xb0>
 80042b8:	4b69      	ldr	r3, [pc, #420]	; (8004460 <HAL_RCC_OscConfig+0x240>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a68      	ldr	r2, [pc, #416]	; (8004460 <HAL_RCC_OscConfig+0x240>)
 80042be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042c2:	6013      	str	r3, [r2, #0]
 80042c4:	4b66      	ldr	r3, [pc, #408]	; (8004460 <HAL_RCC_OscConfig+0x240>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a65      	ldr	r2, [pc, #404]	; (8004460 <HAL_RCC_OscConfig+0x240>)
 80042ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d013      	beq.n	8004300 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d8:	f7fe fc3e 	bl	8002b58 <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042de:	e008      	b.n	80042f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042e0:	f7fe fc3a 	bl	8002b58 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b64      	cmp	r3, #100	; 0x64
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e207      	b.n	8004702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f2:	4b5b      	ldr	r3, [pc, #364]	; (8004460 <HAL_RCC_OscConfig+0x240>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d0f0      	beq.n	80042e0 <HAL_RCC_OscConfig+0xc0>
 80042fe:	e014      	b.n	800432a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004300:	f7fe fc2a 	bl	8002b58 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004308:	f7fe fc26 	bl	8002b58 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b64      	cmp	r3, #100	; 0x64
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e1f3      	b.n	8004702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800431a:	4b51      	ldr	r3, [pc, #324]	; (8004460 <HAL_RCC_OscConfig+0x240>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1f0      	bne.n	8004308 <HAL_RCC_OscConfig+0xe8>
 8004326:	e000      	b.n	800432a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d063      	beq.n	80043fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004336:	4b4a      	ldr	r3, [pc, #296]	; (8004460 <HAL_RCC_OscConfig+0x240>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f003 030c 	and.w	r3, r3, #12
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00b      	beq.n	800435a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004342:	4b47      	ldr	r3, [pc, #284]	; (8004460 <HAL_RCC_OscConfig+0x240>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800434a:	2b08      	cmp	r3, #8
 800434c:	d11c      	bne.n	8004388 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800434e:	4b44      	ldr	r3, [pc, #272]	; (8004460 <HAL_RCC_OscConfig+0x240>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d116      	bne.n	8004388 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800435a:	4b41      	ldr	r3, [pc, #260]	; (8004460 <HAL_RCC_OscConfig+0x240>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d005      	beq.n	8004372 <HAL_RCC_OscConfig+0x152>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d001      	beq.n	8004372 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e1c7      	b.n	8004702 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004372:	4b3b      	ldr	r3, [pc, #236]	; (8004460 <HAL_RCC_OscConfig+0x240>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	4937      	ldr	r1, [pc, #220]	; (8004460 <HAL_RCC_OscConfig+0x240>)
 8004382:	4313      	orrs	r3, r2
 8004384:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004386:	e03a      	b.n	80043fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d020      	beq.n	80043d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004390:	4b34      	ldr	r3, [pc, #208]	; (8004464 <HAL_RCC_OscConfig+0x244>)
 8004392:	2201      	movs	r2, #1
 8004394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004396:	f7fe fbdf 	bl	8002b58 <HAL_GetTick>
 800439a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800439c:	e008      	b.n	80043b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800439e:	f7fe fbdb 	bl	8002b58 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e1a8      	b.n	8004702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043b0:	4b2b      	ldr	r3, [pc, #172]	; (8004460 <HAL_RCC_OscConfig+0x240>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d0f0      	beq.n	800439e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043bc:	4b28      	ldr	r3, [pc, #160]	; (8004460 <HAL_RCC_OscConfig+0x240>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	4925      	ldr	r1, [pc, #148]	; (8004460 <HAL_RCC_OscConfig+0x240>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	600b      	str	r3, [r1, #0]
 80043d0:	e015      	b.n	80043fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043d2:	4b24      	ldr	r3, [pc, #144]	; (8004464 <HAL_RCC_OscConfig+0x244>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d8:	f7fe fbbe 	bl	8002b58 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043e0:	f7fe fbba 	bl	8002b58 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e187      	b.n	8004702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043f2:	4b1b      	ldr	r3, [pc, #108]	; (8004460 <HAL_RCC_OscConfig+0x240>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1f0      	bne.n	80043e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0308 	and.w	r3, r3, #8
 8004406:	2b00      	cmp	r3, #0
 8004408:	d036      	beq.n	8004478 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d016      	beq.n	8004440 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004412:	4b15      	ldr	r3, [pc, #84]	; (8004468 <HAL_RCC_OscConfig+0x248>)
 8004414:	2201      	movs	r2, #1
 8004416:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004418:	f7fe fb9e 	bl	8002b58 <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800441e:	e008      	b.n	8004432 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004420:	f7fe fb9a 	bl	8002b58 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e167      	b.n	8004702 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004432:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <HAL_RCC_OscConfig+0x240>)
 8004434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d0f0      	beq.n	8004420 <HAL_RCC_OscConfig+0x200>
 800443e:	e01b      	b.n	8004478 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004440:	4b09      	ldr	r3, [pc, #36]	; (8004468 <HAL_RCC_OscConfig+0x248>)
 8004442:	2200      	movs	r2, #0
 8004444:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004446:	f7fe fb87 	bl	8002b58 <HAL_GetTick>
 800444a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800444c:	e00e      	b.n	800446c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800444e:	f7fe fb83 	bl	8002b58 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d907      	bls.n	800446c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e150      	b.n	8004702 <HAL_RCC_OscConfig+0x4e2>
 8004460:	40023800 	.word	0x40023800
 8004464:	42470000 	.word	0x42470000
 8004468:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800446c:	4b88      	ldr	r3, [pc, #544]	; (8004690 <HAL_RCC_OscConfig+0x470>)
 800446e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1ea      	bne.n	800444e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 8097 	beq.w	80045b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004486:	2300      	movs	r3, #0
 8004488:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800448a:	4b81      	ldr	r3, [pc, #516]	; (8004690 <HAL_RCC_OscConfig+0x470>)
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10f      	bne.n	80044b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004496:	2300      	movs	r3, #0
 8004498:	60bb      	str	r3, [r7, #8]
 800449a:	4b7d      	ldr	r3, [pc, #500]	; (8004690 <HAL_RCC_OscConfig+0x470>)
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	4a7c      	ldr	r2, [pc, #496]	; (8004690 <HAL_RCC_OscConfig+0x470>)
 80044a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a4:	6413      	str	r3, [r2, #64]	; 0x40
 80044a6:	4b7a      	ldr	r3, [pc, #488]	; (8004690 <HAL_RCC_OscConfig+0x470>)
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ae:	60bb      	str	r3, [r7, #8]
 80044b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044b2:	2301      	movs	r3, #1
 80044b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b6:	4b77      	ldr	r3, [pc, #476]	; (8004694 <HAL_RCC_OscConfig+0x474>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d118      	bne.n	80044f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044c2:	4b74      	ldr	r3, [pc, #464]	; (8004694 <HAL_RCC_OscConfig+0x474>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a73      	ldr	r2, [pc, #460]	; (8004694 <HAL_RCC_OscConfig+0x474>)
 80044c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ce:	f7fe fb43 	bl	8002b58 <HAL_GetTick>
 80044d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d4:	e008      	b.n	80044e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044d6:	f7fe fb3f 	bl	8002b58 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d901      	bls.n	80044e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e10c      	b.n	8004702 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e8:	4b6a      	ldr	r3, [pc, #424]	; (8004694 <HAL_RCC_OscConfig+0x474>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0f0      	beq.n	80044d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d106      	bne.n	800450a <HAL_RCC_OscConfig+0x2ea>
 80044fc:	4b64      	ldr	r3, [pc, #400]	; (8004690 <HAL_RCC_OscConfig+0x470>)
 80044fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004500:	4a63      	ldr	r2, [pc, #396]	; (8004690 <HAL_RCC_OscConfig+0x470>)
 8004502:	f043 0301 	orr.w	r3, r3, #1
 8004506:	6713      	str	r3, [r2, #112]	; 0x70
 8004508:	e01c      	b.n	8004544 <HAL_RCC_OscConfig+0x324>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	2b05      	cmp	r3, #5
 8004510:	d10c      	bne.n	800452c <HAL_RCC_OscConfig+0x30c>
 8004512:	4b5f      	ldr	r3, [pc, #380]	; (8004690 <HAL_RCC_OscConfig+0x470>)
 8004514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004516:	4a5e      	ldr	r2, [pc, #376]	; (8004690 <HAL_RCC_OscConfig+0x470>)
 8004518:	f043 0304 	orr.w	r3, r3, #4
 800451c:	6713      	str	r3, [r2, #112]	; 0x70
 800451e:	4b5c      	ldr	r3, [pc, #368]	; (8004690 <HAL_RCC_OscConfig+0x470>)
 8004520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004522:	4a5b      	ldr	r2, [pc, #364]	; (8004690 <HAL_RCC_OscConfig+0x470>)
 8004524:	f043 0301 	orr.w	r3, r3, #1
 8004528:	6713      	str	r3, [r2, #112]	; 0x70
 800452a:	e00b      	b.n	8004544 <HAL_RCC_OscConfig+0x324>
 800452c:	4b58      	ldr	r3, [pc, #352]	; (8004690 <HAL_RCC_OscConfig+0x470>)
 800452e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004530:	4a57      	ldr	r2, [pc, #348]	; (8004690 <HAL_RCC_OscConfig+0x470>)
 8004532:	f023 0301 	bic.w	r3, r3, #1
 8004536:	6713      	str	r3, [r2, #112]	; 0x70
 8004538:	4b55      	ldr	r3, [pc, #340]	; (8004690 <HAL_RCC_OscConfig+0x470>)
 800453a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453c:	4a54      	ldr	r2, [pc, #336]	; (8004690 <HAL_RCC_OscConfig+0x470>)
 800453e:	f023 0304 	bic.w	r3, r3, #4
 8004542:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d015      	beq.n	8004578 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800454c:	f7fe fb04 	bl	8002b58 <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004552:	e00a      	b.n	800456a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004554:	f7fe fb00 	bl	8002b58 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004562:	4293      	cmp	r3, r2
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e0cb      	b.n	8004702 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800456a:	4b49      	ldr	r3, [pc, #292]	; (8004690 <HAL_RCC_OscConfig+0x470>)
 800456c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d0ee      	beq.n	8004554 <HAL_RCC_OscConfig+0x334>
 8004576:	e014      	b.n	80045a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004578:	f7fe faee 	bl	8002b58 <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800457e:	e00a      	b.n	8004596 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004580:	f7fe faea 	bl	8002b58 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	f241 3288 	movw	r2, #5000	; 0x1388
 800458e:	4293      	cmp	r3, r2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e0b5      	b.n	8004702 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004596:	4b3e      	ldr	r3, [pc, #248]	; (8004690 <HAL_RCC_OscConfig+0x470>)
 8004598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1ee      	bne.n	8004580 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045a2:	7dfb      	ldrb	r3, [r7, #23]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d105      	bne.n	80045b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045a8:	4b39      	ldr	r3, [pc, #228]	; (8004690 <HAL_RCC_OscConfig+0x470>)
 80045aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ac:	4a38      	ldr	r2, [pc, #224]	; (8004690 <HAL_RCC_OscConfig+0x470>)
 80045ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 80a1 	beq.w	8004700 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045be:	4b34      	ldr	r3, [pc, #208]	; (8004690 <HAL_RCC_OscConfig+0x470>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 030c 	and.w	r3, r3, #12
 80045c6:	2b08      	cmp	r3, #8
 80045c8:	d05c      	beq.n	8004684 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d141      	bne.n	8004656 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045d2:	4b31      	ldr	r3, [pc, #196]	; (8004698 <HAL_RCC_OscConfig+0x478>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d8:	f7fe fabe 	bl	8002b58 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045e0:	f7fe faba 	bl	8002b58 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e087      	b.n	8004702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045f2:	4b27      	ldr	r3, [pc, #156]	; (8004690 <HAL_RCC_OscConfig+0x470>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1f0      	bne.n	80045e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	69da      	ldr	r2, [r3, #28]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	431a      	orrs	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	019b      	lsls	r3, r3, #6
 800460e:	431a      	orrs	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004614:	085b      	lsrs	r3, r3, #1
 8004616:	3b01      	subs	r3, #1
 8004618:	041b      	lsls	r3, r3, #16
 800461a:	431a      	orrs	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004620:	061b      	lsls	r3, r3, #24
 8004622:	491b      	ldr	r1, [pc, #108]	; (8004690 <HAL_RCC_OscConfig+0x470>)
 8004624:	4313      	orrs	r3, r2
 8004626:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004628:	4b1b      	ldr	r3, [pc, #108]	; (8004698 <HAL_RCC_OscConfig+0x478>)
 800462a:	2201      	movs	r2, #1
 800462c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462e:	f7fe fa93 	bl	8002b58 <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004634:	e008      	b.n	8004648 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004636:	f7fe fa8f 	bl	8002b58 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e05c      	b.n	8004702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004648:	4b11      	ldr	r3, [pc, #68]	; (8004690 <HAL_RCC_OscConfig+0x470>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0f0      	beq.n	8004636 <HAL_RCC_OscConfig+0x416>
 8004654:	e054      	b.n	8004700 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004656:	4b10      	ldr	r3, [pc, #64]	; (8004698 <HAL_RCC_OscConfig+0x478>)
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800465c:	f7fe fa7c 	bl	8002b58 <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004664:	f7fe fa78 	bl	8002b58 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e045      	b.n	8004702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004676:	4b06      	ldr	r3, [pc, #24]	; (8004690 <HAL_RCC_OscConfig+0x470>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1f0      	bne.n	8004664 <HAL_RCC_OscConfig+0x444>
 8004682:	e03d      	b.n	8004700 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d107      	bne.n	800469c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e038      	b.n	8004702 <HAL_RCC_OscConfig+0x4e2>
 8004690:	40023800 	.word	0x40023800
 8004694:	40007000 	.word	0x40007000
 8004698:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800469c:	4b1b      	ldr	r3, [pc, #108]	; (800470c <HAL_RCC_OscConfig+0x4ec>)
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d028      	beq.n	80046fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d121      	bne.n	80046fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d11a      	bne.n	80046fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046cc:	4013      	ands	r3, r2
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d111      	bne.n	80046fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e2:	085b      	lsrs	r3, r3, #1
 80046e4:	3b01      	subs	r3, #1
 80046e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d107      	bne.n	80046fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d001      	beq.n	8004700 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e000      	b.n	8004702 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3718      	adds	r7, #24
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	40023800 	.word	0x40023800

08004710 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e0cc      	b.n	80048be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004724:	4b68      	ldr	r3, [pc, #416]	; (80048c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	429a      	cmp	r2, r3
 8004730:	d90c      	bls.n	800474c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004732:	4b65      	ldr	r3, [pc, #404]	; (80048c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	b2d2      	uxtb	r2, r2
 8004738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800473a:	4b63      	ldr	r3, [pc, #396]	; (80048c8 <HAL_RCC_ClockConfig+0x1b8>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0307 	and.w	r3, r3, #7
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	429a      	cmp	r2, r3
 8004746:	d001      	beq.n	800474c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e0b8      	b.n	80048be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d020      	beq.n	800479a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b00      	cmp	r3, #0
 8004762:	d005      	beq.n	8004770 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004764:	4b59      	ldr	r3, [pc, #356]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	4a58      	ldr	r2, [pc, #352]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 800476a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800476e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0308 	and.w	r3, r3, #8
 8004778:	2b00      	cmp	r3, #0
 800477a:	d005      	beq.n	8004788 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800477c:	4b53      	ldr	r3, [pc, #332]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	4a52      	ldr	r2, [pc, #328]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 8004782:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004786:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004788:	4b50      	ldr	r3, [pc, #320]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	494d      	ldr	r1, [pc, #308]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 8004796:	4313      	orrs	r3, r2
 8004798:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d044      	beq.n	8004830 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d107      	bne.n	80047be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ae:	4b47      	ldr	r3, [pc, #284]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d119      	bne.n	80047ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e07f      	b.n	80048be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d003      	beq.n	80047ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047ca:	2b03      	cmp	r3, #3
 80047cc:	d107      	bne.n	80047de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ce:	4b3f      	ldr	r3, [pc, #252]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d109      	bne.n	80047ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e06f      	b.n	80048be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047de:	4b3b      	ldr	r3, [pc, #236]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e067      	b.n	80048be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047ee:	4b37      	ldr	r3, [pc, #220]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f023 0203 	bic.w	r2, r3, #3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	4934      	ldr	r1, [pc, #208]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004800:	f7fe f9aa 	bl	8002b58 <HAL_GetTick>
 8004804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004806:	e00a      	b.n	800481e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004808:	f7fe f9a6 	bl	8002b58 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	f241 3288 	movw	r2, #5000	; 0x1388
 8004816:	4293      	cmp	r3, r2
 8004818:	d901      	bls.n	800481e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e04f      	b.n	80048be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800481e:	4b2b      	ldr	r3, [pc, #172]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 020c 	and.w	r2, r3, #12
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	429a      	cmp	r2, r3
 800482e:	d1eb      	bne.n	8004808 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004830:	4b25      	ldr	r3, [pc, #148]	; (80048c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0307 	and.w	r3, r3, #7
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	429a      	cmp	r2, r3
 800483c:	d20c      	bcs.n	8004858 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800483e:	4b22      	ldr	r3, [pc, #136]	; (80048c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	b2d2      	uxtb	r2, r2
 8004844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004846:	4b20      	ldr	r3, [pc, #128]	; (80048c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	429a      	cmp	r2, r3
 8004852:	d001      	beq.n	8004858 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e032      	b.n	80048be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b00      	cmp	r3, #0
 8004862:	d008      	beq.n	8004876 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004864:	4b19      	ldr	r3, [pc, #100]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	4916      	ldr	r1, [pc, #88]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 8004872:	4313      	orrs	r3, r2
 8004874:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0308 	and.w	r3, r3, #8
 800487e:	2b00      	cmp	r3, #0
 8004880:	d009      	beq.n	8004896 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004882:	4b12      	ldr	r3, [pc, #72]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	490e      	ldr	r1, [pc, #56]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 8004892:	4313      	orrs	r3, r2
 8004894:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004896:	f000 f821 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 800489a:	4602      	mov	r2, r0
 800489c:	4b0b      	ldr	r3, [pc, #44]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	091b      	lsrs	r3, r3, #4
 80048a2:	f003 030f 	and.w	r3, r3, #15
 80048a6:	490a      	ldr	r1, [pc, #40]	; (80048d0 <HAL_RCC_ClockConfig+0x1c0>)
 80048a8:	5ccb      	ldrb	r3, [r1, r3]
 80048aa:	fa22 f303 	lsr.w	r3, r2, r3
 80048ae:	4a09      	ldr	r2, [pc, #36]	; (80048d4 <HAL_RCC_ClockConfig+0x1c4>)
 80048b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048b2:	4b09      	ldr	r3, [pc, #36]	; (80048d8 <HAL_RCC_ClockConfig+0x1c8>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fe f90a 	bl	8002ad0 <HAL_InitTick>

  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	40023c00 	.word	0x40023c00
 80048cc:	40023800 	.word	0x40023800
 80048d0:	08009288 	.word	0x08009288
 80048d4:	20000000 	.word	0x20000000
 80048d8:	20000014 	.word	0x20000014

080048dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048e0:	b090      	sub	sp, #64	; 0x40
 80048e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	637b      	str	r3, [r7, #52]	; 0x34
 80048e8:	2300      	movs	r3, #0
 80048ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048ec:	2300      	movs	r3, #0
 80048ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048f4:	4b59      	ldr	r3, [pc, #356]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x180>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f003 030c 	and.w	r3, r3, #12
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d00d      	beq.n	800491c <HAL_RCC_GetSysClockFreq+0x40>
 8004900:	2b08      	cmp	r3, #8
 8004902:	f200 80a1 	bhi.w	8004a48 <HAL_RCC_GetSysClockFreq+0x16c>
 8004906:	2b00      	cmp	r3, #0
 8004908:	d002      	beq.n	8004910 <HAL_RCC_GetSysClockFreq+0x34>
 800490a:	2b04      	cmp	r3, #4
 800490c:	d003      	beq.n	8004916 <HAL_RCC_GetSysClockFreq+0x3a>
 800490e:	e09b      	b.n	8004a48 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004910:	4b53      	ldr	r3, [pc, #332]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x184>)
 8004912:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004914:	e09b      	b.n	8004a4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004916:	4b53      	ldr	r3, [pc, #332]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x188>)
 8004918:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800491a:	e098      	b.n	8004a4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800491c:	4b4f      	ldr	r3, [pc, #316]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x180>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004924:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004926:	4b4d      	ldr	r3, [pc, #308]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x180>)
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d028      	beq.n	8004984 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004932:	4b4a      	ldr	r3, [pc, #296]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x180>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	099b      	lsrs	r3, r3, #6
 8004938:	2200      	movs	r2, #0
 800493a:	623b      	str	r3, [r7, #32]
 800493c:	627a      	str	r2, [r7, #36]	; 0x24
 800493e:	6a3b      	ldr	r3, [r7, #32]
 8004940:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004944:	2100      	movs	r1, #0
 8004946:	4b47      	ldr	r3, [pc, #284]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x188>)
 8004948:	fb03 f201 	mul.w	r2, r3, r1
 800494c:	2300      	movs	r3, #0
 800494e:	fb00 f303 	mul.w	r3, r0, r3
 8004952:	4413      	add	r3, r2
 8004954:	4a43      	ldr	r2, [pc, #268]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x188>)
 8004956:	fba0 1202 	umull	r1, r2, r0, r2
 800495a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800495c:	460a      	mov	r2, r1
 800495e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004962:	4413      	add	r3, r2
 8004964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004968:	2200      	movs	r2, #0
 800496a:	61bb      	str	r3, [r7, #24]
 800496c:	61fa      	str	r2, [r7, #28]
 800496e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004972:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004976:	f7fc f9bf 	bl	8000cf8 <__aeabi_uldivmod>
 800497a:	4602      	mov	r2, r0
 800497c:	460b      	mov	r3, r1
 800497e:	4613      	mov	r3, r2
 8004980:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004982:	e053      	b.n	8004a2c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004984:	4b35      	ldr	r3, [pc, #212]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x180>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	099b      	lsrs	r3, r3, #6
 800498a:	2200      	movs	r2, #0
 800498c:	613b      	str	r3, [r7, #16]
 800498e:	617a      	str	r2, [r7, #20]
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004996:	f04f 0b00 	mov.w	fp, #0
 800499a:	4652      	mov	r2, sl
 800499c:	465b      	mov	r3, fp
 800499e:	f04f 0000 	mov.w	r0, #0
 80049a2:	f04f 0100 	mov.w	r1, #0
 80049a6:	0159      	lsls	r1, r3, #5
 80049a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049ac:	0150      	lsls	r0, r2, #5
 80049ae:	4602      	mov	r2, r0
 80049b0:	460b      	mov	r3, r1
 80049b2:	ebb2 080a 	subs.w	r8, r2, sl
 80049b6:	eb63 090b 	sbc.w	r9, r3, fp
 80049ba:	f04f 0200 	mov.w	r2, #0
 80049be:	f04f 0300 	mov.w	r3, #0
 80049c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80049c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80049ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80049ce:	ebb2 0408 	subs.w	r4, r2, r8
 80049d2:	eb63 0509 	sbc.w	r5, r3, r9
 80049d6:	f04f 0200 	mov.w	r2, #0
 80049da:	f04f 0300 	mov.w	r3, #0
 80049de:	00eb      	lsls	r3, r5, #3
 80049e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049e4:	00e2      	lsls	r2, r4, #3
 80049e6:	4614      	mov	r4, r2
 80049e8:	461d      	mov	r5, r3
 80049ea:	eb14 030a 	adds.w	r3, r4, sl
 80049ee:	603b      	str	r3, [r7, #0]
 80049f0:	eb45 030b 	adc.w	r3, r5, fp
 80049f4:	607b      	str	r3, [r7, #4]
 80049f6:	f04f 0200 	mov.w	r2, #0
 80049fa:	f04f 0300 	mov.w	r3, #0
 80049fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a02:	4629      	mov	r1, r5
 8004a04:	028b      	lsls	r3, r1, #10
 8004a06:	4621      	mov	r1, r4
 8004a08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a0c:	4621      	mov	r1, r4
 8004a0e:	028a      	lsls	r2, r1, #10
 8004a10:	4610      	mov	r0, r2
 8004a12:	4619      	mov	r1, r3
 8004a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a16:	2200      	movs	r2, #0
 8004a18:	60bb      	str	r3, [r7, #8]
 8004a1a:	60fa      	str	r2, [r7, #12]
 8004a1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a20:	f7fc f96a 	bl	8000cf8 <__aeabi_uldivmod>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	4613      	mov	r3, r2
 8004a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a2c:	4b0b      	ldr	r3, [pc, #44]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x180>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	0c1b      	lsrs	r3, r3, #16
 8004a32:	f003 0303 	and.w	r3, r3, #3
 8004a36:	3301      	adds	r3, #1
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004a3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a44:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a46:	e002      	b.n	8004a4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a48:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a4a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3740      	adds	r7, #64	; 0x40
 8004a54:	46bd      	mov	sp, r7
 8004a56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a5a:	bf00      	nop
 8004a5c:	40023800 	.word	0x40023800
 8004a60:	00f42400 	.word	0x00f42400
 8004a64:	017d7840 	.word	0x017d7840

08004a68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a6c:	4b03      	ldr	r3, [pc, #12]	; (8004a7c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	20000000 	.word	0x20000000

08004a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a84:	f7ff fff0 	bl	8004a68 <HAL_RCC_GetHCLKFreq>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	0a9b      	lsrs	r3, r3, #10
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	4903      	ldr	r1, [pc, #12]	; (8004aa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a96:	5ccb      	ldrb	r3, [r1, r3]
 8004a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	40023800 	.word	0x40023800
 8004aa4:	08009298 	.word	0x08009298

08004aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004aac:	f7ff ffdc 	bl	8004a68 <HAL_RCC_GetHCLKFreq>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	4b05      	ldr	r3, [pc, #20]	; (8004ac8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	0b5b      	lsrs	r3, r3, #13
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	4903      	ldr	r1, [pc, #12]	; (8004acc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004abe:	5ccb      	ldrb	r3, [r1, r3]
 8004ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	08009298 	.word	0x08009298

08004ad0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e03f      	b.n	8004b62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d106      	bne.n	8004afc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7fc fc40 	bl	800137c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2224      	movs	r2, #36	; 0x24
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 fddf 	bl	80056d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	691a      	ldr	r2, [r3, #16]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	695a      	ldr	r2, [r3, #20]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68da      	ldr	r2, [r3, #12]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2220      	movs	r2, #32
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3708      	adds	r7, #8
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b08a      	sub	sp, #40	; 0x28
 8004b6e:	af02      	add	r7, sp, #8
 8004b70:	60f8      	str	r0, [r7, #12]
 8004b72:	60b9      	str	r1, [r7, #8]
 8004b74:	603b      	str	r3, [r7, #0]
 8004b76:	4613      	mov	r3, r2
 8004b78:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b20      	cmp	r3, #32
 8004b88:	d17c      	bne.n	8004c84 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d002      	beq.n	8004b96 <HAL_UART_Transmit+0x2c>
 8004b90:	88fb      	ldrh	r3, [r7, #6]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e075      	b.n	8004c86 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d101      	bne.n	8004ba8 <HAL_UART_Transmit+0x3e>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	e06e      	b.n	8004c86 <HAL_UART_Transmit+0x11c>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2221      	movs	r2, #33	; 0x21
 8004bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bbe:	f7fd ffcb 	bl	8002b58 <HAL_GetTick>
 8004bc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	88fa      	ldrh	r2, [r7, #6]
 8004bc8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	88fa      	ldrh	r2, [r7, #6]
 8004bce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd8:	d108      	bne.n	8004bec <HAL_UART_Transmit+0x82>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d104      	bne.n	8004bec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004be2:	2300      	movs	r3, #0
 8004be4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	61bb      	str	r3, [r7, #24]
 8004bea:	e003      	b.n	8004bf4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004bfc:	e02a      	b.n	8004c54 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2200      	movs	r2, #0
 8004c06:	2180      	movs	r1, #128	; 0x80
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 fb1f 	bl	800524c <UART_WaitOnFlagUntilTimeout>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e036      	b.n	8004c86 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10b      	bne.n	8004c36 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	881b      	ldrh	r3, [r3, #0]
 8004c22:	461a      	mov	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	3302      	adds	r3, #2
 8004c32:	61bb      	str	r3, [r7, #24]
 8004c34:	e007      	b.n	8004c46 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	781a      	ldrb	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	3301      	adds	r3, #1
 8004c44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1cf      	bne.n	8004bfe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2200      	movs	r2, #0
 8004c66:	2140      	movs	r1, #64	; 0x40
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f000 faef 	bl	800524c <UART_WaitOnFlagUntilTimeout>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d001      	beq.n	8004c78 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e006      	b.n	8004c86 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c80:	2300      	movs	r3, #0
 8004c82:	e000      	b.n	8004c86 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004c84:	2302      	movs	r3, #2
  }
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3720      	adds	r7, #32
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b084      	sub	sp, #16
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	60f8      	str	r0, [r7, #12]
 8004c96:	60b9      	str	r1, [r7, #8]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b20      	cmp	r3, #32
 8004ca6:	d11d      	bne.n	8004ce4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <HAL_UART_Receive_IT+0x26>
 8004cae:	88fb      	ldrh	r3, [r7, #6]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e016      	b.n	8004ce6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d101      	bne.n	8004cc6 <HAL_UART_Receive_IT+0x38>
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	e00f      	b.n	8004ce6 <HAL_UART_Receive_IT+0x58>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004cd4:	88fb      	ldrh	r3, [r7, #6]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	68b9      	ldr	r1, [r7, #8]
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f000 fb24 	bl	8005328 <UART_Start_Receive_IT>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	e000      	b.n	8004ce6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004ce4:	2302      	movs	r3, #2
  }
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
	...

08004cf0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b0ba      	sub	sp, #232	; 0xe8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d26:	f003 030f 	and.w	r3, r3, #15
 8004d2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004d2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10f      	bne.n	8004d56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d3a:	f003 0320 	and.w	r3, r3, #32
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d009      	beq.n	8004d56 <HAL_UART_IRQHandler+0x66>
 8004d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d46:	f003 0320 	and.w	r3, r3, #32
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 fc07 	bl	8005562 <UART_Receive_IT>
      return;
 8004d54:	e256      	b.n	8005204 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004d56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f000 80de 	beq.w	8004f1c <HAL_UART_IRQHandler+0x22c>
 8004d60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d106      	bne.n	8004d7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d70:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f000 80d1 	beq.w	8004f1c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00b      	beq.n	8004d9e <HAL_UART_IRQHandler+0xae>
 8004d86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d005      	beq.n	8004d9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	f043 0201 	orr.w	r2, r3, #1
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004da2:	f003 0304 	and.w	r3, r3, #4
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00b      	beq.n	8004dc2 <HAL_UART_IRQHandler+0xd2>
 8004daa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d005      	beq.n	8004dc2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	f043 0202 	orr.w	r2, r3, #2
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00b      	beq.n	8004de6 <HAL_UART_IRQHandler+0xf6>
 8004dce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d005      	beq.n	8004de6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	f043 0204 	orr.w	r2, r3, #4
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dea:	f003 0308 	and.w	r3, r3, #8
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d011      	beq.n	8004e16 <HAL_UART_IRQHandler+0x126>
 8004df2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004df6:	f003 0320 	and.w	r3, r3, #32
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d105      	bne.n	8004e0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004dfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d005      	beq.n	8004e16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	f043 0208 	orr.w	r2, r3, #8
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 81ed 	beq.w	80051fa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e24:	f003 0320 	and.w	r3, r3, #32
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d008      	beq.n	8004e3e <HAL_UART_IRQHandler+0x14e>
 8004e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e30:	f003 0320 	and.w	r3, r3, #32
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d002      	beq.n	8004e3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 fb92 	bl	8005562 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e48:	2b40      	cmp	r3, #64	; 0x40
 8004e4a:	bf0c      	ite	eq
 8004e4c:	2301      	moveq	r3, #1
 8004e4e:	2300      	movne	r3, #0
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5a:	f003 0308 	and.w	r3, r3, #8
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d103      	bne.n	8004e6a <HAL_UART_IRQHandler+0x17a>
 8004e62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d04f      	beq.n	8004f0a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 fa9a 	bl	80053a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7a:	2b40      	cmp	r3, #64	; 0x40
 8004e7c:	d141      	bne.n	8004f02 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	3314      	adds	r3, #20
 8004e84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e8c:	e853 3f00 	ldrex	r3, [r3]
 8004e90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004e94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	3314      	adds	r3, #20
 8004ea6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004eaa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004eae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004eb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004eba:	e841 2300 	strex	r3, r2, [r1]
 8004ebe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ec2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1d9      	bne.n	8004e7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d013      	beq.n	8004efa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed6:	4a7d      	ldr	r2, [pc, #500]	; (80050cc <HAL_UART_IRQHandler+0x3dc>)
 8004ed8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7fd ffeb 	bl	8002eba <HAL_DMA_Abort_IT>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d016      	beq.n	8004f18 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ef4:	4610      	mov	r0, r2
 8004ef6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ef8:	e00e      	b.n	8004f18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f990 	bl	8005220 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f00:	e00a      	b.n	8004f18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f98c 	bl	8005220 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f08:	e006      	b.n	8004f18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f988 	bl	8005220 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004f16:	e170      	b.n	80051fa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f18:	bf00      	nop
    return;
 8004f1a:	e16e      	b.n	80051fa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	f040 814a 	bne.w	80051ba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f2a:	f003 0310 	and.w	r3, r3, #16
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f000 8143 	beq.w	80051ba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f38:	f003 0310 	and.w	r3, r3, #16
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 813c 	beq.w	80051ba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f42:	2300      	movs	r3, #0
 8004f44:	60bb      	str	r3, [r7, #8]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	60bb      	str	r3, [r7, #8]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	60bb      	str	r3, [r7, #8]
 8004f56:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f62:	2b40      	cmp	r3, #64	; 0x40
 8004f64:	f040 80b4 	bne.w	80050d0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 8140 	beq.w	80051fe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f86:	429a      	cmp	r2, r3
 8004f88:	f080 8139 	bcs.w	80051fe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f92:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f9e:	f000 8088 	beq.w	80050b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	330c      	adds	r3, #12
 8004fa8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004fb0:	e853 3f00 	ldrex	r3, [r3]
 8004fb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004fb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	330c      	adds	r3, #12
 8004fca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004fce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004fd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004fda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004fde:	e841 2300 	strex	r3, r2, [r1]
 8004fe2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004fe6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1d9      	bne.n	8004fa2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	3314      	adds	r3, #20
 8004ff4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ff8:	e853 3f00 	ldrex	r3, [r3]
 8004ffc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004ffe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005000:	f023 0301 	bic.w	r3, r3, #1
 8005004:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	3314      	adds	r3, #20
 800500e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005012:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005016:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005018:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800501a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800501e:	e841 2300 	strex	r3, r2, [r1]
 8005022:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005024:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1e1      	bne.n	8004fee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	3314      	adds	r3, #20
 8005030:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005032:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005034:	e853 3f00 	ldrex	r3, [r3]
 8005038:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800503a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800503c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005040:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	3314      	adds	r3, #20
 800504a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800504e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005050:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005052:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005054:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005056:	e841 2300 	strex	r3, r2, [r1]
 800505a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800505c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1e3      	bne.n	800502a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2220      	movs	r2, #32
 8005066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	330c      	adds	r3, #12
 8005076:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800507a:	e853 3f00 	ldrex	r3, [r3]
 800507e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005082:	f023 0310 	bic.w	r3, r3, #16
 8005086:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	330c      	adds	r3, #12
 8005090:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005094:	65ba      	str	r2, [r7, #88]	; 0x58
 8005096:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005098:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800509a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800509c:	e841 2300 	strex	r3, r2, [r1]
 80050a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80050a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1e3      	bne.n	8005070 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7fd fe94 	bl	8002dda <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	b29b      	uxth	r3, r3
 80050c0:	4619      	mov	r1, r3
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f8b6 	bl	8005234 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050c8:	e099      	b.n	80051fe <HAL_UART_IRQHandler+0x50e>
 80050ca:	bf00      	nop
 80050cc:	0800546b 	.word	0x0800546b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050d8:	b29b      	uxth	r3, r3
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	f000 808b 	beq.w	8005202 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80050ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 8086 	beq.w	8005202 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	330c      	adds	r3, #12
 80050fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005100:	e853 3f00 	ldrex	r3, [r3]
 8005104:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005108:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800510c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	330c      	adds	r3, #12
 8005116:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800511a:	647a      	str	r2, [r7, #68]	; 0x44
 800511c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005120:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005122:	e841 2300 	strex	r3, r2, [r1]
 8005126:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1e3      	bne.n	80050f6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	3314      	adds	r3, #20
 8005134:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005138:	e853 3f00 	ldrex	r3, [r3]
 800513c:	623b      	str	r3, [r7, #32]
   return(result);
 800513e:	6a3b      	ldr	r3, [r7, #32]
 8005140:	f023 0301 	bic.w	r3, r3, #1
 8005144:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	3314      	adds	r3, #20
 800514e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005152:	633a      	str	r2, [r7, #48]	; 0x30
 8005154:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005156:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800515a:	e841 2300 	strex	r3, r2, [r1]
 800515e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1e3      	bne.n	800512e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2220      	movs	r2, #32
 800516a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	330c      	adds	r3, #12
 800517a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	e853 3f00 	ldrex	r3, [r3]
 8005182:	60fb      	str	r3, [r7, #12]
   return(result);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 0310 	bic.w	r3, r3, #16
 800518a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	330c      	adds	r3, #12
 8005194:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005198:	61fa      	str	r2, [r7, #28]
 800519a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519c:	69b9      	ldr	r1, [r7, #24]
 800519e:	69fa      	ldr	r2, [r7, #28]
 80051a0:	e841 2300 	strex	r3, r2, [r1]
 80051a4:	617b      	str	r3, [r7, #20]
   return(result);
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1e3      	bne.n	8005174 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80051b0:	4619      	mov	r1, r3
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f83e 	bl	8005234 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80051b8:	e023      	b.n	8005202 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80051ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d009      	beq.n	80051da <HAL_UART_IRQHandler+0x4ea>
 80051c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d003      	beq.n	80051da <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f95d 	bl	8005492 <UART_Transmit_IT>
    return;
 80051d8:	e014      	b.n	8005204 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80051da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00e      	beq.n	8005204 <HAL_UART_IRQHandler+0x514>
 80051e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d008      	beq.n	8005204 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f99d 	bl	8005532 <UART_EndTransmit_IT>
    return;
 80051f8:	e004      	b.n	8005204 <HAL_UART_IRQHandler+0x514>
    return;
 80051fa:	bf00      	nop
 80051fc:	e002      	b.n	8005204 <HAL_UART_IRQHandler+0x514>
      return;
 80051fe:	bf00      	nop
 8005200:	e000      	b.n	8005204 <HAL_UART_IRQHandler+0x514>
      return;
 8005202:	bf00      	nop
  }
}
 8005204:	37e8      	adds	r7, #232	; 0xe8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop

0800520c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	460b      	mov	r3, r1
 800523e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b090      	sub	sp, #64	; 0x40
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	603b      	str	r3, [r7, #0]
 8005258:	4613      	mov	r3, r2
 800525a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800525c:	e050      	b.n	8005300 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800525e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005264:	d04c      	beq.n	8005300 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005268:	2b00      	cmp	r3, #0
 800526a:	d007      	beq.n	800527c <UART_WaitOnFlagUntilTimeout+0x30>
 800526c:	f7fd fc74 	bl	8002b58 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005278:	429a      	cmp	r2, r3
 800527a:	d241      	bcs.n	8005300 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	330c      	adds	r3, #12
 8005282:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005286:	e853 3f00 	ldrex	r3, [r3]
 800528a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005292:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	330c      	adds	r3, #12
 800529a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800529c:	637a      	str	r2, [r7, #52]	; 0x34
 800529e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052a4:	e841 2300 	strex	r3, r2, [r1]
 80052a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1e5      	bne.n	800527c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	3314      	adds	r3, #20
 80052b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	e853 3f00 	ldrex	r3, [r3]
 80052be:	613b      	str	r3, [r7, #16]
   return(result);
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	f023 0301 	bic.w	r3, r3, #1
 80052c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3314      	adds	r3, #20
 80052ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052d0:	623a      	str	r2, [r7, #32]
 80052d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d4:	69f9      	ldr	r1, [r7, #28]
 80052d6:	6a3a      	ldr	r2, [r7, #32]
 80052d8:	e841 2300 	strex	r3, r2, [r1]
 80052dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1e5      	bne.n	80052b0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2220      	movs	r2, #32
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2220      	movs	r2, #32
 80052f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e00f      	b.n	8005320 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	4013      	ands	r3, r2
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	429a      	cmp	r2, r3
 800530e:	bf0c      	ite	eq
 8005310:	2301      	moveq	r3, #1
 8005312:	2300      	movne	r3, #0
 8005314:	b2db      	uxtb	r3, r3
 8005316:	461a      	mov	r2, r3
 8005318:	79fb      	ldrb	r3, [r7, #7]
 800531a:	429a      	cmp	r2, r3
 800531c:	d09f      	beq.n	800525e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3740      	adds	r7, #64	; 0x40
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	4613      	mov	r3, r2
 8005334:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	88fa      	ldrh	r2, [r7, #6]
 8005340:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	88fa      	ldrh	r2, [r7, #6]
 8005346:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2222      	movs	r2, #34	; 0x22
 8005352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d007      	beq.n	8005376 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68da      	ldr	r2, [r3, #12]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005374:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	695a      	ldr	r2, [r3, #20]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f042 0201 	orr.w	r2, r2, #1
 8005384:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68da      	ldr	r2, [r3, #12]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f042 0220 	orr.w	r2, r2, #32
 8005394:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b095      	sub	sp, #84	; 0x54
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	330c      	adds	r3, #12
 80053b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b6:	e853 3f00 	ldrex	r3, [r3]
 80053ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	330c      	adds	r3, #12
 80053ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053cc:	643a      	str	r2, [r7, #64]	; 0x40
 80053ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053d4:	e841 2300 	strex	r3, r2, [r1]
 80053d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1e5      	bne.n	80053ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	3314      	adds	r3, #20
 80053e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e8:	6a3b      	ldr	r3, [r7, #32]
 80053ea:	e853 3f00 	ldrex	r3, [r3]
 80053ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	f023 0301 	bic.w	r3, r3, #1
 80053f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	3314      	adds	r3, #20
 80053fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005400:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005402:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005404:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005406:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005408:	e841 2300 	strex	r3, r2, [r1]
 800540c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1e5      	bne.n	80053e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005418:	2b01      	cmp	r3, #1
 800541a:	d119      	bne.n	8005450 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	330c      	adds	r3, #12
 8005422:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	e853 3f00 	ldrex	r3, [r3]
 800542a:	60bb      	str	r3, [r7, #8]
   return(result);
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	f023 0310 	bic.w	r3, r3, #16
 8005432:	647b      	str	r3, [r7, #68]	; 0x44
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	330c      	adds	r3, #12
 800543a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800543c:	61ba      	str	r2, [r7, #24]
 800543e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005440:	6979      	ldr	r1, [r7, #20]
 8005442:	69ba      	ldr	r2, [r7, #24]
 8005444:	e841 2300 	strex	r3, r2, [r1]
 8005448:	613b      	str	r3, [r7, #16]
   return(result);
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1e5      	bne.n	800541c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2220      	movs	r2, #32
 8005454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800545e:	bf00      	nop
 8005460:	3754      	adds	r7, #84	; 0x54
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b084      	sub	sp, #16
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005476:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f7ff fecb 	bl	8005220 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800548a:	bf00      	nop
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005492:	b480      	push	{r7}
 8005494:	b085      	sub	sp, #20
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b21      	cmp	r3, #33	; 0x21
 80054a4:	d13e      	bne.n	8005524 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ae:	d114      	bne.n	80054da <UART_Transmit_IT+0x48>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d110      	bne.n	80054da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	881b      	ldrh	r3, [r3, #0]
 80054c2:	461a      	mov	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	1c9a      	adds	r2, r3, #2
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	621a      	str	r2, [r3, #32]
 80054d8:	e008      	b.n	80054ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	1c59      	adds	r1, r3, #1
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	6211      	str	r1, [r2, #32]
 80054e4:	781a      	ldrb	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	3b01      	subs	r3, #1
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	4619      	mov	r1, r3
 80054fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10f      	bne.n	8005520 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68da      	ldr	r2, [r3, #12]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800550e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68da      	ldr	r2, [r3, #12]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800551e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005520:	2300      	movs	r3, #0
 8005522:	e000      	b.n	8005526 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005524:	2302      	movs	r3, #2
  }
}
 8005526:	4618      	mov	r0, r3
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr

08005532 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005532:	b580      	push	{r7, lr}
 8005534:	b082      	sub	sp, #8
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68da      	ldr	r2, [r3, #12]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005548:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2220      	movs	r2, #32
 800554e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7ff fe5a 	bl	800520c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b08c      	sub	sp, #48	; 0x30
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b22      	cmp	r3, #34	; 0x22
 8005574:	f040 80ab 	bne.w	80056ce <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005580:	d117      	bne.n	80055b2 <UART_Receive_IT+0x50>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d113      	bne.n	80055b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800558a:	2300      	movs	r3, #0
 800558c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005592:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	b29b      	uxth	r3, r3
 800559c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055aa:	1c9a      	adds	r2, r3, #2
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	629a      	str	r2, [r3, #40]	; 0x28
 80055b0:	e026      	b.n	8005600 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80055b8:	2300      	movs	r3, #0
 80055ba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055c4:	d007      	beq.n	80055d6 <UART_Receive_IT+0x74>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10a      	bne.n	80055e4 <UART_Receive_IT+0x82>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d106      	bne.n	80055e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	b2da      	uxtb	r2, r3
 80055de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e0:	701a      	strb	r2, [r3, #0]
 80055e2:	e008      	b.n	80055f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055f0:	b2da      	uxtb	r2, r3
 80055f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fa:	1c5a      	adds	r2, r3, #1
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005604:	b29b      	uxth	r3, r3
 8005606:	3b01      	subs	r3, #1
 8005608:	b29b      	uxth	r3, r3
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	4619      	mov	r1, r3
 800560e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005610:	2b00      	cmp	r3, #0
 8005612:	d15a      	bne.n	80056ca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68da      	ldr	r2, [r3, #12]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f022 0220 	bic.w	r2, r2, #32
 8005622:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68da      	ldr	r2, [r3, #12]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005632:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	695a      	ldr	r2, [r3, #20]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 0201 	bic.w	r2, r2, #1
 8005642:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2220      	movs	r2, #32
 8005648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005650:	2b01      	cmp	r3, #1
 8005652:	d135      	bne.n	80056c0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	330c      	adds	r3, #12
 8005660:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	e853 3f00 	ldrex	r3, [r3]
 8005668:	613b      	str	r3, [r7, #16]
   return(result);
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f023 0310 	bic.w	r3, r3, #16
 8005670:	627b      	str	r3, [r7, #36]	; 0x24
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	330c      	adds	r3, #12
 8005678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800567a:	623a      	str	r2, [r7, #32]
 800567c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567e:	69f9      	ldr	r1, [r7, #28]
 8005680:	6a3a      	ldr	r2, [r7, #32]
 8005682:	e841 2300 	strex	r3, r2, [r1]
 8005686:	61bb      	str	r3, [r7, #24]
   return(result);
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1e5      	bne.n	800565a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0310 	and.w	r3, r3, #16
 8005698:	2b10      	cmp	r3, #16
 800569a:	d10a      	bne.n	80056b2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800569c:	2300      	movs	r3, #0
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	60fb      	str	r3, [r7, #12]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	60fb      	str	r3, [r7, #12]
 80056b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056b6:	4619      	mov	r1, r3
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7ff fdbb 	bl	8005234 <HAL_UARTEx_RxEventCallback>
 80056be:	e002      	b.n	80056c6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f7fc f8bd 	bl	8001840 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80056c6:	2300      	movs	r3, #0
 80056c8:	e002      	b.n	80056d0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80056ca:	2300      	movs	r3, #0
 80056cc:	e000      	b.n	80056d0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80056ce:	2302      	movs	r3, #2
  }
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3730      	adds	r7, #48	; 0x30
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056dc:	b0c0      	sub	sp, #256	; 0x100
 80056de:	af00      	add	r7, sp, #0
 80056e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80056f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f4:	68d9      	ldr	r1, [r3, #12]
 80056f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	ea40 0301 	orr.w	r3, r0, r1
 8005700:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005706:	689a      	ldr	r2, [r3, #8]
 8005708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	431a      	orrs	r2, r3
 8005710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	431a      	orrs	r2, r3
 8005718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800571c:	69db      	ldr	r3, [r3, #28]
 800571e:	4313      	orrs	r3, r2
 8005720:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005730:	f021 010c 	bic.w	r1, r1, #12
 8005734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800573e:	430b      	orrs	r3, r1
 8005740:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800574e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005752:	6999      	ldr	r1, [r3, #24]
 8005754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	ea40 0301 	orr.w	r3, r0, r1
 800575e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	4b8f      	ldr	r3, [pc, #572]	; (80059a4 <UART_SetConfig+0x2cc>)
 8005768:	429a      	cmp	r2, r3
 800576a:	d005      	beq.n	8005778 <UART_SetConfig+0xa0>
 800576c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	4b8d      	ldr	r3, [pc, #564]	; (80059a8 <UART_SetConfig+0x2d0>)
 8005774:	429a      	cmp	r2, r3
 8005776:	d104      	bne.n	8005782 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005778:	f7ff f996 	bl	8004aa8 <HAL_RCC_GetPCLK2Freq>
 800577c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005780:	e003      	b.n	800578a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005782:	f7ff f97d 	bl	8004a80 <HAL_RCC_GetPCLK1Freq>
 8005786:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800578a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005794:	f040 810c 	bne.w	80059b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005798:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800579c:	2200      	movs	r2, #0
 800579e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80057a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80057a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80057aa:	4622      	mov	r2, r4
 80057ac:	462b      	mov	r3, r5
 80057ae:	1891      	adds	r1, r2, r2
 80057b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80057b2:	415b      	adcs	r3, r3
 80057b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80057ba:	4621      	mov	r1, r4
 80057bc:	eb12 0801 	adds.w	r8, r2, r1
 80057c0:	4629      	mov	r1, r5
 80057c2:	eb43 0901 	adc.w	r9, r3, r1
 80057c6:	f04f 0200 	mov.w	r2, #0
 80057ca:	f04f 0300 	mov.w	r3, #0
 80057ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057da:	4690      	mov	r8, r2
 80057dc:	4699      	mov	r9, r3
 80057de:	4623      	mov	r3, r4
 80057e0:	eb18 0303 	adds.w	r3, r8, r3
 80057e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80057e8:	462b      	mov	r3, r5
 80057ea:	eb49 0303 	adc.w	r3, r9, r3
 80057ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80057f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80057fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005802:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005806:	460b      	mov	r3, r1
 8005808:	18db      	adds	r3, r3, r3
 800580a:	653b      	str	r3, [r7, #80]	; 0x50
 800580c:	4613      	mov	r3, r2
 800580e:	eb42 0303 	adc.w	r3, r2, r3
 8005812:	657b      	str	r3, [r7, #84]	; 0x54
 8005814:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005818:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800581c:	f7fb fa6c 	bl	8000cf8 <__aeabi_uldivmod>
 8005820:	4602      	mov	r2, r0
 8005822:	460b      	mov	r3, r1
 8005824:	4b61      	ldr	r3, [pc, #388]	; (80059ac <UART_SetConfig+0x2d4>)
 8005826:	fba3 2302 	umull	r2, r3, r3, r2
 800582a:	095b      	lsrs	r3, r3, #5
 800582c:	011c      	lsls	r4, r3, #4
 800582e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005832:	2200      	movs	r2, #0
 8005834:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005838:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800583c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005840:	4642      	mov	r2, r8
 8005842:	464b      	mov	r3, r9
 8005844:	1891      	adds	r1, r2, r2
 8005846:	64b9      	str	r1, [r7, #72]	; 0x48
 8005848:	415b      	adcs	r3, r3
 800584a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800584c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005850:	4641      	mov	r1, r8
 8005852:	eb12 0a01 	adds.w	sl, r2, r1
 8005856:	4649      	mov	r1, r9
 8005858:	eb43 0b01 	adc.w	fp, r3, r1
 800585c:	f04f 0200 	mov.w	r2, #0
 8005860:	f04f 0300 	mov.w	r3, #0
 8005864:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005868:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800586c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005870:	4692      	mov	sl, r2
 8005872:	469b      	mov	fp, r3
 8005874:	4643      	mov	r3, r8
 8005876:	eb1a 0303 	adds.w	r3, sl, r3
 800587a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800587e:	464b      	mov	r3, r9
 8005880:	eb4b 0303 	adc.w	r3, fp, r3
 8005884:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005894:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005898:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800589c:	460b      	mov	r3, r1
 800589e:	18db      	adds	r3, r3, r3
 80058a0:	643b      	str	r3, [r7, #64]	; 0x40
 80058a2:	4613      	mov	r3, r2
 80058a4:	eb42 0303 	adc.w	r3, r2, r3
 80058a8:	647b      	str	r3, [r7, #68]	; 0x44
 80058aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80058ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80058b2:	f7fb fa21 	bl	8000cf8 <__aeabi_uldivmod>
 80058b6:	4602      	mov	r2, r0
 80058b8:	460b      	mov	r3, r1
 80058ba:	4611      	mov	r1, r2
 80058bc:	4b3b      	ldr	r3, [pc, #236]	; (80059ac <UART_SetConfig+0x2d4>)
 80058be:	fba3 2301 	umull	r2, r3, r3, r1
 80058c2:	095b      	lsrs	r3, r3, #5
 80058c4:	2264      	movs	r2, #100	; 0x64
 80058c6:	fb02 f303 	mul.w	r3, r2, r3
 80058ca:	1acb      	subs	r3, r1, r3
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80058d2:	4b36      	ldr	r3, [pc, #216]	; (80059ac <UART_SetConfig+0x2d4>)
 80058d4:	fba3 2302 	umull	r2, r3, r3, r2
 80058d8:	095b      	lsrs	r3, r3, #5
 80058da:	005b      	lsls	r3, r3, #1
 80058dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80058e0:	441c      	add	r4, r3
 80058e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058e6:	2200      	movs	r2, #0
 80058e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80058f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80058f4:	4642      	mov	r2, r8
 80058f6:	464b      	mov	r3, r9
 80058f8:	1891      	adds	r1, r2, r2
 80058fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80058fc:	415b      	adcs	r3, r3
 80058fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005900:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005904:	4641      	mov	r1, r8
 8005906:	1851      	adds	r1, r2, r1
 8005908:	6339      	str	r1, [r7, #48]	; 0x30
 800590a:	4649      	mov	r1, r9
 800590c:	414b      	adcs	r3, r1
 800590e:	637b      	str	r3, [r7, #52]	; 0x34
 8005910:	f04f 0200 	mov.w	r2, #0
 8005914:	f04f 0300 	mov.w	r3, #0
 8005918:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800591c:	4659      	mov	r1, fp
 800591e:	00cb      	lsls	r3, r1, #3
 8005920:	4651      	mov	r1, sl
 8005922:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005926:	4651      	mov	r1, sl
 8005928:	00ca      	lsls	r2, r1, #3
 800592a:	4610      	mov	r0, r2
 800592c:	4619      	mov	r1, r3
 800592e:	4603      	mov	r3, r0
 8005930:	4642      	mov	r2, r8
 8005932:	189b      	adds	r3, r3, r2
 8005934:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005938:	464b      	mov	r3, r9
 800593a:	460a      	mov	r2, r1
 800593c:	eb42 0303 	adc.w	r3, r2, r3
 8005940:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005950:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005954:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005958:	460b      	mov	r3, r1
 800595a:	18db      	adds	r3, r3, r3
 800595c:	62bb      	str	r3, [r7, #40]	; 0x28
 800595e:	4613      	mov	r3, r2
 8005960:	eb42 0303 	adc.w	r3, r2, r3
 8005964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005966:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800596a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800596e:	f7fb f9c3 	bl	8000cf8 <__aeabi_uldivmod>
 8005972:	4602      	mov	r2, r0
 8005974:	460b      	mov	r3, r1
 8005976:	4b0d      	ldr	r3, [pc, #52]	; (80059ac <UART_SetConfig+0x2d4>)
 8005978:	fba3 1302 	umull	r1, r3, r3, r2
 800597c:	095b      	lsrs	r3, r3, #5
 800597e:	2164      	movs	r1, #100	; 0x64
 8005980:	fb01 f303 	mul.w	r3, r1, r3
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	00db      	lsls	r3, r3, #3
 8005988:	3332      	adds	r3, #50	; 0x32
 800598a:	4a08      	ldr	r2, [pc, #32]	; (80059ac <UART_SetConfig+0x2d4>)
 800598c:	fba2 2303 	umull	r2, r3, r2, r3
 8005990:	095b      	lsrs	r3, r3, #5
 8005992:	f003 0207 	and.w	r2, r3, #7
 8005996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4422      	add	r2, r4
 800599e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059a0:	e106      	b.n	8005bb0 <UART_SetConfig+0x4d8>
 80059a2:	bf00      	nop
 80059a4:	40011000 	.word	0x40011000
 80059a8:	40011400 	.word	0x40011400
 80059ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059b4:	2200      	movs	r2, #0
 80059b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80059ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80059be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80059c2:	4642      	mov	r2, r8
 80059c4:	464b      	mov	r3, r9
 80059c6:	1891      	adds	r1, r2, r2
 80059c8:	6239      	str	r1, [r7, #32]
 80059ca:	415b      	adcs	r3, r3
 80059cc:	627b      	str	r3, [r7, #36]	; 0x24
 80059ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059d2:	4641      	mov	r1, r8
 80059d4:	1854      	adds	r4, r2, r1
 80059d6:	4649      	mov	r1, r9
 80059d8:	eb43 0501 	adc.w	r5, r3, r1
 80059dc:	f04f 0200 	mov.w	r2, #0
 80059e0:	f04f 0300 	mov.w	r3, #0
 80059e4:	00eb      	lsls	r3, r5, #3
 80059e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059ea:	00e2      	lsls	r2, r4, #3
 80059ec:	4614      	mov	r4, r2
 80059ee:	461d      	mov	r5, r3
 80059f0:	4643      	mov	r3, r8
 80059f2:	18e3      	adds	r3, r4, r3
 80059f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80059f8:	464b      	mov	r3, r9
 80059fa:	eb45 0303 	adc.w	r3, r5, r3
 80059fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a12:	f04f 0200 	mov.w	r2, #0
 8005a16:	f04f 0300 	mov.w	r3, #0
 8005a1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005a1e:	4629      	mov	r1, r5
 8005a20:	008b      	lsls	r3, r1, #2
 8005a22:	4621      	mov	r1, r4
 8005a24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a28:	4621      	mov	r1, r4
 8005a2a:	008a      	lsls	r2, r1, #2
 8005a2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005a30:	f7fb f962 	bl	8000cf8 <__aeabi_uldivmod>
 8005a34:	4602      	mov	r2, r0
 8005a36:	460b      	mov	r3, r1
 8005a38:	4b60      	ldr	r3, [pc, #384]	; (8005bbc <UART_SetConfig+0x4e4>)
 8005a3a:	fba3 2302 	umull	r2, r3, r3, r2
 8005a3e:	095b      	lsrs	r3, r3, #5
 8005a40:	011c      	lsls	r4, r3, #4
 8005a42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a46:	2200      	movs	r2, #0
 8005a48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005a50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005a54:	4642      	mov	r2, r8
 8005a56:	464b      	mov	r3, r9
 8005a58:	1891      	adds	r1, r2, r2
 8005a5a:	61b9      	str	r1, [r7, #24]
 8005a5c:	415b      	adcs	r3, r3
 8005a5e:	61fb      	str	r3, [r7, #28]
 8005a60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a64:	4641      	mov	r1, r8
 8005a66:	1851      	adds	r1, r2, r1
 8005a68:	6139      	str	r1, [r7, #16]
 8005a6a:	4649      	mov	r1, r9
 8005a6c:	414b      	adcs	r3, r1
 8005a6e:	617b      	str	r3, [r7, #20]
 8005a70:	f04f 0200 	mov.w	r2, #0
 8005a74:	f04f 0300 	mov.w	r3, #0
 8005a78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a7c:	4659      	mov	r1, fp
 8005a7e:	00cb      	lsls	r3, r1, #3
 8005a80:	4651      	mov	r1, sl
 8005a82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a86:	4651      	mov	r1, sl
 8005a88:	00ca      	lsls	r2, r1, #3
 8005a8a:	4610      	mov	r0, r2
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	4603      	mov	r3, r0
 8005a90:	4642      	mov	r2, r8
 8005a92:	189b      	adds	r3, r3, r2
 8005a94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a98:	464b      	mov	r3, r9
 8005a9a:	460a      	mov	r2, r1
 8005a9c:	eb42 0303 	adc.w	r3, r2, r3
 8005aa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	67bb      	str	r3, [r7, #120]	; 0x78
 8005aae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005ab0:	f04f 0200 	mov.w	r2, #0
 8005ab4:	f04f 0300 	mov.w	r3, #0
 8005ab8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005abc:	4649      	mov	r1, r9
 8005abe:	008b      	lsls	r3, r1, #2
 8005ac0:	4641      	mov	r1, r8
 8005ac2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ac6:	4641      	mov	r1, r8
 8005ac8:	008a      	lsls	r2, r1, #2
 8005aca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005ace:	f7fb f913 	bl	8000cf8 <__aeabi_uldivmod>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	4611      	mov	r1, r2
 8005ad8:	4b38      	ldr	r3, [pc, #224]	; (8005bbc <UART_SetConfig+0x4e4>)
 8005ada:	fba3 2301 	umull	r2, r3, r3, r1
 8005ade:	095b      	lsrs	r3, r3, #5
 8005ae0:	2264      	movs	r2, #100	; 0x64
 8005ae2:	fb02 f303 	mul.w	r3, r2, r3
 8005ae6:	1acb      	subs	r3, r1, r3
 8005ae8:	011b      	lsls	r3, r3, #4
 8005aea:	3332      	adds	r3, #50	; 0x32
 8005aec:	4a33      	ldr	r2, [pc, #204]	; (8005bbc <UART_SetConfig+0x4e4>)
 8005aee:	fba2 2303 	umull	r2, r3, r2, r3
 8005af2:	095b      	lsrs	r3, r3, #5
 8005af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005af8:	441c      	add	r4, r3
 8005afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005afe:	2200      	movs	r2, #0
 8005b00:	673b      	str	r3, [r7, #112]	; 0x70
 8005b02:	677a      	str	r2, [r7, #116]	; 0x74
 8005b04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005b08:	4642      	mov	r2, r8
 8005b0a:	464b      	mov	r3, r9
 8005b0c:	1891      	adds	r1, r2, r2
 8005b0e:	60b9      	str	r1, [r7, #8]
 8005b10:	415b      	adcs	r3, r3
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b18:	4641      	mov	r1, r8
 8005b1a:	1851      	adds	r1, r2, r1
 8005b1c:	6039      	str	r1, [r7, #0]
 8005b1e:	4649      	mov	r1, r9
 8005b20:	414b      	adcs	r3, r1
 8005b22:	607b      	str	r3, [r7, #4]
 8005b24:	f04f 0200 	mov.w	r2, #0
 8005b28:	f04f 0300 	mov.w	r3, #0
 8005b2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b30:	4659      	mov	r1, fp
 8005b32:	00cb      	lsls	r3, r1, #3
 8005b34:	4651      	mov	r1, sl
 8005b36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b3a:	4651      	mov	r1, sl
 8005b3c:	00ca      	lsls	r2, r1, #3
 8005b3e:	4610      	mov	r0, r2
 8005b40:	4619      	mov	r1, r3
 8005b42:	4603      	mov	r3, r0
 8005b44:	4642      	mov	r2, r8
 8005b46:	189b      	adds	r3, r3, r2
 8005b48:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b4a:	464b      	mov	r3, r9
 8005b4c:	460a      	mov	r2, r1
 8005b4e:	eb42 0303 	adc.w	r3, r2, r3
 8005b52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	663b      	str	r3, [r7, #96]	; 0x60
 8005b5e:	667a      	str	r2, [r7, #100]	; 0x64
 8005b60:	f04f 0200 	mov.w	r2, #0
 8005b64:	f04f 0300 	mov.w	r3, #0
 8005b68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005b6c:	4649      	mov	r1, r9
 8005b6e:	008b      	lsls	r3, r1, #2
 8005b70:	4641      	mov	r1, r8
 8005b72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b76:	4641      	mov	r1, r8
 8005b78:	008a      	lsls	r2, r1, #2
 8005b7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005b7e:	f7fb f8bb 	bl	8000cf8 <__aeabi_uldivmod>
 8005b82:	4602      	mov	r2, r0
 8005b84:	460b      	mov	r3, r1
 8005b86:	4b0d      	ldr	r3, [pc, #52]	; (8005bbc <UART_SetConfig+0x4e4>)
 8005b88:	fba3 1302 	umull	r1, r3, r3, r2
 8005b8c:	095b      	lsrs	r3, r3, #5
 8005b8e:	2164      	movs	r1, #100	; 0x64
 8005b90:	fb01 f303 	mul.w	r3, r1, r3
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	011b      	lsls	r3, r3, #4
 8005b98:	3332      	adds	r3, #50	; 0x32
 8005b9a:	4a08      	ldr	r2, [pc, #32]	; (8005bbc <UART_SetConfig+0x4e4>)
 8005b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba0:	095b      	lsrs	r3, r3, #5
 8005ba2:	f003 020f 	and.w	r2, r3, #15
 8005ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4422      	add	r2, r4
 8005bae:	609a      	str	r2, [r3, #8]
}
 8005bb0:	bf00      	nop
 8005bb2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bbc:	51eb851f 	.word	0x51eb851f

08005bc0 <atoi>:
 8005bc0:	220a      	movs	r2, #10
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	f000 b882 	b.w	8005ccc <strtol>

08005bc8 <_strtol_l.constprop.0>:
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bce:	d001      	beq.n	8005bd4 <_strtol_l.constprop.0+0xc>
 8005bd0:	2b24      	cmp	r3, #36	; 0x24
 8005bd2:	d906      	bls.n	8005be2 <_strtol_l.constprop.0+0x1a>
 8005bd4:	f000 fe62 	bl	800689c <__errno>
 8005bd8:	2316      	movs	r3, #22
 8005bda:	6003      	str	r3, [r0, #0]
 8005bdc:	2000      	movs	r0, #0
 8005bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005be2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005cc8 <_strtol_l.constprop.0+0x100>
 8005be6:	460d      	mov	r5, r1
 8005be8:	462e      	mov	r6, r5
 8005bea:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005bee:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8005bf2:	f017 0708 	ands.w	r7, r7, #8
 8005bf6:	d1f7      	bne.n	8005be8 <_strtol_l.constprop.0+0x20>
 8005bf8:	2c2d      	cmp	r4, #45	; 0x2d
 8005bfa:	d132      	bne.n	8005c62 <_strtol_l.constprop.0+0x9a>
 8005bfc:	782c      	ldrb	r4, [r5, #0]
 8005bfe:	2701      	movs	r7, #1
 8005c00:	1cb5      	adds	r5, r6, #2
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d05b      	beq.n	8005cbe <_strtol_l.constprop.0+0xf6>
 8005c06:	2b10      	cmp	r3, #16
 8005c08:	d109      	bne.n	8005c1e <_strtol_l.constprop.0+0x56>
 8005c0a:	2c30      	cmp	r4, #48	; 0x30
 8005c0c:	d107      	bne.n	8005c1e <_strtol_l.constprop.0+0x56>
 8005c0e:	782c      	ldrb	r4, [r5, #0]
 8005c10:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005c14:	2c58      	cmp	r4, #88	; 0x58
 8005c16:	d14d      	bne.n	8005cb4 <_strtol_l.constprop.0+0xec>
 8005c18:	786c      	ldrb	r4, [r5, #1]
 8005c1a:	2310      	movs	r3, #16
 8005c1c:	3502      	adds	r5, #2
 8005c1e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005c22:	f108 38ff 	add.w	r8, r8, #4294967295
 8005c26:	f04f 0e00 	mov.w	lr, #0
 8005c2a:	fbb8 f9f3 	udiv	r9, r8, r3
 8005c2e:	4676      	mov	r6, lr
 8005c30:	fb03 8a19 	mls	sl, r3, r9, r8
 8005c34:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005c38:	f1bc 0f09 	cmp.w	ip, #9
 8005c3c:	d816      	bhi.n	8005c6c <_strtol_l.constprop.0+0xa4>
 8005c3e:	4664      	mov	r4, ip
 8005c40:	42a3      	cmp	r3, r4
 8005c42:	dd24      	ble.n	8005c8e <_strtol_l.constprop.0+0xc6>
 8005c44:	f1be 3fff 	cmp.w	lr, #4294967295
 8005c48:	d008      	beq.n	8005c5c <_strtol_l.constprop.0+0x94>
 8005c4a:	45b1      	cmp	r9, r6
 8005c4c:	d31c      	bcc.n	8005c88 <_strtol_l.constprop.0+0xc0>
 8005c4e:	d101      	bne.n	8005c54 <_strtol_l.constprop.0+0x8c>
 8005c50:	45a2      	cmp	sl, r4
 8005c52:	db19      	blt.n	8005c88 <_strtol_l.constprop.0+0xc0>
 8005c54:	fb06 4603 	mla	r6, r6, r3, r4
 8005c58:	f04f 0e01 	mov.w	lr, #1
 8005c5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c60:	e7e8      	b.n	8005c34 <_strtol_l.constprop.0+0x6c>
 8005c62:	2c2b      	cmp	r4, #43	; 0x2b
 8005c64:	bf04      	itt	eq
 8005c66:	782c      	ldrbeq	r4, [r5, #0]
 8005c68:	1cb5      	addeq	r5, r6, #2
 8005c6a:	e7ca      	b.n	8005c02 <_strtol_l.constprop.0+0x3a>
 8005c6c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005c70:	f1bc 0f19 	cmp.w	ip, #25
 8005c74:	d801      	bhi.n	8005c7a <_strtol_l.constprop.0+0xb2>
 8005c76:	3c37      	subs	r4, #55	; 0x37
 8005c78:	e7e2      	b.n	8005c40 <_strtol_l.constprop.0+0x78>
 8005c7a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005c7e:	f1bc 0f19 	cmp.w	ip, #25
 8005c82:	d804      	bhi.n	8005c8e <_strtol_l.constprop.0+0xc6>
 8005c84:	3c57      	subs	r4, #87	; 0x57
 8005c86:	e7db      	b.n	8005c40 <_strtol_l.constprop.0+0x78>
 8005c88:	f04f 3eff 	mov.w	lr, #4294967295
 8005c8c:	e7e6      	b.n	8005c5c <_strtol_l.constprop.0+0x94>
 8005c8e:	f1be 3fff 	cmp.w	lr, #4294967295
 8005c92:	d105      	bne.n	8005ca0 <_strtol_l.constprop.0+0xd8>
 8005c94:	2322      	movs	r3, #34	; 0x22
 8005c96:	6003      	str	r3, [r0, #0]
 8005c98:	4646      	mov	r6, r8
 8005c9a:	b942      	cbnz	r2, 8005cae <_strtol_l.constprop.0+0xe6>
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	e79e      	b.n	8005bde <_strtol_l.constprop.0+0x16>
 8005ca0:	b107      	cbz	r7, 8005ca4 <_strtol_l.constprop.0+0xdc>
 8005ca2:	4276      	negs	r6, r6
 8005ca4:	2a00      	cmp	r2, #0
 8005ca6:	d0f9      	beq.n	8005c9c <_strtol_l.constprop.0+0xd4>
 8005ca8:	f1be 0f00 	cmp.w	lr, #0
 8005cac:	d000      	beq.n	8005cb0 <_strtol_l.constprop.0+0xe8>
 8005cae:	1e69      	subs	r1, r5, #1
 8005cb0:	6011      	str	r1, [r2, #0]
 8005cb2:	e7f3      	b.n	8005c9c <_strtol_l.constprop.0+0xd4>
 8005cb4:	2430      	movs	r4, #48	; 0x30
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1b1      	bne.n	8005c1e <_strtol_l.constprop.0+0x56>
 8005cba:	2308      	movs	r3, #8
 8005cbc:	e7af      	b.n	8005c1e <_strtol_l.constprop.0+0x56>
 8005cbe:	2c30      	cmp	r4, #48	; 0x30
 8005cc0:	d0a5      	beq.n	8005c0e <_strtol_l.constprop.0+0x46>
 8005cc2:	230a      	movs	r3, #10
 8005cc4:	e7ab      	b.n	8005c1e <_strtol_l.constprop.0+0x56>
 8005cc6:	bf00      	nop
 8005cc8:	080092a1 	.word	0x080092a1

08005ccc <strtol>:
 8005ccc:	4613      	mov	r3, r2
 8005cce:	460a      	mov	r2, r1
 8005cd0:	4601      	mov	r1, r0
 8005cd2:	4802      	ldr	r0, [pc, #8]	; (8005cdc <strtol+0x10>)
 8005cd4:	6800      	ldr	r0, [r0, #0]
 8005cd6:	f7ff bf77 	b.w	8005bc8 <_strtol_l.constprop.0>
 8005cda:	bf00      	nop
 8005cdc:	20000074 	.word	0x20000074

08005ce0 <__cvt>:
 8005ce0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ce4:	ec55 4b10 	vmov	r4, r5, d0
 8005ce8:	2d00      	cmp	r5, #0
 8005cea:	460e      	mov	r6, r1
 8005cec:	4619      	mov	r1, r3
 8005cee:	462b      	mov	r3, r5
 8005cf0:	bfbb      	ittet	lt
 8005cf2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005cf6:	461d      	movlt	r5, r3
 8005cf8:	2300      	movge	r3, #0
 8005cfa:	232d      	movlt	r3, #45	; 0x2d
 8005cfc:	700b      	strb	r3, [r1, #0]
 8005cfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d00:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005d04:	4691      	mov	r9, r2
 8005d06:	f023 0820 	bic.w	r8, r3, #32
 8005d0a:	bfbc      	itt	lt
 8005d0c:	4622      	movlt	r2, r4
 8005d0e:	4614      	movlt	r4, r2
 8005d10:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d14:	d005      	beq.n	8005d22 <__cvt+0x42>
 8005d16:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005d1a:	d100      	bne.n	8005d1e <__cvt+0x3e>
 8005d1c:	3601      	adds	r6, #1
 8005d1e:	2102      	movs	r1, #2
 8005d20:	e000      	b.n	8005d24 <__cvt+0x44>
 8005d22:	2103      	movs	r1, #3
 8005d24:	ab03      	add	r3, sp, #12
 8005d26:	9301      	str	r3, [sp, #4]
 8005d28:	ab02      	add	r3, sp, #8
 8005d2a:	9300      	str	r3, [sp, #0]
 8005d2c:	ec45 4b10 	vmov	d0, r4, r5
 8005d30:	4653      	mov	r3, sl
 8005d32:	4632      	mov	r2, r6
 8005d34:	f000 fe78 	bl	8006a28 <_dtoa_r>
 8005d38:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005d3c:	4607      	mov	r7, r0
 8005d3e:	d102      	bne.n	8005d46 <__cvt+0x66>
 8005d40:	f019 0f01 	tst.w	r9, #1
 8005d44:	d022      	beq.n	8005d8c <__cvt+0xac>
 8005d46:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d4a:	eb07 0906 	add.w	r9, r7, r6
 8005d4e:	d110      	bne.n	8005d72 <__cvt+0x92>
 8005d50:	783b      	ldrb	r3, [r7, #0]
 8005d52:	2b30      	cmp	r3, #48	; 0x30
 8005d54:	d10a      	bne.n	8005d6c <__cvt+0x8c>
 8005d56:	2200      	movs	r2, #0
 8005d58:	2300      	movs	r3, #0
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	4629      	mov	r1, r5
 8005d5e:	f7fa febb 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d62:	b918      	cbnz	r0, 8005d6c <__cvt+0x8c>
 8005d64:	f1c6 0601 	rsb	r6, r6, #1
 8005d68:	f8ca 6000 	str.w	r6, [sl]
 8005d6c:	f8da 3000 	ldr.w	r3, [sl]
 8005d70:	4499      	add	r9, r3
 8005d72:	2200      	movs	r2, #0
 8005d74:	2300      	movs	r3, #0
 8005d76:	4620      	mov	r0, r4
 8005d78:	4629      	mov	r1, r5
 8005d7a:	f7fa fead 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d7e:	b108      	cbz	r0, 8005d84 <__cvt+0xa4>
 8005d80:	f8cd 900c 	str.w	r9, [sp, #12]
 8005d84:	2230      	movs	r2, #48	; 0x30
 8005d86:	9b03      	ldr	r3, [sp, #12]
 8005d88:	454b      	cmp	r3, r9
 8005d8a:	d307      	bcc.n	8005d9c <__cvt+0xbc>
 8005d8c:	9b03      	ldr	r3, [sp, #12]
 8005d8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d90:	1bdb      	subs	r3, r3, r7
 8005d92:	4638      	mov	r0, r7
 8005d94:	6013      	str	r3, [r2, #0]
 8005d96:	b004      	add	sp, #16
 8005d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d9c:	1c59      	adds	r1, r3, #1
 8005d9e:	9103      	str	r1, [sp, #12]
 8005da0:	701a      	strb	r2, [r3, #0]
 8005da2:	e7f0      	b.n	8005d86 <__cvt+0xa6>

08005da4 <__exponent>:
 8005da4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005da6:	4603      	mov	r3, r0
 8005da8:	2900      	cmp	r1, #0
 8005daa:	bfb8      	it	lt
 8005dac:	4249      	neglt	r1, r1
 8005dae:	f803 2b02 	strb.w	r2, [r3], #2
 8005db2:	bfb4      	ite	lt
 8005db4:	222d      	movlt	r2, #45	; 0x2d
 8005db6:	222b      	movge	r2, #43	; 0x2b
 8005db8:	2909      	cmp	r1, #9
 8005dba:	7042      	strb	r2, [r0, #1]
 8005dbc:	dd2a      	ble.n	8005e14 <__exponent+0x70>
 8005dbe:	f10d 0207 	add.w	r2, sp, #7
 8005dc2:	4617      	mov	r7, r2
 8005dc4:	260a      	movs	r6, #10
 8005dc6:	4694      	mov	ip, r2
 8005dc8:	fb91 f5f6 	sdiv	r5, r1, r6
 8005dcc:	fb06 1415 	mls	r4, r6, r5, r1
 8005dd0:	3430      	adds	r4, #48	; 0x30
 8005dd2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005dd6:	460c      	mov	r4, r1
 8005dd8:	2c63      	cmp	r4, #99	; 0x63
 8005dda:	f102 32ff 	add.w	r2, r2, #4294967295
 8005dde:	4629      	mov	r1, r5
 8005de0:	dcf1      	bgt.n	8005dc6 <__exponent+0x22>
 8005de2:	3130      	adds	r1, #48	; 0x30
 8005de4:	f1ac 0402 	sub.w	r4, ip, #2
 8005de8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005dec:	1c41      	adds	r1, r0, #1
 8005dee:	4622      	mov	r2, r4
 8005df0:	42ba      	cmp	r2, r7
 8005df2:	d30a      	bcc.n	8005e0a <__exponent+0x66>
 8005df4:	f10d 0209 	add.w	r2, sp, #9
 8005df8:	eba2 020c 	sub.w	r2, r2, ip
 8005dfc:	42bc      	cmp	r4, r7
 8005dfe:	bf88      	it	hi
 8005e00:	2200      	movhi	r2, #0
 8005e02:	4413      	add	r3, r2
 8005e04:	1a18      	subs	r0, r3, r0
 8005e06:	b003      	add	sp, #12
 8005e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e0a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005e0e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005e12:	e7ed      	b.n	8005df0 <__exponent+0x4c>
 8005e14:	2330      	movs	r3, #48	; 0x30
 8005e16:	3130      	adds	r1, #48	; 0x30
 8005e18:	7083      	strb	r3, [r0, #2]
 8005e1a:	70c1      	strb	r1, [r0, #3]
 8005e1c:	1d03      	adds	r3, r0, #4
 8005e1e:	e7f1      	b.n	8005e04 <__exponent+0x60>

08005e20 <_printf_float>:
 8005e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e24:	ed2d 8b02 	vpush	{d8}
 8005e28:	b08d      	sub	sp, #52	; 0x34
 8005e2a:	460c      	mov	r4, r1
 8005e2c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005e30:	4616      	mov	r6, r2
 8005e32:	461f      	mov	r7, r3
 8005e34:	4605      	mov	r5, r0
 8005e36:	f000 fce7 	bl	8006808 <_localeconv_r>
 8005e3a:	f8d0 a000 	ldr.w	sl, [r0]
 8005e3e:	4650      	mov	r0, sl
 8005e40:	f7fa fa1e 	bl	8000280 <strlen>
 8005e44:	2300      	movs	r3, #0
 8005e46:	930a      	str	r3, [sp, #40]	; 0x28
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	9305      	str	r3, [sp, #20]
 8005e4c:	f8d8 3000 	ldr.w	r3, [r8]
 8005e50:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005e54:	3307      	adds	r3, #7
 8005e56:	f023 0307 	bic.w	r3, r3, #7
 8005e5a:	f103 0208 	add.w	r2, r3, #8
 8005e5e:	f8c8 2000 	str.w	r2, [r8]
 8005e62:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005e6a:	9307      	str	r3, [sp, #28]
 8005e6c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e70:	ee08 0a10 	vmov	s16, r0
 8005e74:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005e78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e7c:	4b9e      	ldr	r3, [pc, #632]	; (80060f8 <_printf_float+0x2d8>)
 8005e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e82:	f7fa fe5b 	bl	8000b3c <__aeabi_dcmpun>
 8005e86:	bb88      	cbnz	r0, 8005eec <_printf_float+0xcc>
 8005e88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e8c:	4b9a      	ldr	r3, [pc, #616]	; (80060f8 <_printf_float+0x2d8>)
 8005e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e92:	f7fa fe35 	bl	8000b00 <__aeabi_dcmple>
 8005e96:	bb48      	cbnz	r0, 8005eec <_printf_float+0xcc>
 8005e98:	2200      	movs	r2, #0
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	4640      	mov	r0, r8
 8005e9e:	4649      	mov	r1, r9
 8005ea0:	f7fa fe24 	bl	8000aec <__aeabi_dcmplt>
 8005ea4:	b110      	cbz	r0, 8005eac <_printf_float+0x8c>
 8005ea6:	232d      	movs	r3, #45	; 0x2d
 8005ea8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eac:	4a93      	ldr	r2, [pc, #588]	; (80060fc <_printf_float+0x2dc>)
 8005eae:	4b94      	ldr	r3, [pc, #592]	; (8006100 <_printf_float+0x2e0>)
 8005eb0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005eb4:	bf94      	ite	ls
 8005eb6:	4690      	movls	r8, r2
 8005eb8:	4698      	movhi	r8, r3
 8005eba:	2303      	movs	r3, #3
 8005ebc:	6123      	str	r3, [r4, #16]
 8005ebe:	9b05      	ldr	r3, [sp, #20]
 8005ec0:	f023 0304 	bic.w	r3, r3, #4
 8005ec4:	6023      	str	r3, [r4, #0]
 8005ec6:	f04f 0900 	mov.w	r9, #0
 8005eca:	9700      	str	r7, [sp, #0]
 8005ecc:	4633      	mov	r3, r6
 8005ece:	aa0b      	add	r2, sp, #44	; 0x2c
 8005ed0:	4621      	mov	r1, r4
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	f000 f9da 	bl	800628c <_printf_common>
 8005ed8:	3001      	adds	r0, #1
 8005eda:	f040 8090 	bne.w	8005ffe <_printf_float+0x1de>
 8005ede:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee2:	b00d      	add	sp, #52	; 0x34
 8005ee4:	ecbd 8b02 	vpop	{d8}
 8005ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eec:	4642      	mov	r2, r8
 8005eee:	464b      	mov	r3, r9
 8005ef0:	4640      	mov	r0, r8
 8005ef2:	4649      	mov	r1, r9
 8005ef4:	f7fa fe22 	bl	8000b3c <__aeabi_dcmpun>
 8005ef8:	b140      	cbz	r0, 8005f0c <_printf_float+0xec>
 8005efa:	464b      	mov	r3, r9
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	bfbc      	itt	lt
 8005f00:	232d      	movlt	r3, #45	; 0x2d
 8005f02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005f06:	4a7f      	ldr	r2, [pc, #508]	; (8006104 <_printf_float+0x2e4>)
 8005f08:	4b7f      	ldr	r3, [pc, #508]	; (8006108 <_printf_float+0x2e8>)
 8005f0a:	e7d1      	b.n	8005eb0 <_printf_float+0x90>
 8005f0c:	6863      	ldr	r3, [r4, #4]
 8005f0e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005f12:	9206      	str	r2, [sp, #24]
 8005f14:	1c5a      	adds	r2, r3, #1
 8005f16:	d13f      	bne.n	8005f98 <_printf_float+0x178>
 8005f18:	2306      	movs	r3, #6
 8005f1a:	6063      	str	r3, [r4, #4]
 8005f1c:	9b05      	ldr	r3, [sp, #20]
 8005f1e:	6861      	ldr	r1, [r4, #4]
 8005f20:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005f24:	2300      	movs	r3, #0
 8005f26:	9303      	str	r3, [sp, #12]
 8005f28:	ab0a      	add	r3, sp, #40	; 0x28
 8005f2a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005f2e:	ab09      	add	r3, sp, #36	; 0x24
 8005f30:	ec49 8b10 	vmov	d0, r8, r9
 8005f34:	9300      	str	r3, [sp, #0]
 8005f36:	6022      	str	r2, [r4, #0]
 8005f38:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	f7ff fecf 	bl	8005ce0 <__cvt>
 8005f42:	9b06      	ldr	r3, [sp, #24]
 8005f44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f46:	2b47      	cmp	r3, #71	; 0x47
 8005f48:	4680      	mov	r8, r0
 8005f4a:	d108      	bne.n	8005f5e <_printf_float+0x13e>
 8005f4c:	1cc8      	adds	r0, r1, #3
 8005f4e:	db02      	blt.n	8005f56 <_printf_float+0x136>
 8005f50:	6863      	ldr	r3, [r4, #4]
 8005f52:	4299      	cmp	r1, r3
 8005f54:	dd41      	ble.n	8005fda <_printf_float+0x1ba>
 8005f56:	f1ab 0302 	sub.w	r3, fp, #2
 8005f5a:	fa5f fb83 	uxtb.w	fp, r3
 8005f5e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f62:	d820      	bhi.n	8005fa6 <_printf_float+0x186>
 8005f64:	3901      	subs	r1, #1
 8005f66:	465a      	mov	r2, fp
 8005f68:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005f6c:	9109      	str	r1, [sp, #36]	; 0x24
 8005f6e:	f7ff ff19 	bl	8005da4 <__exponent>
 8005f72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f74:	1813      	adds	r3, r2, r0
 8005f76:	2a01      	cmp	r2, #1
 8005f78:	4681      	mov	r9, r0
 8005f7a:	6123      	str	r3, [r4, #16]
 8005f7c:	dc02      	bgt.n	8005f84 <_printf_float+0x164>
 8005f7e:	6822      	ldr	r2, [r4, #0]
 8005f80:	07d2      	lsls	r2, r2, #31
 8005f82:	d501      	bpl.n	8005f88 <_printf_float+0x168>
 8005f84:	3301      	adds	r3, #1
 8005f86:	6123      	str	r3, [r4, #16]
 8005f88:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d09c      	beq.n	8005eca <_printf_float+0xaa>
 8005f90:	232d      	movs	r3, #45	; 0x2d
 8005f92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f96:	e798      	b.n	8005eca <_printf_float+0xaa>
 8005f98:	9a06      	ldr	r2, [sp, #24]
 8005f9a:	2a47      	cmp	r2, #71	; 0x47
 8005f9c:	d1be      	bne.n	8005f1c <_printf_float+0xfc>
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1bc      	bne.n	8005f1c <_printf_float+0xfc>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e7b9      	b.n	8005f1a <_printf_float+0xfa>
 8005fa6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005faa:	d118      	bne.n	8005fde <_printf_float+0x1be>
 8005fac:	2900      	cmp	r1, #0
 8005fae:	6863      	ldr	r3, [r4, #4]
 8005fb0:	dd0b      	ble.n	8005fca <_printf_float+0x1aa>
 8005fb2:	6121      	str	r1, [r4, #16]
 8005fb4:	b913      	cbnz	r3, 8005fbc <_printf_float+0x19c>
 8005fb6:	6822      	ldr	r2, [r4, #0]
 8005fb8:	07d0      	lsls	r0, r2, #31
 8005fba:	d502      	bpl.n	8005fc2 <_printf_float+0x1a2>
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	440b      	add	r3, r1
 8005fc0:	6123      	str	r3, [r4, #16]
 8005fc2:	65a1      	str	r1, [r4, #88]	; 0x58
 8005fc4:	f04f 0900 	mov.w	r9, #0
 8005fc8:	e7de      	b.n	8005f88 <_printf_float+0x168>
 8005fca:	b913      	cbnz	r3, 8005fd2 <_printf_float+0x1b2>
 8005fcc:	6822      	ldr	r2, [r4, #0]
 8005fce:	07d2      	lsls	r2, r2, #31
 8005fd0:	d501      	bpl.n	8005fd6 <_printf_float+0x1b6>
 8005fd2:	3302      	adds	r3, #2
 8005fd4:	e7f4      	b.n	8005fc0 <_printf_float+0x1a0>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e7f2      	b.n	8005fc0 <_printf_float+0x1a0>
 8005fda:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005fde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fe0:	4299      	cmp	r1, r3
 8005fe2:	db05      	blt.n	8005ff0 <_printf_float+0x1d0>
 8005fe4:	6823      	ldr	r3, [r4, #0]
 8005fe6:	6121      	str	r1, [r4, #16]
 8005fe8:	07d8      	lsls	r0, r3, #31
 8005fea:	d5ea      	bpl.n	8005fc2 <_printf_float+0x1a2>
 8005fec:	1c4b      	adds	r3, r1, #1
 8005fee:	e7e7      	b.n	8005fc0 <_printf_float+0x1a0>
 8005ff0:	2900      	cmp	r1, #0
 8005ff2:	bfd4      	ite	le
 8005ff4:	f1c1 0202 	rsble	r2, r1, #2
 8005ff8:	2201      	movgt	r2, #1
 8005ffa:	4413      	add	r3, r2
 8005ffc:	e7e0      	b.n	8005fc0 <_printf_float+0x1a0>
 8005ffe:	6823      	ldr	r3, [r4, #0]
 8006000:	055a      	lsls	r2, r3, #21
 8006002:	d407      	bmi.n	8006014 <_printf_float+0x1f4>
 8006004:	6923      	ldr	r3, [r4, #16]
 8006006:	4642      	mov	r2, r8
 8006008:	4631      	mov	r1, r6
 800600a:	4628      	mov	r0, r5
 800600c:	47b8      	blx	r7
 800600e:	3001      	adds	r0, #1
 8006010:	d12c      	bne.n	800606c <_printf_float+0x24c>
 8006012:	e764      	b.n	8005ede <_printf_float+0xbe>
 8006014:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006018:	f240 80e0 	bls.w	80061dc <_printf_float+0x3bc>
 800601c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006020:	2200      	movs	r2, #0
 8006022:	2300      	movs	r3, #0
 8006024:	f7fa fd58 	bl	8000ad8 <__aeabi_dcmpeq>
 8006028:	2800      	cmp	r0, #0
 800602a:	d034      	beq.n	8006096 <_printf_float+0x276>
 800602c:	4a37      	ldr	r2, [pc, #220]	; (800610c <_printf_float+0x2ec>)
 800602e:	2301      	movs	r3, #1
 8006030:	4631      	mov	r1, r6
 8006032:	4628      	mov	r0, r5
 8006034:	47b8      	blx	r7
 8006036:	3001      	adds	r0, #1
 8006038:	f43f af51 	beq.w	8005ede <_printf_float+0xbe>
 800603c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006040:	429a      	cmp	r2, r3
 8006042:	db02      	blt.n	800604a <_printf_float+0x22a>
 8006044:	6823      	ldr	r3, [r4, #0]
 8006046:	07d8      	lsls	r0, r3, #31
 8006048:	d510      	bpl.n	800606c <_printf_float+0x24c>
 800604a:	ee18 3a10 	vmov	r3, s16
 800604e:	4652      	mov	r2, sl
 8006050:	4631      	mov	r1, r6
 8006052:	4628      	mov	r0, r5
 8006054:	47b8      	blx	r7
 8006056:	3001      	adds	r0, #1
 8006058:	f43f af41 	beq.w	8005ede <_printf_float+0xbe>
 800605c:	f04f 0800 	mov.w	r8, #0
 8006060:	f104 091a 	add.w	r9, r4, #26
 8006064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006066:	3b01      	subs	r3, #1
 8006068:	4543      	cmp	r3, r8
 800606a:	dc09      	bgt.n	8006080 <_printf_float+0x260>
 800606c:	6823      	ldr	r3, [r4, #0]
 800606e:	079b      	lsls	r3, r3, #30
 8006070:	f100 8107 	bmi.w	8006282 <_printf_float+0x462>
 8006074:	68e0      	ldr	r0, [r4, #12]
 8006076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006078:	4298      	cmp	r0, r3
 800607a:	bfb8      	it	lt
 800607c:	4618      	movlt	r0, r3
 800607e:	e730      	b.n	8005ee2 <_printf_float+0xc2>
 8006080:	2301      	movs	r3, #1
 8006082:	464a      	mov	r2, r9
 8006084:	4631      	mov	r1, r6
 8006086:	4628      	mov	r0, r5
 8006088:	47b8      	blx	r7
 800608a:	3001      	adds	r0, #1
 800608c:	f43f af27 	beq.w	8005ede <_printf_float+0xbe>
 8006090:	f108 0801 	add.w	r8, r8, #1
 8006094:	e7e6      	b.n	8006064 <_printf_float+0x244>
 8006096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006098:	2b00      	cmp	r3, #0
 800609a:	dc39      	bgt.n	8006110 <_printf_float+0x2f0>
 800609c:	4a1b      	ldr	r2, [pc, #108]	; (800610c <_printf_float+0x2ec>)
 800609e:	2301      	movs	r3, #1
 80060a0:	4631      	mov	r1, r6
 80060a2:	4628      	mov	r0, r5
 80060a4:	47b8      	blx	r7
 80060a6:	3001      	adds	r0, #1
 80060a8:	f43f af19 	beq.w	8005ede <_printf_float+0xbe>
 80060ac:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80060b0:	4313      	orrs	r3, r2
 80060b2:	d102      	bne.n	80060ba <_printf_float+0x29a>
 80060b4:	6823      	ldr	r3, [r4, #0]
 80060b6:	07d9      	lsls	r1, r3, #31
 80060b8:	d5d8      	bpl.n	800606c <_printf_float+0x24c>
 80060ba:	ee18 3a10 	vmov	r3, s16
 80060be:	4652      	mov	r2, sl
 80060c0:	4631      	mov	r1, r6
 80060c2:	4628      	mov	r0, r5
 80060c4:	47b8      	blx	r7
 80060c6:	3001      	adds	r0, #1
 80060c8:	f43f af09 	beq.w	8005ede <_printf_float+0xbe>
 80060cc:	f04f 0900 	mov.w	r9, #0
 80060d0:	f104 0a1a 	add.w	sl, r4, #26
 80060d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060d6:	425b      	negs	r3, r3
 80060d8:	454b      	cmp	r3, r9
 80060da:	dc01      	bgt.n	80060e0 <_printf_float+0x2c0>
 80060dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060de:	e792      	b.n	8006006 <_printf_float+0x1e6>
 80060e0:	2301      	movs	r3, #1
 80060e2:	4652      	mov	r2, sl
 80060e4:	4631      	mov	r1, r6
 80060e6:	4628      	mov	r0, r5
 80060e8:	47b8      	blx	r7
 80060ea:	3001      	adds	r0, #1
 80060ec:	f43f aef7 	beq.w	8005ede <_printf_float+0xbe>
 80060f0:	f109 0901 	add.w	r9, r9, #1
 80060f4:	e7ee      	b.n	80060d4 <_printf_float+0x2b4>
 80060f6:	bf00      	nop
 80060f8:	7fefffff 	.word	0x7fefffff
 80060fc:	080093a1 	.word	0x080093a1
 8006100:	080093a5 	.word	0x080093a5
 8006104:	080093a9 	.word	0x080093a9
 8006108:	080093ad 	.word	0x080093ad
 800610c:	080093b1 	.word	0x080093b1
 8006110:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006112:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006114:	429a      	cmp	r2, r3
 8006116:	bfa8      	it	ge
 8006118:	461a      	movge	r2, r3
 800611a:	2a00      	cmp	r2, #0
 800611c:	4691      	mov	r9, r2
 800611e:	dc37      	bgt.n	8006190 <_printf_float+0x370>
 8006120:	f04f 0b00 	mov.w	fp, #0
 8006124:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006128:	f104 021a 	add.w	r2, r4, #26
 800612c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800612e:	9305      	str	r3, [sp, #20]
 8006130:	eba3 0309 	sub.w	r3, r3, r9
 8006134:	455b      	cmp	r3, fp
 8006136:	dc33      	bgt.n	80061a0 <_printf_float+0x380>
 8006138:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800613c:	429a      	cmp	r2, r3
 800613e:	db3b      	blt.n	80061b8 <_printf_float+0x398>
 8006140:	6823      	ldr	r3, [r4, #0]
 8006142:	07da      	lsls	r2, r3, #31
 8006144:	d438      	bmi.n	80061b8 <_printf_float+0x398>
 8006146:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800614a:	eba2 0903 	sub.w	r9, r2, r3
 800614e:	9b05      	ldr	r3, [sp, #20]
 8006150:	1ad2      	subs	r2, r2, r3
 8006152:	4591      	cmp	r9, r2
 8006154:	bfa8      	it	ge
 8006156:	4691      	movge	r9, r2
 8006158:	f1b9 0f00 	cmp.w	r9, #0
 800615c:	dc35      	bgt.n	80061ca <_printf_float+0x3aa>
 800615e:	f04f 0800 	mov.w	r8, #0
 8006162:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006166:	f104 0a1a 	add.w	sl, r4, #26
 800616a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800616e:	1a9b      	subs	r3, r3, r2
 8006170:	eba3 0309 	sub.w	r3, r3, r9
 8006174:	4543      	cmp	r3, r8
 8006176:	f77f af79 	ble.w	800606c <_printf_float+0x24c>
 800617a:	2301      	movs	r3, #1
 800617c:	4652      	mov	r2, sl
 800617e:	4631      	mov	r1, r6
 8006180:	4628      	mov	r0, r5
 8006182:	47b8      	blx	r7
 8006184:	3001      	adds	r0, #1
 8006186:	f43f aeaa 	beq.w	8005ede <_printf_float+0xbe>
 800618a:	f108 0801 	add.w	r8, r8, #1
 800618e:	e7ec      	b.n	800616a <_printf_float+0x34a>
 8006190:	4613      	mov	r3, r2
 8006192:	4631      	mov	r1, r6
 8006194:	4642      	mov	r2, r8
 8006196:	4628      	mov	r0, r5
 8006198:	47b8      	blx	r7
 800619a:	3001      	adds	r0, #1
 800619c:	d1c0      	bne.n	8006120 <_printf_float+0x300>
 800619e:	e69e      	b.n	8005ede <_printf_float+0xbe>
 80061a0:	2301      	movs	r3, #1
 80061a2:	4631      	mov	r1, r6
 80061a4:	4628      	mov	r0, r5
 80061a6:	9205      	str	r2, [sp, #20]
 80061a8:	47b8      	blx	r7
 80061aa:	3001      	adds	r0, #1
 80061ac:	f43f ae97 	beq.w	8005ede <_printf_float+0xbe>
 80061b0:	9a05      	ldr	r2, [sp, #20]
 80061b2:	f10b 0b01 	add.w	fp, fp, #1
 80061b6:	e7b9      	b.n	800612c <_printf_float+0x30c>
 80061b8:	ee18 3a10 	vmov	r3, s16
 80061bc:	4652      	mov	r2, sl
 80061be:	4631      	mov	r1, r6
 80061c0:	4628      	mov	r0, r5
 80061c2:	47b8      	blx	r7
 80061c4:	3001      	adds	r0, #1
 80061c6:	d1be      	bne.n	8006146 <_printf_float+0x326>
 80061c8:	e689      	b.n	8005ede <_printf_float+0xbe>
 80061ca:	9a05      	ldr	r2, [sp, #20]
 80061cc:	464b      	mov	r3, r9
 80061ce:	4442      	add	r2, r8
 80061d0:	4631      	mov	r1, r6
 80061d2:	4628      	mov	r0, r5
 80061d4:	47b8      	blx	r7
 80061d6:	3001      	adds	r0, #1
 80061d8:	d1c1      	bne.n	800615e <_printf_float+0x33e>
 80061da:	e680      	b.n	8005ede <_printf_float+0xbe>
 80061dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061de:	2a01      	cmp	r2, #1
 80061e0:	dc01      	bgt.n	80061e6 <_printf_float+0x3c6>
 80061e2:	07db      	lsls	r3, r3, #31
 80061e4:	d53a      	bpl.n	800625c <_printf_float+0x43c>
 80061e6:	2301      	movs	r3, #1
 80061e8:	4642      	mov	r2, r8
 80061ea:	4631      	mov	r1, r6
 80061ec:	4628      	mov	r0, r5
 80061ee:	47b8      	blx	r7
 80061f0:	3001      	adds	r0, #1
 80061f2:	f43f ae74 	beq.w	8005ede <_printf_float+0xbe>
 80061f6:	ee18 3a10 	vmov	r3, s16
 80061fa:	4652      	mov	r2, sl
 80061fc:	4631      	mov	r1, r6
 80061fe:	4628      	mov	r0, r5
 8006200:	47b8      	blx	r7
 8006202:	3001      	adds	r0, #1
 8006204:	f43f ae6b 	beq.w	8005ede <_printf_float+0xbe>
 8006208:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800620c:	2200      	movs	r2, #0
 800620e:	2300      	movs	r3, #0
 8006210:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006214:	f7fa fc60 	bl	8000ad8 <__aeabi_dcmpeq>
 8006218:	b9d8      	cbnz	r0, 8006252 <_printf_float+0x432>
 800621a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800621e:	f108 0201 	add.w	r2, r8, #1
 8006222:	4631      	mov	r1, r6
 8006224:	4628      	mov	r0, r5
 8006226:	47b8      	blx	r7
 8006228:	3001      	adds	r0, #1
 800622a:	d10e      	bne.n	800624a <_printf_float+0x42a>
 800622c:	e657      	b.n	8005ede <_printf_float+0xbe>
 800622e:	2301      	movs	r3, #1
 8006230:	4652      	mov	r2, sl
 8006232:	4631      	mov	r1, r6
 8006234:	4628      	mov	r0, r5
 8006236:	47b8      	blx	r7
 8006238:	3001      	adds	r0, #1
 800623a:	f43f ae50 	beq.w	8005ede <_printf_float+0xbe>
 800623e:	f108 0801 	add.w	r8, r8, #1
 8006242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006244:	3b01      	subs	r3, #1
 8006246:	4543      	cmp	r3, r8
 8006248:	dcf1      	bgt.n	800622e <_printf_float+0x40e>
 800624a:	464b      	mov	r3, r9
 800624c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006250:	e6da      	b.n	8006008 <_printf_float+0x1e8>
 8006252:	f04f 0800 	mov.w	r8, #0
 8006256:	f104 0a1a 	add.w	sl, r4, #26
 800625a:	e7f2      	b.n	8006242 <_printf_float+0x422>
 800625c:	2301      	movs	r3, #1
 800625e:	4642      	mov	r2, r8
 8006260:	e7df      	b.n	8006222 <_printf_float+0x402>
 8006262:	2301      	movs	r3, #1
 8006264:	464a      	mov	r2, r9
 8006266:	4631      	mov	r1, r6
 8006268:	4628      	mov	r0, r5
 800626a:	47b8      	blx	r7
 800626c:	3001      	adds	r0, #1
 800626e:	f43f ae36 	beq.w	8005ede <_printf_float+0xbe>
 8006272:	f108 0801 	add.w	r8, r8, #1
 8006276:	68e3      	ldr	r3, [r4, #12]
 8006278:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800627a:	1a5b      	subs	r3, r3, r1
 800627c:	4543      	cmp	r3, r8
 800627e:	dcf0      	bgt.n	8006262 <_printf_float+0x442>
 8006280:	e6f8      	b.n	8006074 <_printf_float+0x254>
 8006282:	f04f 0800 	mov.w	r8, #0
 8006286:	f104 0919 	add.w	r9, r4, #25
 800628a:	e7f4      	b.n	8006276 <_printf_float+0x456>

0800628c <_printf_common>:
 800628c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006290:	4616      	mov	r6, r2
 8006292:	4699      	mov	r9, r3
 8006294:	688a      	ldr	r2, [r1, #8]
 8006296:	690b      	ldr	r3, [r1, #16]
 8006298:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800629c:	4293      	cmp	r3, r2
 800629e:	bfb8      	it	lt
 80062a0:	4613      	movlt	r3, r2
 80062a2:	6033      	str	r3, [r6, #0]
 80062a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062a8:	4607      	mov	r7, r0
 80062aa:	460c      	mov	r4, r1
 80062ac:	b10a      	cbz	r2, 80062b2 <_printf_common+0x26>
 80062ae:	3301      	adds	r3, #1
 80062b0:	6033      	str	r3, [r6, #0]
 80062b2:	6823      	ldr	r3, [r4, #0]
 80062b4:	0699      	lsls	r1, r3, #26
 80062b6:	bf42      	ittt	mi
 80062b8:	6833      	ldrmi	r3, [r6, #0]
 80062ba:	3302      	addmi	r3, #2
 80062bc:	6033      	strmi	r3, [r6, #0]
 80062be:	6825      	ldr	r5, [r4, #0]
 80062c0:	f015 0506 	ands.w	r5, r5, #6
 80062c4:	d106      	bne.n	80062d4 <_printf_common+0x48>
 80062c6:	f104 0a19 	add.w	sl, r4, #25
 80062ca:	68e3      	ldr	r3, [r4, #12]
 80062cc:	6832      	ldr	r2, [r6, #0]
 80062ce:	1a9b      	subs	r3, r3, r2
 80062d0:	42ab      	cmp	r3, r5
 80062d2:	dc26      	bgt.n	8006322 <_printf_common+0x96>
 80062d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062d8:	1e13      	subs	r3, r2, #0
 80062da:	6822      	ldr	r2, [r4, #0]
 80062dc:	bf18      	it	ne
 80062de:	2301      	movne	r3, #1
 80062e0:	0692      	lsls	r2, r2, #26
 80062e2:	d42b      	bmi.n	800633c <_printf_common+0xb0>
 80062e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062e8:	4649      	mov	r1, r9
 80062ea:	4638      	mov	r0, r7
 80062ec:	47c0      	blx	r8
 80062ee:	3001      	adds	r0, #1
 80062f0:	d01e      	beq.n	8006330 <_printf_common+0xa4>
 80062f2:	6823      	ldr	r3, [r4, #0]
 80062f4:	6922      	ldr	r2, [r4, #16]
 80062f6:	f003 0306 	and.w	r3, r3, #6
 80062fa:	2b04      	cmp	r3, #4
 80062fc:	bf02      	ittt	eq
 80062fe:	68e5      	ldreq	r5, [r4, #12]
 8006300:	6833      	ldreq	r3, [r6, #0]
 8006302:	1aed      	subeq	r5, r5, r3
 8006304:	68a3      	ldr	r3, [r4, #8]
 8006306:	bf0c      	ite	eq
 8006308:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800630c:	2500      	movne	r5, #0
 800630e:	4293      	cmp	r3, r2
 8006310:	bfc4      	itt	gt
 8006312:	1a9b      	subgt	r3, r3, r2
 8006314:	18ed      	addgt	r5, r5, r3
 8006316:	2600      	movs	r6, #0
 8006318:	341a      	adds	r4, #26
 800631a:	42b5      	cmp	r5, r6
 800631c:	d11a      	bne.n	8006354 <_printf_common+0xc8>
 800631e:	2000      	movs	r0, #0
 8006320:	e008      	b.n	8006334 <_printf_common+0xa8>
 8006322:	2301      	movs	r3, #1
 8006324:	4652      	mov	r2, sl
 8006326:	4649      	mov	r1, r9
 8006328:	4638      	mov	r0, r7
 800632a:	47c0      	blx	r8
 800632c:	3001      	adds	r0, #1
 800632e:	d103      	bne.n	8006338 <_printf_common+0xac>
 8006330:	f04f 30ff 	mov.w	r0, #4294967295
 8006334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006338:	3501      	adds	r5, #1
 800633a:	e7c6      	b.n	80062ca <_printf_common+0x3e>
 800633c:	18e1      	adds	r1, r4, r3
 800633e:	1c5a      	adds	r2, r3, #1
 8006340:	2030      	movs	r0, #48	; 0x30
 8006342:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006346:	4422      	add	r2, r4
 8006348:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800634c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006350:	3302      	adds	r3, #2
 8006352:	e7c7      	b.n	80062e4 <_printf_common+0x58>
 8006354:	2301      	movs	r3, #1
 8006356:	4622      	mov	r2, r4
 8006358:	4649      	mov	r1, r9
 800635a:	4638      	mov	r0, r7
 800635c:	47c0      	blx	r8
 800635e:	3001      	adds	r0, #1
 8006360:	d0e6      	beq.n	8006330 <_printf_common+0xa4>
 8006362:	3601      	adds	r6, #1
 8006364:	e7d9      	b.n	800631a <_printf_common+0x8e>
	...

08006368 <_printf_i>:
 8006368:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800636c:	7e0f      	ldrb	r7, [r1, #24]
 800636e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006370:	2f78      	cmp	r7, #120	; 0x78
 8006372:	4691      	mov	r9, r2
 8006374:	4680      	mov	r8, r0
 8006376:	460c      	mov	r4, r1
 8006378:	469a      	mov	sl, r3
 800637a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800637e:	d807      	bhi.n	8006390 <_printf_i+0x28>
 8006380:	2f62      	cmp	r7, #98	; 0x62
 8006382:	d80a      	bhi.n	800639a <_printf_i+0x32>
 8006384:	2f00      	cmp	r7, #0
 8006386:	f000 80d4 	beq.w	8006532 <_printf_i+0x1ca>
 800638a:	2f58      	cmp	r7, #88	; 0x58
 800638c:	f000 80c0 	beq.w	8006510 <_printf_i+0x1a8>
 8006390:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006394:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006398:	e03a      	b.n	8006410 <_printf_i+0xa8>
 800639a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800639e:	2b15      	cmp	r3, #21
 80063a0:	d8f6      	bhi.n	8006390 <_printf_i+0x28>
 80063a2:	a101      	add	r1, pc, #4	; (adr r1, 80063a8 <_printf_i+0x40>)
 80063a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063a8:	08006401 	.word	0x08006401
 80063ac:	08006415 	.word	0x08006415
 80063b0:	08006391 	.word	0x08006391
 80063b4:	08006391 	.word	0x08006391
 80063b8:	08006391 	.word	0x08006391
 80063bc:	08006391 	.word	0x08006391
 80063c0:	08006415 	.word	0x08006415
 80063c4:	08006391 	.word	0x08006391
 80063c8:	08006391 	.word	0x08006391
 80063cc:	08006391 	.word	0x08006391
 80063d0:	08006391 	.word	0x08006391
 80063d4:	08006519 	.word	0x08006519
 80063d8:	08006441 	.word	0x08006441
 80063dc:	080064d3 	.word	0x080064d3
 80063e0:	08006391 	.word	0x08006391
 80063e4:	08006391 	.word	0x08006391
 80063e8:	0800653b 	.word	0x0800653b
 80063ec:	08006391 	.word	0x08006391
 80063f0:	08006441 	.word	0x08006441
 80063f4:	08006391 	.word	0x08006391
 80063f8:	08006391 	.word	0x08006391
 80063fc:	080064db 	.word	0x080064db
 8006400:	682b      	ldr	r3, [r5, #0]
 8006402:	1d1a      	adds	r2, r3, #4
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	602a      	str	r2, [r5, #0]
 8006408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800640c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006410:	2301      	movs	r3, #1
 8006412:	e09f      	b.n	8006554 <_printf_i+0x1ec>
 8006414:	6820      	ldr	r0, [r4, #0]
 8006416:	682b      	ldr	r3, [r5, #0]
 8006418:	0607      	lsls	r7, r0, #24
 800641a:	f103 0104 	add.w	r1, r3, #4
 800641e:	6029      	str	r1, [r5, #0]
 8006420:	d501      	bpl.n	8006426 <_printf_i+0xbe>
 8006422:	681e      	ldr	r6, [r3, #0]
 8006424:	e003      	b.n	800642e <_printf_i+0xc6>
 8006426:	0646      	lsls	r6, r0, #25
 8006428:	d5fb      	bpl.n	8006422 <_printf_i+0xba>
 800642a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800642e:	2e00      	cmp	r6, #0
 8006430:	da03      	bge.n	800643a <_printf_i+0xd2>
 8006432:	232d      	movs	r3, #45	; 0x2d
 8006434:	4276      	negs	r6, r6
 8006436:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800643a:	485a      	ldr	r0, [pc, #360]	; (80065a4 <_printf_i+0x23c>)
 800643c:	230a      	movs	r3, #10
 800643e:	e012      	b.n	8006466 <_printf_i+0xfe>
 8006440:	682b      	ldr	r3, [r5, #0]
 8006442:	6820      	ldr	r0, [r4, #0]
 8006444:	1d19      	adds	r1, r3, #4
 8006446:	6029      	str	r1, [r5, #0]
 8006448:	0605      	lsls	r5, r0, #24
 800644a:	d501      	bpl.n	8006450 <_printf_i+0xe8>
 800644c:	681e      	ldr	r6, [r3, #0]
 800644e:	e002      	b.n	8006456 <_printf_i+0xee>
 8006450:	0641      	lsls	r1, r0, #25
 8006452:	d5fb      	bpl.n	800644c <_printf_i+0xe4>
 8006454:	881e      	ldrh	r6, [r3, #0]
 8006456:	4853      	ldr	r0, [pc, #332]	; (80065a4 <_printf_i+0x23c>)
 8006458:	2f6f      	cmp	r7, #111	; 0x6f
 800645a:	bf0c      	ite	eq
 800645c:	2308      	moveq	r3, #8
 800645e:	230a      	movne	r3, #10
 8006460:	2100      	movs	r1, #0
 8006462:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006466:	6865      	ldr	r5, [r4, #4]
 8006468:	60a5      	str	r5, [r4, #8]
 800646a:	2d00      	cmp	r5, #0
 800646c:	bfa2      	ittt	ge
 800646e:	6821      	ldrge	r1, [r4, #0]
 8006470:	f021 0104 	bicge.w	r1, r1, #4
 8006474:	6021      	strge	r1, [r4, #0]
 8006476:	b90e      	cbnz	r6, 800647c <_printf_i+0x114>
 8006478:	2d00      	cmp	r5, #0
 800647a:	d04b      	beq.n	8006514 <_printf_i+0x1ac>
 800647c:	4615      	mov	r5, r2
 800647e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006482:	fb03 6711 	mls	r7, r3, r1, r6
 8006486:	5dc7      	ldrb	r7, [r0, r7]
 8006488:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800648c:	4637      	mov	r7, r6
 800648e:	42bb      	cmp	r3, r7
 8006490:	460e      	mov	r6, r1
 8006492:	d9f4      	bls.n	800647e <_printf_i+0x116>
 8006494:	2b08      	cmp	r3, #8
 8006496:	d10b      	bne.n	80064b0 <_printf_i+0x148>
 8006498:	6823      	ldr	r3, [r4, #0]
 800649a:	07de      	lsls	r6, r3, #31
 800649c:	d508      	bpl.n	80064b0 <_printf_i+0x148>
 800649e:	6923      	ldr	r3, [r4, #16]
 80064a0:	6861      	ldr	r1, [r4, #4]
 80064a2:	4299      	cmp	r1, r3
 80064a4:	bfde      	ittt	le
 80064a6:	2330      	movle	r3, #48	; 0x30
 80064a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064b0:	1b52      	subs	r2, r2, r5
 80064b2:	6122      	str	r2, [r4, #16]
 80064b4:	f8cd a000 	str.w	sl, [sp]
 80064b8:	464b      	mov	r3, r9
 80064ba:	aa03      	add	r2, sp, #12
 80064bc:	4621      	mov	r1, r4
 80064be:	4640      	mov	r0, r8
 80064c0:	f7ff fee4 	bl	800628c <_printf_common>
 80064c4:	3001      	adds	r0, #1
 80064c6:	d14a      	bne.n	800655e <_printf_i+0x1f6>
 80064c8:	f04f 30ff 	mov.w	r0, #4294967295
 80064cc:	b004      	add	sp, #16
 80064ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064d2:	6823      	ldr	r3, [r4, #0]
 80064d4:	f043 0320 	orr.w	r3, r3, #32
 80064d8:	6023      	str	r3, [r4, #0]
 80064da:	4833      	ldr	r0, [pc, #204]	; (80065a8 <_printf_i+0x240>)
 80064dc:	2778      	movs	r7, #120	; 0x78
 80064de:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80064e2:	6823      	ldr	r3, [r4, #0]
 80064e4:	6829      	ldr	r1, [r5, #0]
 80064e6:	061f      	lsls	r7, r3, #24
 80064e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80064ec:	d402      	bmi.n	80064f4 <_printf_i+0x18c>
 80064ee:	065f      	lsls	r7, r3, #25
 80064f0:	bf48      	it	mi
 80064f2:	b2b6      	uxthmi	r6, r6
 80064f4:	07df      	lsls	r7, r3, #31
 80064f6:	bf48      	it	mi
 80064f8:	f043 0320 	orrmi.w	r3, r3, #32
 80064fc:	6029      	str	r1, [r5, #0]
 80064fe:	bf48      	it	mi
 8006500:	6023      	strmi	r3, [r4, #0]
 8006502:	b91e      	cbnz	r6, 800650c <_printf_i+0x1a4>
 8006504:	6823      	ldr	r3, [r4, #0]
 8006506:	f023 0320 	bic.w	r3, r3, #32
 800650a:	6023      	str	r3, [r4, #0]
 800650c:	2310      	movs	r3, #16
 800650e:	e7a7      	b.n	8006460 <_printf_i+0xf8>
 8006510:	4824      	ldr	r0, [pc, #144]	; (80065a4 <_printf_i+0x23c>)
 8006512:	e7e4      	b.n	80064de <_printf_i+0x176>
 8006514:	4615      	mov	r5, r2
 8006516:	e7bd      	b.n	8006494 <_printf_i+0x12c>
 8006518:	682b      	ldr	r3, [r5, #0]
 800651a:	6826      	ldr	r6, [r4, #0]
 800651c:	6961      	ldr	r1, [r4, #20]
 800651e:	1d18      	adds	r0, r3, #4
 8006520:	6028      	str	r0, [r5, #0]
 8006522:	0635      	lsls	r5, r6, #24
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	d501      	bpl.n	800652c <_printf_i+0x1c4>
 8006528:	6019      	str	r1, [r3, #0]
 800652a:	e002      	b.n	8006532 <_printf_i+0x1ca>
 800652c:	0670      	lsls	r0, r6, #25
 800652e:	d5fb      	bpl.n	8006528 <_printf_i+0x1c0>
 8006530:	8019      	strh	r1, [r3, #0]
 8006532:	2300      	movs	r3, #0
 8006534:	6123      	str	r3, [r4, #16]
 8006536:	4615      	mov	r5, r2
 8006538:	e7bc      	b.n	80064b4 <_printf_i+0x14c>
 800653a:	682b      	ldr	r3, [r5, #0]
 800653c:	1d1a      	adds	r2, r3, #4
 800653e:	602a      	str	r2, [r5, #0]
 8006540:	681d      	ldr	r5, [r3, #0]
 8006542:	6862      	ldr	r2, [r4, #4]
 8006544:	2100      	movs	r1, #0
 8006546:	4628      	mov	r0, r5
 8006548:	f7f9 fe4a 	bl	80001e0 <memchr>
 800654c:	b108      	cbz	r0, 8006552 <_printf_i+0x1ea>
 800654e:	1b40      	subs	r0, r0, r5
 8006550:	6060      	str	r0, [r4, #4]
 8006552:	6863      	ldr	r3, [r4, #4]
 8006554:	6123      	str	r3, [r4, #16]
 8006556:	2300      	movs	r3, #0
 8006558:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800655c:	e7aa      	b.n	80064b4 <_printf_i+0x14c>
 800655e:	6923      	ldr	r3, [r4, #16]
 8006560:	462a      	mov	r2, r5
 8006562:	4649      	mov	r1, r9
 8006564:	4640      	mov	r0, r8
 8006566:	47d0      	blx	sl
 8006568:	3001      	adds	r0, #1
 800656a:	d0ad      	beq.n	80064c8 <_printf_i+0x160>
 800656c:	6823      	ldr	r3, [r4, #0]
 800656e:	079b      	lsls	r3, r3, #30
 8006570:	d413      	bmi.n	800659a <_printf_i+0x232>
 8006572:	68e0      	ldr	r0, [r4, #12]
 8006574:	9b03      	ldr	r3, [sp, #12]
 8006576:	4298      	cmp	r0, r3
 8006578:	bfb8      	it	lt
 800657a:	4618      	movlt	r0, r3
 800657c:	e7a6      	b.n	80064cc <_printf_i+0x164>
 800657e:	2301      	movs	r3, #1
 8006580:	4632      	mov	r2, r6
 8006582:	4649      	mov	r1, r9
 8006584:	4640      	mov	r0, r8
 8006586:	47d0      	blx	sl
 8006588:	3001      	adds	r0, #1
 800658a:	d09d      	beq.n	80064c8 <_printf_i+0x160>
 800658c:	3501      	adds	r5, #1
 800658e:	68e3      	ldr	r3, [r4, #12]
 8006590:	9903      	ldr	r1, [sp, #12]
 8006592:	1a5b      	subs	r3, r3, r1
 8006594:	42ab      	cmp	r3, r5
 8006596:	dcf2      	bgt.n	800657e <_printf_i+0x216>
 8006598:	e7eb      	b.n	8006572 <_printf_i+0x20a>
 800659a:	2500      	movs	r5, #0
 800659c:	f104 0619 	add.w	r6, r4, #25
 80065a0:	e7f5      	b.n	800658e <_printf_i+0x226>
 80065a2:	bf00      	nop
 80065a4:	080093b3 	.word	0x080093b3
 80065a8:	080093c4 	.word	0x080093c4

080065ac <std>:
 80065ac:	2300      	movs	r3, #0
 80065ae:	b510      	push	{r4, lr}
 80065b0:	4604      	mov	r4, r0
 80065b2:	e9c0 3300 	strd	r3, r3, [r0]
 80065b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065ba:	6083      	str	r3, [r0, #8]
 80065bc:	8181      	strh	r1, [r0, #12]
 80065be:	6643      	str	r3, [r0, #100]	; 0x64
 80065c0:	81c2      	strh	r2, [r0, #14]
 80065c2:	6183      	str	r3, [r0, #24]
 80065c4:	4619      	mov	r1, r3
 80065c6:	2208      	movs	r2, #8
 80065c8:	305c      	adds	r0, #92	; 0x5c
 80065ca:	f000 f914 	bl	80067f6 <memset>
 80065ce:	4b0d      	ldr	r3, [pc, #52]	; (8006604 <std+0x58>)
 80065d0:	6263      	str	r3, [r4, #36]	; 0x24
 80065d2:	4b0d      	ldr	r3, [pc, #52]	; (8006608 <std+0x5c>)
 80065d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80065d6:	4b0d      	ldr	r3, [pc, #52]	; (800660c <std+0x60>)
 80065d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80065da:	4b0d      	ldr	r3, [pc, #52]	; (8006610 <std+0x64>)
 80065dc:	6323      	str	r3, [r4, #48]	; 0x30
 80065de:	4b0d      	ldr	r3, [pc, #52]	; (8006614 <std+0x68>)
 80065e0:	6224      	str	r4, [r4, #32]
 80065e2:	429c      	cmp	r4, r3
 80065e4:	d006      	beq.n	80065f4 <std+0x48>
 80065e6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80065ea:	4294      	cmp	r4, r2
 80065ec:	d002      	beq.n	80065f4 <std+0x48>
 80065ee:	33d0      	adds	r3, #208	; 0xd0
 80065f0:	429c      	cmp	r4, r3
 80065f2:	d105      	bne.n	8006600 <std+0x54>
 80065f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80065f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065fc:	f000 b978 	b.w	80068f0 <__retarget_lock_init_recursive>
 8006600:	bd10      	pop	{r4, pc}
 8006602:	bf00      	nop
 8006604:	08006771 	.word	0x08006771
 8006608:	08006793 	.word	0x08006793
 800660c:	080067cb 	.word	0x080067cb
 8006610:	080067ef 	.word	0x080067ef
 8006614:	20000414 	.word	0x20000414

08006618 <stdio_exit_handler>:
 8006618:	4a02      	ldr	r2, [pc, #8]	; (8006624 <stdio_exit_handler+0xc>)
 800661a:	4903      	ldr	r1, [pc, #12]	; (8006628 <stdio_exit_handler+0x10>)
 800661c:	4803      	ldr	r0, [pc, #12]	; (800662c <stdio_exit_handler+0x14>)
 800661e:	f000 b869 	b.w	80066f4 <_fwalk_sglue>
 8006622:	bf00      	nop
 8006624:	2000001c 	.word	0x2000001c
 8006628:	080082c1 	.word	0x080082c1
 800662c:	20000028 	.word	0x20000028

08006630 <cleanup_stdio>:
 8006630:	6841      	ldr	r1, [r0, #4]
 8006632:	4b0c      	ldr	r3, [pc, #48]	; (8006664 <cleanup_stdio+0x34>)
 8006634:	4299      	cmp	r1, r3
 8006636:	b510      	push	{r4, lr}
 8006638:	4604      	mov	r4, r0
 800663a:	d001      	beq.n	8006640 <cleanup_stdio+0x10>
 800663c:	f001 fe40 	bl	80082c0 <_fflush_r>
 8006640:	68a1      	ldr	r1, [r4, #8]
 8006642:	4b09      	ldr	r3, [pc, #36]	; (8006668 <cleanup_stdio+0x38>)
 8006644:	4299      	cmp	r1, r3
 8006646:	d002      	beq.n	800664e <cleanup_stdio+0x1e>
 8006648:	4620      	mov	r0, r4
 800664a:	f001 fe39 	bl	80082c0 <_fflush_r>
 800664e:	68e1      	ldr	r1, [r4, #12]
 8006650:	4b06      	ldr	r3, [pc, #24]	; (800666c <cleanup_stdio+0x3c>)
 8006652:	4299      	cmp	r1, r3
 8006654:	d004      	beq.n	8006660 <cleanup_stdio+0x30>
 8006656:	4620      	mov	r0, r4
 8006658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800665c:	f001 be30 	b.w	80082c0 <_fflush_r>
 8006660:	bd10      	pop	{r4, pc}
 8006662:	bf00      	nop
 8006664:	20000414 	.word	0x20000414
 8006668:	2000047c 	.word	0x2000047c
 800666c:	200004e4 	.word	0x200004e4

08006670 <global_stdio_init.part.0>:
 8006670:	b510      	push	{r4, lr}
 8006672:	4b0b      	ldr	r3, [pc, #44]	; (80066a0 <global_stdio_init.part.0+0x30>)
 8006674:	4c0b      	ldr	r4, [pc, #44]	; (80066a4 <global_stdio_init.part.0+0x34>)
 8006676:	4a0c      	ldr	r2, [pc, #48]	; (80066a8 <global_stdio_init.part.0+0x38>)
 8006678:	601a      	str	r2, [r3, #0]
 800667a:	4620      	mov	r0, r4
 800667c:	2200      	movs	r2, #0
 800667e:	2104      	movs	r1, #4
 8006680:	f7ff ff94 	bl	80065ac <std>
 8006684:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006688:	2201      	movs	r2, #1
 800668a:	2109      	movs	r1, #9
 800668c:	f7ff ff8e 	bl	80065ac <std>
 8006690:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006694:	2202      	movs	r2, #2
 8006696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800669a:	2112      	movs	r1, #18
 800669c:	f7ff bf86 	b.w	80065ac <std>
 80066a0:	2000054c 	.word	0x2000054c
 80066a4:	20000414 	.word	0x20000414
 80066a8:	08006619 	.word	0x08006619

080066ac <__sfp_lock_acquire>:
 80066ac:	4801      	ldr	r0, [pc, #4]	; (80066b4 <__sfp_lock_acquire+0x8>)
 80066ae:	f000 b920 	b.w	80068f2 <__retarget_lock_acquire_recursive>
 80066b2:	bf00      	nop
 80066b4:	20000555 	.word	0x20000555

080066b8 <__sfp_lock_release>:
 80066b8:	4801      	ldr	r0, [pc, #4]	; (80066c0 <__sfp_lock_release+0x8>)
 80066ba:	f000 b91b 	b.w	80068f4 <__retarget_lock_release_recursive>
 80066be:	bf00      	nop
 80066c0:	20000555 	.word	0x20000555

080066c4 <__sinit>:
 80066c4:	b510      	push	{r4, lr}
 80066c6:	4604      	mov	r4, r0
 80066c8:	f7ff fff0 	bl	80066ac <__sfp_lock_acquire>
 80066cc:	6a23      	ldr	r3, [r4, #32]
 80066ce:	b11b      	cbz	r3, 80066d8 <__sinit+0x14>
 80066d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066d4:	f7ff bff0 	b.w	80066b8 <__sfp_lock_release>
 80066d8:	4b04      	ldr	r3, [pc, #16]	; (80066ec <__sinit+0x28>)
 80066da:	6223      	str	r3, [r4, #32]
 80066dc:	4b04      	ldr	r3, [pc, #16]	; (80066f0 <__sinit+0x2c>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1f5      	bne.n	80066d0 <__sinit+0xc>
 80066e4:	f7ff ffc4 	bl	8006670 <global_stdio_init.part.0>
 80066e8:	e7f2      	b.n	80066d0 <__sinit+0xc>
 80066ea:	bf00      	nop
 80066ec:	08006631 	.word	0x08006631
 80066f0:	2000054c 	.word	0x2000054c

080066f4 <_fwalk_sglue>:
 80066f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066f8:	4607      	mov	r7, r0
 80066fa:	4688      	mov	r8, r1
 80066fc:	4614      	mov	r4, r2
 80066fe:	2600      	movs	r6, #0
 8006700:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006704:	f1b9 0901 	subs.w	r9, r9, #1
 8006708:	d505      	bpl.n	8006716 <_fwalk_sglue+0x22>
 800670a:	6824      	ldr	r4, [r4, #0]
 800670c:	2c00      	cmp	r4, #0
 800670e:	d1f7      	bne.n	8006700 <_fwalk_sglue+0xc>
 8006710:	4630      	mov	r0, r6
 8006712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006716:	89ab      	ldrh	r3, [r5, #12]
 8006718:	2b01      	cmp	r3, #1
 800671a:	d907      	bls.n	800672c <_fwalk_sglue+0x38>
 800671c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006720:	3301      	adds	r3, #1
 8006722:	d003      	beq.n	800672c <_fwalk_sglue+0x38>
 8006724:	4629      	mov	r1, r5
 8006726:	4638      	mov	r0, r7
 8006728:	47c0      	blx	r8
 800672a:	4306      	orrs	r6, r0
 800672c:	3568      	adds	r5, #104	; 0x68
 800672e:	e7e9      	b.n	8006704 <_fwalk_sglue+0x10>

08006730 <siprintf>:
 8006730:	b40e      	push	{r1, r2, r3}
 8006732:	b500      	push	{lr}
 8006734:	b09c      	sub	sp, #112	; 0x70
 8006736:	ab1d      	add	r3, sp, #116	; 0x74
 8006738:	9002      	str	r0, [sp, #8]
 800673a:	9006      	str	r0, [sp, #24]
 800673c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006740:	4809      	ldr	r0, [pc, #36]	; (8006768 <siprintf+0x38>)
 8006742:	9107      	str	r1, [sp, #28]
 8006744:	9104      	str	r1, [sp, #16]
 8006746:	4909      	ldr	r1, [pc, #36]	; (800676c <siprintf+0x3c>)
 8006748:	f853 2b04 	ldr.w	r2, [r3], #4
 800674c:	9105      	str	r1, [sp, #20]
 800674e:	6800      	ldr	r0, [r0, #0]
 8006750:	9301      	str	r3, [sp, #4]
 8006752:	a902      	add	r1, sp, #8
 8006754:	f001 fc30 	bl	8007fb8 <_svfiprintf_r>
 8006758:	9b02      	ldr	r3, [sp, #8]
 800675a:	2200      	movs	r2, #0
 800675c:	701a      	strb	r2, [r3, #0]
 800675e:	b01c      	add	sp, #112	; 0x70
 8006760:	f85d eb04 	ldr.w	lr, [sp], #4
 8006764:	b003      	add	sp, #12
 8006766:	4770      	bx	lr
 8006768:	20000074 	.word	0x20000074
 800676c:	ffff0208 	.word	0xffff0208

08006770 <__sread>:
 8006770:	b510      	push	{r4, lr}
 8006772:	460c      	mov	r4, r1
 8006774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006778:	f000 f86c 	bl	8006854 <_read_r>
 800677c:	2800      	cmp	r0, #0
 800677e:	bfab      	itete	ge
 8006780:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006782:	89a3      	ldrhlt	r3, [r4, #12]
 8006784:	181b      	addge	r3, r3, r0
 8006786:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800678a:	bfac      	ite	ge
 800678c:	6563      	strge	r3, [r4, #84]	; 0x54
 800678e:	81a3      	strhlt	r3, [r4, #12]
 8006790:	bd10      	pop	{r4, pc}

08006792 <__swrite>:
 8006792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006796:	461f      	mov	r7, r3
 8006798:	898b      	ldrh	r3, [r1, #12]
 800679a:	05db      	lsls	r3, r3, #23
 800679c:	4605      	mov	r5, r0
 800679e:	460c      	mov	r4, r1
 80067a0:	4616      	mov	r6, r2
 80067a2:	d505      	bpl.n	80067b0 <__swrite+0x1e>
 80067a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067a8:	2302      	movs	r3, #2
 80067aa:	2200      	movs	r2, #0
 80067ac:	f000 f840 	bl	8006830 <_lseek_r>
 80067b0:	89a3      	ldrh	r3, [r4, #12]
 80067b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067ba:	81a3      	strh	r3, [r4, #12]
 80067bc:	4632      	mov	r2, r6
 80067be:	463b      	mov	r3, r7
 80067c0:	4628      	mov	r0, r5
 80067c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067c6:	f000 b857 	b.w	8006878 <_write_r>

080067ca <__sseek>:
 80067ca:	b510      	push	{r4, lr}
 80067cc:	460c      	mov	r4, r1
 80067ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067d2:	f000 f82d 	bl	8006830 <_lseek_r>
 80067d6:	1c43      	adds	r3, r0, #1
 80067d8:	89a3      	ldrh	r3, [r4, #12]
 80067da:	bf15      	itete	ne
 80067dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80067de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80067e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80067e6:	81a3      	strheq	r3, [r4, #12]
 80067e8:	bf18      	it	ne
 80067ea:	81a3      	strhne	r3, [r4, #12]
 80067ec:	bd10      	pop	{r4, pc}

080067ee <__sclose>:
 80067ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067f2:	f000 b80d 	b.w	8006810 <_close_r>

080067f6 <memset>:
 80067f6:	4402      	add	r2, r0
 80067f8:	4603      	mov	r3, r0
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d100      	bne.n	8006800 <memset+0xa>
 80067fe:	4770      	bx	lr
 8006800:	f803 1b01 	strb.w	r1, [r3], #1
 8006804:	e7f9      	b.n	80067fa <memset+0x4>
	...

08006808 <_localeconv_r>:
 8006808:	4800      	ldr	r0, [pc, #0]	; (800680c <_localeconv_r+0x4>)
 800680a:	4770      	bx	lr
 800680c:	20000168 	.word	0x20000168

08006810 <_close_r>:
 8006810:	b538      	push	{r3, r4, r5, lr}
 8006812:	4d06      	ldr	r5, [pc, #24]	; (800682c <_close_r+0x1c>)
 8006814:	2300      	movs	r3, #0
 8006816:	4604      	mov	r4, r0
 8006818:	4608      	mov	r0, r1
 800681a:	602b      	str	r3, [r5, #0]
 800681c:	f7fa fe8d 	bl	800153a <_close>
 8006820:	1c43      	adds	r3, r0, #1
 8006822:	d102      	bne.n	800682a <_close_r+0x1a>
 8006824:	682b      	ldr	r3, [r5, #0]
 8006826:	b103      	cbz	r3, 800682a <_close_r+0x1a>
 8006828:	6023      	str	r3, [r4, #0]
 800682a:	bd38      	pop	{r3, r4, r5, pc}
 800682c:	20000550 	.word	0x20000550

08006830 <_lseek_r>:
 8006830:	b538      	push	{r3, r4, r5, lr}
 8006832:	4d07      	ldr	r5, [pc, #28]	; (8006850 <_lseek_r+0x20>)
 8006834:	4604      	mov	r4, r0
 8006836:	4608      	mov	r0, r1
 8006838:	4611      	mov	r1, r2
 800683a:	2200      	movs	r2, #0
 800683c:	602a      	str	r2, [r5, #0]
 800683e:	461a      	mov	r2, r3
 8006840:	f7fa fea2 	bl	8001588 <_lseek>
 8006844:	1c43      	adds	r3, r0, #1
 8006846:	d102      	bne.n	800684e <_lseek_r+0x1e>
 8006848:	682b      	ldr	r3, [r5, #0]
 800684a:	b103      	cbz	r3, 800684e <_lseek_r+0x1e>
 800684c:	6023      	str	r3, [r4, #0]
 800684e:	bd38      	pop	{r3, r4, r5, pc}
 8006850:	20000550 	.word	0x20000550

08006854 <_read_r>:
 8006854:	b538      	push	{r3, r4, r5, lr}
 8006856:	4d07      	ldr	r5, [pc, #28]	; (8006874 <_read_r+0x20>)
 8006858:	4604      	mov	r4, r0
 800685a:	4608      	mov	r0, r1
 800685c:	4611      	mov	r1, r2
 800685e:	2200      	movs	r2, #0
 8006860:	602a      	str	r2, [r5, #0]
 8006862:	461a      	mov	r2, r3
 8006864:	f7fa fe30 	bl	80014c8 <_read>
 8006868:	1c43      	adds	r3, r0, #1
 800686a:	d102      	bne.n	8006872 <_read_r+0x1e>
 800686c:	682b      	ldr	r3, [r5, #0]
 800686e:	b103      	cbz	r3, 8006872 <_read_r+0x1e>
 8006870:	6023      	str	r3, [r4, #0]
 8006872:	bd38      	pop	{r3, r4, r5, pc}
 8006874:	20000550 	.word	0x20000550

08006878 <_write_r>:
 8006878:	b538      	push	{r3, r4, r5, lr}
 800687a:	4d07      	ldr	r5, [pc, #28]	; (8006898 <_write_r+0x20>)
 800687c:	4604      	mov	r4, r0
 800687e:	4608      	mov	r0, r1
 8006880:	4611      	mov	r1, r2
 8006882:	2200      	movs	r2, #0
 8006884:	602a      	str	r2, [r5, #0]
 8006886:	461a      	mov	r2, r3
 8006888:	f7fa fe3b 	bl	8001502 <_write>
 800688c:	1c43      	adds	r3, r0, #1
 800688e:	d102      	bne.n	8006896 <_write_r+0x1e>
 8006890:	682b      	ldr	r3, [r5, #0]
 8006892:	b103      	cbz	r3, 8006896 <_write_r+0x1e>
 8006894:	6023      	str	r3, [r4, #0]
 8006896:	bd38      	pop	{r3, r4, r5, pc}
 8006898:	20000550 	.word	0x20000550

0800689c <__errno>:
 800689c:	4b01      	ldr	r3, [pc, #4]	; (80068a4 <__errno+0x8>)
 800689e:	6818      	ldr	r0, [r3, #0]
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	20000074 	.word	0x20000074

080068a8 <__libc_init_array>:
 80068a8:	b570      	push	{r4, r5, r6, lr}
 80068aa:	4d0d      	ldr	r5, [pc, #52]	; (80068e0 <__libc_init_array+0x38>)
 80068ac:	4c0d      	ldr	r4, [pc, #52]	; (80068e4 <__libc_init_array+0x3c>)
 80068ae:	1b64      	subs	r4, r4, r5
 80068b0:	10a4      	asrs	r4, r4, #2
 80068b2:	2600      	movs	r6, #0
 80068b4:	42a6      	cmp	r6, r4
 80068b6:	d109      	bne.n	80068cc <__libc_init_array+0x24>
 80068b8:	4d0b      	ldr	r5, [pc, #44]	; (80068e8 <__libc_init_array+0x40>)
 80068ba:	4c0c      	ldr	r4, [pc, #48]	; (80068ec <__libc_init_array+0x44>)
 80068bc:	f002 fca2 	bl	8009204 <_init>
 80068c0:	1b64      	subs	r4, r4, r5
 80068c2:	10a4      	asrs	r4, r4, #2
 80068c4:	2600      	movs	r6, #0
 80068c6:	42a6      	cmp	r6, r4
 80068c8:	d105      	bne.n	80068d6 <__libc_init_array+0x2e>
 80068ca:	bd70      	pop	{r4, r5, r6, pc}
 80068cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80068d0:	4798      	blx	r3
 80068d2:	3601      	adds	r6, #1
 80068d4:	e7ee      	b.n	80068b4 <__libc_init_array+0xc>
 80068d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80068da:	4798      	blx	r3
 80068dc:	3601      	adds	r6, #1
 80068de:	e7f2      	b.n	80068c6 <__libc_init_array+0x1e>
 80068e0:	08009650 	.word	0x08009650
 80068e4:	08009650 	.word	0x08009650
 80068e8:	08009650 	.word	0x08009650
 80068ec:	08009654 	.word	0x08009654

080068f0 <__retarget_lock_init_recursive>:
 80068f0:	4770      	bx	lr

080068f2 <__retarget_lock_acquire_recursive>:
 80068f2:	4770      	bx	lr

080068f4 <__retarget_lock_release_recursive>:
 80068f4:	4770      	bx	lr

080068f6 <memcpy>:
 80068f6:	440a      	add	r2, r1
 80068f8:	4291      	cmp	r1, r2
 80068fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80068fe:	d100      	bne.n	8006902 <memcpy+0xc>
 8006900:	4770      	bx	lr
 8006902:	b510      	push	{r4, lr}
 8006904:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006908:	f803 4f01 	strb.w	r4, [r3, #1]!
 800690c:	4291      	cmp	r1, r2
 800690e:	d1f9      	bne.n	8006904 <memcpy+0xe>
 8006910:	bd10      	pop	{r4, pc}

08006912 <quorem>:
 8006912:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006916:	6903      	ldr	r3, [r0, #16]
 8006918:	690c      	ldr	r4, [r1, #16]
 800691a:	42a3      	cmp	r3, r4
 800691c:	4607      	mov	r7, r0
 800691e:	db7e      	blt.n	8006a1e <quorem+0x10c>
 8006920:	3c01      	subs	r4, #1
 8006922:	f101 0814 	add.w	r8, r1, #20
 8006926:	f100 0514 	add.w	r5, r0, #20
 800692a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800692e:	9301      	str	r3, [sp, #4]
 8006930:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006934:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006938:	3301      	adds	r3, #1
 800693a:	429a      	cmp	r2, r3
 800693c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006940:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006944:	fbb2 f6f3 	udiv	r6, r2, r3
 8006948:	d331      	bcc.n	80069ae <quorem+0x9c>
 800694a:	f04f 0e00 	mov.w	lr, #0
 800694e:	4640      	mov	r0, r8
 8006950:	46ac      	mov	ip, r5
 8006952:	46f2      	mov	sl, lr
 8006954:	f850 2b04 	ldr.w	r2, [r0], #4
 8006958:	b293      	uxth	r3, r2
 800695a:	fb06 e303 	mla	r3, r6, r3, lr
 800695e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006962:	0c1a      	lsrs	r2, r3, #16
 8006964:	b29b      	uxth	r3, r3
 8006966:	ebaa 0303 	sub.w	r3, sl, r3
 800696a:	f8dc a000 	ldr.w	sl, [ip]
 800696e:	fa13 f38a 	uxtah	r3, r3, sl
 8006972:	fb06 220e 	mla	r2, r6, lr, r2
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	9b00      	ldr	r3, [sp, #0]
 800697a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800697e:	b292      	uxth	r2, r2
 8006980:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006984:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006988:	f8bd 3000 	ldrh.w	r3, [sp]
 800698c:	4581      	cmp	r9, r0
 800698e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006992:	f84c 3b04 	str.w	r3, [ip], #4
 8006996:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800699a:	d2db      	bcs.n	8006954 <quorem+0x42>
 800699c:	f855 300b 	ldr.w	r3, [r5, fp]
 80069a0:	b92b      	cbnz	r3, 80069ae <quorem+0x9c>
 80069a2:	9b01      	ldr	r3, [sp, #4]
 80069a4:	3b04      	subs	r3, #4
 80069a6:	429d      	cmp	r5, r3
 80069a8:	461a      	mov	r2, r3
 80069aa:	d32c      	bcc.n	8006a06 <quorem+0xf4>
 80069ac:	613c      	str	r4, [r7, #16]
 80069ae:	4638      	mov	r0, r7
 80069b0:	f001 f9a8 	bl	8007d04 <__mcmp>
 80069b4:	2800      	cmp	r0, #0
 80069b6:	db22      	blt.n	80069fe <quorem+0xec>
 80069b8:	3601      	adds	r6, #1
 80069ba:	4629      	mov	r1, r5
 80069bc:	2000      	movs	r0, #0
 80069be:	f858 2b04 	ldr.w	r2, [r8], #4
 80069c2:	f8d1 c000 	ldr.w	ip, [r1]
 80069c6:	b293      	uxth	r3, r2
 80069c8:	1ac3      	subs	r3, r0, r3
 80069ca:	0c12      	lsrs	r2, r2, #16
 80069cc:	fa13 f38c 	uxtah	r3, r3, ip
 80069d0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80069d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069d8:	b29b      	uxth	r3, r3
 80069da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069de:	45c1      	cmp	r9, r8
 80069e0:	f841 3b04 	str.w	r3, [r1], #4
 80069e4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80069e8:	d2e9      	bcs.n	80069be <quorem+0xac>
 80069ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069f2:	b922      	cbnz	r2, 80069fe <quorem+0xec>
 80069f4:	3b04      	subs	r3, #4
 80069f6:	429d      	cmp	r5, r3
 80069f8:	461a      	mov	r2, r3
 80069fa:	d30a      	bcc.n	8006a12 <quorem+0x100>
 80069fc:	613c      	str	r4, [r7, #16]
 80069fe:	4630      	mov	r0, r6
 8006a00:	b003      	add	sp, #12
 8006a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a06:	6812      	ldr	r2, [r2, #0]
 8006a08:	3b04      	subs	r3, #4
 8006a0a:	2a00      	cmp	r2, #0
 8006a0c:	d1ce      	bne.n	80069ac <quorem+0x9a>
 8006a0e:	3c01      	subs	r4, #1
 8006a10:	e7c9      	b.n	80069a6 <quorem+0x94>
 8006a12:	6812      	ldr	r2, [r2, #0]
 8006a14:	3b04      	subs	r3, #4
 8006a16:	2a00      	cmp	r2, #0
 8006a18:	d1f0      	bne.n	80069fc <quorem+0xea>
 8006a1a:	3c01      	subs	r4, #1
 8006a1c:	e7eb      	b.n	80069f6 <quorem+0xe4>
 8006a1e:	2000      	movs	r0, #0
 8006a20:	e7ee      	b.n	8006a00 <quorem+0xee>
 8006a22:	0000      	movs	r0, r0
 8006a24:	0000      	movs	r0, r0
	...

08006a28 <_dtoa_r>:
 8006a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a2c:	ed2d 8b04 	vpush	{d8-d9}
 8006a30:	69c5      	ldr	r5, [r0, #28]
 8006a32:	b093      	sub	sp, #76	; 0x4c
 8006a34:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006a38:	ec57 6b10 	vmov	r6, r7, d0
 8006a3c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006a40:	9107      	str	r1, [sp, #28]
 8006a42:	4604      	mov	r4, r0
 8006a44:	920a      	str	r2, [sp, #40]	; 0x28
 8006a46:	930d      	str	r3, [sp, #52]	; 0x34
 8006a48:	b975      	cbnz	r5, 8006a68 <_dtoa_r+0x40>
 8006a4a:	2010      	movs	r0, #16
 8006a4c:	f000 fe2a 	bl	80076a4 <malloc>
 8006a50:	4602      	mov	r2, r0
 8006a52:	61e0      	str	r0, [r4, #28]
 8006a54:	b920      	cbnz	r0, 8006a60 <_dtoa_r+0x38>
 8006a56:	4bae      	ldr	r3, [pc, #696]	; (8006d10 <_dtoa_r+0x2e8>)
 8006a58:	21ef      	movs	r1, #239	; 0xef
 8006a5a:	48ae      	ldr	r0, [pc, #696]	; (8006d14 <_dtoa_r+0x2ec>)
 8006a5c:	f001 fc82 	bl	8008364 <__assert_func>
 8006a60:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006a64:	6005      	str	r5, [r0, #0]
 8006a66:	60c5      	str	r5, [r0, #12]
 8006a68:	69e3      	ldr	r3, [r4, #28]
 8006a6a:	6819      	ldr	r1, [r3, #0]
 8006a6c:	b151      	cbz	r1, 8006a84 <_dtoa_r+0x5c>
 8006a6e:	685a      	ldr	r2, [r3, #4]
 8006a70:	604a      	str	r2, [r1, #4]
 8006a72:	2301      	movs	r3, #1
 8006a74:	4093      	lsls	r3, r2
 8006a76:	608b      	str	r3, [r1, #8]
 8006a78:	4620      	mov	r0, r4
 8006a7a:	f000 ff07 	bl	800788c <_Bfree>
 8006a7e:	69e3      	ldr	r3, [r4, #28]
 8006a80:	2200      	movs	r2, #0
 8006a82:	601a      	str	r2, [r3, #0]
 8006a84:	1e3b      	subs	r3, r7, #0
 8006a86:	bfbb      	ittet	lt
 8006a88:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006a8c:	9303      	strlt	r3, [sp, #12]
 8006a8e:	2300      	movge	r3, #0
 8006a90:	2201      	movlt	r2, #1
 8006a92:	bfac      	ite	ge
 8006a94:	f8c8 3000 	strge.w	r3, [r8]
 8006a98:	f8c8 2000 	strlt.w	r2, [r8]
 8006a9c:	4b9e      	ldr	r3, [pc, #632]	; (8006d18 <_dtoa_r+0x2f0>)
 8006a9e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006aa2:	ea33 0308 	bics.w	r3, r3, r8
 8006aa6:	d11b      	bne.n	8006ae0 <_dtoa_r+0xb8>
 8006aa8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006aaa:	f242 730f 	movw	r3, #9999	; 0x270f
 8006aae:	6013      	str	r3, [r2, #0]
 8006ab0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006ab4:	4333      	orrs	r3, r6
 8006ab6:	f000 8593 	beq.w	80075e0 <_dtoa_r+0xbb8>
 8006aba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006abc:	b963      	cbnz	r3, 8006ad8 <_dtoa_r+0xb0>
 8006abe:	4b97      	ldr	r3, [pc, #604]	; (8006d1c <_dtoa_r+0x2f4>)
 8006ac0:	e027      	b.n	8006b12 <_dtoa_r+0xea>
 8006ac2:	4b97      	ldr	r3, [pc, #604]	; (8006d20 <_dtoa_r+0x2f8>)
 8006ac4:	9300      	str	r3, [sp, #0]
 8006ac6:	3308      	adds	r3, #8
 8006ac8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006aca:	6013      	str	r3, [r2, #0]
 8006acc:	9800      	ldr	r0, [sp, #0]
 8006ace:	b013      	add	sp, #76	; 0x4c
 8006ad0:	ecbd 8b04 	vpop	{d8-d9}
 8006ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ad8:	4b90      	ldr	r3, [pc, #576]	; (8006d1c <_dtoa_r+0x2f4>)
 8006ada:	9300      	str	r3, [sp, #0]
 8006adc:	3303      	adds	r3, #3
 8006ade:	e7f3      	b.n	8006ac8 <_dtoa_r+0xa0>
 8006ae0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	ec51 0b17 	vmov	r0, r1, d7
 8006aea:	eeb0 8a47 	vmov.f32	s16, s14
 8006aee:	eef0 8a67 	vmov.f32	s17, s15
 8006af2:	2300      	movs	r3, #0
 8006af4:	f7f9 fff0 	bl	8000ad8 <__aeabi_dcmpeq>
 8006af8:	4681      	mov	r9, r0
 8006afa:	b160      	cbz	r0, 8006b16 <_dtoa_r+0xee>
 8006afc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006afe:	2301      	movs	r3, #1
 8006b00:	6013      	str	r3, [r2, #0]
 8006b02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f000 8568 	beq.w	80075da <_dtoa_r+0xbb2>
 8006b0a:	4b86      	ldr	r3, [pc, #536]	; (8006d24 <_dtoa_r+0x2fc>)
 8006b0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006b0e:	6013      	str	r3, [r2, #0]
 8006b10:	3b01      	subs	r3, #1
 8006b12:	9300      	str	r3, [sp, #0]
 8006b14:	e7da      	b.n	8006acc <_dtoa_r+0xa4>
 8006b16:	aa10      	add	r2, sp, #64	; 0x40
 8006b18:	a911      	add	r1, sp, #68	; 0x44
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	eeb0 0a48 	vmov.f32	s0, s16
 8006b20:	eef0 0a68 	vmov.f32	s1, s17
 8006b24:	f001 f994 	bl	8007e50 <__d2b>
 8006b28:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006b2c:	4682      	mov	sl, r0
 8006b2e:	2d00      	cmp	r5, #0
 8006b30:	d07f      	beq.n	8006c32 <_dtoa_r+0x20a>
 8006b32:	ee18 3a90 	vmov	r3, s17
 8006b36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b3a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006b3e:	ec51 0b18 	vmov	r0, r1, d8
 8006b42:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006b46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006b4a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006b4e:	4619      	mov	r1, r3
 8006b50:	2200      	movs	r2, #0
 8006b52:	4b75      	ldr	r3, [pc, #468]	; (8006d28 <_dtoa_r+0x300>)
 8006b54:	f7f9 fba0 	bl	8000298 <__aeabi_dsub>
 8006b58:	a367      	add	r3, pc, #412	; (adr r3, 8006cf8 <_dtoa_r+0x2d0>)
 8006b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5e:	f7f9 fd53 	bl	8000608 <__aeabi_dmul>
 8006b62:	a367      	add	r3, pc, #412	; (adr r3, 8006d00 <_dtoa_r+0x2d8>)
 8006b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b68:	f7f9 fb98 	bl	800029c <__adddf3>
 8006b6c:	4606      	mov	r6, r0
 8006b6e:	4628      	mov	r0, r5
 8006b70:	460f      	mov	r7, r1
 8006b72:	f7f9 fcdf 	bl	8000534 <__aeabi_i2d>
 8006b76:	a364      	add	r3, pc, #400	; (adr r3, 8006d08 <_dtoa_r+0x2e0>)
 8006b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7c:	f7f9 fd44 	bl	8000608 <__aeabi_dmul>
 8006b80:	4602      	mov	r2, r0
 8006b82:	460b      	mov	r3, r1
 8006b84:	4630      	mov	r0, r6
 8006b86:	4639      	mov	r1, r7
 8006b88:	f7f9 fb88 	bl	800029c <__adddf3>
 8006b8c:	4606      	mov	r6, r0
 8006b8e:	460f      	mov	r7, r1
 8006b90:	f7f9 ffea 	bl	8000b68 <__aeabi_d2iz>
 8006b94:	2200      	movs	r2, #0
 8006b96:	4683      	mov	fp, r0
 8006b98:	2300      	movs	r3, #0
 8006b9a:	4630      	mov	r0, r6
 8006b9c:	4639      	mov	r1, r7
 8006b9e:	f7f9 ffa5 	bl	8000aec <__aeabi_dcmplt>
 8006ba2:	b148      	cbz	r0, 8006bb8 <_dtoa_r+0x190>
 8006ba4:	4658      	mov	r0, fp
 8006ba6:	f7f9 fcc5 	bl	8000534 <__aeabi_i2d>
 8006baa:	4632      	mov	r2, r6
 8006bac:	463b      	mov	r3, r7
 8006bae:	f7f9 ff93 	bl	8000ad8 <__aeabi_dcmpeq>
 8006bb2:	b908      	cbnz	r0, 8006bb8 <_dtoa_r+0x190>
 8006bb4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006bb8:	f1bb 0f16 	cmp.w	fp, #22
 8006bbc:	d857      	bhi.n	8006c6e <_dtoa_r+0x246>
 8006bbe:	4b5b      	ldr	r3, [pc, #364]	; (8006d2c <_dtoa_r+0x304>)
 8006bc0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc8:	ec51 0b18 	vmov	r0, r1, d8
 8006bcc:	f7f9 ff8e 	bl	8000aec <__aeabi_dcmplt>
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	d04e      	beq.n	8006c72 <_dtoa_r+0x24a>
 8006bd4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006bd8:	2300      	movs	r3, #0
 8006bda:	930c      	str	r3, [sp, #48]	; 0x30
 8006bdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006bde:	1b5b      	subs	r3, r3, r5
 8006be0:	1e5a      	subs	r2, r3, #1
 8006be2:	bf45      	ittet	mi
 8006be4:	f1c3 0301 	rsbmi	r3, r3, #1
 8006be8:	9305      	strmi	r3, [sp, #20]
 8006bea:	2300      	movpl	r3, #0
 8006bec:	2300      	movmi	r3, #0
 8006bee:	9206      	str	r2, [sp, #24]
 8006bf0:	bf54      	ite	pl
 8006bf2:	9305      	strpl	r3, [sp, #20]
 8006bf4:	9306      	strmi	r3, [sp, #24]
 8006bf6:	f1bb 0f00 	cmp.w	fp, #0
 8006bfa:	db3c      	blt.n	8006c76 <_dtoa_r+0x24e>
 8006bfc:	9b06      	ldr	r3, [sp, #24]
 8006bfe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006c02:	445b      	add	r3, fp
 8006c04:	9306      	str	r3, [sp, #24]
 8006c06:	2300      	movs	r3, #0
 8006c08:	9308      	str	r3, [sp, #32]
 8006c0a:	9b07      	ldr	r3, [sp, #28]
 8006c0c:	2b09      	cmp	r3, #9
 8006c0e:	d868      	bhi.n	8006ce2 <_dtoa_r+0x2ba>
 8006c10:	2b05      	cmp	r3, #5
 8006c12:	bfc4      	itt	gt
 8006c14:	3b04      	subgt	r3, #4
 8006c16:	9307      	strgt	r3, [sp, #28]
 8006c18:	9b07      	ldr	r3, [sp, #28]
 8006c1a:	f1a3 0302 	sub.w	r3, r3, #2
 8006c1e:	bfcc      	ite	gt
 8006c20:	2500      	movgt	r5, #0
 8006c22:	2501      	movle	r5, #1
 8006c24:	2b03      	cmp	r3, #3
 8006c26:	f200 8085 	bhi.w	8006d34 <_dtoa_r+0x30c>
 8006c2a:	e8df f003 	tbb	[pc, r3]
 8006c2e:	3b2e      	.short	0x3b2e
 8006c30:	5839      	.short	0x5839
 8006c32:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006c36:	441d      	add	r5, r3
 8006c38:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006c3c:	2b20      	cmp	r3, #32
 8006c3e:	bfc1      	itttt	gt
 8006c40:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006c44:	fa08 f803 	lslgt.w	r8, r8, r3
 8006c48:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006c4c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006c50:	bfd6      	itet	le
 8006c52:	f1c3 0320 	rsble	r3, r3, #32
 8006c56:	ea48 0003 	orrgt.w	r0, r8, r3
 8006c5a:	fa06 f003 	lslle.w	r0, r6, r3
 8006c5e:	f7f9 fc59 	bl	8000514 <__aeabi_ui2d>
 8006c62:	2201      	movs	r2, #1
 8006c64:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006c68:	3d01      	subs	r5, #1
 8006c6a:	920e      	str	r2, [sp, #56]	; 0x38
 8006c6c:	e76f      	b.n	8006b4e <_dtoa_r+0x126>
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e7b3      	b.n	8006bda <_dtoa_r+0x1b2>
 8006c72:	900c      	str	r0, [sp, #48]	; 0x30
 8006c74:	e7b2      	b.n	8006bdc <_dtoa_r+0x1b4>
 8006c76:	9b05      	ldr	r3, [sp, #20]
 8006c78:	eba3 030b 	sub.w	r3, r3, fp
 8006c7c:	9305      	str	r3, [sp, #20]
 8006c7e:	f1cb 0300 	rsb	r3, fp, #0
 8006c82:	9308      	str	r3, [sp, #32]
 8006c84:	2300      	movs	r3, #0
 8006c86:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c88:	e7bf      	b.n	8006c0a <_dtoa_r+0x1e2>
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	dc52      	bgt.n	8006d3a <_dtoa_r+0x312>
 8006c94:	2301      	movs	r3, #1
 8006c96:	9301      	str	r3, [sp, #4]
 8006c98:	9304      	str	r3, [sp, #16]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	920a      	str	r2, [sp, #40]	; 0x28
 8006c9e:	e00b      	b.n	8006cb8 <_dtoa_r+0x290>
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e7f3      	b.n	8006c8c <_dtoa_r+0x264>
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006caa:	445b      	add	r3, fp
 8006cac:	9301      	str	r3, [sp, #4]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	9304      	str	r3, [sp, #16]
 8006cb4:	bfb8      	it	lt
 8006cb6:	2301      	movlt	r3, #1
 8006cb8:	69e0      	ldr	r0, [r4, #28]
 8006cba:	2100      	movs	r1, #0
 8006cbc:	2204      	movs	r2, #4
 8006cbe:	f102 0614 	add.w	r6, r2, #20
 8006cc2:	429e      	cmp	r6, r3
 8006cc4:	d93d      	bls.n	8006d42 <_dtoa_r+0x31a>
 8006cc6:	6041      	str	r1, [r0, #4]
 8006cc8:	4620      	mov	r0, r4
 8006cca:	f000 fd9f 	bl	800780c <_Balloc>
 8006cce:	9000      	str	r0, [sp, #0]
 8006cd0:	2800      	cmp	r0, #0
 8006cd2:	d139      	bne.n	8006d48 <_dtoa_r+0x320>
 8006cd4:	4b16      	ldr	r3, [pc, #88]	; (8006d30 <_dtoa_r+0x308>)
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	f240 11af 	movw	r1, #431	; 0x1af
 8006cdc:	e6bd      	b.n	8006a5a <_dtoa_r+0x32>
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e7e1      	b.n	8006ca6 <_dtoa_r+0x27e>
 8006ce2:	2501      	movs	r5, #1
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	9307      	str	r3, [sp, #28]
 8006ce8:	9509      	str	r5, [sp, #36]	; 0x24
 8006cea:	f04f 33ff 	mov.w	r3, #4294967295
 8006cee:	9301      	str	r3, [sp, #4]
 8006cf0:	9304      	str	r3, [sp, #16]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	2312      	movs	r3, #18
 8006cf6:	e7d1      	b.n	8006c9c <_dtoa_r+0x274>
 8006cf8:	636f4361 	.word	0x636f4361
 8006cfc:	3fd287a7 	.word	0x3fd287a7
 8006d00:	8b60c8b3 	.word	0x8b60c8b3
 8006d04:	3fc68a28 	.word	0x3fc68a28
 8006d08:	509f79fb 	.word	0x509f79fb
 8006d0c:	3fd34413 	.word	0x3fd34413
 8006d10:	080093e2 	.word	0x080093e2
 8006d14:	080093f9 	.word	0x080093f9
 8006d18:	7ff00000 	.word	0x7ff00000
 8006d1c:	080093de 	.word	0x080093de
 8006d20:	080093d5 	.word	0x080093d5
 8006d24:	080093b2 	.word	0x080093b2
 8006d28:	3ff80000 	.word	0x3ff80000
 8006d2c:	080094e8 	.word	0x080094e8
 8006d30:	08009451 	.word	0x08009451
 8006d34:	2301      	movs	r3, #1
 8006d36:	9309      	str	r3, [sp, #36]	; 0x24
 8006d38:	e7d7      	b.n	8006cea <_dtoa_r+0x2c2>
 8006d3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d3c:	9301      	str	r3, [sp, #4]
 8006d3e:	9304      	str	r3, [sp, #16]
 8006d40:	e7ba      	b.n	8006cb8 <_dtoa_r+0x290>
 8006d42:	3101      	adds	r1, #1
 8006d44:	0052      	lsls	r2, r2, #1
 8006d46:	e7ba      	b.n	8006cbe <_dtoa_r+0x296>
 8006d48:	69e3      	ldr	r3, [r4, #28]
 8006d4a:	9a00      	ldr	r2, [sp, #0]
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	9b04      	ldr	r3, [sp, #16]
 8006d50:	2b0e      	cmp	r3, #14
 8006d52:	f200 80a8 	bhi.w	8006ea6 <_dtoa_r+0x47e>
 8006d56:	2d00      	cmp	r5, #0
 8006d58:	f000 80a5 	beq.w	8006ea6 <_dtoa_r+0x47e>
 8006d5c:	f1bb 0f00 	cmp.w	fp, #0
 8006d60:	dd38      	ble.n	8006dd4 <_dtoa_r+0x3ac>
 8006d62:	4bc0      	ldr	r3, [pc, #768]	; (8007064 <_dtoa_r+0x63c>)
 8006d64:	f00b 020f 	and.w	r2, fp, #15
 8006d68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d6c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006d70:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006d74:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006d78:	d019      	beq.n	8006dae <_dtoa_r+0x386>
 8006d7a:	4bbb      	ldr	r3, [pc, #748]	; (8007068 <_dtoa_r+0x640>)
 8006d7c:	ec51 0b18 	vmov	r0, r1, d8
 8006d80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d84:	f7f9 fd6a 	bl	800085c <__aeabi_ddiv>
 8006d88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d8c:	f008 080f 	and.w	r8, r8, #15
 8006d90:	2503      	movs	r5, #3
 8006d92:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007068 <_dtoa_r+0x640>
 8006d96:	f1b8 0f00 	cmp.w	r8, #0
 8006d9a:	d10a      	bne.n	8006db2 <_dtoa_r+0x38a>
 8006d9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006da0:	4632      	mov	r2, r6
 8006da2:	463b      	mov	r3, r7
 8006da4:	f7f9 fd5a 	bl	800085c <__aeabi_ddiv>
 8006da8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dac:	e02b      	b.n	8006e06 <_dtoa_r+0x3de>
 8006dae:	2502      	movs	r5, #2
 8006db0:	e7ef      	b.n	8006d92 <_dtoa_r+0x36a>
 8006db2:	f018 0f01 	tst.w	r8, #1
 8006db6:	d008      	beq.n	8006dca <_dtoa_r+0x3a2>
 8006db8:	4630      	mov	r0, r6
 8006dba:	4639      	mov	r1, r7
 8006dbc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006dc0:	f7f9 fc22 	bl	8000608 <__aeabi_dmul>
 8006dc4:	3501      	adds	r5, #1
 8006dc6:	4606      	mov	r6, r0
 8006dc8:	460f      	mov	r7, r1
 8006dca:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006dce:	f109 0908 	add.w	r9, r9, #8
 8006dd2:	e7e0      	b.n	8006d96 <_dtoa_r+0x36e>
 8006dd4:	f000 809f 	beq.w	8006f16 <_dtoa_r+0x4ee>
 8006dd8:	f1cb 0600 	rsb	r6, fp, #0
 8006ddc:	4ba1      	ldr	r3, [pc, #644]	; (8007064 <_dtoa_r+0x63c>)
 8006dde:	4fa2      	ldr	r7, [pc, #648]	; (8007068 <_dtoa_r+0x640>)
 8006de0:	f006 020f 	and.w	r2, r6, #15
 8006de4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dec:	ec51 0b18 	vmov	r0, r1, d8
 8006df0:	f7f9 fc0a 	bl	8000608 <__aeabi_dmul>
 8006df4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006df8:	1136      	asrs	r6, r6, #4
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	2502      	movs	r5, #2
 8006dfe:	2e00      	cmp	r6, #0
 8006e00:	d17e      	bne.n	8006f00 <_dtoa_r+0x4d8>
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1d0      	bne.n	8006da8 <_dtoa_r+0x380>
 8006e06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e08:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f000 8084 	beq.w	8006f1a <_dtoa_r+0x4f2>
 8006e12:	4b96      	ldr	r3, [pc, #600]	; (800706c <_dtoa_r+0x644>)
 8006e14:	2200      	movs	r2, #0
 8006e16:	4640      	mov	r0, r8
 8006e18:	4649      	mov	r1, r9
 8006e1a:	f7f9 fe67 	bl	8000aec <__aeabi_dcmplt>
 8006e1e:	2800      	cmp	r0, #0
 8006e20:	d07b      	beq.n	8006f1a <_dtoa_r+0x4f2>
 8006e22:	9b04      	ldr	r3, [sp, #16]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d078      	beq.n	8006f1a <_dtoa_r+0x4f2>
 8006e28:	9b01      	ldr	r3, [sp, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	dd39      	ble.n	8006ea2 <_dtoa_r+0x47a>
 8006e2e:	4b90      	ldr	r3, [pc, #576]	; (8007070 <_dtoa_r+0x648>)
 8006e30:	2200      	movs	r2, #0
 8006e32:	4640      	mov	r0, r8
 8006e34:	4649      	mov	r1, r9
 8006e36:	f7f9 fbe7 	bl	8000608 <__aeabi_dmul>
 8006e3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e3e:	9e01      	ldr	r6, [sp, #4]
 8006e40:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006e44:	3501      	adds	r5, #1
 8006e46:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	f7f9 fb72 	bl	8000534 <__aeabi_i2d>
 8006e50:	4642      	mov	r2, r8
 8006e52:	464b      	mov	r3, r9
 8006e54:	f7f9 fbd8 	bl	8000608 <__aeabi_dmul>
 8006e58:	4b86      	ldr	r3, [pc, #536]	; (8007074 <_dtoa_r+0x64c>)
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f7f9 fa1e 	bl	800029c <__adddf3>
 8006e60:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006e64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e68:	9303      	str	r3, [sp, #12]
 8006e6a:	2e00      	cmp	r6, #0
 8006e6c:	d158      	bne.n	8006f20 <_dtoa_r+0x4f8>
 8006e6e:	4b82      	ldr	r3, [pc, #520]	; (8007078 <_dtoa_r+0x650>)
 8006e70:	2200      	movs	r2, #0
 8006e72:	4640      	mov	r0, r8
 8006e74:	4649      	mov	r1, r9
 8006e76:	f7f9 fa0f 	bl	8000298 <__aeabi_dsub>
 8006e7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e7e:	4680      	mov	r8, r0
 8006e80:	4689      	mov	r9, r1
 8006e82:	f7f9 fe51 	bl	8000b28 <__aeabi_dcmpgt>
 8006e86:	2800      	cmp	r0, #0
 8006e88:	f040 8296 	bne.w	80073b8 <_dtoa_r+0x990>
 8006e8c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006e90:	4640      	mov	r0, r8
 8006e92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e96:	4649      	mov	r1, r9
 8006e98:	f7f9 fe28 	bl	8000aec <__aeabi_dcmplt>
 8006e9c:	2800      	cmp	r0, #0
 8006e9e:	f040 8289 	bne.w	80073b4 <_dtoa_r+0x98c>
 8006ea2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006ea6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f2c0 814e 	blt.w	800714a <_dtoa_r+0x722>
 8006eae:	f1bb 0f0e 	cmp.w	fp, #14
 8006eb2:	f300 814a 	bgt.w	800714a <_dtoa_r+0x722>
 8006eb6:	4b6b      	ldr	r3, [pc, #428]	; (8007064 <_dtoa_r+0x63c>)
 8006eb8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006ebc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f280 80dc 	bge.w	8007080 <_dtoa_r+0x658>
 8006ec8:	9b04      	ldr	r3, [sp, #16]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f300 80d8 	bgt.w	8007080 <_dtoa_r+0x658>
 8006ed0:	f040 826f 	bne.w	80073b2 <_dtoa_r+0x98a>
 8006ed4:	4b68      	ldr	r3, [pc, #416]	; (8007078 <_dtoa_r+0x650>)
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	4640      	mov	r0, r8
 8006eda:	4649      	mov	r1, r9
 8006edc:	f7f9 fb94 	bl	8000608 <__aeabi_dmul>
 8006ee0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ee4:	f7f9 fe16 	bl	8000b14 <__aeabi_dcmpge>
 8006ee8:	9e04      	ldr	r6, [sp, #16]
 8006eea:	4637      	mov	r7, r6
 8006eec:	2800      	cmp	r0, #0
 8006eee:	f040 8245 	bne.w	800737c <_dtoa_r+0x954>
 8006ef2:	9d00      	ldr	r5, [sp, #0]
 8006ef4:	2331      	movs	r3, #49	; 0x31
 8006ef6:	f805 3b01 	strb.w	r3, [r5], #1
 8006efa:	f10b 0b01 	add.w	fp, fp, #1
 8006efe:	e241      	b.n	8007384 <_dtoa_r+0x95c>
 8006f00:	07f2      	lsls	r2, r6, #31
 8006f02:	d505      	bpl.n	8006f10 <_dtoa_r+0x4e8>
 8006f04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f08:	f7f9 fb7e 	bl	8000608 <__aeabi_dmul>
 8006f0c:	3501      	adds	r5, #1
 8006f0e:	2301      	movs	r3, #1
 8006f10:	1076      	asrs	r6, r6, #1
 8006f12:	3708      	adds	r7, #8
 8006f14:	e773      	b.n	8006dfe <_dtoa_r+0x3d6>
 8006f16:	2502      	movs	r5, #2
 8006f18:	e775      	b.n	8006e06 <_dtoa_r+0x3de>
 8006f1a:	9e04      	ldr	r6, [sp, #16]
 8006f1c:	465f      	mov	r7, fp
 8006f1e:	e792      	b.n	8006e46 <_dtoa_r+0x41e>
 8006f20:	9900      	ldr	r1, [sp, #0]
 8006f22:	4b50      	ldr	r3, [pc, #320]	; (8007064 <_dtoa_r+0x63c>)
 8006f24:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f28:	4431      	add	r1, r6
 8006f2a:	9102      	str	r1, [sp, #8]
 8006f2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f2e:	eeb0 9a47 	vmov.f32	s18, s14
 8006f32:	eef0 9a67 	vmov.f32	s19, s15
 8006f36:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006f3a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f3e:	2900      	cmp	r1, #0
 8006f40:	d044      	beq.n	8006fcc <_dtoa_r+0x5a4>
 8006f42:	494e      	ldr	r1, [pc, #312]	; (800707c <_dtoa_r+0x654>)
 8006f44:	2000      	movs	r0, #0
 8006f46:	f7f9 fc89 	bl	800085c <__aeabi_ddiv>
 8006f4a:	ec53 2b19 	vmov	r2, r3, d9
 8006f4e:	f7f9 f9a3 	bl	8000298 <__aeabi_dsub>
 8006f52:	9d00      	ldr	r5, [sp, #0]
 8006f54:	ec41 0b19 	vmov	d9, r0, r1
 8006f58:	4649      	mov	r1, r9
 8006f5a:	4640      	mov	r0, r8
 8006f5c:	f7f9 fe04 	bl	8000b68 <__aeabi_d2iz>
 8006f60:	4606      	mov	r6, r0
 8006f62:	f7f9 fae7 	bl	8000534 <__aeabi_i2d>
 8006f66:	4602      	mov	r2, r0
 8006f68:	460b      	mov	r3, r1
 8006f6a:	4640      	mov	r0, r8
 8006f6c:	4649      	mov	r1, r9
 8006f6e:	f7f9 f993 	bl	8000298 <__aeabi_dsub>
 8006f72:	3630      	adds	r6, #48	; 0x30
 8006f74:	f805 6b01 	strb.w	r6, [r5], #1
 8006f78:	ec53 2b19 	vmov	r2, r3, d9
 8006f7c:	4680      	mov	r8, r0
 8006f7e:	4689      	mov	r9, r1
 8006f80:	f7f9 fdb4 	bl	8000aec <__aeabi_dcmplt>
 8006f84:	2800      	cmp	r0, #0
 8006f86:	d164      	bne.n	8007052 <_dtoa_r+0x62a>
 8006f88:	4642      	mov	r2, r8
 8006f8a:	464b      	mov	r3, r9
 8006f8c:	4937      	ldr	r1, [pc, #220]	; (800706c <_dtoa_r+0x644>)
 8006f8e:	2000      	movs	r0, #0
 8006f90:	f7f9 f982 	bl	8000298 <__aeabi_dsub>
 8006f94:	ec53 2b19 	vmov	r2, r3, d9
 8006f98:	f7f9 fda8 	bl	8000aec <__aeabi_dcmplt>
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	f040 80b6 	bne.w	800710e <_dtoa_r+0x6e6>
 8006fa2:	9b02      	ldr	r3, [sp, #8]
 8006fa4:	429d      	cmp	r5, r3
 8006fa6:	f43f af7c 	beq.w	8006ea2 <_dtoa_r+0x47a>
 8006faa:	4b31      	ldr	r3, [pc, #196]	; (8007070 <_dtoa_r+0x648>)
 8006fac:	ec51 0b19 	vmov	r0, r1, d9
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f7f9 fb29 	bl	8000608 <__aeabi_dmul>
 8006fb6:	4b2e      	ldr	r3, [pc, #184]	; (8007070 <_dtoa_r+0x648>)
 8006fb8:	ec41 0b19 	vmov	d9, r0, r1
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	4640      	mov	r0, r8
 8006fc0:	4649      	mov	r1, r9
 8006fc2:	f7f9 fb21 	bl	8000608 <__aeabi_dmul>
 8006fc6:	4680      	mov	r8, r0
 8006fc8:	4689      	mov	r9, r1
 8006fca:	e7c5      	b.n	8006f58 <_dtoa_r+0x530>
 8006fcc:	ec51 0b17 	vmov	r0, r1, d7
 8006fd0:	f7f9 fb1a 	bl	8000608 <__aeabi_dmul>
 8006fd4:	9b02      	ldr	r3, [sp, #8]
 8006fd6:	9d00      	ldr	r5, [sp, #0]
 8006fd8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fda:	ec41 0b19 	vmov	d9, r0, r1
 8006fde:	4649      	mov	r1, r9
 8006fe0:	4640      	mov	r0, r8
 8006fe2:	f7f9 fdc1 	bl	8000b68 <__aeabi_d2iz>
 8006fe6:	4606      	mov	r6, r0
 8006fe8:	f7f9 faa4 	bl	8000534 <__aeabi_i2d>
 8006fec:	3630      	adds	r6, #48	; 0x30
 8006fee:	4602      	mov	r2, r0
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	4640      	mov	r0, r8
 8006ff4:	4649      	mov	r1, r9
 8006ff6:	f7f9 f94f 	bl	8000298 <__aeabi_dsub>
 8006ffa:	f805 6b01 	strb.w	r6, [r5], #1
 8006ffe:	9b02      	ldr	r3, [sp, #8]
 8007000:	429d      	cmp	r5, r3
 8007002:	4680      	mov	r8, r0
 8007004:	4689      	mov	r9, r1
 8007006:	f04f 0200 	mov.w	r2, #0
 800700a:	d124      	bne.n	8007056 <_dtoa_r+0x62e>
 800700c:	4b1b      	ldr	r3, [pc, #108]	; (800707c <_dtoa_r+0x654>)
 800700e:	ec51 0b19 	vmov	r0, r1, d9
 8007012:	f7f9 f943 	bl	800029c <__adddf3>
 8007016:	4602      	mov	r2, r0
 8007018:	460b      	mov	r3, r1
 800701a:	4640      	mov	r0, r8
 800701c:	4649      	mov	r1, r9
 800701e:	f7f9 fd83 	bl	8000b28 <__aeabi_dcmpgt>
 8007022:	2800      	cmp	r0, #0
 8007024:	d173      	bne.n	800710e <_dtoa_r+0x6e6>
 8007026:	ec53 2b19 	vmov	r2, r3, d9
 800702a:	4914      	ldr	r1, [pc, #80]	; (800707c <_dtoa_r+0x654>)
 800702c:	2000      	movs	r0, #0
 800702e:	f7f9 f933 	bl	8000298 <__aeabi_dsub>
 8007032:	4602      	mov	r2, r0
 8007034:	460b      	mov	r3, r1
 8007036:	4640      	mov	r0, r8
 8007038:	4649      	mov	r1, r9
 800703a:	f7f9 fd57 	bl	8000aec <__aeabi_dcmplt>
 800703e:	2800      	cmp	r0, #0
 8007040:	f43f af2f 	beq.w	8006ea2 <_dtoa_r+0x47a>
 8007044:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007046:	1e6b      	subs	r3, r5, #1
 8007048:	930f      	str	r3, [sp, #60]	; 0x3c
 800704a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800704e:	2b30      	cmp	r3, #48	; 0x30
 8007050:	d0f8      	beq.n	8007044 <_dtoa_r+0x61c>
 8007052:	46bb      	mov	fp, r7
 8007054:	e04a      	b.n	80070ec <_dtoa_r+0x6c4>
 8007056:	4b06      	ldr	r3, [pc, #24]	; (8007070 <_dtoa_r+0x648>)
 8007058:	f7f9 fad6 	bl	8000608 <__aeabi_dmul>
 800705c:	4680      	mov	r8, r0
 800705e:	4689      	mov	r9, r1
 8007060:	e7bd      	b.n	8006fde <_dtoa_r+0x5b6>
 8007062:	bf00      	nop
 8007064:	080094e8 	.word	0x080094e8
 8007068:	080094c0 	.word	0x080094c0
 800706c:	3ff00000 	.word	0x3ff00000
 8007070:	40240000 	.word	0x40240000
 8007074:	401c0000 	.word	0x401c0000
 8007078:	40140000 	.word	0x40140000
 800707c:	3fe00000 	.word	0x3fe00000
 8007080:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007084:	9d00      	ldr	r5, [sp, #0]
 8007086:	4642      	mov	r2, r8
 8007088:	464b      	mov	r3, r9
 800708a:	4630      	mov	r0, r6
 800708c:	4639      	mov	r1, r7
 800708e:	f7f9 fbe5 	bl	800085c <__aeabi_ddiv>
 8007092:	f7f9 fd69 	bl	8000b68 <__aeabi_d2iz>
 8007096:	9001      	str	r0, [sp, #4]
 8007098:	f7f9 fa4c 	bl	8000534 <__aeabi_i2d>
 800709c:	4642      	mov	r2, r8
 800709e:	464b      	mov	r3, r9
 80070a0:	f7f9 fab2 	bl	8000608 <__aeabi_dmul>
 80070a4:	4602      	mov	r2, r0
 80070a6:	460b      	mov	r3, r1
 80070a8:	4630      	mov	r0, r6
 80070aa:	4639      	mov	r1, r7
 80070ac:	f7f9 f8f4 	bl	8000298 <__aeabi_dsub>
 80070b0:	9e01      	ldr	r6, [sp, #4]
 80070b2:	9f04      	ldr	r7, [sp, #16]
 80070b4:	3630      	adds	r6, #48	; 0x30
 80070b6:	f805 6b01 	strb.w	r6, [r5], #1
 80070ba:	9e00      	ldr	r6, [sp, #0]
 80070bc:	1bae      	subs	r6, r5, r6
 80070be:	42b7      	cmp	r7, r6
 80070c0:	4602      	mov	r2, r0
 80070c2:	460b      	mov	r3, r1
 80070c4:	d134      	bne.n	8007130 <_dtoa_r+0x708>
 80070c6:	f7f9 f8e9 	bl	800029c <__adddf3>
 80070ca:	4642      	mov	r2, r8
 80070cc:	464b      	mov	r3, r9
 80070ce:	4606      	mov	r6, r0
 80070d0:	460f      	mov	r7, r1
 80070d2:	f7f9 fd29 	bl	8000b28 <__aeabi_dcmpgt>
 80070d6:	b9c8      	cbnz	r0, 800710c <_dtoa_r+0x6e4>
 80070d8:	4642      	mov	r2, r8
 80070da:	464b      	mov	r3, r9
 80070dc:	4630      	mov	r0, r6
 80070de:	4639      	mov	r1, r7
 80070e0:	f7f9 fcfa 	bl	8000ad8 <__aeabi_dcmpeq>
 80070e4:	b110      	cbz	r0, 80070ec <_dtoa_r+0x6c4>
 80070e6:	9b01      	ldr	r3, [sp, #4]
 80070e8:	07db      	lsls	r3, r3, #31
 80070ea:	d40f      	bmi.n	800710c <_dtoa_r+0x6e4>
 80070ec:	4651      	mov	r1, sl
 80070ee:	4620      	mov	r0, r4
 80070f0:	f000 fbcc 	bl	800788c <_Bfree>
 80070f4:	2300      	movs	r3, #0
 80070f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80070f8:	702b      	strb	r3, [r5, #0]
 80070fa:	f10b 0301 	add.w	r3, fp, #1
 80070fe:	6013      	str	r3, [r2, #0]
 8007100:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007102:	2b00      	cmp	r3, #0
 8007104:	f43f ace2 	beq.w	8006acc <_dtoa_r+0xa4>
 8007108:	601d      	str	r5, [r3, #0]
 800710a:	e4df      	b.n	8006acc <_dtoa_r+0xa4>
 800710c:	465f      	mov	r7, fp
 800710e:	462b      	mov	r3, r5
 8007110:	461d      	mov	r5, r3
 8007112:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007116:	2a39      	cmp	r2, #57	; 0x39
 8007118:	d106      	bne.n	8007128 <_dtoa_r+0x700>
 800711a:	9a00      	ldr	r2, [sp, #0]
 800711c:	429a      	cmp	r2, r3
 800711e:	d1f7      	bne.n	8007110 <_dtoa_r+0x6e8>
 8007120:	9900      	ldr	r1, [sp, #0]
 8007122:	2230      	movs	r2, #48	; 0x30
 8007124:	3701      	adds	r7, #1
 8007126:	700a      	strb	r2, [r1, #0]
 8007128:	781a      	ldrb	r2, [r3, #0]
 800712a:	3201      	adds	r2, #1
 800712c:	701a      	strb	r2, [r3, #0]
 800712e:	e790      	b.n	8007052 <_dtoa_r+0x62a>
 8007130:	4ba3      	ldr	r3, [pc, #652]	; (80073c0 <_dtoa_r+0x998>)
 8007132:	2200      	movs	r2, #0
 8007134:	f7f9 fa68 	bl	8000608 <__aeabi_dmul>
 8007138:	2200      	movs	r2, #0
 800713a:	2300      	movs	r3, #0
 800713c:	4606      	mov	r6, r0
 800713e:	460f      	mov	r7, r1
 8007140:	f7f9 fcca 	bl	8000ad8 <__aeabi_dcmpeq>
 8007144:	2800      	cmp	r0, #0
 8007146:	d09e      	beq.n	8007086 <_dtoa_r+0x65e>
 8007148:	e7d0      	b.n	80070ec <_dtoa_r+0x6c4>
 800714a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800714c:	2a00      	cmp	r2, #0
 800714e:	f000 80ca 	beq.w	80072e6 <_dtoa_r+0x8be>
 8007152:	9a07      	ldr	r2, [sp, #28]
 8007154:	2a01      	cmp	r2, #1
 8007156:	f300 80ad 	bgt.w	80072b4 <_dtoa_r+0x88c>
 800715a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800715c:	2a00      	cmp	r2, #0
 800715e:	f000 80a5 	beq.w	80072ac <_dtoa_r+0x884>
 8007162:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007166:	9e08      	ldr	r6, [sp, #32]
 8007168:	9d05      	ldr	r5, [sp, #20]
 800716a:	9a05      	ldr	r2, [sp, #20]
 800716c:	441a      	add	r2, r3
 800716e:	9205      	str	r2, [sp, #20]
 8007170:	9a06      	ldr	r2, [sp, #24]
 8007172:	2101      	movs	r1, #1
 8007174:	441a      	add	r2, r3
 8007176:	4620      	mov	r0, r4
 8007178:	9206      	str	r2, [sp, #24]
 800717a:	f000 fc3d 	bl	80079f8 <__i2b>
 800717e:	4607      	mov	r7, r0
 8007180:	b165      	cbz	r5, 800719c <_dtoa_r+0x774>
 8007182:	9b06      	ldr	r3, [sp, #24]
 8007184:	2b00      	cmp	r3, #0
 8007186:	dd09      	ble.n	800719c <_dtoa_r+0x774>
 8007188:	42ab      	cmp	r3, r5
 800718a:	9a05      	ldr	r2, [sp, #20]
 800718c:	bfa8      	it	ge
 800718e:	462b      	movge	r3, r5
 8007190:	1ad2      	subs	r2, r2, r3
 8007192:	9205      	str	r2, [sp, #20]
 8007194:	9a06      	ldr	r2, [sp, #24]
 8007196:	1aed      	subs	r5, r5, r3
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	9306      	str	r3, [sp, #24]
 800719c:	9b08      	ldr	r3, [sp, #32]
 800719e:	b1f3      	cbz	r3, 80071de <_dtoa_r+0x7b6>
 80071a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	f000 80a3 	beq.w	80072ee <_dtoa_r+0x8c6>
 80071a8:	2e00      	cmp	r6, #0
 80071aa:	dd10      	ble.n	80071ce <_dtoa_r+0x7a6>
 80071ac:	4639      	mov	r1, r7
 80071ae:	4632      	mov	r2, r6
 80071b0:	4620      	mov	r0, r4
 80071b2:	f000 fce1 	bl	8007b78 <__pow5mult>
 80071b6:	4652      	mov	r2, sl
 80071b8:	4601      	mov	r1, r0
 80071ba:	4607      	mov	r7, r0
 80071bc:	4620      	mov	r0, r4
 80071be:	f000 fc31 	bl	8007a24 <__multiply>
 80071c2:	4651      	mov	r1, sl
 80071c4:	4680      	mov	r8, r0
 80071c6:	4620      	mov	r0, r4
 80071c8:	f000 fb60 	bl	800788c <_Bfree>
 80071cc:	46c2      	mov	sl, r8
 80071ce:	9b08      	ldr	r3, [sp, #32]
 80071d0:	1b9a      	subs	r2, r3, r6
 80071d2:	d004      	beq.n	80071de <_dtoa_r+0x7b6>
 80071d4:	4651      	mov	r1, sl
 80071d6:	4620      	mov	r0, r4
 80071d8:	f000 fcce 	bl	8007b78 <__pow5mult>
 80071dc:	4682      	mov	sl, r0
 80071de:	2101      	movs	r1, #1
 80071e0:	4620      	mov	r0, r4
 80071e2:	f000 fc09 	bl	80079f8 <__i2b>
 80071e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	4606      	mov	r6, r0
 80071ec:	f340 8081 	ble.w	80072f2 <_dtoa_r+0x8ca>
 80071f0:	461a      	mov	r2, r3
 80071f2:	4601      	mov	r1, r0
 80071f4:	4620      	mov	r0, r4
 80071f6:	f000 fcbf 	bl	8007b78 <__pow5mult>
 80071fa:	9b07      	ldr	r3, [sp, #28]
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	4606      	mov	r6, r0
 8007200:	dd7a      	ble.n	80072f8 <_dtoa_r+0x8d0>
 8007202:	f04f 0800 	mov.w	r8, #0
 8007206:	6933      	ldr	r3, [r6, #16]
 8007208:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800720c:	6918      	ldr	r0, [r3, #16]
 800720e:	f000 fba5 	bl	800795c <__hi0bits>
 8007212:	f1c0 0020 	rsb	r0, r0, #32
 8007216:	9b06      	ldr	r3, [sp, #24]
 8007218:	4418      	add	r0, r3
 800721a:	f010 001f 	ands.w	r0, r0, #31
 800721e:	f000 8094 	beq.w	800734a <_dtoa_r+0x922>
 8007222:	f1c0 0320 	rsb	r3, r0, #32
 8007226:	2b04      	cmp	r3, #4
 8007228:	f340 8085 	ble.w	8007336 <_dtoa_r+0x90e>
 800722c:	9b05      	ldr	r3, [sp, #20]
 800722e:	f1c0 001c 	rsb	r0, r0, #28
 8007232:	4403      	add	r3, r0
 8007234:	9305      	str	r3, [sp, #20]
 8007236:	9b06      	ldr	r3, [sp, #24]
 8007238:	4403      	add	r3, r0
 800723a:	4405      	add	r5, r0
 800723c:	9306      	str	r3, [sp, #24]
 800723e:	9b05      	ldr	r3, [sp, #20]
 8007240:	2b00      	cmp	r3, #0
 8007242:	dd05      	ble.n	8007250 <_dtoa_r+0x828>
 8007244:	4651      	mov	r1, sl
 8007246:	461a      	mov	r2, r3
 8007248:	4620      	mov	r0, r4
 800724a:	f000 fcef 	bl	8007c2c <__lshift>
 800724e:	4682      	mov	sl, r0
 8007250:	9b06      	ldr	r3, [sp, #24]
 8007252:	2b00      	cmp	r3, #0
 8007254:	dd05      	ble.n	8007262 <_dtoa_r+0x83a>
 8007256:	4631      	mov	r1, r6
 8007258:	461a      	mov	r2, r3
 800725a:	4620      	mov	r0, r4
 800725c:	f000 fce6 	bl	8007c2c <__lshift>
 8007260:	4606      	mov	r6, r0
 8007262:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007264:	2b00      	cmp	r3, #0
 8007266:	d072      	beq.n	800734e <_dtoa_r+0x926>
 8007268:	4631      	mov	r1, r6
 800726a:	4650      	mov	r0, sl
 800726c:	f000 fd4a 	bl	8007d04 <__mcmp>
 8007270:	2800      	cmp	r0, #0
 8007272:	da6c      	bge.n	800734e <_dtoa_r+0x926>
 8007274:	2300      	movs	r3, #0
 8007276:	4651      	mov	r1, sl
 8007278:	220a      	movs	r2, #10
 800727a:	4620      	mov	r0, r4
 800727c:	f000 fb28 	bl	80078d0 <__multadd>
 8007280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007282:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007286:	4682      	mov	sl, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	f000 81b0 	beq.w	80075ee <_dtoa_r+0xbc6>
 800728e:	2300      	movs	r3, #0
 8007290:	4639      	mov	r1, r7
 8007292:	220a      	movs	r2, #10
 8007294:	4620      	mov	r0, r4
 8007296:	f000 fb1b 	bl	80078d0 <__multadd>
 800729a:	9b01      	ldr	r3, [sp, #4]
 800729c:	2b00      	cmp	r3, #0
 800729e:	4607      	mov	r7, r0
 80072a0:	f300 8096 	bgt.w	80073d0 <_dtoa_r+0x9a8>
 80072a4:	9b07      	ldr	r3, [sp, #28]
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	dc59      	bgt.n	800735e <_dtoa_r+0x936>
 80072aa:	e091      	b.n	80073d0 <_dtoa_r+0x9a8>
 80072ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80072ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80072b2:	e758      	b.n	8007166 <_dtoa_r+0x73e>
 80072b4:	9b04      	ldr	r3, [sp, #16]
 80072b6:	1e5e      	subs	r6, r3, #1
 80072b8:	9b08      	ldr	r3, [sp, #32]
 80072ba:	42b3      	cmp	r3, r6
 80072bc:	bfbf      	itttt	lt
 80072be:	9b08      	ldrlt	r3, [sp, #32]
 80072c0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80072c2:	9608      	strlt	r6, [sp, #32]
 80072c4:	1af3      	sublt	r3, r6, r3
 80072c6:	bfb4      	ite	lt
 80072c8:	18d2      	addlt	r2, r2, r3
 80072ca:	1b9e      	subge	r6, r3, r6
 80072cc:	9b04      	ldr	r3, [sp, #16]
 80072ce:	bfbc      	itt	lt
 80072d0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80072d2:	2600      	movlt	r6, #0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	bfb7      	itett	lt
 80072d8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80072dc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80072e0:	1a9d      	sublt	r5, r3, r2
 80072e2:	2300      	movlt	r3, #0
 80072e4:	e741      	b.n	800716a <_dtoa_r+0x742>
 80072e6:	9e08      	ldr	r6, [sp, #32]
 80072e8:	9d05      	ldr	r5, [sp, #20]
 80072ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80072ec:	e748      	b.n	8007180 <_dtoa_r+0x758>
 80072ee:	9a08      	ldr	r2, [sp, #32]
 80072f0:	e770      	b.n	80071d4 <_dtoa_r+0x7ac>
 80072f2:	9b07      	ldr	r3, [sp, #28]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	dc19      	bgt.n	800732c <_dtoa_r+0x904>
 80072f8:	9b02      	ldr	r3, [sp, #8]
 80072fa:	b9bb      	cbnz	r3, 800732c <_dtoa_r+0x904>
 80072fc:	9b03      	ldr	r3, [sp, #12]
 80072fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007302:	b99b      	cbnz	r3, 800732c <_dtoa_r+0x904>
 8007304:	9b03      	ldr	r3, [sp, #12]
 8007306:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800730a:	0d1b      	lsrs	r3, r3, #20
 800730c:	051b      	lsls	r3, r3, #20
 800730e:	b183      	cbz	r3, 8007332 <_dtoa_r+0x90a>
 8007310:	9b05      	ldr	r3, [sp, #20]
 8007312:	3301      	adds	r3, #1
 8007314:	9305      	str	r3, [sp, #20]
 8007316:	9b06      	ldr	r3, [sp, #24]
 8007318:	3301      	adds	r3, #1
 800731a:	9306      	str	r3, [sp, #24]
 800731c:	f04f 0801 	mov.w	r8, #1
 8007320:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007322:	2b00      	cmp	r3, #0
 8007324:	f47f af6f 	bne.w	8007206 <_dtoa_r+0x7de>
 8007328:	2001      	movs	r0, #1
 800732a:	e774      	b.n	8007216 <_dtoa_r+0x7ee>
 800732c:	f04f 0800 	mov.w	r8, #0
 8007330:	e7f6      	b.n	8007320 <_dtoa_r+0x8f8>
 8007332:	4698      	mov	r8, r3
 8007334:	e7f4      	b.n	8007320 <_dtoa_r+0x8f8>
 8007336:	d082      	beq.n	800723e <_dtoa_r+0x816>
 8007338:	9a05      	ldr	r2, [sp, #20]
 800733a:	331c      	adds	r3, #28
 800733c:	441a      	add	r2, r3
 800733e:	9205      	str	r2, [sp, #20]
 8007340:	9a06      	ldr	r2, [sp, #24]
 8007342:	441a      	add	r2, r3
 8007344:	441d      	add	r5, r3
 8007346:	9206      	str	r2, [sp, #24]
 8007348:	e779      	b.n	800723e <_dtoa_r+0x816>
 800734a:	4603      	mov	r3, r0
 800734c:	e7f4      	b.n	8007338 <_dtoa_r+0x910>
 800734e:	9b04      	ldr	r3, [sp, #16]
 8007350:	2b00      	cmp	r3, #0
 8007352:	dc37      	bgt.n	80073c4 <_dtoa_r+0x99c>
 8007354:	9b07      	ldr	r3, [sp, #28]
 8007356:	2b02      	cmp	r3, #2
 8007358:	dd34      	ble.n	80073c4 <_dtoa_r+0x99c>
 800735a:	9b04      	ldr	r3, [sp, #16]
 800735c:	9301      	str	r3, [sp, #4]
 800735e:	9b01      	ldr	r3, [sp, #4]
 8007360:	b963      	cbnz	r3, 800737c <_dtoa_r+0x954>
 8007362:	4631      	mov	r1, r6
 8007364:	2205      	movs	r2, #5
 8007366:	4620      	mov	r0, r4
 8007368:	f000 fab2 	bl	80078d0 <__multadd>
 800736c:	4601      	mov	r1, r0
 800736e:	4606      	mov	r6, r0
 8007370:	4650      	mov	r0, sl
 8007372:	f000 fcc7 	bl	8007d04 <__mcmp>
 8007376:	2800      	cmp	r0, #0
 8007378:	f73f adbb 	bgt.w	8006ef2 <_dtoa_r+0x4ca>
 800737c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800737e:	9d00      	ldr	r5, [sp, #0]
 8007380:	ea6f 0b03 	mvn.w	fp, r3
 8007384:	f04f 0800 	mov.w	r8, #0
 8007388:	4631      	mov	r1, r6
 800738a:	4620      	mov	r0, r4
 800738c:	f000 fa7e 	bl	800788c <_Bfree>
 8007390:	2f00      	cmp	r7, #0
 8007392:	f43f aeab 	beq.w	80070ec <_dtoa_r+0x6c4>
 8007396:	f1b8 0f00 	cmp.w	r8, #0
 800739a:	d005      	beq.n	80073a8 <_dtoa_r+0x980>
 800739c:	45b8      	cmp	r8, r7
 800739e:	d003      	beq.n	80073a8 <_dtoa_r+0x980>
 80073a0:	4641      	mov	r1, r8
 80073a2:	4620      	mov	r0, r4
 80073a4:	f000 fa72 	bl	800788c <_Bfree>
 80073a8:	4639      	mov	r1, r7
 80073aa:	4620      	mov	r0, r4
 80073ac:	f000 fa6e 	bl	800788c <_Bfree>
 80073b0:	e69c      	b.n	80070ec <_dtoa_r+0x6c4>
 80073b2:	2600      	movs	r6, #0
 80073b4:	4637      	mov	r7, r6
 80073b6:	e7e1      	b.n	800737c <_dtoa_r+0x954>
 80073b8:	46bb      	mov	fp, r7
 80073ba:	4637      	mov	r7, r6
 80073bc:	e599      	b.n	8006ef2 <_dtoa_r+0x4ca>
 80073be:	bf00      	nop
 80073c0:	40240000 	.word	0x40240000
 80073c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	f000 80c8 	beq.w	800755c <_dtoa_r+0xb34>
 80073cc:	9b04      	ldr	r3, [sp, #16]
 80073ce:	9301      	str	r3, [sp, #4]
 80073d0:	2d00      	cmp	r5, #0
 80073d2:	dd05      	ble.n	80073e0 <_dtoa_r+0x9b8>
 80073d4:	4639      	mov	r1, r7
 80073d6:	462a      	mov	r2, r5
 80073d8:	4620      	mov	r0, r4
 80073da:	f000 fc27 	bl	8007c2c <__lshift>
 80073de:	4607      	mov	r7, r0
 80073e0:	f1b8 0f00 	cmp.w	r8, #0
 80073e4:	d05b      	beq.n	800749e <_dtoa_r+0xa76>
 80073e6:	6879      	ldr	r1, [r7, #4]
 80073e8:	4620      	mov	r0, r4
 80073ea:	f000 fa0f 	bl	800780c <_Balloc>
 80073ee:	4605      	mov	r5, r0
 80073f0:	b928      	cbnz	r0, 80073fe <_dtoa_r+0x9d6>
 80073f2:	4b83      	ldr	r3, [pc, #524]	; (8007600 <_dtoa_r+0xbd8>)
 80073f4:	4602      	mov	r2, r0
 80073f6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80073fa:	f7ff bb2e 	b.w	8006a5a <_dtoa_r+0x32>
 80073fe:	693a      	ldr	r2, [r7, #16]
 8007400:	3202      	adds	r2, #2
 8007402:	0092      	lsls	r2, r2, #2
 8007404:	f107 010c 	add.w	r1, r7, #12
 8007408:	300c      	adds	r0, #12
 800740a:	f7ff fa74 	bl	80068f6 <memcpy>
 800740e:	2201      	movs	r2, #1
 8007410:	4629      	mov	r1, r5
 8007412:	4620      	mov	r0, r4
 8007414:	f000 fc0a 	bl	8007c2c <__lshift>
 8007418:	9b00      	ldr	r3, [sp, #0]
 800741a:	3301      	adds	r3, #1
 800741c:	9304      	str	r3, [sp, #16]
 800741e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007422:	4413      	add	r3, r2
 8007424:	9308      	str	r3, [sp, #32]
 8007426:	9b02      	ldr	r3, [sp, #8]
 8007428:	f003 0301 	and.w	r3, r3, #1
 800742c:	46b8      	mov	r8, r7
 800742e:	9306      	str	r3, [sp, #24]
 8007430:	4607      	mov	r7, r0
 8007432:	9b04      	ldr	r3, [sp, #16]
 8007434:	4631      	mov	r1, r6
 8007436:	3b01      	subs	r3, #1
 8007438:	4650      	mov	r0, sl
 800743a:	9301      	str	r3, [sp, #4]
 800743c:	f7ff fa69 	bl	8006912 <quorem>
 8007440:	4641      	mov	r1, r8
 8007442:	9002      	str	r0, [sp, #8]
 8007444:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007448:	4650      	mov	r0, sl
 800744a:	f000 fc5b 	bl	8007d04 <__mcmp>
 800744e:	463a      	mov	r2, r7
 8007450:	9005      	str	r0, [sp, #20]
 8007452:	4631      	mov	r1, r6
 8007454:	4620      	mov	r0, r4
 8007456:	f000 fc71 	bl	8007d3c <__mdiff>
 800745a:	68c2      	ldr	r2, [r0, #12]
 800745c:	4605      	mov	r5, r0
 800745e:	bb02      	cbnz	r2, 80074a2 <_dtoa_r+0xa7a>
 8007460:	4601      	mov	r1, r0
 8007462:	4650      	mov	r0, sl
 8007464:	f000 fc4e 	bl	8007d04 <__mcmp>
 8007468:	4602      	mov	r2, r0
 800746a:	4629      	mov	r1, r5
 800746c:	4620      	mov	r0, r4
 800746e:	9209      	str	r2, [sp, #36]	; 0x24
 8007470:	f000 fa0c 	bl	800788c <_Bfree>
 8007474:	9b07      	ldr	r3, [sp, #28]
 8007476:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007478:	9d04      	ldr	r5, [sp, #16]
 800747a:	ea43 0102 	orr.w	r1, r3, r2
 800747e:	9b06      	ldr	r3, [sp, #24]
 8007480:	4319      	orrs	r1, r3
 8007482:	d110      	bne.n	80074a6 <_dtoa_r+0xa7e>
 8007484:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007488:	d029      	beq.n	80074de <_dtoa_r+0xab6>
 800748a:	9b05      	ldr	r3, [sp, #20]
 800748c:	2b00      	cmp	r3, #0
 800748e:	dd02      	ble.n	8007496 <_dtoa_r+0xa6e>
 8007490:	9b02      	ldr	r3, [sp, #8]
 8007492:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007496:	9b01      	ldr	r3, [sp, #4]
 8007498:	f883 9000 	strb.w	r9, [r3]
 800749c:	e774      	b.n	8007388 <_dtoa_r+0x960>
 800749e:	4638      	mov	r0, r7
 80074a0:	e7ba      	b.n	8007418 <_dtoa_r+0x9f0>
 80074a2:	2201      	movs	r2, #1
 80074a4:	e7e1      	b.n	800746a <_dtoa_r+0xa42>
 80074a6:	9b05      	ldr	r3, [sp, #20]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	db04      	blt.n	80074b6 <_dtoa_r+0xa8e>
 80074ac:	9907      	ldr	r1, [sp, #28]
 80074ae:	430b      	orrs	r3, r1
 80074b0:	9906      	ldr	r1, [sp, #24]
 80074b2:	430b      	orrs	r3, r1
 80074b4:	d120      	bne.n	80074f8 <_dtoa_r+0xad0>
 80074b6:	2a00      	cmp	r2, #0
 80074b8:	dded      	ble.n	8007496 <_dtoa_r+0xa6e>
 80074ba:	4651      	mov	r1, sl
 80074bc:	2201      	movs	r2, #1
 80074be:	4620      	mov	r0, r4
 80074c0:	f000 fbb4 	bl	8007c2c <__lshift>
 80074c4:	4631      	mov	r1, r6
 80074c6:	4682      	mov	sl, r0
 80074c8:	f000 fc1c 	bl	8007d04 <__mcmp>
 80074cc:	2800      	cmp	r0, #0
 80074ce:	dc03      	bgt.n	80074d8 <_dtoa_r+0xab0>
 80074d0:	d1e1      	bne.n	8007496 <_dtoa_r+0xa6e>
 80074d2:	f019 0f01 	tst.w	r9, #1
 80074d6:	d0de      	beq.n	8007496 <_dtoa_r+0xa6e>
 80074d8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80074dc:	d1d8      	bne.n	8007490 <_dtoa_r+0xa68>
 80074de:	9a01      	ldr	r2, [sp, #4]
 80074e0:	2339      	movs	r3, #57	; 0x39
 80074e2:	7013      	strb	r3, [r2, #0]
 80074e4:	462b      	mov	r3, r5
 80074e6:	461d      	mov	r5, r3
 80074e8:	3b01      	subs	r3, #1
 80074ea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80074ee:	2a39      	cmp	r2, #57	; 0x39
 80074f0:	d06c      	beq.n	80075cc <_dtoa_r+0xba4>
 80074f2:	3201      	adds	r2, #1
 80074f4:	701a      	strb	r2, [r3, #0]
 80074f6:	e747      	b.n	8007388 <_dtoa_r+0x960>
 80074f8:	2a00      	cmp	r2, #0
 80074fa:	dd07      	ble.n	800750c <_dtoa_r+0xae4>
 80074fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007500:	d0ed      	beq.n	80074de <_dtoa_r+0xab6>
 8007502:	9a01      	ldr	r2, [sp, #4]
 8007504:	f109 0301 	add.w	r3, r9, #1
 8007508:	7013      	strb	r3, [r2, #0]
 800750a:	e73d      	b.n	8007388 <_dtoa_r+0x960>
 800750c:	9b04      	ldr	r3, [sp, #16]
 800750e:	9a08      	ldr	r2, [sp, #32]
 8007510:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007514:	4293      	cmp	r3, r2
 8007516:	d043      	beq.n	80075a0 <_dtoa_r+0xb78>
 8007518:	4651      	mov	r1, sl
 800751a:	2300      	movs	r3, #0
 800751c:	220a      	movs	r2, #10
 800751e:	4620      	mov	r0, r4
 8007520:	f000 f9d6 	bl	80078d0 <__multadd>
 8007524:	45b8      	cmp	r8, r7
 8007526:	4682      	mov	sl, r0
 8007528:	f04f 0300 	mov.w	r3, #0
 800752c:	f04f 020a 	mov.w	r2, #10
 8007530:	4641      	mov	r1, r8
 8007532:	4620      	mov	r0, r4
 8007534:	d107      	bne.n	8007546 <_dtoa_r+0xb1e>
 8007536:	f000 f9cb 	bl	80078d0 <__multadd>
 800753a:	4680      	mov	r8, r0
 800753c:	4607      	mov	r7, r0
 800753e:	9b04      	ldr	r3, [sp, #16]
 8007540:	3301      	adds	r3, #1
 8007542:	9304      	str	r3, [sp, #16]
 8007544:	e775      	b.n	8007432 <_dtoa_r+0xa0a>
 8007546:	f000 f9c3 	bl	80078d0 <__multadd>
 800754a:	4639      	mov	r1, r7
 800754c:	4680      	mov	r8, r0
 800754e:	2300      	movs	r3, #0
 8007550:	220a      	movs	r2, #10
 8007552:	4620      	mov	r0, r4
 8007554:	f000 f9bc 	bl	80078d0 <__multadd>
 8007558:	4607      	mov	r7, r0
 800755a:	e7f0      	b.n	800753e <_dtoa_r+0xb16>
 800755c:	9b04      	ldr	r3, [sp, #16]
 800755e:	9301      	str	r3, [sp, #4]
 8007560:	9d00      	ldr	r5, [sp, #0]
 8007562:	4631      	mov	r1, r6
 8007564:	4650      	mov	r0, sl
 8007566:	f7ff f9d4 	bl	8006912 <quorem>
 800756a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800756e:	9b00      	ldr	r3, [sp, #0]
 8007570:	f805 9b01 	strb.w	r9, [r5], #1
 8007574:	1aea      	subs	r2, r5, r3
 8007576:	9b01      	ldr	r3, [sp, #4]
 8007578:	4293      	cmp	r3, r2
 800757a:	dd07      	ble.n	800758c <_dtoa_r+0xb64>
 800757c:	4651      	mov	r1, sl
 800757e:	2300      	movs	r3, #0
 8007580:	220a      	movs	r2, #10
 8007582:	4620      	mov	r0, r4
 8007584:	f000 f9a4 	bl	80078d0 <__multadd>
 8007588:	4682      	mov	sl, r0
 800758a:	e7ea      	b.n	8007562 <_dtoa_r+0xb3a>
 800758c:	9b01      	ldr	r3, [sp, #4]
 800758e:	2b00      	cmp	r3, #0
 8007590:	bfc8      	it	gt
 8007592:	461d      	movgt	r5, r3
 8007594:	9b00      	ldr	r3, [sp, #0]
 8007596:	bfd8      	it	le
 8007598:	2501      	movle	r5, #1
 800759a:	441d      	add	r5, r3
 800759c:	f04f 0800 	mov.w	r8, #0
 80075a0:	4651      	mov	r1, sl
 80075a2:	2201      	movs	r2, #1
 80075a4:	4620      	mov	r0, r4
 80075a6:	f000 fb41 	bl	8007c2c <__lshift>
 80075aa:	4631      	mov	r1, r6
 80075ac:	4682      	mov	sl, r0
 80075ae:	f000 fba9 	bl	8007d04 <__mcmp>
 80075b2:	2800      	cmp	r0, #0
 80075b4:	dc96      	bgt.n	80074e4 <_dtoa_r+0xabc>
 80075b6:	d102      	bne.n	80075be <_dtoa_r+0xb96>
 80075b8:	f019 0f01 	tst.w	r9, #1
 80075bc:	d192      	bne.n	80074e4 <_dtoa_r+0xabc>
 80075be:	462b      	mov	r3, r5
 80075c0:	461d      	mov	r5, r3
 80075c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075c6:	2a30      	cmp	r2, #48	; 0x30
 80075c8:	d0fa      	beq.n	80075c0 <_dtoa_r+0xb98>
 80075ca:	e6dd      	b.n	8007388 <_dtoa_r+0x960>
 80075cc:	9a00      	ldr	r2, [sp, #0]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d189      	bne.n	80074e6 <_dtoa_r+0xabe>
 80075d2:	f10b 0b01 	add.w	fp, fp, #1
 80075d6:	2331      	movs	r3, #49	; 0x31
 80075d8:	e796      	b.n	8007508 <_dtoa_r+0xae0>
 80075da:	4b0a      	ldr	r3, [pc, #40]	; (8007604 <_dtoa_r+0xbdc>)
 80075dc:	f7ff ba99 	b.w	8006b12 <_dtoa_r+0xea>
 80075e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	f47f aa6d 	bne.w	8006ac2 <_dtoa_r+0x9a>
 80075e8:	4b07      	ldr	r3, [pc, #28]	; (8007608 <_dtoa_r+0xbe0>)
 80075ea:	f7ff ba92 	b.w	8006b12 <_dtoa_r+0xea>
 80075ee:	9b01      	ldr	r3, [sp, #4]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	dcb5      	bgt.n	8007560 <_dtoa_r+0xb38>
 80075f4:	9b07      	ldr	r3, [sp, #28]
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	f73f aeb1 	bgt.w	800735e <_dtoa_r+0x936>
 80075fc:	e7b0      	b.n	8007560 <_dtoa_r+0xb38>
 80075fe:	bf00      	nop
 8007600:	08009451 	.word	0x08009451
 8007604:	080093b1 	.word	0x080093b1
 8007608:	080093d5 	.word	0x080093d5

0800760c <_free_r>:
 800760c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800760e:	2900      	cmp	r1, #0
 8007610:	d044      	beq.n	800769c <_free_r+0x90>
 8007612:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007616:	9001      	str	r0, [sp, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	f1a1 0404 	sub.w	r4, r1, #4
 800761e:	bfb8      	it	lt
 8007620:	18e4      	addlt	r4, r4, r3
 8007622:	f000 f8e7 	bl	80077f4 <__malloc_lock>
 8007626:	4a1e      	ldr	r2, [pc, #120]	; (80076a0 <_free_r+0x94>)
 8007628:	9801      	ldr	r0, [sp, #4]
 800762a:	6813      	ldr	r3, [r2, #0]
 800762c:	b933      	cbnz	r3, 800763c <_free_r+0x30>
 800762e:	6063      	str	r3, [r4, #4]
 8007630:	6014      	str	r4, [r2, #0]
 8007632:	b003      	add	sp, #12
 8007634:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007638:	f000 b8e2 	b.w	8007800 <__malloc_unlock>
 800763c:	42a3      	cmp	r3, r4
 800763e:	d908      	bls.n	8007652 <_free_r+0x46>
 8007640:	6825      	ldr	r5, [r4, #0]
 8007642:	1961      	adds	r1, r4, r5
 8007644:	428b      	cmp	r3, r1
 8007646:	bf01      	itttt	eq
 8007648:	6819      	ldreq	r1, [r3, #0]
 800764a:	685b      	ldreq	r3, [r3, #4]
 800764c:	1949      	addeq	r1, r1, r5
 800764e:	6021      	streq	r1, [r4, #0]
 8007650:	e7ed      	b.n	800762e <_free_r+0x22>
 8007652:	461a      	mov	r2, r3
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	b10b      	cbz	r3, 800765c <_free_r+0x50>
 8007658:	42a3      	cmp	r3, r4
 800765a:	d9fa      	bls.n	8007652 <_free_r+0x46>
 800765c:	6811      	ldr	r1, [r2, #0]
 800765e:	1855      	adds	r5, r2, r1
 8007660:	42a5      	cmp	r5, r4
 8007662:	d10b      	bne.n	800767c <_free_r+0x70>
 8007664:	6824      	ldr	r4, [r4, #0]
 8007666:	4421      	add	r1, r4
 8007668:	1854      	adds	r4, r2, r1
 800766a:	42a3      	cmp	r3, r4
 800766c:	6011      	str	r1, [r2, #0]
 800766e:	d1e0      	bne.n	8007632 <_free_r+0x26>
 8007670:	681c      	ldr	r4, [r3, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	6053      	str	r3, [r2, #4]
 8007676:	440c      	add	r4, r1
 8007678:	6014      	str	r4, [r2, #0]
 800767a:	e7da      	b.n	8007632 <_free_r+0x26>
 800767c:	d902      	bls.n	8007684 <_free_r+0x78>
 800767e:	230c      	movs	r3, #12
 8007680:	6003      	str	r3, [r0, #0]
 8007682:	e7d6      	b.n	8007632 <_free_r+0x26>
 8007684:	6825      	ldr	r5, [r4, #0]
 8007686:	1961      	adds	r1, r4, r5
 8007688:	428b      	cmp	r3, r1
 800768a:	bf04      	itt	eq
 800768c:	6819      	ldreq	r1, [r3, #0]
 800768e:	685b      	ldreq	r3, [r3, #4]
 8007690:	6063      	str	r3, [r4, #4]
 8007692:	bf04      	itt	eq
 8007694:	1949      	addeq	r1, r1, r5
 8007696:	6021      	streq	r1, [r4, #0]
 8007698:	6054      	str	r4, [r2, #4]
 800769a:	e7ca      	b.n	8007632 <_free_r+0x26>
 800769c:	b003      	add	sp, #12
 800769e:	bd30      	pop	{r4, r5, pc}
 80076a0:	20000558 	.word	0x20000558

080076a4 <malloc>:
 80076a4:	4b02      	ldr	r3, [pc, #8]	; (80076b0 <malloc+0xc>)
 80076a6:	4601      	mov	r1, r0
 80076a8:	6818      	ldr	r0, [r3, #0]
 80076aa:	f000 b823 	b.w	80076f4 <_malloc_r>
 80076ae:	bf00      	nop
 80076b0:	20000074 	.word	0x20000074

080076b4 <sbrk_aligned>:
 80076b4:	b570      	push	{r4, r5, r6, lr}
 80076b6:	4e0e      	ldr	r6, [pc, #56]	; (80076f0 <sbrk_aligned+0x3c>)
 80076b8:	460c      	mov	r4, r1
 80076ba:	6831      	ldr	r1, [r6, #0]
 80076bc:	4605      	mov	r5, r0
 80076be:	b911      	cbnz	r1, 80076c6 <sbrk_aligned+0x12>
 80076c0:	f000 fe40 	bl	8008344 <_sbrk_r>
 80076c4:	6030      	str	r0, [r6, #0]
 80076c6:	4621      	mov	r1, r4
 80076c8:	4628      	mov	r0, r5
 80076ca:	f000 fe3b 	bl	8008344 <_sbrk_r>
 80076ce:	1c43      	adds	r3, r0, #1
 80076d0:	d00a      	beq.n	80076e8 <sbrk_aligned+0x34>
 80076d2:	1cc4      	adds	r4, r0, #3
 80076d4:	f024 0403 	bic.w	r4, r4, #3
 80076d8:	42a0      	cmp	r0, r4
 80076da:	d007      	beq.n	80076ec <sbrk_aligned+0x38>
 80076dc:	1a21      	subs	r1, r4, r0
 80076de:	4628      	mov	r0, r5
 80076e0:	f000 fe30 	bl	8008344 <_sbrk_r>
 80076e4:	3001      	adds	r0, #1
 80076e6:	d101      	bne.n	80076ec <sbrk_aligned+0x38>
 80076e8:	f04f 34ff 	mov.w	r4, #4294967295
 80076ec:	4620      	mov	r0, r4
 80076ee:	bd70      	pop	{r4, r5, r6, pc}
 80076f0:	2000055c 	.word	0x2000055c

080076f4 <_malloc_r>:
 80076f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076f8:	1ccd      	adds	r5, r1, #3
 80076fa:	f025 0503 	bic.w	r5, r5, #3
 80076fe:	3508      	adds	r5, #8
 8007700:	2d0c      	cmp	r5, #12
 8007702:	bf38      	it	cc
 8007704:	250c      	movcc	r5, #12
 8007706:	2d00      	cmp	r5, #0
 8007708:	4607      	mov	r7, r0
 800770a:	db01      	blt.n	8007710 <_malloc_r+0x1c>
 800770c:	42a9      	cmp	r1, r5
 800770e:	d905      	bls.n	800771c <_malloc_r+0x28>
 8007710:	230c      	movs	r3, #12
 8007712:	603b      	str	r3, [r7, #0]
 8007714:	2600      	movs	r6, #0
 8007716:	4630      	mov	r0, r6
 8007718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800771c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80077f0 <_malloc_r+0xfc>
 8007720:	f000 f868 	bl	80077f4 <__malloc_lock>
 8007724:	f8d8 3000 	ldr.w	r3, [r8]
 8007728:	461c      	mov	r4, r3
 800772a:	bb5c      	cbnz	r4, 8007784 <_malloc_r+0x90>
 800772c:	4629      	mov	r1, r5
 800772e:	4638      	mov	r0, r7
 8007730:	f7ff ffc0 	bl	80076b4 <sbrk_aligned>
 8007734:	1c43      	adds	r3, r0, #1
 8007736:	4604      	mov	r4, r0
 8007738:	d155      	bne.n	80077e6 <_malloc_r+0xf2>
 800773a:	f8d8 4000 	ldr.w	r4, [r8]
 800773e:	4626      	mov	r6, r4
 8007740:	2e00      	cmp	r6, #0
 8007742:	d145      	bne.n	80077d0 <_malloc_r+0xdc>
 8007744:	2c00      	cmp	r4, #0
 8007746:	d048      	beq.n	80077da <_malloc_r+0xe6>
 8007748:	6823      	ldr	r3, [r4, #0]
 800774a:	4631      	mov	r1, r6
 800774c:	4638      	mov	r0, r7
 800774e:	eb04 0903 	add.w	r9, r4, r3
 8007752:	f000 fdf7 	bl	8008344 <_sbrk_r>
 8007756:	4581      	cmp	r9, r0
 8007758:	d13f      	bne.n	80077da <_malloc_r+0xe6>
 800775a:	6821      	ldr	r1, [r4, #0]
 800775c:	1a6d      	subs	r5, r5, r1
 800775e:	4629      	mov	r1, r5
 8007760:	4638      	mov	r0, r7
 8007762:	f7ff ffa7 	bl	80076b4 <sbrk_aligned>
 8007766:	3001      	adds	r0, #1
 8007768:	d037      	beq.n	80077da <_malloc_r+0xe6>
 800776a:	6823      	ldr	r3, [r4, #0]
 800776c:	442b      	add	r3, r5
 800776e:	6023      	str	r3, [r4, #0]
 8007770:	f8d8 3000 	ldr.w	r3, [r8]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d038      	beq.n	80077ea <_malloc_r+0xf6>
 8007778:	685a      	ldr	r2, [r3, #4]
 800777a:	42a2      	cmp	r2, r4
 800777c:	d12b      	bne.n	80077d6 <_malloc_r+0xe2>
 800777e:	2200      	movs	r2, #0
 8007780:	605a      	str	r2, [r3, #4]
 8007782:	e00f      	b.n	80077a4 <_malloc_r+0xb0>
 8007784:	6822      	ldr	r2, [r4, #0]
 8007786:	1b52      	subs	r2, r2, r5
 8007788:	d41f      	bmi.n	80077ca <_malloc_r+0xd6>
 800778a:	2a0b      	cmp	r2, #11
 800778c:	d917      	bls.n	80077be <_malloc_r+0xca>
 800778e:	1961      	adds	r1, r4, r5
 8007790:	42a3      	cmp	r3, r4
 8007792:	6025      	str	r5, [r4, #0]
 8007794:	bf18      	it	ne
 8007796:	6059      	strne	r1, [r3, #4]
 8007798:	6863      	ldr	r3, [r4, #4]
 800779a:	bf08      	it	eq
 800779c:	f8c8 1000 	streq.w	r1, [r8]
 80077a0:	5162      	str	r2, [r4, r5]
 80077a2:	604b      	str	r3, [r1, #4]
 80077a4:	4638      	mov	r0, r7
 80077a6:	f104 060b 	add.w	r6, r4, #11
 80077aa:	f000 f829 	bl	8007800 <__malloc_unlock>
 80077ae:	f026 0607 	bic.w	r6, r6, #7
 80077b2:	1d23      	adds	r3, r4, #4
 80077b4:	1af2      	subs	r2, r6, r3
 80077b6:	d0ae      	beq.n	8007716 <_malloc_r+0x22>
 80077b8:	1b9b      	subs	r3, r3, r6
 80077ba:	50a3      	str	r3, [r4, r2]
 80077bc:	e7ab      	b.n	8007716 <_malloc_r+0x22>
 80077be:	42a3      	cmp	r3, r4
 80077c0:	6862      	ldr	r2, [r4, #4]
 80077c2:	d1dd      	bne.n	8007780 <_malloc_r+0x8c>
 80077c4:	f8c8 2000 	str.w	r2, [r8]
 80077c8:	e7ec      	b.n	80077a4 <_malloc_r+0xb0>
 80077ca:	4623      	mov	r3, r4
 80077cc:	6864      	ldr	r4, [r4, #4]
 80077ce:	e7ac      	b.n	800772a <_malloc_r+0x36>
 80077d0:	4634      	mov	r4, r6
 80077d2:	6876      	ldr	r6, [r6, #4]
 80077d4:	e7b4      	b.n	8007740 <_malloc_r+0x4c>
 80077d6:	4613      	mov	r3, r2
 80077d8:	e7cc      	b.n	8007774 <_malloc_r+0x80>
 80077da:	230c      	movs	r3, #12
 80077dc:	603b      	str	r3, [r7, #0]
 80077de:	4638      	mov	r0, r7
 80077e0:	f000 f80e 	bl	8007800 <__malloc_unlock>
 80077e4:	e797      	b.n	8007716 <_malloc_r+0x22>
 80077e6:	6025      	str	r5, [r4, #0]
 80077e8:	e7dc      	b.n	80077a4 <_malloc_r+0xb0>
 80077ea:	605b      	str	r3, [r3, #4]
 80077ec:	deff      	udf	#255	; 0xff
 80077ee:	bf00      	nop
 80077f0:	20000558 	.word	0x20000558

080077f4 <__malloc_lock>:
 80077f4:	4801      	ldr	r0, [pc, #4]	; (80077fc <__malloc_lock+0x8>)
 80077f6:	f7ff b87c 	b.w	80068f2 <__retarget_lock_acquire_recursive>
 80077fa:	bf00      	nop
 80077fc:	20000554 	.word	0x20000554

08007800 <__malloc_unlock>:
 8007800:	4801      	ldr	r0, [pc, #4]	; (8007808 <__malloc_unlock+0x8>)
 8007802:	f7ff b877 	b.w	80068f4 <__retarget_lock_release_recursive>
 8007806:	bf00      	nop
 8007808:	20000554 	.word	0x20000554

0800780c <_Balloc>:
 800780c:	b570      	push	{r4, r5, r6, lr}
 800780e:	69c6      	ldr	r6, [r0, #28]
 8007810:	4604      	mov	r4, r0
 8007812:	460d      	mov	r5, r1
 8007814:	b976      	cbnz	r6, 8007834 <_Balloc+0x28>
 8007816:	2010      	movs	r0, #16
 8007818:	f7ff ff44 	bl	80076a4 <malloc>
 800781c:	4602      	mov	r2, r0
 800781e:	61e0      	str	r0, [r4, #28]
 8007820:	b920      	cbnz	r0, 800782c <_Balloc+0x20>
 8007822:	4b18      	ldr	r3, [pc, #96]	; (8007884 <_Balloc+0x78>)
 8007824:	4818      	ldr	r0, [pc, #96]	; (8007888 <_Balloc+0x7c>)
 8007826:	216b      	movs	r1, #107	; 0x6b
 8007828:	f000 fd9c 	bl	8008364 <__assert_func>
 800782c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007830:	6006      	str	r6, [r0, #0]
 8007832:	60c6      	str	r6, [r0, #12]
 8007834:	69e6      	ldr	r6, [r4, #28]
 8007836:	68f3      	ldr	r3, [r6, #12]
 8007838:	b183      	cbz	r3, 800785c <_Balloc+0x50>
 800783a:	69e3      	ldr	r3, [r4, #28]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007842:	b9b8      	cbnz	r0, 8007874 <_Balloc+0x68>
 8007844:	2101      	movs	r1, #1
 8007846:	fa01 f605 	lsl.w	r6, r1, r5
 800784a:	1d72      	adds	r2, r6, #5
 800784c:	0092      	lsls	r2, r2, #2
 800784e:	4620      	mov	r0, r4
 8007850:	f000 fda6 	bl	80083a0 <_calloc_r>
 8007854:	b160      	cbz	r0, 8007870 <_Balloc+0x64>
 8007856:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800785a:	e00e      	b.n	800787a <_Balloc+0x6e>
 800785c:	2221      	movs	r2, #33	; 0x21
 800785e:	2104      	movs	r1, #4
 8007860:	4620      	mov	r0, r4
 8007862:	f000 fd9d 	bl	80083a0 <_calloc_r>
 8007866:	69e3      	ldr	r3, [r4, #28]
 8007868:	60f0      	str	r0, [r6, #12]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d1e4      	bne.n	800783a <_Balloc+0x2e>
 8007870:	2000      	movs	r0, #0
 8007872:	bd70      	pop	{r4, r5, r6, pc}
 8007874:	6802      	ldr	r2, [r0, #0]
 8007876:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800787a:	2300      	movs	r3, #0
 800787c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007880:	e7f7      	b.n	8007872 <_Balloc+0x66>
 8007882:	bf00      	nop
 8007884:	080093e2 	.word	0x080093e2
 8007888:	08009462 	.word	0x08009462

0800788c <_Bfree>:
 800788c:	b570      	push	{r4, r5, r6, lr}
 800788e:	69c6      	ldr	r6, [r0, #28]
 8007890:	4605      	mov	r5, r0
 8007892:	460c      	mov	r4, r1
 8007894:	b976      	cbnz	r6, 80078b4 <_Bfree+0x28>
 8007896:	2010      	movs	r0, #16
 8007898:	f7ff ff04 	bl	80076a4 <malloc>
 800789c:	4602      	mov	r2, r0
 800789e:	61e8      	str	r0, [r5, #28]
 80078a0:	b920      	cbnz	r0, 80078ac <_Bfree+0x20>
 80078a2:	4b09      	ldr	r3, [pc, #36]	; (80078c8 <_Bfree+0x3c>)
 80078a4:	4809      	ldr	r0, [pc, #36]	; (80078cc <_Bfree+0x40>)
 80078a6:	218f      	movs	r1, #143	; 0x8f
 80078a8:	f000 fd5c 	bl	8008364 <__assert_func>
 80078ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078b0:	6006      	str	r6, [r0, #0]
 80078b2:	60c6      	str	r6, [r0, #12]
 80078b4:	b13c      	cbz	r4, 80078c6 <_Bfree+0x3a>
 80078b6:	69eb      	ldr	r3, [r5, #28]
 80078b8:	6862      	ldr	r2, [r4, #4]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078c0:	6021      	str	r1, [r4, #0]
 80078c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80078c6:	bd70      	pop	{r4, r5, r6, pc}
 80078c8:	080093e2 	.word	0x080093e2
 80078cc:	08009462 	.word	0x08009462

080078d0 <__multadd>:
 80078d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078d4:	690d      	ldr	r5, [r1, #16]
 80078d6:	4607      	mov	r7, r0
 80078d8:	460c      	mov	r4, r1
 80078da:	461e      	mov	r6, r3
 80078dc:	f101 0c14 	add.w	ip, r1, #20
 80078e0:	2000      	movs	r0, #0
 80078e2:	f8dc 3000 	ldr.w	r3, [ip]
 80078e6:	b299      	uxth	r1, r3
 80078e8:	fb02 6101 	mla	r1, r2, r1, r6
 80078ec:	0c1e      	lsrs	r6, r3, #16
 80078ee:	0c0b      	lsrs	r3, r1, #16
 80078f0:	fb02 3306 	mla	r3, r2, r6, r3
 80078f4:	b289      	uxth	r1, r1
 80078f6:	3001      	adds	r0, #1
 80078f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80078fc:	4285      	cmp	r5, r0
 80078fe:	f84c 1b04 	str.w	r1, [ip], #4
 8007902:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007906:	dcec      	bgt.n	80078e2 <__multadd+0x12>
 8007908:	b30e      	cbz	r6, 800794e <__multadd+0x7e>
 800790a:	68a3      	ldr	r3, [r4, #8]
 800790c:	42ab      	cmp	r3, r5
 800790e:	dc19      	bgt.n	8007944 <__multadd+0x74>
 8007910:	6861      	ldr	r1, [r4, #4]
 8007912:	4638      	mov	r0, r7
 8007914:	3101      	adds	r1, #1
 8007916:	f7ff ff79 	bl	800780c <_Balloc>
 800791a:	4680      	mov	r8, r0
 800791c:	b928      	cbnz	r0, 800792a <__multadd+0x5a>
 800791e:	4602      	mov	r2, r0
 8007920:	4b0c      	ldr	r3, [pc, #48]	; (8007954 <__multadd+0x84>)
 8007922:	480d      	ldr	r0, [pc, #52]	; (8007958 <__multadd+0x88>)
 8007924:	21ba      	movs	r1, #186	; 0xba
 8007926:	f000 fd1d 	bl	8008364 <__assert_func>
 800792a:	6922      	ldr	r2, [r4, #16]
 800792c:	3202      	adds	r2, #2
 800792e:	f104 010c 	add.w	r1, r4, #12
 8007932:	0092      	lsls	r2, r2, #2
 8007934:	300c      	adds	r0, #12
 8007936:	f7fe ffde 	bl	80068f6 <memcpy>
 800793a:	4621      	mov	r1, r4
 800793c:	4638      	mov	r0, r7
 800793e:	f7ff ffa5 	bl	800788c <_Bfree>
 8007942:	4644      	mov	r4, r8
 8007944:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007948:	3501      	adds	r5, #1
 800794a:	615e      	str	r6, [r3, #20]
 800794c:	6125      	str	r5, [r4, #16]
 800794e:	4620      	mov	r0, r4
 8007950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007954:	08009451 	.word	0x08009451
 8007958:	08009462 	.word	0x08009462

0800795c <__hi0bits>:
 800795c:	0c03      	lsrs	r3, r0, #16
 800795e:	041b      	lsls	r3, r3, #16
 8007960:	b9d3      	cbnz	r3, 8007998 <__hi0bits+0x3c>
 8007962:	0400      	lsls	r0, r0, #16
 8007964:	2310      	movs	r3, #16
 8007966:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800796a:	bf04      	itt	eq
 800796c:	0200      	lsleq	r0, r0, #8
 800796e:	3308      	addeq	r3, #8
 8007970:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007974:	bf04      	itt	eq
 8007976:	0100      	lsleq	r0, r0, #4
 8007978:	3304      	addeq	r3, #4
 800797a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800797e:	bf04      	itt	eq
 8007980:	0080      	lsleq	r0, r0, #2
 8007982:	3302      	addeq	r3, #2
 8007984:	2800      	cmp	r0, #0
 8007986:	db05      	blt.n	8007994 <__hi0bits+0x38>
 8007988:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800798c:	f103 0301 	add.w	r3, r3, #1
 8007990:	bf08      	it	eq
 8007992:	2320      	moveq	r3, #32
 8007994:	4618      	mov	r0, r3
 8007996:	4770      	bx	lr
 8007998:	2300      	movs	r3, #0
 800799a:	e7e4      	b.n	8007966 <__hi0bits+0xa>

0800799c <__lo0bits>:
 800799c:	6803      	ldr	r3, [r0, #0]
 800799e:	f013 0207 	ands.w	r2, r3, #7
 80079a2:	d00c      	beq.n	80079be <__lo0bits+0x22>
 80079a4:	07d9      	lsls	r1, r3, #31
 80079a6:	d422      	bmi.n	80079ee <__lo0bits+0x52>
 80079a8:	079a      	lsls	r2, r3, #30
 80079aa:	bf49      	itett	mi
 80079ac:	085b      	lsrmi	r3, r3, #1
 80079ae:	089b      	lsrpl	r3, r3, #2
 80079b0:	6003      	strmi	r3, [r0, #0]
 80079b2:	2201      	movmi	r2, #1
 80079b4:	bf5c      	itt	pl
 80079b6:	6003      	strpl	r3, [r0, #0]
 80079b8:	2202      	movpl	r2, #2
 80079ba:	4610      	mov	r0, r2
 80079bc:	4770      	bx	lr
 80079be:	b299      	uxth	r1, r3
 80079c0:	b909      	cbnz	r1, 80079c6 <__lo0bits+0x2a>
 80079c2:	0c1b      	lsrs	r3, r3, #16
 80079c4:	2210      	movs	r2, #16
 80079c6:	b2d9      	uxtb	r1, r3
 80079c8:	b909      	cbnz	r1, 80079ce <__lo0bits+0x32>
 80079ca:	3208      	adds	r2, #8
 80079cc:	0a1b      	lsrs	r3, r3, #8
 80079ce:	0719      	lsls	r1, r3, #28
 80079d0:	bf04      	itt	eq
 80079d2:	091b      	lsreq	r3, r3, #4
 80079d4:	3204      	addeq	r2, #4
 80079d6:	0799      	lsls	r1, r3, #30
 80079d8:	bf04      	itt	eq
 80079da:	089b      	lsreq	r3, r3, #2
 80079dc:	3202      	addeq	r2, #2
 80079de:	07d9      	lsls	r1, r3, #31
 80079e0:	d403      	bmi.n	80079ea <__lo0bits+0x4e>
 80079e2:	085b      	lsrs	r3, r3, #1
 80079e4:	f102 0201 	add.w	r2, r2, #1
 80079e8:	d003      	beq.n	80079f2 <__lo0bits+0x56>
 80079ea:	6003      	str	r3, [r0, #0]
 80079ec:	e7e5      	b.n	80079ba <__lo0bits+0x1e>
 80079ee:	2200      	movs	r2, #0
 80079f0:	e7e3      	b.n	80079ba <__lo0bits+0x1e>
 80079f2:	2220      	movs	r2, #32
 80079f4:	e7e1      	b.n	80079ba <__lo0bits+0x1e>
	...

080079f8 <__i2b>:
 80079f8:	b510      	push	{r4, lr}
 80079fa:	460c      	mov	r4, r1
 80079fc:	2101      	movs	r1, #1
 80079fe:	f7ff ff05 	bl	800780c <_Balloc>
 8007a02:	4602      	mov	r2, r0
 8007a04:	b928      	cbnz	r0, 8007a12 <__i2b+0x1a>
 8007a06:	4b05      	ldr	r3, [pc, #20]	; (8007a1c <__i2b+0x24>)
 8007a08:	4805      	ldr	r0, [pc, #20]	; (8007a20 <__i2b+0x28>)
 8007a0a:	f240 1145 	movw	r1, #325	; 0x145
 8007a0e:	f000 fca9 	bl	8008364 <__assert_func>
 8007a12:	2301      	movs	r3, #1
 8007a14:	6144      	str	r4, [r0, #20]
 8007a16:	6103      	str	r3, [r0, #16]
 8007a18:	bd10      	pop	{r4, pc}
 8007a1a:	bf00      	nop
 8007a1c:	08009451 	.word	0x08009451
 8007a20:	08009462 	.word	0x08009462

08007a24 <__multiply>:
 8007a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a28:	4691      	mov	r9, r2
 8007a2a:	690a      	ldr	r2, [r1, #16]
 8007a2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	bfb8      	it	lt
 8007a34:	460b      	movlt	r3, r1
 8007a36:	460c      	mov	r4, r1
 8007a38:	bfbc      	itt	lt
 8007a3a:	464c      	movlt	r4, r9
 8007a3c:	4699      	movlt	r9, r3
 8007a3e:	6927      	ldr	r7, [r4, #16]
 8007a40:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007a44:	68a3      	ldr	r3, [r4, #8]
 8007a46:	6861      	ldr	r1, [r4, #4]
 8007a48:	eb07 060a 	add.w	r6, r7, sl
 8007a4c:	42b3      	cmp	r3, r6
 8007a4e:	b085      	sub	sp, #20
 8007a50:	bfb8      	it	lt
 8007a52:	3101      	addlt	r1, #1
 8007a54:	f7ff feda 	bl	800780c <_Balloc>
 8007a58:	b930      	cbnz	r0, 8007a68 <__multiply+0x44>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	4b44      	ldr	r3, [pc, #272]	; (8007b70 <__multiply+0x14c>)
 8007a5e:	4845      	ldr	r0, [pc, #276]	; (8007b74 <__multiply+0x150>)
 8007a60:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007a64:	f000 fc7e 	bl	8008364 <__assert_func>
 8007a68:	f100 0514 	add.w	r5, r0, #20
 8007a6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a70:	462b      	mov	r3, r5
 8007a72:	2200      	movs	r2, #0
 8007a74:	4543      	cmp	r3, r8
 8007a76:	d321      	bcc.n	8007abc <__multiply+0x98>
 8007a78:	f104 0314 	add.w	r3, r4, #20
 8007a7c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007a80:	f109 0314 	add.w	r3, r9, #20
 8007a84:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007a88:	9202      	str	r2, [sp, #8]
 8007a8a:	1b3a      	subs	r2, r7, r4
 8007a8c:	3a15      	subs	r2, #21
 8007a8e:	f022 0203 	bic.w	r2, r2, #3
 8007a92:	3204      	adds	r2, #4
 8007a94:	f104 0115 	add.w	r1, r4, #21
 8007a98:	428f      	cmp	r7, r1
 8007a9a:	bf38      	it	cc
 8007a9c:	2204      	movcc	r2, #4
 8007a9e:	9201      	str	r2, [sp, #4]
 8007aa0:	9a02      	ldr	r2, [sp, #8]
 8007aa2:	9303      	str	r3, [sp, #12]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d80c      	bhi.n	8007ac2 <__multiply+0x9e>
 8007aa8:	2e00      	cmp	r6, #0
 8007aaa:	dd03      	ble.n	8007ab4 <__multiply+0x90>
 8007aac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d05b      	beq.n	8007b6c <__multiply+0x148>
 8007ab4:	6106      	str	r6, [r0, #16]
 8007ab6:	b005      	add	sp, #20
 8007ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007abc:	f843 2b04 	str.w	r2, [r3], #4
 8007ac0:	e7d8      	b.n	8007a74 <__multiply+0x50>
 8007ac2:	f8b3 a000 	ldrh.w	sl, [r3]
 8007ac6:	f1ba 0f00 	cmp.w	sl, #0
 8007aca:	d024      	beq.n	8007b16 <__multiply+0xf2>
 8007acc:	f104 0e14 	add.w	lr, r4, #20
 8007ad0:	46a9      	mov	r9, r5
 8007ad2:	f04f 0c00 	mov.w	ip, #0
 8007ad6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007ada:	f8d9 1000 	ldr.w	r1, [r9]
 8007ade:	fa1f fb82 	uxth.w	fp, r2
 8007ae2:	b289      	uxth	r1, r1
 8007ae4:	fb0a 110b 	mla	r1, sl, fp, r1
 8007ae8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007aec:	f8d9 2000 	ldr.w	r2, [r9]
 8007af0:	4461      	add	r1, ip
 8007af2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007af6:	fb0a c20b 	mla	r2, sl, fp, ip
 8007afa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007afe:	b289      	uxth	r1, r1
 8007b00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007b04:	4577      	cmp	r7, lr
 8007b06:	f849 1b04 	str.w	r1, [r9], #4
 8007b0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b0e:	d8e2      	bhi.n	8007ad6 <__multiply+0xb2>
 8007b10:	9a01      	ldr	r2, [sp, #4]
 8007b12:	f845 c002 	str.w	ip, [r5, r2]
 8007b16:	9a03      	ldr	r2, [sp, #12]
 8007b18:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007b1c:	3304      	adds	r3, #4
 8007b1e:	f1b9 0f00 	cmp.w	r9, #0
 8007b22:	d021      	beq.n	8007b68 <__multiply+0x144>
 8007b24:	6829      	ldr	r1, [r5, #0]
 8007b26:	f104 0c14 	add.w	ip, r4, #20
 8007b2a:	46ae      	mov	lr, r5
 8007b2c:	f04f 0a00 	mov.w	sl, #0
 8007b30:	f8bc b000 	ldrh.w	fp, [ip]
 8007b34:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007b38:	fb09 220b 	mla	r2, r9, fp, r2
 8007b3c:	4452      	add	r2, sl
 8007b3e:	b289      	uxth	r1, r1
 8007b40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007b44:	f84e 1b04 	str.w	r1, [lr], #4
 8007b48:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007b4c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007b50:	f8be 1000 	ldrh.w	r1, [lr]
 8007b54:	fb09 110a 	mla	r1, r9, sl, r1
 8007b58:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007b5c:	4567      	cmp	r7, ip
 8007b5e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007b62:	d8e5      	bhi.n	8007b30 <__multiply+0x10c>
 8007b64:	9a01      	ldr	r2, [sp, #4]
 8007b66:	50a9      	str	r1, [r5, r2]
 8007b68:	3504      	adds	r5, #4
 8007b6a:	e799      	b.n	8007aa0 <__multiply+0x7c>
 8007b6c:	3e01      	subs	r6, #1
 8007b6e:	e79b      	b.n	8007aa8 <__multiply+0x84>
 8007b70:	08009451 	.word	0x08009451
 8007b74:	08009462 	.word	0x08009462

08007b78 <__pow5mult>:
 8007b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b7c:	4615      	mov	r5, r2
 8007b7e:	f012 0203 	ands.w	r2, r2, #3
 8007b82:	4606      	mov	r6, r0
 8007b84:	460f      	mov	r7, r1
 8007b86:	d007      	beq.n	8007b98 <__pow5mult+0x20>
 8007b88:	4c25      	ldr	r4, [pc, #148]	; (8007c20 <__pow5mult+0xa8>)
 8007b8a:	3a01      	subs	r2, #1
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b92:	f7ff fe9d 	bl	80078d0 <__multadd>
 8007b96:	4607      	mov	r7, r0
 8007b98:	10ad      	asrs	r5, r5, #2
 8007b9a:	d03d      	beq.n	8007c18 <__pow5mult+0xa0>
 8007b9c:	69f4      	ldr	r4, [r6, #28]
 8007b9e:	b97c      	cbnz	r4, 8007bc0 <__pow5mult+0x48>
 8007ba0:	2010      	movs	r0, #16
 8007ba2:	f7ff fd7f 	bl	80076a4 <malloc>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	61f0      	str	r0, [r6, #28]
 8007baa:	b928      	cbnz	r0, 8007bb8 <__pow5mult+0x40>
 8007bac:	4b1d      	ldr	r3, [pc, #116]	; (8007c24 <__pow5mult+0xac>)
 8007bae:	481e      	ldr	r0, [pc, #120]	; (8007c28 <__pow5mult+0xb0>)
 8007bb0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007bb4:	f000 fbd6 	bl	8008364 <__assert_func>
 8007bb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007bbc:	6004      	str	r4, [r0, #0]
 8007bbe:	60c4      	str	r4, [r0, #12]
 8007bc0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007bc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007bc8:	b94c      	cbnz	r4, 8007bde <__pow5mult+0x66>
 8007bca:	f240 2171 	movw	r1, #625	; 0x271
 8007bce:	4630      	mov	r0, r6
 8007bd0:	f7ff ff12 	bl	80079f8 <__i2b>
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	f8c8 0008 	str.w	r0, [r8, #8]
 8007bda:	4604      	mov	r4, r0
 8007bdc:	6003      	str	r3, [r0, #0]
 8007bde:	f04f 0900 	mov.w	r9, #0
 8007be2:	07eb      	lsls	r3, r5, #31
 8007be4:	d50a      	bpl.n	8007bfc <__pow5mult+0x84>
 8007be6:	4639      	mov	r1, r7
 8007be8:	4622      	mov	r2, r4
 8007bea:	4630      	mov	r0, r6
 8007bec:	f7ff ff1a 	bl	8007a24 <__multiply>
 8007bf0:	4639      	mov	r1, r7
 8007bf2:	4680      	mov	r8, r0
 8007bf4:	4630      	mov	r0, r6
 8007bf6:	f7ff fe49 	bl	800788c <_Bfree>
 8007bfa:	4647      	mov	r7, r8
 8007bfc:	106d      	asrs	r5, r5, #1
 8007bfe:	d00b      	beq.n	8007c18 <__pow5mult+0xa0>
 8007c00:	6820      	ldr	r0, [r4, #0]
 8007c02:	b938      	cbnz	r0, 8007c14 <__pow5mult+0x9c>
 8007c04:	4622      	mov	r2, r4
 8007c06:	4621      	mov	r1, r4
 8007c08:	4630      	mov	r0, r6
 8007c0a:	f7ff ff0b 	bl	8007a24 <__multiply>
 8007c0e:	6020      	str	r0, [r4, #0]
 8007c10:	f8c0 9000 	str.w	r9, [r0]
 8007c14:	4604      	mov	r4, r0
 8007c16:	e7e4      	b.n	8007be2 <__pow5mult+0x6a>
 8007c18:	4638      	mov	r0, r7
 8007c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c1e:	bf00      	nop
 8007c20:	080095b0 	.word	0x080095b0
 8007c24:	080093e2 	.word	0x080093e2
 8007c28:	08009462 	.word	0x08009462

08007c2c <__lshift>:
 8007c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c30:	460c      	mov	r4, r1
 8007c32:	6849      	ldr	r1, [r1, #4]
 8007c34:	6923      	ldr	r3, [r4, #16]
 8007c36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c3a:	68a3      	ldr	r3, [r4, #8]
 8007c3c:	4607      	mov	r7, r0
 8007c3e:	4691      	mov	r9, r2
 8007c40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c44:	f108 0601 	add.w	r6, r8, #1
 8007c48:	42b3      	cmp	r3, r6
 8007c4a:	db0b      	blt.n	8007c64 <__lshift+0x38>
 8007c4c:	4638      	mov	r0, r7
 8007c4e:	f7ff fddd 	bl	800780c <_Balloc>
 8007c52:	4605      	mov	r5, r0
 8007c54:	b948      	cbnz	r0, 8007c6a <__lshift+0x3e>
 8007c56:	4602      	mov	r2, r0
 8007c58:	4b28      	ldr	r3, [pc, #160]	; (8007cfc <__lshift+0xd0>)
 8007c5a:	4829      	ldr	r0, [pc, #164]	; (8007d00 <__lshift+0xd4>)
 8007c5c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007c60:	f000 fb80 	bl	8008364 <__assert_func>
 8007c64:	3101      	adds	r1, #1
 8007c66:	005b      	lsls	r3, r3, #1
 8007c68:	e7ee      	b.n	8007c48 <__lshift+0x1c>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	f100 0114 	add.w	r1, r0, #20
 8007c70:	f100 0210 	add.w	r2, r0, #16
 8007c74:	4618      	mov	r0, r3
 8007c76:	4553      	cmp	r3, sl
 8007c78:	db33      	blt.n	8007ce2 <__lshift+0xb6>
 8007c7a:	6920      	ldr	r0, [r4, #16]
 8007c7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c80:	f104 0314 	add.w	r3, r4, #20
 8007c84:	f019 091f 	ands.w	r9, r9, #31
 8007c88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c90:	d02b      	beq.n	8007cea <__lshift+0xbe>
 8007c92:	f1c9 0e20 	rsb	lr, r9, #32
 8007c96:	468a      	mov	sl, r1
 8007c98:	2200      	movs	r2, #0
 8007c9a:	6818      	ldr	r0, [r3, #0]
 8007c9c:	fa00 f009 	lsl.w	r0, r0, r9
 8007ca0:	4310      	orrs	r0, r2
 8007ca2:	f84a 0b04 	str.w	r0, [sl], #4
 8007ca6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007caa:	459c      	cmp	ip, r3
 8007cac:	fa22 f20e 	lsr.w	r2, r2, lr
 8007cb0:	d8f3      	bhi.n	8007c9a <__lshift+0x6e>
 8007cb2:	ebac 0304 	sub.w	r3, ip, r4
 8007cb6:	3b15      	subs	r3, #21
 8007cb8:	f023 0303 	bic.w	r3, r3, #3
 8007cbc:	3304      	adds	r3, #4
 8007cbe:	f104 0015 	add.w	r0, r4, #21
 8007cc2:	4584      	cmp	ip, r0
 8007cc4:	bf38      	it	cc
 8007cc6:	2304      	movcc	r3, #4
 8007cc8:	50ca      	str	r2, [r1, r3]
 8007cca:	b10a      	cbz	r2, 8007cd0 <__lshift+0xa4>
 8007ccc:	f108 0602 	add.w	r6, r8, #2
 8007cd0:	3e01      	subs	r6, #1
 8007cd2:	4638      	mov	r0, r7
 8007cd4:	612e      	str	r6, [r5, #16]
 8007cd6:	4621      	mov	r1, r4
 8007cd8:	f7ff fdd8 	bl	800788c <_Bfree>
 8007cdc:	4628      	mov	r0, r5
 8007cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ce2:	f842 0f04 	str.w	r0, [r2, #4]!
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	e7c5      	b.n	8007c76 <__lshift+0x4a>
 8007cea:	3904      	subs	r1, #4
 8007cec:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cf0:	f841 2f04 	str.w	r2, [r1, #4]!
 8007cf4:	459c      	cmp	ip, r3
 8007cf6:	d8f9      	bhi.n	8007cec <__lshift+0xc0>
 8007cf8:	e7ea      	b.n	8007cd0 <__lshift+0xa4>
 8007cfa:	bf00      	nop
 8007cfc:	08009451 	.word	0x08009451
 8007d00:	08009462 	.word	0x08009462

08007d04 <__mcmp>:
 8007d04:	b530      	push	{r4, r5, lr}
 8007d06:	6902      	ldr	r2, [r0, #16]
 8007d08:	690c      	ldr	r4, [r1, #16]
 8007d0a:	1b12      	subs	r2, r2, r4
 8007d0c:	d10e      	bne.n	8007d2c <__mcmp+0x28>
 8007d0e:	f100 0314 	add.w	r3, r0, #20
 8007d12:	3114      	adds	r1, #20
 8007d14:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007d18:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007d1c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007d20:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007d24:	42a5      	cmp	r5, r4
 8007d26:	d003      	beq.n	8007d30 <__mcmp+0x2c>
 8007d28:	d305      	bcc.n	8007d36 <__mcmp+0x32>
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	4610      	mov	r0, r2
 8007d2e:	bd30      	pop	{r4, r5, pc}
 8007d30:	4283      	cmp	r3, r0
 8007d32:	d3f3      	bcc.n	8007d1c <__mcmp+0x18>
 8007d34:	e7fa      	b.n	8007d2c <__mcmp+0x28>
 8007d36:	f04f 32ff 	mov.w	r2, #4294967295
 8007d3a:	e7f7      	b.n	8007d2c <__mcmp+0x28>

08007d3c <__mdiff>:
 8007d3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d40:	460c      	mov	r4, r1
 8007d42:	4606      	mov	r6, r0
 8007d44:	4611      	mov	r1, r2
 8007d46:	4620      	mov	r0, r4
 8007d48:	4690      	mov	r8, r2
 8007d4a:	f7ff ffdb 	bl	8007d04 <__mcmp>
 8007d4e:	1e05      	subs	r5, r0, #0
 8007d50:	d110      	bne.n	8007d74 <__mdiff+0x38>
 8007d52:	4629      	mov	r1, r5
 8007d54:	4630      	mov	r0, r6
 8007d56:	f7ff fd59 	bl	800780c <_Balloc>
 8007d5a:	b930      	cbnz	r0, 8007d6a <__mdiff+0x2e>
 8007d5c:	4b3a      	ldr	r3, [pc, #232]	; (8007e48 <__mdiff+0x10c>)
 8007d5e:	4602      	mov	r2, r0
 8007d60:	f240 2137 	movw	r1, #567	; 0x237
 8007d64:	4839      	ldr	r0, [pc, #228]	; (8007e4c <__mdiff+0x110>)
 8007d66:	f000 fafd 	bl	8008364 <__assert_func>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d74:	bfa4      	itt	ge
 8007d76:	4643      	movge	r3, r8
 8007d78:	46a0      	movge	r8, r4
 8007d7a:	4630      	mov	r0, r6
 8007d7c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007d80:	bfa6      	itte	ge
 8007d82:	461c      	movge	r4, r3
 8007d84:	2500      	movge	r5, #0
 8007d86:	2501      	movlt	r5, #1
 8007d88:	f7ff fd40 	bl	800780c <_Balloc>
 8007d8c:	b920      	cbnz	r0, 8007d98 <__mdiff+0x5c>
 8007d8e:	4b2e      	ldr	r3, [pc, #184]	; (8007e48 <__mdiff+0x10c>)
 8007d90:	4602      	mov	r2, r0
 8007d92:	f240 2145 	movw	r1, #581	; 0x245
 8007d96:	e7e5      	b.n	8007d64 <__mdiff+0x28>
 8007d98:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007d9c:	6926      	ldr	r6, [r4, #16]
 8007d9e:	60c5      	str	r5, [r0, #12]
 8007da0:	f104 0914 	add.w	r9, r4, #20
 8007da4:	f108 0514 	add.w	r5, r8, #20
 8007da8:	f100 0e14 	add.w	lr, r0, #20
 8007dac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007db0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007db4:	f108 0210 	add.w	r2, r8, #16
 8007db8:	46f2      	mov	sl, lr
 8007dba:	2100      	movs	r1, #0
 8007dbc:	f859 3b04 	ldr.w	r3, [r9], #4
 8007dc0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007dc4:	fa11 f88b 	uxtah	r8, r1, fp
 8007dc8:	b299      	uxth	r1, r3
 8007dca:	0c1b      	lsrs	r3, r3, #16
 8007dcc:	eba8 0801 	sub.w	r8, r8, r1
 8007dd0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007dd4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007dd8:	fa1f f888 	uxth.w	r8, r8
 8007ddc:	1419      	asrs	r1, r3, #16
 8007dde:	454e      	cmp	r6, r9
 8007de0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007de4:	f84a 3b04 	str.w	r3, [sl], #4
 8007de8:	d8e8      	bhi.n	8007dbc <__mdiff+0x80>
 8007dea:	1b33      	subs	r3, r6, r4
 8007dec:	3b15      	subs	r3, #21
 8007dee:	f023 0303 	bic.w	r3, r3, #3
 8007df2:	3304      	adds	r3, #4
 8007df4:	3415      	adds	r4, #21
 8007df6:	42a6      	cmp	r6, r4
 8007df8:	bf38      	it	cc
 8007dfa:	2304      	movcc	r3, #4
 8007dfc:	441d      	add	r5, r3
 8007dfe:	4473      	add	r3, lr
 8007e00:	469e      	mov	lr, r3
 8007e02:	462e      	mov	r6, r5
 8007e04:	4566      	cmp	r6, ip
 8007e06:	d30e      	bcc.n	8007e26 <__mdiff+0xea>
 8007e08:	f10c 0203 	add.w	r2, ip, #3
 8007e0c:	1b52      	subs	r2, r2, r5
 8007e0e:	f022 0203 	bic.w	r2, r2, #3
 8007e12:	3d03      	subs	r5, #3
 8007e14:	45ac      	cmp	ip, r5
 8007e16:	bf38      	it	cc
 8007e18:	2200      	movcc	r2, #0
 8007e1a:	4413      	add	r3, r2
 8007e1c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007e20:	b17a      	cbz	r2, 8007e42 <__mdiff+0x106>
 8007e22:	6107      	str	r7, [r0, #16]
 8007e24:	e7a4      	b.n	8007d70 <__mdiff+0x34>
 8007e26:	f856 8b04 	ldr.w	r8, [r6], #4
 8007e2a:	fa11 f288 	uxtah	r2, r1, r8
 8007e2e:	1414      	asrs	r4, r2, #16
 8007e30:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007e34:	b292      	uxth	r2, r2
 8007e36:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007e3a:	f84e 2b04 	str.w	r2, [lr], #4
 8007e3e:	1421      	asrs	r1, r4, #16
 8007e40:	e7e0      	b.n	8007e04 <__mdiff+0xc8>
 8007e42:	3f01      	subs	r7, #1
 8007e44:	e7ea      	b.n	8007e1c <__mdiff+0xe0>
 8007e46:	bf00      	nop
 8007e48:	08009451 	.word	0x08009451
 8007e4c:	08009462 	.word	0x08009462

08007e50 <__d2b>:
 8007e50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e54:	460f      	mov	r7, r1
 8007e56:	2101      	movs	r1, #1
 8007e58:	ec59 8b10 	vmov	r8, r9, d0
 8007e5c:	4616      	mov	r6, r2
 8007e5e:	f7ff fcd5 	bl	800780c <_Balloc>
 8007e62:	4604      	mov	r4, r0
 8007e64:	b930      	cbnz	r0, 8007e74 <__d2b+0x24>
 8007e66:	4602      	mov	r2, r0
 8007e68:	4b24      	ldr	r3, [pc, #144]	; (8007efc <__d2b+0xac>)
 8007e6a:	4825      	ldr	r0, [pc, #148]	; (8007f00 <__d2b+0xb0>)
 8007e6c:	f240 310f 	movw	r1, #783	; 0x30f
 8007e70:	f000 fa78 	bl	8008364 <__assert_func>
 8007e74:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007e78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e7c:	bb2d      	cbnz	r5, 8007eca <__d2b+0x7a>
 8007e7e:	9301      	str	r3, [sp, #4]
 8007e80:	f1b8 0300 	subs.w	r3, r8, #0
 8007e84:	d026      	beq.n	8007ed4 <__d2b+0x84>
 8007e86:	4668      	mov	r0, sp
 8007e88:	9300      	str	r3, [sp, #0]
 8007e8a:	f7ff fd87 	bl	800799c <__lo0bits>
 8007e8e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007e92:	b1e8      	cbz	r0, 8007ed0 <__d2b+0x80>
 8007e94:	f1c0 0320 	rsb	r3, r0, #32
 8007e98:	fa02 f303 	lsl.w	r3, r2, r3
 8007e9c:	430b      	orrs	r3, r1
 8007e9e:	40c2      	lsrs	r2, r0
 8007ea0:	6163      	str	r3, [r4, #20]
 8007ea2:	9201      	str	r2, [sp, #4]
 8007ea4:	9b01      	ldr	r3, [sp, #4]
 8007ea6:	61a3      	str	r3, [r4, #24]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	bf14      	ite	ne
 8007eac:	2202      	movne	r2, #2
 8007eae:	2201      	moveq	r2, #1
 8007eb0:	6122      	str	r2, [r4, #16]
 8007eb2:	b1bd      	cbz	r5, 8007ee4 <__d2b+0x94>
 8007eb4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007eb8:	4405      	add	r5, r0
 8007eba:	603d      	str	r5, [r7, #0]
 8007ebc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007ec0:	6030      	str	r0, [r6, #0]
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	b003      	add	sp, #12
 8007ec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007eca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ece:	e7d6      	b.n	8007e7e <__d2b+0x2e>
 8007ed0:	6161      	str	r1, [r4, #20]
 8007ed2:	e7e7      	b.n	8007ea4 <__d2b+0x54>
 8007ed4:	a801      	add	r0, sp, #4
 8007ed6:	f7ff fd61 	bl	800799c <__lo0bits>
 8007eda:	9b01      	ldr	r3, [sp, #4]
 8007edc:	6163      	str	r3, [r4, #20]
 8007ede:	3020      	adds	r0, #32
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	e7e5      	b.n	8007eb0 <__d2b+0x60>
 8007ee4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007ee8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007eec:	6038      	str	r0, [r7, #0]
 8007eee:	6918      	ldr	r0, [r3, #16]
 8007ef0:	f7ff fd34 	bl	800795c <__hi0bits>
 8007ef4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007ef8:	e7e2      	b.n	8007ec0 <__d2b+0x70>
 8007efa:	bf00      	nop
 8007efc:	08009451 	.word	0x08009451
 8007f00:	08009462 	.word	0x08009462

08007f04 <__ssputs_r>:
 8007f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f08:	688e      	ldr	r6, [r1, #8]
 8007f0a:	461f      	mov	r7, r3
 8007f0c:	42be      	cmp	r6, r7
 8007f0e:	680b      	ldr	r3, [r1, #0]
 8007f10:	4682      	mov	sl, r0
 8007f12:	460c      	mov	r4, r1
 8007f14:	4690      	mov	r8, r2
 8007f16:	d82c      	bhi.n	8007f72 <__ssputs_r+0x6e>
 8007f18:	898a      	ldrh	r2, [r1, #12]
 8007f1a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f1e:	d026      	beq.n	8007f6e <__ssputs_r+0x6a>
 8007f20:	6965      	ldr	r5, [r4, #20]
 8007f22:	6909      	ldr	r1, [r1, #16]
 8007f24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f28:	eba3 0901 	sub.w	r9, r3, r1
 8007f2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f30:	1c7b      	adds	r3, r7, #1
 8007f32:	444b      	add	r3, r9
 8007f34:	106d      	asrs	r5, r5, #1
 8007f36:	429d      	cmp	r5, r3
 8007f38:	bf38      	it	cc
 8007f3a:	461d      	movcc	r5, r3
 8007f3c:	0553      	lsls	r3, r2, #21
 8007f3e:	d527      	bpl.n	8007f90 <__ssputs_r+0x8c>
 8007f40:	4629      	mov	r1, r5
 8007f42:	f7ff fbd7 	bl	80076f4 <_malloc_r>
 8007f46:	4606      	mov	r6, r0
 8007f48:	b360      	cbz	r0, 8007fa4 <__ssputs_r+0xa0>
 8007f4a:	6921      	ldr	r1, [r4, #16]
 8007f4c:	464a      	mov	r2, r9
 8007f4e:	f7fe fcd2 	bl	80068f6 <memcpy>
 8007f52:	89a3      	ldrh	r3, [r4, #12]
 8007f54:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f5c:	81a3      	strh	r3, [r4, #12]
 8007f5e:	6126      	str	r6, [r4, #16]
 8007f60:	6165      	str	r5, [r4, #20]
 8007f62:	444e      	add	r6, r9
 8007f64:	eba5 0509 	sub.w	r5, r5, r9
 8007f68:	6026      	str	r6, [r4, #0]
 8007f6a:	60a5      	str	r5, [r4, #8]
 8007f6c:	463e      	mov	r6, r7
 8007f6e:	42be      	cmp	r6, r7
 8007f70:	d900      	bls.n	8007f74 <__ssputs_r+0x70>
 8007f72:	463e      	mov	r6, r7
 8007f74:	6820      	ldr	r0, [r4, #0]
 8007f76:	4632      	mov	r2, r6
 8007f78:	4641      	mov	r1, r8
 8007f7a:	f000 f9c9 	bl	8008310 <memmove>
 8007f7e:	68a3      	ldr	r3, [r4, #8]
 8007f80:	1b9b      	subs	r3, r3, r6
 8007f82:	60a3      	str	r3, [r4, #8]
 8007f84:	6823      	ldr	r3, [r4, #0]
 8007f86:	4433      	add	r3, r6
 8007f88:	6023      	str	r3, [r4, #0]
 8007f8a:	2000      	movs	r0, #0
 8007f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f90:	462a      	mov	r2, r5
 8007f92:	f000 fa2d 	bl	80083f0 <_realloc_r>
 8007f96:	4606      	mov	r6, r0
 8007f98:	2800      	cmp	r0, #0
 8007f9a:	d1e0      	bne.n	8007f5e <__ssputs_r+0x5a>
 8007f9c:	6921      	ldr	r1, [r4, #16]
 8007f9e:	4650      	mov	r0, sl
 8007fa0:	f7ff fb34 	bl	800760c <_free_r>
 8007fa4:	230c      	movs	r3, #12
 8007fa6:	f8ca 3000 	str.w	r3, [sl]
 8007faa:	89a3      	ldrh	r3, [r4, #12]
 8007fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fb0:	81a3      	strh	r3, [r4, #12]
 8007fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb6:	e7e9      	b.n	8007f8c <__ssputs_r+0x88>

08007fb8 <_svfiprintf_r>:
 8007fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fbc:	4698      	mov	r8, r3
 8007fbe:	898b      	ldrh	r3, [r1, #12]
 8007fc0:	061b      	lsls	r3, r3, #24
 8007fc2:	b09d      	sub	sp, #116	; 0x74
 8007fc4:	4607      	mov	r7, r0
 8007fc6:	460d      	mov	r5, r1
 8007fc8:	4614      	mov	r4, r2
 8007fca:	d50e      	bpl.n	8007fea <_svfiprintf_r+0x32>
 8007fcc:	690b      	ldr	r3, [r1, #16]
 8007fce:	b963      	cbnz	r3, 8007fea <_svfiprintf_r+0x32>
 8007fd0:	2140      	movs	r1, #64	; 0x40
 8007fd2:	f7ff fb8f 	bl	80076f4 <_malloc_r>
 8007fd6:	6028      	str	r0, [r5, #0]
 8007fd8:	6128      	str	r0, [r5, #16]
 8007fda:	b920      	cbnz	r0, 8007fe6 <_svfiprintf_r+0x2e>
 8007fdc:	230c      	movs	r3, #12
 8007fde:	603b      	str	r3, [r7, #0]
 8007fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe4:	e0d0      	b.n	8008188 <_svfiprintf_r+0x1d0>
 8007fe6:	2340      	movs	r3, #64	; 0x40
 8007fe8:	616b      	str	r3, [r5, #20]
 8007fea:	2300      	movs	r3, #0
 8007fec:	9309      	str	r3, [sp, #36]	; 0x24
 8007fee:	2320      	movs	r3, #32
 8007ff0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ff4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ff8:	2330      	movs	r3, #48	; 0x30
 8007ffa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80081a0 <_svfiprintf_r+0x1e8>
 8007ffe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008002:	f04f 0901 	mov.w	r9, #1
 8008006:	4623      	mov	r3, r4
 8008008:	469a      	mov	sl, r3
 800800a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800800e:	b10a      	cbz	r2, 8008014 <_svfiprintf_r+0x5c>
 8008010:	2a25      	cmp	r2, #37	; 0x25
 8008012:	d1f9      	bne.n	8008008 <_svfiprintf_r+0x50>
 8008014:	ebba 0b04 	subs.w	fp, sl, r4
 8008018:	d00b      	beq.n	8008032 <_svfiprintf_r+0x7a>
 800801a:	465b      	mov	r3, fp
 800801c:	4622      	mov	r2, r4
 800801e:	4629      	mov	r1, r5
 8008020:	4638      	mov	r0, r7
 8008022:	f7ff ff6f 	bl	8007f04 <__ssputs_r>
 8008026:	3001      	adds	r0, #1
 8008028:	f000 80a9 	beq.w	800817e <_svfiprintf_r+0x1c6>
 800802c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800802e:	445a      	add	r2, fp
 8008030:	9209      	str	r2, [sp, #36]	; 0x24
 8008032:	f89a 3000 	ldrb.w	r3, [sl]
 8008036:	2b00      	cmp	r3, #0
 8008038:	f000 80a1 	beq.w	800817e <_svfiprintf_r+0x1c6>
 800803c:	2300      	movs	r3, #0
 800803e:	f04f 32ff 	mov.w	r2, #4294967295
 8008042:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008046:	f10a 0a01 	add.w	sl, sl, #1
 800804a:	9304      	str	r3, [sp, #16]
 800804c:	9307      	str	r3, [sp, #28]
 800804e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008052:	931a      	str	r3, [sp, #104]	; 0x68
 8008054:	4654      	mov	r4, sl
 8008056:	2205      	movs	r2, #5
 8008058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800805c:	4850      	ldr	r0, [pc, #320]	; (80081a0 <_svfiprintf_r+0x1e8>)
 800805e:	f7f8 f8bf 	bl	80001e0 <memchr>
 8008062:	9a04      	ldr	r2, [sp, #16]
 8008064:	b9d8      	cbnz	r0, 800809e <_svfiprintf_r+0xe6>
 8008066:	06d0      	lsls	r0, r2, #27
 8008068:	bf44      	itt	mi
 800806a:	2320      	movmi	r3, #32
 800806c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008070:	0711      	lsls	r1, r2, #28
 8008072:	bf44      	itt	mi
 8008074:	232b      	movmi	r3, #43	; 0x2b
 8008076:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800807a:	f89a 3000 	ldrb.w	r3, [sl]
 800807e:	2b2a      	cmp	r3, #42	; 0x2a
 8008080:	d015      	beq.n	80080ae <_svfiprintf_r+0xf6>
 8008082:	9a07      	ldr	r2, [sp, #28]
 8008084:	4654      	mov	r4, sl
 8008086:	2000      	movs	r0, #0
 8008088:	f04f 0c0a 	mov.w	ip, #10
 800808c:	4621      	mov	r1, r4
 800808e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008092:	3b30      	subs	r3, #48	; 0x30
 8008094:	2b09      	cmp	r3, #9
 8008096:	d94d      	bls.n	8008134 <_svfiprintf_r+0x17c>
 8008098:	b1b0      	cbz	r0, 80080c8 <_svfiprintf_r+0x110>
 800809a:	9207      	str	r2, [sp, #28]
 800809c:	e014      	b.n	80080c8 <_svfiprintf_r+0x110>
 800809e:	eba0 0308 	sub.w	r3, r0, r8
 80080a2:	fa09 f303 	lsl.w	r3, r9, r3
 80080a6:	4313      	orrs	r3, r2
 80080a8:	9304      	str	r3, [sp, #16]
 80080aa:	46a2      	mov	sl, r4
 80080ac:	e7d2      	b.n	8008054 <_svfiprintf_r+0x9c>
 80080ae:	9b03      	ldr	r3, [sp, #12]
 80080b0:	1d19      	adds	r1, r3, #4
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	9103      	str	r1, [sp, #12]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	bfbb      	ittet	lt
 80080ba:	425b      	neglt	r3, r3
 80080bc:	f042 0202 	orrlt.w	r2, r2, #2
 80080c0:	9307      	strge	r3, [sp, #28]
 80080c2:	9307      	strlt	r3, [sp, #28]
 80080c4:	bfb8      	it	lt
 80080c6:	9204      	strlt	r2, [sp, #16]
 80080c8:	7823      	ldrb	r3, [r4, #0]
 80080ca:	2b2e      	cmp	r3, #46	; 0x2e
 80080cc:	d10c      	bne.n	80080e8 <_svfiprintf_r+0x130>
 80080ce:	7863      	ldrb	r3, [r4, #1]
 80080d0:	2b2a      	cmp	r3, #42	; 0x2a
 80080d2:	d134      	bne.n	800813e <_svfiprintf_r+0x186>
 80080d4:	9b03      	ldr	r3, [sp, #12]
 80080d6:	1d1a      	adds	r2, r3, #4
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	9203      	str	r2, [sp, #12]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	bfb8      	it	lt
 80080e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80080e4:	3402      	adds	r4, #2
 80080e6:	9305      	str	r3, [sp, #20]
 80080e8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80081b0 <_svfiprintf_r+0x1f8>
 80080ec:	7821      	ldrb	r1, [r4, #0]
 80080ee:	2203      	movs	r2, #3
 80080f0:	4650      	mov	r0, sl
 80080f2:	f7f8 f875 	bl	80001e0 <memchr>
 80080f6:	b138      	cbz	r0, 8008108 <_svfiprintf_r+0x150>
 80080f8:	9b04      	ldr	r3, [sp, #16]
 80080fa:	eba0 000a 	sub.w	r0, r0, sl
 80080fe:	2240      	movs	r2, #64	; 0x40
 8008100:	4082      	lsls	r2, r0
 8008102:	4313      	orrs	r3, r2
 8008104:	3401      	adds	r4, #1
 8008106:	9304      	str	r3, [sp, #16]
 8008108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800810c:	4825      	ldr	r0, [pc, #148]	; (80081a4 <_svfiprintf_r+0x1ec>)
 800810e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008112:	2206      	movs	r2, #6
 8008114:	f7f8 f864 	bl	80001e0 <memchr>
 8008118:	2800      	cmp	r0, #0
 800811a:	d038      	beq.n	800818e <_svfiprintf_r+0x1d6>
 800811c:	4b22      	ldr	r3, [pc, #136]	; (80081a8 <_svfiprintf_r+0x1f0>)
 800811e:	bb1b      	cbnz	r3, 8008168 <_svfiprintf_r+0x1b0>
 8008120:	9b03      	ldr	r3, [sp, #12]
 8008122:	3307      	adds	r3, #7
 8008124:	f023 0307 	bic.w	r3, r3, #7
 8008128:	3308      	adds	r3, #8
 800812a:	9303      	str	r3, [sp, #12]
 800812c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800812e:	4433      	add	r3, r6
 8008130:	9309      	str	r3, [sp, #36]	; 0x24
 8008132:	e768      	b.n	8008006 <_svfiprintf_r+0x4e>
 8008134:	fb0c 3202 	mla	r2, ip, r2, r3
 8008138:	460c      	mov	r4, r1
 800813a:	2001      	movs	r0, #1
 800813c:	e7a6      	b.n	800808c <_svfiprintf_r+0xd4>
 800813e:	2300      	movs	r3, #0
 8008140:	3401      	adds	r4, #1
 8008142:	9305      	str	r3, [sp, #20]
 8008144:	4619      	mov	r1, r3
 8008146:	f04f 0c0a 	mov.w	ip, #10
 800814a:	4620      	mov	r0, r4
 800814c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008150:	3a30      	subs	r2, #48	; 0x30
 8008152:	2a09      	cmp	r2, #9
 8008154:	d903      	bls.n	800815e <_svfiprintf_r+0x1a6>
 8008156:	2b00      	cmp	r3, #0
 8008158:	d0c6      	beq.n	80080e8 <_svfiprintf_r+0x130>
 800815a:	9105      	str	r1, [sp, #20]
 800815c:	e7c4      	b.n	80080e8 <_svfiprintf_r+0x130>
 800815e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008162:	4604      	mov	r4, r0
 8008164:	2301      	movs	r3, #1
 8008166:	e7f0      	b.n	800814a <_svfiprintf_r+0x192>
 8008168:	ab03      	add	r3, sp, #12
 800816a:	9300      	str	r3, [sp, #0]
 800816c:	462a      	mov	r2, r5
 800816e:	4b0f      	ldr	r3, [pc, #60]	; (80081ac <_svfiprintf_r+0x1f4>)
 8008170:	a904      	add	r1, sp, #16
 8008172:	4638      	mov	r0, r7
 8008174:	f7fd fe54 	bl	8005e20 <_printf_float>
 8008178:	1c42      	adds	r2, r0, #1
 800817a:	4606      	mov	r6, r0
 800817c:	d1d6      	bne.n	800812c <_svfiprintf_r+0x174>
 800817e:	89ab      	ldrh	r3, [r5, #12]
 8008180:	065b      	lsls	r3, r3, #25
 8008182:	f53f af2d 	bmi.w	8007fe0 <_svfiprintf_r+0x28>
 8008186:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008188:	b01d      	add	sp, #116	; 0x74
 800818a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800818e:	ab03      	add	r3, sp, #12
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	462a      	mov	r2, r5
 8008194:	4b05      	ldr	r3, [pc, #20]	; (80081ac <_svfiprintf_r+0x1f4>)
 8008196:	a904      	add	r1, sp, #16
 8008198:	4638      	mov	r0, r7
 800819a:	f7fe f8e5 	bl	8006368 <_printf_i>
 800819e:	e7eb      	b.n	8008178 <_svfiprintf_r+0x1c0>
 80081a0:	080095bc 	.word	0x080095bc
 80081a4:	080095c6 	.word	0x080095c6
 80081a8:	08005e21 	.word	0x08005e21
 80081ac:	08007f05 	.word	0x08007f05
 80081b0:	080095c2 	.word	0x080095c2

080081b4 <__sflush_r>:
 80081b4:	898a      	ldrh	r2, [r1, #12]
 80081b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081ba:	4605      	mov	r5, r0
 80081bc:	0710      	lsls	r0, r2, #28
 80081be:	460c      	mov	r4, r1
 80081c0:	d458      	bmi.n	8008274 <__sflush_r+0xc0>
 80081c2:	684b      	ldr	r3, [r1, #4]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	dc05      	bgt.n	80081d4 <__sflush_r+0x20>
 80081c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	dc02      	bgt.n	80081d4 <__sflush_r+0x20>
 80081ce:	2000      	movs	r0, #0
 80081d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081d6:	2e00      	cmp	r6, #0
 80081d8:	d0f9      	beq.n	80081ce <__sflush_r+0x1a>
 80081da:	2300      	movs	r3, #0
 80081dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80081e0:	682f      	ldr	r7, [r5, #0]
 80081e2:	6a21      	ldr	r1, [r4, #32]
 80081e4:	602b      	str	r3, [r5, #0]
 80081e6:	d032      	beq.n	800824e <__sflush_r+0x9a>
 80081e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80081ea:	89a3      	ldrh	r3, [r4, #12]
 80081ec:	075a      	lsls	r2, r3, #29
 80081ee:	d505      	bpl.n	80081fc <__sflush_r+0x48>
 80081f0:	6863      	ldr	r3, [r4, #4]
 80081f2:	1ac0      	subs	r0, r0, r3
 80081f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80081f6:	b10b      	cbz	r3, 80081fc <__sflush_r+0x48>
 80081f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081fa:	1ac0      	subs	r0, r0, r3
 80081fc:	2300      	movs	r3, #0
 80081fe:	4602      	mov	r2, r0
 8008200:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008202:	6a21      	ldr	r1, [r4, #32]
 8008204:	4628      	mov	r0, r5
 8008206:	47b0      	blx	r6
 8008208:	1c43      	adds	r3, r0, #1
 800820a:	89a3      	ldrh	r3, [r4, #12]
 800820c:	d106      	bne.n	800821c <__sflush_r+0x68>
 800820e:	6829      	ldr	r1, [r5, #0]
 8008210:	291d      	cmp	r1, #29
 8008212:	d82b      	bhi.n	800826c <__sflush_r+0xb8>
 8008214:	4a29      	ldr	r2, [pc, #164]	; (80082bc <__sflush_r+0x108>)
 8008216:	410a      	asrs	r2, r1
 8008218:	07d6      	lsls	r6, r2, #31
 800821a:	d427      	bmi.n	800826c <__sflush_r+0xb8>
 800821c:	2200      	movs	r2, #0
 800821e:	6062      	str	r2, [r4, #4]
 8008220:	04d9      	lsls	r1, r3, #19
 8008222:	6922      	ldr	r2, [r4, #16]
 8008224:	6022      	str	r2, [r4, #0]
 8008226:	d504      	bpl.n	8008232 <__sflush_r+0x7e>
 8008228:	1c42      	adds	r2, r0, #1
 800822a:	d101      	bne.n	8008230 <__sflush_r+0x7c>
 800822c:	682b      	ldr	r3, [r5, #0]
 800822e:	b903      	cbnz	r3, 8008232 <__sflush_r+0x7e>
 8008230:	6560      	str	r0, [r4, #84]	; 0x54
 8008232:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008234:	602f      	str	r7, [r5, #0]
 8008236:	2900      	cmp	r1, #0
 8008238:	d0c9      	beq.n	80081ce <__sflush_r+0x1a>
 800823a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800823e:	4299      	cmp	r1, r3
 8008240:	d002      	beq.n	8008248 <__sflush_r+0x94>
 8008242:	4628      	mov	r0, r5
 8008244:	f7ff f9e2 	bl	800760c <_free_r>
 8008248:	2000      	movs	r0, #0
 800824a:	6360      	str	r0, [r4, #52]	; 0x34
 800824c:	e7c0      	b.n	80081d0 <__sflush_r+0x1c>
 800824e:	2301      	movs	r3, #1
 8008250:	4628      	mov	r0, r5
 8008252:	47b0      	blx	r6
 8008254:	1c41      	adds	r1, r0, #1
 8008256:	d1c8      	bne.n	80081ea <__sflush_r+0x36>
 8008258:	682b      	ldr	r3, [r5, #0]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d0c5      	beq.n	80081ea <__sflush_r+0x36>
 800825e:	2b1d      	cmp	r3, #29
 8008260:	d001      	beq.n	8008266 <__sflush_r+0xb2>
 8008262:	2b16      	cmp	r3, #22
 8008264:	d101      	bne.n	800826a <__sflush_r+0xb6>
 8008266:	602f      	str	r7, [r5, #0]
 8008268:	e7b1      	b.n	80081ce <__sflush_r+0x1a>
 800826a:	89a3      	ldrh	r3, [r4, #12]
 800826c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008270:	81a3      	strh	r3, [r4, #12]
 8008272:	e7ad      	b.n	80081d0 <__sflush_r+0x1c>
 8008274:	690f      	ldr	r7, [r1, #16]
 8008276:	2f00      	cmp	r7, #0
 8008278:	d0a9      	beq.n	80081ce <__sflush_r+0x1a>
 800827a:	0793      	lsls	r3, r2, #30
 800827c:	680e      	ldr	r6, [r1, #0]
 800827e:	bf08      	it	eq
 8008280:	694b      	ldreq	r3, [r1, #20]
 8008282:	600f      	str	r7, [r1, #0]
 8008284:	bf18      	it	ne
 8008286:	2300      	movne	r3, #0
 8008288:	eba6 0807 	sub.w	r8, r6, r7
 800828c:	608b      	str	r3, [r1, #8]
 800828e:	f1b8 0f00 	cmp.w	r8, #0
 8008292:	dd9c      	ble.n	80081ce <__sflush_r+0x1a>
 8008294:	6a21      	ldr	r1, [r4, #32]
 8008296:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008298:	4643      	mov	r3, r8
 800829a:	463a      	mov	r2, r7
 800829c:	4628      	mov	r0, r5
 800829e:	47b0      	blx	r6
 80082a0:	2800      	cmp	r0, #0
 80082a2:	dc06      	bgt.n	80082b2 <__sflush_r+0xfe>
 80082a4:	89a3      	ldrh	r3, [r4, #12]
 80082a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082aa:	81a3      	strh	r3, [r4, #12]
 80082ac:	f04f 30ff 	mov.w	r0, #4294967295
 80082b0:	e78e      	b.n	80081d0 <__sflush_r+0x1c>
 80082b2:	4407      	add	r7, r0
 80082b4:	eba8 0800 	sub.w	r8, r8, r0
 80082b8:	e7e9      	b.n	800828e <__sflush_r+0xda>
 80082ba:	bf00      	nop
 80082bc:	dfbffffe 	.word	0xdfbffffe

080082c0 <_fflush_r>:
 80082c0:	b538      	push	{r3, r4, r5, lr}
 80082c2:	690b      	ldr	r3, [r1, #16]
 80082c4:	4605      	mov	r5, r0
 80082c6:	460c      	mov	r4, r1
 80082c8:	b913      	cbnz	r3, 80082d0 <_fflush_r+0x10>
 80082ca:	2500      	movs	r5, #0
 80082cc:	4628      	mov	r0, r5
 80082ce:	bd38      	pop	{r3, r4, r5, pc}
 80082d0:	b118      	cbz	r0, 80082da <_fflush_r+0x1a>
 80082d2:	6a03      	ldr	r3, [r0, #32]
 80082d4:	b90b      	cbnz	r3, 80082da <_fflush_r+0x1a>
 80082d6:	f7fe f9f5 	bl	80066c4 <__sinit>
 80082da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d0f3      	beq.n	80082ca <_fflush_r+0xa>
 80082e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80082e4:	07d0      	lsls	r0, r2, #31
 80082e6:	d404      	bmi.n	80082f2 <_fflush_r+0x32>
 80082e8:	0599      	lsls	r1, r3, #22
 80082ea:	d402      	bmi.n	80082f2 <_fflush_r+0x32>
 80082ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082ee:	f7fe fb00 	bl	80068f2 <__retarget_lock_acquire_recursive>
 80082f2:	4628      	mov	r0, r5
 80082f4:	4621      	mov	r1, r4
 80082f6:	f7ff ff5d 	bl	80081b4 <__sflush_r>
 80082fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082fc:	07da      	lsls	r2, r3, #31
 80082fe:	4605      	mov	r5, r0
 8008300:	d4e4      	bmi.n	80082cc <_fflush_r+0xc>
 8008302:	89a3      	ldrh	r3, [r4, #12]
 8008304:	059b      	lsls	r3, r3, #22
 8008306:	d4e1      	bmi.n	80082cc <_fflush_r+0xc>
 8008308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800830a:	f7fe faf3 	bl	80068f4 <__retarget_lock_release_recursive>
 800830e:	e7dd      	b.n	80082cc <_fflush_r+0xc>

08008310 <memmove>:
 8008310:	4288      	cmp	r0, r1
 8008312:	b510      	push	{r4, lr}
 8008314:	eb01 0402 	add.w	r4, r1, r2
 8008318:	d902      	bls.n	8008320 <memmove+0x10>
 800831a:	4284      	cmp	r4, r0
 800831c:	4623      	mov	r3, r4
 800831e:	d807      	bhi.n	8008330 <memmove+0x20>
 8008320:	1e43      	subs	r3, r0, #1
 8008322:	42a1      	cmp	r1, r4
 8008324:	d008      	beq.n	8008338 <memmove+0x28>
 8008326:	f811 2b01 	ldrb.w	r2, [r1], #1
 800832a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800832e:	e7f8      	b.n	8008322 <memmove+0x12>
 8008330:	4402      	add	r2, r0
 8008332:	4601      	mov	r1, r0
 8008334:	428a      	cmp	r2, r1
 8008336:	d100      	bne.n	800833a <memmove+0x2a>
 8008338:	bd10      	pop	{r4, pc}
 800833a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800833e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008342:	e7f7      	b.n	8008334 <memmove+0x24>

08008344 <_sbrk_r>:
 8008344:	b538      	push	{r3, r4, r5, lr}
 8008346:	4d06      	ldr	r5, [pc, #24]	; (8008360 <_sbrk_r+0x1c>)
 8008348:	2300      	movs	r3, #0
 800834a:	4604      	mov	r4, r0
 800834c:	4608      	mov	r0, r1
 800834e:	602b      	str	r3, [r5, #0]
 8008350:	f7f9 f928 	bl	80015a4 <_sbrk>
 8008354:	1c43      	adds	r3, r0, #1
 8008356:	d102      	bne.n	800835e <_sbrk_r+0x1a>
 8008358:	682b      	ldr	r3, [r5, #0]
 800835a:	b103      	cbz	r3, 800835e <_sbrk_r+0x1a>
 800835c:	6023      	str	r3, [r4, #0]
 800835e:	bd38      	pop	{r3, r4, r5, pc}
 8008360:	20000550 	.word	0x20000550

08008364 <__assert_func>:
 8008364:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008366:	4614      	mov	r4, r2
 8008368:	461a      	mov	r2, r3
 800836a:	4b09      	ldr	r3, [pc, #36]	; (8008390 <__assert_func+0x2c>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4605      	mov	r5, r0
 8008370:	68d8      	ldr	r0, [r3, #12]
 8008372:	b14c      	cbz	r4, 8008388 <__assert_func+0x24>
 8008374:	4b07      	ldr	r3, [pc, #28]	; (8008394 <__assert_func+0x30>)
 8008376:	9100      	str	r1, [sp, #0]
 8008378:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800837c:	4906      	ldr	r1, [pc, #24]	; (8008398 <__assert_func+0x34>)
 800837e:	462b      	mov	r3, r5
 8008380:	f000 f872 	bl	8008468 <fiprintf>
 8008384:	f000 f882 	bl	800848c <abort>
 8008388:	4b04      	ldr	r3, [pc, #16]	; (800839c <__assert_func+0x38>)
 800838a:	461c      	mov	r4, r3
 800838c:	e7f3      	b.n	8008376 <__assert_func+0x12>
 800838e:	bf00      	nop
 8008390:	20000074 	.word	0x20000074
 8008394:	080095d7 	.word	0x080095d7
 8008398:	080095e4 	.word	0x080095e4
 800839c:	08009612 	.word	0x08009612

080083a0 <_calloc_r>:
 80083a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083a2:	fba1 2402 	umull	r2, r4, r1, r2
 80083a6:	b94c      	cbnz	r4, 80083bc <_calloc_r+0x1c>
 80083a8:	4611      	mov	r1, r2
 80083aa:	9201      	str	r2, [sp, #4]
 80083ac:	f7ff f9a2 	bl	80076f4 <_malloc_r>
 80083b0:	9a01      	ldr	r2, [sp, #4]
 80083b2:	4605      	mov	r5, r0
 80083b4:	b930      	cbnz	r0, 80083c4 <_calloc_r+0x24>
 80083b6:	4628      	mov	r0, r5
 80083b8:	b003      	add	sp, #12
 80083ba:	bd30      	pop	{r4, r5, pc}
 80083bc:	220c      	movs	r2, #12
 80083be:	6002      	str	r2, [r0, #0]
 80083c0:	2500      	movs	r5, #0
 80083c2:	e7f8      	b.n	80083b6 <_calloc_r+0x16>
 80083c4:	4621      	mov	r1, r4
 80083c6:	f7fe fa16 	bl	80067f6 <memset>
 80083ca:	e7f4      	b.n	80083b6 <_calloc_r+0x16>

080083cc <__ascii_mbtowc>:
 80083cc:	b082      	sub	sp, #8
 80083ce:	b901      	cbnz	r1, 80083d2 <__ascii_mbtowc+0x6>
 80083d0:	a901      	add	r1, sp, #4
 80083d2:	b142      	cbz	r2, 80083e6 <__ascii_mbtowc+0x1a>
 80083d4:	b14b      	cbz	r3, 80083ea <__ascii_mbtowc+0x1e>
 80083d6:	7813      	ldrb	r3, [r2, #0]
 80083d8:	600b      	str	r3, [r1, #0]
 80083da:	7812      	ldrb	r2, [r2, #0]
 80083dc:	1e10      	subs	r0, r2, #0
 80083de:	bf18      	it	ne
 80083e0:	2001      	movne	r0, #1
 80083e2:	b002      	add	sp, #8
 80083e4:	4770      	bx	lr
 80083e6:	4610      	mov	r0, r2
 80083e8:	e7fb      	b.n	80083e2 <__ascii_mbtowc+0x16>
 80083ea:	f06f 0001 	mvn.w	r0, #1
 80083ee:	e7f8      	b.n	80083e2 <__ascii_mbtowc+0x16>

080083f0 <_realloc_r>:
 80083f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083f4:	4680      	mov	r8, r0
 80083f6:	4614      	mov	r4, r2
 80083f8:	460e      	mov	r6, r1
 80083fa:	b921      	cbnz	r1, 8008406 <_realloc_r+0x16>
 80083fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008400:	4611      	mov	r1, r2
 8008402:	f7ff b977 	b.w	80076f4 <_malloc_r>
 8008406:	b92a      	cbnz	r2, 8008414 <_realloc_r+0x24>
 8008408:	f7ff f900 	bl	800760c <_free_r>
 800840c:	4625      	mov	r5, r4
 800840e:	4628      	mov	r0, r5
 8008410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008414:	f000 f841 	bl	800849a <_malloc_usable_size_r>
 8008418:	4284      	cmp	r4, r0
 800841a:	4607      	mov	r7, r0
 800841c:	d802      	bhi.n	8008424 <_realloc_r+0x34>
 800841e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008422:	d812      	bhi.n	800844a <_realloc_r+0x5a>
 8008424:	4621      	mov	r1, r4
 8008426:	4640      	mov	r0, r8
 8008428:	f7ff f964 	bl	80076f4 <_malloc_r>
 800842c:	4605      	mov	r5, r0
 800842e:	2800      	cmp	r0, #0
 8008430:	d0ed      	beq.n	800840e <_realloc_r+0x1e>
 8008432:	42bc      	cmp	r4, r7
 8008434:	4622      	mov	r2, r4
 8008436:	4631      	mov	r1, r6
 8008438:	bf28      	it	cs
 800843a:	463a      	movcs	r2, r7
 800843c:	f7fe fa5b 	bl	80068f6 <memcpy>
 8008440:	4631      	mov	r1, r6
 8008442:	4640      	mov	r0, r8
 8008444:	f7ff f8e2 	bl	800760c <_free_r>
 8008448:	e7e1      	b.n	800840e <_realloc_r+0x1e>
 800844a:	4635      	mov	r5, r6
 800844c:	e7df      	b.n	800840e <_realloc_r+0x1e>

0800844e <__ascii_wctomb>:
 800844e:	b149      	cbz	r1, 8008464 <__ascii_wctomb+0x16>
 8008450:	2aff      	cmp	r2, #255	; 0xff
 8008452:	bf85      	ittet	hi
 8008454:	238a      	movhi	r3, #138	; 0x8a
 8008456:	6003      	strhi	r3, [r0, #0]
 8008458:	700a      	strbls	r2, [r1, #0]
 800845a:	f04f 30ff 	movhi.w	r0, #4294967295
 800845e:	bf98      	it	ls
 8008460:	2001      	movls	r0, #1
 8008462:	4770      	bx	lr
 8008464:	4608      	mov	r0, r1
 8008466:	4770      	bx	lr

08008468 <fiprintf>:
 8008468:	b40e      	push	{r1, r2, r3}
 800846a:	b503      	push	{r0, r1, lr}
 800846c:	4601      	mov	r1, r0
 800846e:	ab03      	add	r3, sp, #12
 8008470:	4805      	ldr	r0, [pc, #20]	; (8008488 <fiprintf+0x20>)
 8008472:	f853 2b04 	ldr.w	r2, [r3], #4
 8008476:	6800      	ldr	r0, [r0, #0]
 8008478:	9301      	str	r3, [sp, #4]
 800847a:	f000 f83f 	bl	80084fc <_vfiprintf_r>
 800847e:	b002      	add	sp, #8
 8008480:	f85d eb04 	ldr.w	lr, [sp], #4
 8008484:	b003      	add	sp, #12
 8008486:	4770      	bx	lr
 8008488:	20000074 	.word	0x20000074

0800848c <abort>:
 800848c:	b508      	push	{r3, lr}
 800848e:	2006      	movs	r0, #6
 8008490:	f000 fa0c 	bl	80088ac <raise>
 8008494:	2001      	movs	r0, #1
 8008496:	f7f9 f80d 	bl	80014b4 <_exit>

0800849a <_malloc_usable_size_r>:
 800849a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800849e:	1f18      	subs	r0, r3, #4
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	bfbc      	itt	lt
 80084a4:	580b      	ldrlt	r3, [r1, r0]
 80084a6:	18c0      	addlt	r0, r0, r3
 80084a8:	4770      	bx	lr

080084aa <__sfputc_r>:
 80084aa:	6893      	ldr	r3, [r2, #8]
 80084ac:	3b01      	subs	r3, #1
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	b410      	push	{r4}
 80084b2:	6093      	str	r3, [r2, #8]
 80084b4:	da08      	bge.n	80084c8 <__sfputc_r+0x1e>
 80084b6:	6994      	ldr	r4, [r2, #24]
 80084b8:	42a3      	cmp	r3, r4
 80084ba:	db01      	blt.n	80084c0 <__sfputc_r+0x16>
 80084bc:	290a      	cmp	r1, #10
 80084be:	d103      	bne.n	80084c8 <__sfputc_r+0x1e>
 80084c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084c4:	f000 b934 	b.w	8008730 <__swbuf_r>
 80084c8:	6813      	ldr	r3, [r2, #0]
 80084ca:	1c58      	adds	r0, r3, #1
 80084cc:	6010      	str	r0, [r2, #0]
 80084ce:	7019      	strb	r1, [r3, #0]
 80084d0:	4608      	mov	r0, r1
 80084d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <__sfputs_r>:
 80084d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084da:	4606      	mov	r6, r0
 80084dc:	460f      	mov	r7, r1
 80084de:	4614      	mov	r4, r2
 80084e0:	18d5      	adds	r5, r2, r3
 80084e2:	42ac      	cmp	r4, r5
 80084e4:	d101      	bne.n	80084ea <__sfputs_r+0x12>
 80084e6:	2000      	movs	r0, #0
 80084e8:	e007      	b.n	80084fa <__sfputs_r+0x22>
 80084ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084ee:	463a      	mov	r2, r7
 80084f0:	4630      	mov	r0, r6
 80084f2:	f7ff ffda 	bl	80084aa <__sfputc_r>
 80084f6:	1c43      	adds	r3, r0, #1
 80084f8:	d1f3      	bne.n	80084e2 <__sfputs_r+0xa>
 80084fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080084fc <_vfiprintf_r>:
 80084fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008500:	460d      	mov	r5, r1
 8008502:	b09d      	sub	sp, #116	; 0x74
 8008504:	4614      	mov	r4, r2
 8008506:	4698      	mov	r8, r3
 8008508:	4606      	mov	r6, r0
 800850a:	b118      	cbz	r0, 8008514 <_vfiprintf_r+0x18>
 800850c:	6a03      	ldr	r3, [r0, #32]
 800850e:	b90b      	cbnz	r3, 8008514 <_vfiprintf_r+0x18>
 8008510:	f7fe f8d8 	bl	80066c4 <__sinit>
 8008514:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008516:	07d9      	lsls	r1, r3, #31
 8008518:	d405      	bmi.n	8008526 <_vfiprintf_r+0x2a>
 800851a:	89ab      	ldrh	r3, [r5, #12]
 800851c:	059a      	lsls	r2, r3, #22
 800851e:	d402      	bmi.n	8008526 <_vfiprintf_r+0x2a>
 8008520:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008522:	f7fe f9e6 	bl	80068f2 <__retarget_lock_acquire_recursive>
 8008526:	89ab      	ldrh	r3, [r5, #12]
 8008528:	071b      	lsls	r3, r3, #28
 800852a:	d501      	bpl.n	8008530 <_vfiprintf_r+0x34>
 800852c:	692b      	ldr	r3, [r5, #16]
 800852e:	b99b      	cbnz	r3, 8008558 <_vfiprintf_r+0x5c>
 8008530:	4629      	mov	r1, r5
 8008532:	4630      	mov	r0, r6
 8008534:	f000 f93a 	bl	80087ac <__swsetup_r>
 8008538:	b170      	cbz	r0, 8008558 <_vfiprintf_r+0x5c>
 800853a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800853c:	07dc      	lsls	r4, r3, #31
 800853e:	d504      	bpl.n	800854a <_vfiprintf_r+0x4e>
 8008540:	f04f 30ff 	mov.w	r0, #4294967295
 8008544:	b01d      	add	sp, #116	; 0x74
 8008546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800854a:	89ab      	ldrh	r3, [r5, #12]
 800854c:	0598      	lsls	r0, r3, #22
 800854e:	d4f7      	bmi.n	8008540 <_vfiprintf_r+0x44>
 8008550:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008552:	f7fe f9cf 	bl	80068f4 <__retarget_lock_release_recursive>
 8008556:	e7f3      	b.n	8008540 <_vfiprintf_r+0x44>
 8008558:	2300      	movs	r3, #0
 800855a:	9309      	str	r3, [sp, #36]	; 0x24
 800855c:	2320      	movs	r3, #32
 800855e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008562:	f8cd 800c 	str.w	r8, [sp, #12]
 8008566:	2330      	movs	r3, #48	; 0x30
 8008568:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800871c <_vfiprintf_r+0x220>
 800856c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008570:	f04f 0901 	mov.w	r9, #1
 8008574:	4623      	mov	r3, r4
 8008576:	469a      	mov	sl, r3
 8008578:	f813 2b01 	ldrb.w	r2, [r3], #1
 800857c:	b10a      	cbz	r2, 8008582 <_vfiprintf_r+0x86>
 800857e:	2a25      	cmp	r2, #37	; 0x25
 8008580:	d1f9      	bne.n	8008576 <_vfiprintf_r+0x7a>
 8008582:	ebba 0b04 	subs.w	fp, sl, r4
 8008586:	d00b      	beq.n	80085a0 <_vfiprintf_r+0xa4>
 8008588:	465b      	mov	r3, fp
 800858a:	4622      	mov	r2, r4
 800858c:	4629      	mov	r1, r5
 800858e:	4630      	mov	r0, r6
 8008590:	f7ff ffa2 	bl	80084d8 <__sfputs_r>
 8008594:	3001      	adds	r0, #1
 8008596:	f000 80a9 	beq.w	80086ec <_vfiprintf_r+0x1f0>
 800859a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800859c:	445a      	add	r2, fp
 800859e:	9209      	str	r2, [sp, #36]	; 0x24
 80085a0:	f89a 3000 	ldrb.w	r3, [sl]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	f000 80a1 	beq.w	80086ec <_vfiprintf_r+0x1f0>
 80085aa:	2300      	movs	r3, #0
 80085ac:	f04f 32ff 	mov.w	r2, #4294967295
 80085b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085b4:	f10a 0a01 	add.w	sl, sl, #1
 80085b8:	9304      	str	r3, [sp, #16]
 80085ba:	9307      	str	r3, [sp, #28]
 80085bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085c0:	931a      	str	r3, [sp, #104]	; 0x68
 80085c2:	4654      	mov	r4, sl
 80085c4:	2205      	movs	r2, #5
 80085c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085ca:	4854      	ldr	r0, [pc, #336]	; (800871c <_vfiprintf_r+0x220>)
 80085cc:	f7f7 fe08 	bl	80001e0 <memchr>
 80085d0:	9a04      	ldr	r2, [sp, #16]
 80085d2:	b9d8      	cbnz	r0, 800860c <_vfiprintf_r+0x110>
 80085d4:	06d1      	lsls	r1, r2, #27
 80085d6:	bf44      	itt	mi
 80085d8:	2320      	movmi	r3, #32
 80085da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085de:	0713      	lsls	r3, r2, #28
 80085e0:	bf44      	itt	mi
 80085e2:	232b      	movmi	r3, #43	; 0x2b
 80085e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085e8:	f89a 3000 	ldrb.w	r3, [sl]
 80085ec:	2b2a      	cmp	r3, #42	; 0x2a
 80085ee:	d015      	beq.n	800861c <_vfiprintf_r+0x120>
 80085f0:	9a07      	ldr	r2, [sp, #28]
 80085f2:	4654      	mov	r4, sl
 80085f4:	2000      	movs	r0, #0
 80085f6:	f04f 0c0a 	mov.w	ip, #10
 80085fa:	4621      	mov	r1, r4
 80085fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008600:	3b30      	subs	r3, #48	; 0x30
 8008602:	2b09      	cmp	r3, #9
 8008604:	d94d      	bls.n	80086a2 <_vfiprintf_r+0x1a6>
 8008606:	b1b0      	cbz	r0, 8008636 <_vfiprintf_r+0x13a>
 8008608:	9207      	str	r2, [sp, #28]
 800860a:	e014      	b.n	8008636 <_vfiprintf_r+0x13a>
 800860c:	eba0 0308 	sub.w	r3, r0, r8
 8008610:	fa09 f303 	lsl.w	r3, r9, r3
 8008614:	4313      	orrs	r3, r2
 8008616:	9304      	str	r3, [sp, #16]
 8008618:	46a2      	mov	sl, r4
 800861a:	e7d2      	b.n	80085c2 <_vfiprintf_r+0xc6>
 800861c:	9b03      	ldr	r3, [sp, #12]
 800861e:	1d19      	adds	r1, r3, #4
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	9103      	str	r1, [sp, #12]
 8008624:	2b00      	cmp	r3, #0
 8008626:	bfbb      	ittet	lt
 8008628:	425b      	neglt	r3, r3
 800862a:	f042 0202 	orrlt.w	r2, r2, #2
 800862e:	9307      	strge	r3, [sp, #28]
 8008630:	9307      	strlt	r3, [sp, #28]
 8008632:	bfb8      	it	lt
 8008634:	9204      	strlt	r2, [sp, #16]
 8008636:	7823      	ldrb	r3, [r4, #0]
 8008638:	2b2e      	cmp	r3, #46	; 0x2e
 800863a:	d10c      	bne.n	8008656 <_vfiprintf_r+0x15a>
 800863c:	7863      	ldrb	r3, [r4, #1]
 800863e:	2b2a      	cmp	r3, #42	; 0x2a
 8008640:	d134      	bne.n	80086ac <_vfiprintf_r+0x1b0>
 8008642:	9b03      	ldr	r3, [sp, #12]
 8008644:	1d1a      	adds	r2, r3, #4
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	9203      	str	r2, [sp, #12]
 800864a:	2b00      	cmp	r3, #0
 800864c:	bfb8      	it	lt
 800864e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008652:	3402      	adds	r4, #2
 8008654:	9305      	str	r3, [sp, #20]
 8008656:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800872c <_vfiprintf_r+0x230>
 800865a:	7821      	ldrb	r1, [r4, #0]
 800865c:	2203      	movs	r2, #3
 800865e:	4650      	mov	r0, sl
 8008660:	f7f7 fdbe 	bl	80001e0 <memchr>
 8008664:	b138      	cbz	r0, 8008676 <_vfiprintf_r+0x17a>
 8008666:	9b04      	ldr	r3, [sp, #16]
 8008668:	eba0 000a 	sub.w	r0, r0, sl
 800866c:	2240      	movs	r2, #64	; 0x40
 800866e:	4082      	lsls	r2, r0
 8008670:	4313      	orrs	r3, r2
 8008672:	3401      	adds	r4, #1
 8008674:	9304      	str	r3, [sp, #16]
 8008676:	f814 1b01 	ldrb.w	r1, [r4], #1
 800867a:	4829      	ldr	r0, [pc, #164]	; (8008720 <_vfiprintf_r+0x224>)
 800867c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008680:	2206      	movs	r2, #6
 8008682:	f7f7 fdad 	bl	80001e0 <memchr>
 8008686:	2800      	cmp	r0, #0
 8008688:	d03f      	beq.n	800870a <_vfiprintf_r+0x20e>
 800868a:	4b26      	ldr	r3, [pc, #152]	; (8008724 <_vfiprintf_r+0x228>)
 800868c:	bb1b      	cbnz	r3, 80086d6 <_vfiprintf_r+0x1da>
 800868e:	9b03      	ldr	r3, [sp, #12]
 8008690:	3307      	adds	r3, #7
 8008692:	f023 0307 	bic.w	r3, r3, #7
 8008696:	3308      	adds	r3, #8
 8008698:	9303      	str	r3, [sp, #12]
 800869a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800869c:	443b      	add	r3, r7
 800869e:	9309      	str	r3, [sp, #36]	; 0x24
 80086a0:	e768      	b.n	8008574 <_vfiprintf_r+0x78>
 80086a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80086a6:	460c      	mov	r4, r1
 80086a8:	2001      	movs	r0, #1
 80086aa:	e7a6      	b.n	80085fa <_vfiprintf_r+0xfe>
 80086ac:	2300      	movs	r3, #0
 80086ae:	3401      	adds	r4, #1
 80086b0:	9305      	str	r3, [sp, #20]
 80086b2:	4619      	mov	r1, r3
 80086b4:	f04f 0c0a 	mov.w	ip, #10
 80086b8:	4620      	mov	r0, r4
 80086ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086be:	3a30      	subs	r2, #48	; 0x30
 80086c0:	2a09      	cmp	r2, #9
 80086c2:	d903      	bls.n	80086cc <_vfiprintf_r+0x1d0>
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d0c6      	beq.n	8008656 <_vfiprintf_r+0x15a>
 80086c8:	9105      	str	r1, [sp, #20]
 80086ca:	e7c4      	b.n	8008656 <_vfiprintf_r+0x15a>
 80086cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80086d0:	4604      	mov	r4, r0
 80086d2:	2301      	movs	r3, #1
 80086d4:	e7f0      	b.n	80086b8 <_vfiprintf_r+0x1bc>
 80086d6:	ab03      	add	r3, sp, #12
 80086d8:	9300      	str	r3, [sp, #0]
 80086da:	462a      	mov	r2, r5
 80086dc:	4b12      	ldr	r3, [pc, #72]	; (8008728 <_vfiprintf_r+0x22c>)
 80086de:	a904      	add	r1, sp, #16
 80086e0:	4630      	mov	r0, r6
 80086e2:	f7fd fb9d 	bl	8005e20 <_printf_float>
 80086e6:	4607      	mov	r7, r0
 80086e8:	1c78      	adds	r0, r7, #1
 80086ea:	d1d6      	bne.n	800869a <_vfiprintf_r+0x19e>
 80086ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086ee:	07d9      	lsls	r1, r3, #31
 80086f0:	d405      	bmi.n	80086fe <_vfiprintf_r+0x202>
 80086f2:	89ab      	ldrh	r3, [r5, #12]
 80086f4:	059a      	lsls	r2, r3, #22
 80086f6:	d402      	bmi.n	80086fe <_vfiprintf_r+0x202>
 80086f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086fa:	f7fe f8fb 	bl	80068f4 <__retarget_lock_release_recursive>
 80086fe:	89ab      	ldrh	r3, [r5, #12]
 8008700:	065b      	lsls	r3, r3, #25
 8008702:	f53f af1d 	bmi.w	8008540 <_vfiprintf_r+0x44>
 8008706:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008708:	e71c      	b.n	8008544 <_vfiprintf_r+0x48>
 800870a:	ab03      	add	r3, sp, #12
 800870c:	9300      	str	r3, [sp, #0]
 800870e:	462a      	mov	r2, r5
 8008710:	4b05      	ldr	r3, [pc, #20]	; (8008728 <_vfiprintf_r+0x22c>)
 8008712:	a904      	add	r1, sp, #16
 8008714:	4630      	mov	r0, r6
 8008716:	f7fd fe27 	bl	8006368 <_printf_i>
 800871a:	e7e4      	b.n	80086e6 <_vfiprintf_r+0x1ea>
 800871c:	080095bc 	.word	0x080095bc
 8008720:	080095c6 	.word	0x080095c6
 8008724:	08005e21 	.word	0x08005e21
 8008728:	080084d9 	.word	0x080084d9
 800872c:	080095c2 	.word	0x080095c2

08008730 <__swbuf_r>:
 8008730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008732:	460e      	mov	r6, r1
 8008734:	4614      	mov	r4, r2
 8008736:	4605      	mov	r5, r0
 8008738:	b118      	cbz	r0, 8008742 <__swbuf_r+0x12>
 800873a:	6a03      	ldr	r3, [r0, #32]
 800873c:	b90b      	cbnz	r3, 8008742 <__swbuf_r+0x12>
 800873e:	f7fd ffc1 	bl	80066c4 <__sinit>
 8008742:	69a3      	ldr	r3, [r4, #24]
 8008744:	60a3      	str	r3, [r4, #8]
 8008746:	89a3      	ldrh	r3, [r4, #12]
 8008748:	071a      	lsls	r2, r3, #28
 800874a:	d525      	bpl.n	8008798 <__swbuf_r+0x68>
 800874c:	6923      	ldr	r3, [r4, #16]
 800874e:	b31b      	cbz	r3, 8008798 <__swbuf_r+0x68>
 8008750:	6823      	ldr	r3, [r4, #0]
 8008752:	6922      	ldr	r2, [r4, #16]
 8008754:	1a98      	subs	r0, r3, r2
 8008756:	6963      	ldr	r3, [r4, #20]
 8008758:	b2f6      	uxtb	r6, r6
 800875a:	4283      	cmp	r3, r0
 800875c:	4637      	mov	r7, r6
 800875e:	dc04      	bgt.n	800876a <__swbuf_r+0x3a>
 8008760:	4621      	mov	r1, r4
 8008762:	4628      	mov	r0, r5
 8008764:	f7ff fdac 	bl	80082c0 <_fflush_r>
 8008768:	b9e0      	cbnz	r0, 80087a4 <__swbuf_r+0x74>
 800876a:	68a3      	ldr	r3, [r4, #8]
 800876c:	3b01      	subs	r3, #1
 800876e:	60a3      	str	r3, [r4, #8]
 8008770:	6823      	ldr	r3, [r4, #0]
 8008772:	1c5a      	adds	r2, r3, #1
 8008774:	6022      	str	r2, [r4, #0]
 8008776:	701e      	strb	r6, [r3, #0]
 8008778:	6962      	ldr	r2, [r4, #20]
 800877a:	1c43      	adds	r3, r0, #1
 800877c:	429a      	cmp	r2, r3
 800877e:	d004      	beq.n	800878a <__swbuf_r+0x5a>
 8008780:	89a3      	ldrh	r3, [r4, #12]
 8008782:	07db      	lsls	r3, r3, #31
 8008784:	d506      	bpl.n	8008794 <__swbuf_r+0x64>
 8008786:	2e0a      	cmp	r6, #10
 8008788:	d104      	bne.n	8008794 <__swbuf_r+0x64>
 800878a:	4621      	mov	r1, r4
 800878c:	4628      	mov	r0, r5
 800878e:	f7ff fd97 	bl	80082c0 <_fflush_r>
 8008792:	b938      	cbnz	r0, 80087a4 <__swbuf_r+0x74>
 8008794:	4638      	mov	r0, r7
 8008796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008798:	4621      	mov	r1, r4
 800879a:	4628      	mov	r0, r5
 800879c:	f000 f806 	bl	80087ac <__swsetup_r>
 80087a0:	2800      	cmp	r0, #0
 80087a2:	d0d5      	beq.n	8008750 <__swbuf_r+0x20>
 80087a4:	f04f 37ff 	mov.w	r7, #4294967295
 80087a8:	e7f4      	b.n	8008794 <__swbuf_r+0x64>
	...

080087ac <__swsetup_r>:
 80087ac:	b538      	push	{r3, r4, r5, lr}
 80087ae:	4b2a      	ldr	r3, [pc, #168]	; (8008858 <__swsetup_r+0xac>)
 80087b0:	4605      	mov	r5, r0
 80087b2:	6818      	ldr	r0, [r3, #0]
 80087b4:	460c      	mov	r4, r1
 80087b6:	b118      	cbz	r0, 80087c0 <__swsetup_r+0x14>
 80087b8:	6a03      	ldr	r3, [r0, #32]
 80087ba:	b90b      	cbnz	r3, 80087c0 <__swsetup_r+0x14>
 80087bc:	f7fd ff82 	bl	80066c4 <__sinit>
 80087c0:	89a3      	ldrh	r3, [r4, #12]
 80087c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087c6:	0718      	lsls	r0, r3, #28
 80087c8:	d422      	bmi.n	8008810 <__swsetup_r+0x64>
 80087ca:	06d9      	lsls	r1, r3, #27
 80087cc:	d407      	bmi.n	80087de <__swsetup_r+0x32>
 80087ce:	2309      	movs	r3, #9
 80087d0:	602b      	str	r3, [r5, #0]
 80087d2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80087d6:	81a3      	strh	r3, [r4, #12]
 80087d8:	f04f 30ff 	mov.w	r0, #4294967295
 80087dc:	e034      	b.n	8008848 <__swsetup_r+0x9c>
 80087de:	0758      	lsls	r0, r3, #29
 80087e0:	d512      	bpl.n	8008808 <__swsetup_r+0x5c>
 80087e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087e4:	b141      	cbz	r1, 80087f8 <__swsetup_r+0x4c>
 80087e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087ea:	4299      	cmp	r1, r3
 80087ec:	d002      	beq.n	80087f4 <__swsetup_r+0x48>
 80087ee:	4628      	mov	r0, r5
 80087f0:	f7fe ff0c 	bl	800760c <_free_r>
 80087f4:	2300      	movs	r3, #0
 80087f6:	6363      	str	r3, [r4, #52]	; 0x34
 80087f8:	89a3      	ldrh	r3, [r4, #12]
 80087fa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80087fe:	81a3      	strh	r3, [r4, #12]
 8008800:	2300      	movs	r3, #0
 8008802:	6063      	str	r3, [r4, #4]
 8008804:	6923      	ldr	r3, [r4, #16]
 8008806:	6023      	str	r3, [r4, #0]
 8008808:	89a3      	ldrh	r3, [r4, #12]
 800880a:	f043 0308 	orr.w	r3, r3, #8
 800880e:	81a3      	strh	r3, [r4, #12]
 8008810:	6923      	ldr	r3, [r4, #16]
 8008812:	b94b      	cbnz	r3, 8008828 <__swsetup_r+0x7c>
 8008814:	89a3      	ldrh	r3, [r4, #12]
 8008816:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800881a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800881e:	d003      	beq.n	8008828 <__swsetup_r+0x7c>
 8008820:	4621      	mov	r1, r4
 8008822:	4628      	mov	r0, r5
 8008824:	f000 f884 	bl	8008930 <__smakebuf_r>
 8008828:	89a0      	ldrh	r0, [r4, #12]
 800882a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800882e:	f010 0301 	ands.w	r3, r0, #1
 8008832:	d00a      	beq.n	800884a <__swsetup_r+0x9e>
 8008834:	2300      	movs	r3, #0
 8008836:	60a3      	str	r3, [r4, #8]
 8008838:	6963      	ldr	r3, [r4, #20]
 800883a:	425b      	negs	r3, r3
 800883c:	61a3      	str	r3, [r4, #24]
 800883e:	6923      	ldr	r3, [r4, #16]
 8008840:	b943      	cbnz	r3, 8008854 <__swsetup_r+0xa8>
 8008842:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008846:	d1c4      	bne.n	80087d2 <__swsetup_r+0x26>
 8008848:	bd38      	pop	{r3, r4, r5, pc}
 800884a:	0781      	lsls	r1, r0, #30
 800884c:	bf58      	it	pl
 800884e:	6963      	ldrpl	r3, [r4, #20]
 8008850:	60a3      	str	r3, [r4, #8]
 8008852:	e7f4      	b.n	800883e <__swsetup_r+0x92>
 8008854:	2000      	movs	r0, #0
 8008856:	e7f7      	b.n	8008848 <__swsetup_r+0x9c>
 8008858:	20000074 	.word	0x20000074

0800885c <_raise_r>:
 800885c:	291f      	cmp	r1, #31
 800885e:	b538      	push	{r3, r4, r5, lr}
 8008860:	4604      	mov	r4, r0
 8008862:	460d      	mov	r5, r1
 8008864:	d904      	bls.n	8008870 <_raise_r+0x14>
 8008866:	2316      	movs	r3, #22
 8008868:	6003      	str	r3, [r0, #0]
 800886a:	f04f 30ff 	mov.w	r0, #4294967295
 800886e:	bd38      	pop	{r3, r4, r5, pc}
 8008870:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008872:	b112      	cbz	r2, 800887a <_raise_r+0x1e>
 8008874:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008878:	b94b      	cbnz	r3, 800888e <_raise_r+0x32>
 800887a:	4620      	mov	r0, r4
 800887c:	f000 f830 	bl	80088e0 <_getpid_r>
 8008880:	462a      	mov	r2, r5
 8008882:	4601      	mov	r1, r0
 8008884:	4620      	mov	r0, r4
 8008886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800888a:	f000 b817 	b.w	80088bc <_kill_r>
 800888e:	2b01      	cmp	r3, #1
 8008890:	d00a      	beq.n	80088a8 <_raise_r+0x4c>
 8008892:	1c59      	adds	r1, r3, #1
 8008894:	d103      	bne.n	800889e <_raise_r+0x42>
 8008896:	2316      	movs	r3, #22
 8008898:	6003      	str	r3, [r0, #0]
 800889a:	2001      	movs	r0, #1
 800889c:	e7e7      	b.n	800886e <_raise_r+0x12>
 800889e:	2400      	movs	r4, #0
 80088a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80088a4:	4628      	mov	r0, r5
 80088a6:	4798      	blx	r3
 80088a8:	2000      	movs	r0, #0
 80088aa:	e7e0      	b.n	800886e <_raise_r+0x12>

080088ac <raise>:
 80088ac:	4b02      	ldr	r3, [pc, #8]	; (80088b8 <raise+0xc>)
 80088ae:	4601      	mov	r1, r0
 80088b0:	6818      	ldr	r0, [r3, #0]
 80088b2:	f7ff bfd3 	b.w	800885c <_raise_r>
 80088b6:	bf00      	nop
 80088b8:	20000074 	.word	0x20000074

080088bc <_kill_r>:
 80088bc:	b538      	push	{r3, r4, r5, lr}
 80088be:	4d07      	ldr	r5, [pc, #28]	; (80088dc <_kill_r+0x20>)
 80088c0:	2300      	movs	r3, #0
 80088c2:	4604      	mov	r4, r0
 80088c4:	4608      	mov	r0, r1
 80088c6:	4611      	mov	r1, r2
 80088c8:	602b      	str	r3, [r5, #0]
 80088ca:	f7f8 fde3 	bl	8001494 <_kill>
 80088ce:	1c43      	adds	r3, r0, #1
 80088d0:	d102      	bne.n	80088d8 <_kill_r+0x1c>
 80088d2:	682b      	ldr	r3, [r5, #0]
 80088d4:	b103      	cbz	r3, 80088d8 <_kill_r+0x1c>
 80088d6:	6023      	str	r3, [r4, #0]
 80088d8:	bd38      	pop	{r3, r4, r5, pc}
 80088da:	bf00      	nop
 80088dc:	20000550 	.word	0x20000550

080088e0 <_getpid_r>:
 80088e0:	f7f8 bdd0 	b.w	8001484 <_getpid>

080088e4 <__swhatbuf_r>:
 80088e4:	b570      	push	{r4, r5, r6, lr}
 80088e6:	460c      	mov	r4, r1
 80088e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088ec:	2900      	cmp	r1, #0
 80088ee:	b096      	sub	sp, #88	; 0x58
 80088f0:	4615      	mov	r5, r2
 80088f2:	461e      	mov	r6, r3
 80088f4:	da0d      	bge.n	8008912 <__swhatbuf_r+0x2e>
 80088f6:	89a3      	ldrh	r3, [r4, #12]
 80088f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80088fc:	f04f 0100 	mov.w	r1, #0
 8008900:	bf0c      	ite	eq
 8008902:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008906:	2340      	movne	r3, #64	; 0x40
 8008908:	2000      	movs	r0, #0
 800890a:	6031      	str	r1, [r6, #0]
 800890c:	602b      	str	r3, [r5, #0]
 800890e:	b016      	add	sp, #88	; 0x58
 8008910:	bd70      	pop	{r4, r5, r6, pc}
 8008912:	466a      	mov	r2, sp
 8008914:	f000 f848 	bl	80089a8 <_fstat_r>
 8008918:	2800      	cmp	r0, #0
 800891a:	dbec      	blt.n	80088f6 <__swhatbuf_r+0x12>
 800891c:	9901      	ldr	r1, [sp, #4]
 800891e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008922:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008926:	4259      	negs	r1, r3
 8008928:	4159      	adcs	r1, r3
 800892a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800892e:	e7eb      	b.n	8008908 <__swhatbuf_r+0x24>

08008930 <__smakebuf_r>:
 8008930:	898b      	ldrh	r3, [r1, #12]
 8008932:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008934:	079d      	lsls	r5, r3, #30
 8008936:	4606      	mov	r6, r0
 8008938:	460c      	mov	r4, r1
 800893a:	d507      	bpl.n	800894c <__smakebuf_r+0x1c>
 800893c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008940:	6023      	str	r3, [r4, #0]
 8008942:	6123      	str	r3, [r4, #16]
 8008944:	2301      	movs	r3, #1
 8008946:	6163      	str	r3, [r4, #20]
 8008948:	b002      	add	sp, #8
 800894a:	bd70      	pop	{r4, r5, r6, pc}
 800894c:	ab01      	add	r3, sp, #4
 800894e:	466a      	mov	r2, sp
 8008950:	f7ff ffc8 	bl	80088e4 <__swhatbuf_r>
 8008954:	9900      	ldr	r1, [sp, #0]
 8008956:	4605      	mov	r5, r0
 8008958:	4630      	mov	r0, r6
 800895a:	f7fe fecb 	bl	80076f4 <_malloc_r>
 800895e:	b948      	cbnz	r0, 8008974 <__smakebuf_r+0x44>
 8008960:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008964:	059a      	lsls	r2, r3, #22
 8008966:	d4ef      	bmi.n	8008948 <__smakebuf_r+0x18>
 8008968:	f023 0303 	bic.w	r3, r3, #3
 800896c:	f043 0302 	orr.w	r3, r3, #2
 8008970:	81a3      	strh	r3, [r4, #12]
 8008972:	e7e3      	b.n	800893c <__smakebuf_r+0xc>
 8008974:	89a3      	ldrh	r3, [r4, #12]
 8008976:	6020      	str	r0, [r4, #0]
 8008978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800897c:	81a3      	strh	r3, [r4, #12]
 800897e:	9b00      	ldr	r3, [sp, #0]
 8008980:	6163      	str	r3, [r4, #20]
 8008982:	9b01      	ldr	r3, [sp, #4]
 8008984:	6120      	str	r0, [r4, #16]
 8008986:	b15b      	cbz	r3, 80089a0 <__smakebuf_r+0x70>
 8008988:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800898c:	4630      	mov	r0, r6
 800898e:	f000 f81d 	bl	80089cc <_isatty_r>
 8008992:	b128      	cbz	r0, 80089a0 <__smakebuf_r+0x70>
 8008994:	89a3      	ldrh	r3, [r4, #12]
 8008996:	f023 0303 	bic.w	r3, r3, #3
 800899a:	f043 0301 	orr.w	r3, r3, #1
 800899e:	81a3      	strh	r3, [r4, #12]
 80089a0:	89a3      	ldrh	r3, [r4, #12]
 80089a2:	431d      	orrs	r5, r3
 80089a4:	81a5      	strh	r5, [r4, #12]
 80089a6:	e7cf      	b.n	8008948 <__smakebuf_r+0x18>

080089a8 <_fstat_r>:
 80089a8:	b538      	push	{r3, r4, r5, lr}
 80089aa:	4d07      	ldr	r5, [pc, #28]	; (80089c8 <_fstat_r+0x20>)
 80089ac:	2300      	movs	r3, #0
 80089ae:	4604      	mov	r4, r0
 80089b0:	4608      	mov	r0, r1
 80089b2:	4611      	mov	r1, r2
 80089b4:	602b      	str	r3, [r5, #0]
 80089b6:	f7f8 fdcc 	bl	8001552 <_fstat>
 80089ba:	1c43      	adds	r3, r0, #1
 80089bc:	d102      	bne.n	80089c4 <_fstat_r+0x1c>
 80089be:	682b      	ldr	r3, [r5, #0]
 80089c0:	b103      	cbz	r3, 80089c4 <_fstat_r+0x1c>
 80089c2:	6023      	str	r3, [r4, #0]
 80089c4:	bd38      	pop	{r3, r4, r5, pc}
 80089c6:	bf00      	nop
 80089c8:	20000550 	.word	0x20000550

080089cc <_isatty_r>:
 80089cc:	b538      	push	{r3, r4, r5, lr}
 80089ce:	4d06      	ldr	r5, [pc, #24]	; (80089e8 <_isatty_r+0x1c>)
 80089d0:	2300      	movs	r3, #0
 80089d2:	4604      	mov	r4, r0
 80089d4:	4608      	mov	r0, r1
 80089d6:	602b      	str	r3, [r5, #0]
 80089d8:	f7f8 fdcb 	bl	8001572 <_isatty>
 80089dc:	1c43      	adds	r3, r0, #1
 80089de:	d102      	bne.n	80089e6 <_isatty_r+0x1a>
 80089e0:	682b      	ldr	r3, [r5, #0]
 80089e2:	b103      	cbz	r3, 80089e6 <_isatty_r+0x1a>
 80089e4:	6023      	str	r3, [r4, #0]
 80089e6:	bd38      	pop	{r3, r4, r5, pc}
 80089e8:	20000550 	.word	0x20000550
 80089ec:	00000000 	.word	0x00000000

080089f0 <exp>:
 80089f0:	b538      	push	{r3, r4, r5, lr}
 80089f2:	ed2d 8b02 	vpush	{d8}
 80089f6:	ec55 4b10 	vmov	r4, r5, d0
 80089fa:	f000 f895 	bl	8008b28 <__ieee754_exp>
 80089fe:	eeb0 8a40 	vmov.f32	s16, s0
 8008a02:	eef0 8a60 	vmov.f32	s17, s1
 8008a06:	ec45 4b10 	vmov	d0, r4, r5
 8008a0a:	f000 f877 	bl	8008afc <finite>
 8008a0e:	b168      	cbz	r0, 8008a2c <exp+0x3c>
 8008a10:	a317      	add	r3, pc, #92	; (adr r3, 8008a70 <exp+0x80>)
 8008a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a16:	4620      	mov	r0, r4
 8008a18:	4629      	mov	r1, r5
 8008a1a:	f7f8 f885 	bl	8000b28 <__aeabi_dcmpgt>
 8008a1e:	b160      	cbz	r0, 8008a3a <exp+0x4a>
 8008a20:	f7fd ff3c 	bl	800689c <__errno>
 8008a24:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8008a60 <exp+0x70>
 8008a28:	2322      	movs	r3, #34	; 0x22
 8008a2a:	6003      	str	r3, [r0, #0]
 8008a2c:	eeb0 0a48 	vmov.f32	s0, s16
 8008a30:	eef0 0a68 	vmov.f32	s1, s17
 8008a34:	ecbd 8b02 	vpop	{d8}
 8008a38:	bd38      	pop	{r3, r4, r5, pc}
 8008a3a:	a30f      	add	r3, pc, #60	; (adr r3, 8008a78 <exp+0x88>)
 8008a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a40:	4620      	mov	r0, r4
 8008a42:	4629      	mov	r1, r5
 8008a44:	f7f8 f852 	bl	8000aec <__aeabi_dcmplt>
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	d0ef      	beq.n	8008a2c <exp+0x3c>
 8008a4c:	f7fd ff26 	bl	800689c <__errno>
 8008a50:	2322      	movs	r3, #34	; 0x22
 8008a52:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8008a68 <exp+0x78>
 8008a56:	6003      	str	r3, [r0, #0]
 8008a58:	e7e8      	b.n	8008a2c <exp+0x3c>
 8008a5a:	bf00      	nop
 8008a5c:	f3af 8000 	nop.w
 8008a60:	00000000 	.word	0x00000000
 8008a64:	7ff00000 	.word	0x7ff00000
	...
 8008a70:	fefa39ef 	.word	0xfefa39ef
 8008a74:	40862e42 	.word	0x40862e42
 8008a78:	d52d3051 	.word	0xd52d3051
 8008a7c:	c0874910 	.word	0xc0874910

08008a80 <log>:
 8008a80:	b538      	push	{r3, r4, r5, lr}
 8008a82:	ed2d 8b02 	vpush	{d8}
 8008a86:	ec55 4b10 	vmov	r4, r5, d0
 8008a8a:	f000 f9d1 	bl	8008e30 <__ieee754_log>
 8008a8e:	4622      	mov	r2, r4
 8008a90:	462b      	mov	r3, r5
 8008a92:	4620      	mov	r0, r4
 8008a94:	4629      	mov	r1, r5
 8008a96:	eeb0 8a40 	vmov.f32	s16, s0
 8008a9a:	eef0 8a60 	vmov.f32	s17, s1
 8008a9e:	f7f8 f84d 	bl	8000b3c <__aeabi_dcmpun>
 8008aa2:	b998      	cbnz	r0, 8008acc <log+0x4c>
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	4629      	mov	r1, r5
 8008aac:	f7f8 f83c 	bl	8000b28 <__aeabi_dcmpgt>
 8008ab0:	b960      	cbnz	r0, 8008acc <log+0x4c>
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	4629      	mov	r1, r5
 8008aba:	f7f8 f80d 	bl	8000ad8 <__aeabi_dcmpeq>
 8008abe:	b160      	cbz	r0, 8008ada <log+0x5a>
 8008ac0:	f7fd feec 	bl	800689c <__errno>
 8008ac4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8008af0 <log+0x70>
 8008ac8:	2322      	movs	r3, #34	; 0x22
 8008aca:	6003      	str	r3, [r0, #0]
 8008acc:	eeb0 0a48 	vmov.f32	s0, s16
 8008ad0:	eef0 0a68 	vmov.f32	s1, s17
 8008ad4:	ecbd 8b02 	vpop	{d8}
 8008ad8:	bd38      	pop	{r3, r4, r5, pc}
 8008ada:	f7fd fedf 	bl	800689c <__errno>
 8008ade:	ecbd 8b02 	vpop	{d8}
 8008ae2:	2321      	movs	r3, #33	; 0x21
 8008ae4:	6003      	str	r3, [r0, #0]
 8008ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008aea:	4803      	ldr	r0, [pc, #12]	; (8008af8 <log+0x78>)
 8008aec:	f000 b814 	b.w	8008b18 <nan>
 8008af0:	00000000 	.word	0x00000000
 8008af4:	fff00000 	.word	0xfff00000
 8008af8:	08009612 	.word	0x08009612

08008afc <finite>:
 8008afc:	b082      	sub	sp, #8
 8008afe:	ed8d 0b00 	vstr	d0, [sp]
 8008b02:	9801      	ldr	r0, [sp, #4]
 8008b04:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008b08:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008b0c:	0fc0      	lsrs	r0, r0, #31
 8008b0e:	b002      	add	sp, #8
 8008b10:	4770      	bx	lr
 8008b12:	0000      	movs	r0, r0
 8008b14:	0000      	movs	r0, r0
	...

08008b18 <nan>:
 8008b18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008b20 <nan+0x8>
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop
 8008b20:	00000000 	.word	0x00000000
 8008b24:	7ff80000 	.word	0x7ff80000

08008b28 <__ieee754_exp>:
 8008b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b2c:	ec55 4b10 	vmov	r4, r5, d0
 8008b30:	49b5      	ldr	r1, [pc, #724]	; (8008e08 <__ieee754_exp+0x2e0>)
 8008b32:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8008b36:	428a      	cmp	r2, r1
 8008b38:	ed2d 8b04 	vpush	{d8-d9}
 8008b3c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8008b40:	d93b      	bls.n	8008bba <__ieee754_exp+0x92>
 8008b42:	49b2      	ldr	r1, [pc, #712]	; (8008e0c <__ieee754_exp+0x2e4>)
 8008b44:	428a      	cmp	r2, r1
 8008b46:	d916      	bls.n	8008b76 <__ieee754_exp+0x4e>
 8008b48:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008b4c:	4323      	orrs	r3, r4
 8008b4e:	ee10 2a10 	vmov	r2, s0
 8008b52:	d007      	beq.n	8008b64 <__ieee754_exp+0x3c>
 8008b54:	462b      	mov	r3, r5
 8008b56:	4620      	mov	r0, r4
 8008b58:	4629      	mov	r1, r5
 8008b5a:	f7f7 fb9f 	bl	800029c <__adddf3>
 8008b5e:	4604      	mov	r4, r0
 8008b60:	460d      	mov	r5, r1
 8008b62:	e002      	b.n	8008b6a <__ieee754_exp+0x42>
 8008b64:	b10e      	cbz	r6, 8008b6a <__ieee754_exp+0x42>
 8008b66:	2400      	movs	r4, #0
 8008b68:	2500      	movs	r5, #0
 8008b6a:	ecbd 8b04 	vpop	{d8-d9}
 8008b6e:	ec45 4b10 	vmov	d0, r4, r5
 8008b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b76:	a38e      	add	r3, pc, #568	; (adr r3, 8008db0 <__ieee754_exp+0x288>)
 8008b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7c:	ee10 0a10 	vmov	r0, s0
 8008b80:	4629      	mov	r1, r5
 8008b82:	f7f7 ffd1 	bl	8000b28 <__aeabi_dcmpgt>
 8008b86:	4607      	mov	r7, r0
 8008b88:	b130      	cbz	r0, 8008b98 <__ieee754_exp+0x70>
 8008b8a:	ecbd 8b04 	vpop	{d8-d9}
 8008b8e:	2000      	movs	r0, #0
 8008b90:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b94:	f000 bb2d 	b.w	80091f2 <__math_oflow>
 8008b98:	a387      	add	r3, pc, #540	; (adr r3, 8008db8 <__ieee754_exp+0x290>)
 8008b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	4629      	mov	r1, r5
 8008ba2:	f7f7 ffa3 	bl	8000aec <__aeabi_dcmplt>
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	f000 808b 	beq.w	8008cc2 <__ieee754_exp+0x19a>
 8008bac:	ecbd 8b04 	vpop	{d8-d9}
 8008bb0:	4638      	mov	r0, r7
 8008bb2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bb6:	f000 bb13 	b.w	80091e0 <__math_uflow>
 8008bba:	4b95      	ldr	r3, [pc, #596]	; (8008e10 <__ieee754_exp+0x2e8>)
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	f240 80ac 	bls.w	8008d1a <__ieee754_exp+0x1f2>
 8008bc2:	4b94      	ldr	r3, [pc, #592]	; (8008e14 <__ieee754_exp+0x2ec>)
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d87c      	bhi.n	8008cc2 <__ieee754_exp+0x19a>
 8008bc8:	4b93      	ldr	r3, [pc, #588]	; (8008e18 <__ieee754_exp+0x2f0>)
 8008bca:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd2:	ee10 0a10 	vmov	r0, s0
 8008bd6:	4629      	mov	r1, r5
 8008bd8:	f7f7 fb5e 	bl	8000298 <__aeabi_dsub>
 8008bdc:	4b8f      	ldr	r3, [pc, #572]	; (8008e1c <__ieee754_exp+0x2f4>)
 8008bde:	00f7      	lsls	r7, r6, #3
 8008be0:	443b      	add	r3, r7
 8008be2:	ed93 7b00 	vldr	d7, [r3]
 8008be6:	f1c6 0a01 	rsb	sl, r6, #1
 8008bea:	4680      	mov	r8, r0
 8008bec:	4689      	mov	r9, r1
 8008bee:	ebaa 0a06 	sub.w	sl, sl, r6
 8008bf2:	eeb0 8a47 	vmov.f32	s16, s14
 8008bf6:	eef0 8a67 	vmov.f32	s17, s15
 8008bfa:	ec53 2b18 	vmov	r2, r3, d8
 8008bfe:	4640      	mov	r0, r8
 8008c00:	4649      	mov	r1, r9
 8008c02:	f7f7 fb49 	bl	8000298 <__aeabi_dsub>
 8008c06:	4604      	mov	r4, r0
 8008c08:	460d      	mov	r5, r1
 8008c0a:	4622      	mov	r2, r4
 8008c0c:	462b      	mov	r3, r5
 8008c0e:	4620      	mov	r0, r4
 8008c10:	4629      	mov	r1, r5
 8008c12:	f7f7 fcf9 	bl	8000608 <__aeabi_dmul>
 8008c16:	a36a      	add	r3, pc, #424	; (adr r3, 8008dc0 <__ieee754_exp+0x298>)
 8008c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1c:	4606      	mov	r6, r0
 8008c1e:	460f      	mov	r7, r1
 8008c20:	f7f7 fcf2 	bl	8000608 <__aeabi_dmul>
 8008c24:	a368      	add	r3, pc, #416	; (adr r3, 8008dc8 <__ieee754_exp+0x2a0>)
 8008c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2a:	f7f7 fb35 	bl	8000298 <__aeabi_dsub>
 8008c2e:	4632      	mov	r2, r6
 8008c30:	463b      	mov	r3, r7
 8008c32:	f7f7 fce9 	bl	8000608 <__aeabi_dmul>
 8008c36:	a366      	add	r3, pc, #408	; (adr r3, 8008dd0 <__ieee754_exp+0x2a8>)
 8008c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3c:	f7f7 fb2e 	bl	800029c <__adddf3>
 8008c40:	4632      	mov	r2, r6
 8008c42:	463b      	mov	r3, r7
 8008c44:	f7f7 fce0 	bl	8000608 <__aeabi_dmul>
 8008c48:	a363      	add	r3, pc, #396	; (adr r3, 8008dd8 <__ieee754_exp+0x2b0>)
 8008c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4e:	f7f7 fb23 	bl	8000298 <__aeabi_dsub>
 8008c52:	4632      	mov	r2, r6
 8008c54:	463b      	mov	r3, r7
 8008c56:	f7f7 fcd7 	bl	8000608 <__aeabi_dmul>
 8008c5a:	a361      	add	r3, pc, #388	; (adr r3, 8008de0 <__ieee754_exp+0x2b8>)
 8008c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c60:	f7f7 fb1c 	bl	800029c <__adddf3>
 8008c64:	4632      	mov	r2, r6
 8008c66:	463b      	mov	r3, r7
 8008c68:	f7f7 fcce 	bl	8000608 <__aeabi_dmul>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	460b      	mov	r3, r1
 8008c70:	4620      	mov	r0, r4
 8008c72:	4629      	mov	r1, r5
 8008c74:	f7f7 fb10 	bl	8000298 <__aeabi_dsub>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	4606      	mov	r6, r0
 8008c7e:	460f      	mov	r7, r1
 8008c80:	4620      	mov	r0, r4
 8008c82:	4629      	mov	r1, r5
 8008c84:	f7f7 fcc0 	bl	8000608 <__aeabi_dmul>
 8008c88:	ec41 0b19 	vmov	d9, r0, r1
 8008c8c:	f1ba 0f00 	cmp.w	sl, #0
 8008c90:	d15d      	bne.n	8008d4e <__ieee754_exp+0x226>
 8008c92:	2200      	movs	r2, #0
 8008c94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008c98:	4630      	mov	r0, r6
 8008c9a:	4639      	mov	r1, r7
 8008c9c:	f7f7 fafc 	bl	8000298 <__aeabi_dsub>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	ec51 0b19 	vmov	r0, r1, d9
 8008ca8:	f7f7 fdd8 	bl	800085c <__aeabi_ddiv>
 8008cac:	4622      	mov	r2, r4
 8008cae:	462b      	mov	r3, r5
 8008cb0:	f7f7 faf2 	bl	8000298 <__aeabi_dsub>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	2000      	movs	r0, #0
 8008cba:	4959      	ldr	r1, [pc, #356]	; (8008e20 <__ieee754_exp+0x2f8>)
 8008cbc:	f7f7 faec 	bl	8000298 <__aeabi_dsub>
 8008cc0:	e74d      	b.n	8008b5e <__ieee754_exp+0x36>
 8008cc2:	4b58      	ldr	r3, [pc, #352]	; (8008e24 <__ieee754_exp+0x2fc>)
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008cca:	4629      	mov	r1, r5
 8008ccc:	a346      	add	r3, pc, #280	; (adr r3, 8008de8 <__ieee754_exp+0x2c0>)
 8008cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd2:	f7f7 fc99 	bl	8000608 <__aeabi_dmul>
 8008cd6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008cda:	f7f7 fadf 	bl	800029c <__adddf3>
 8008cde:	f7f7 ff43 	bl	8000b68 <__aeabi_d2iz>
 8008ce2:	4682      	mov	sl, r0
 8008ce4:	f7f7 fc26 	bl	8000534 <__aeabi_i2d>
 8008ce8:	a341      	add	r3, pc, #260	; (adr r3, 8008df0 <__ieee754_exp+0x2c8>)
 8008cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cee:	4606      	mov	r6, r0
 8008cf0:	460f      	mov	r7, r1
 8008cf2:	f7f7 fc89 	bl	8000608 <__aeabi_dmul>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	4629      	mov	r1, r5
 8008cfe:	f7f7 facb 	bl	8000298 <__aeabi_dsub>
 8008d02:	a33d      	add	r3, pc, #244	; (adr r3, 8008df8 <__ieee754_exp+0x2d0>)
 8008d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d08:	4680      	mov	r8, r0
 8008d0a:	4689      	mov	r9, r1
 8008d0c:	4630      	mov	r0, r6
 8008d0e:	4639      	mov	r1, r7
 8008d10:	f7f7 fc7a 	bl	8000608 <__aeabi_dmul>
 8008d14:	ec41 0b18 	vmov	d8, r0, r1
 8008d18:	e76f      	b.n	8008bfa <__ieee754_exp+0xd2>
 8008d1a:	4b43      	ldr	r3, [pc, #268]	; (8008e28 <__ieee754_exp+0x300>)
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d811      	bhi.n	8008d44 <__ieee754_exp+0x21c>
 8008d20:	a337      	add	r3, pc, #220	; (adr r3, 8008e00 <__ieee754_exp+0x2d8>)
 8008d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d26:	ee10 0a10 	vmov	r0, s0
 8008d2a:	4629      	mov	r1, r5
 8008d2c:	f7f7 fab6 	bl	800029c <__adddf3>
 8008d30:	4b3b      	ldr	r3, [pc, #236]	; (8008e20 <__ieee754_exp+0x2f8>)
 8008d32:	2200      	movs	r2, #0
 8008d34:	f7f7 fef8 	bl	8000b28 <__aeabi_dcmpgt>
 8008d38:	b138      	cbz	r0, 8008d4a <__ieee754_exp+0x222>
 8008d3a:	4b39      	ldr	r3, [pc, #228]	; (8008e20 <__ieee754_exp+0x2f8>)
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	4620      	mov	r0, r4
 8008d40:	4629      	mov	r1, r5
 8008d42:	e70a      	b.n	8008b5a <__ieee754_exp+0x32>
 8008d44:	f04f 0a00 	mov.w	sl, #0
 8008d48:	e75f      	b.n	8008c0a <__ieee754_exp+0xe2>
 8008d4a:	4682      	mov	sl, r0
 8008d4c:	e75d      	b.n	8008c0a <__ieee754_exp+0xe2>
 8008d4e:	4632      	mov	r2, r6
 8008d50:	463b      	mov	r3, r7
 8008d52:	2000      	movs	r0, #0
 8008d54:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008d58:	f7f7 fa9e 	bl	8000298 <__aeabi_dsub>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	460b      	mov	r3, r1
 8008d60:	ec51 0b19 	vmov	r0, r1, d9
 8008d64:	f7f7 fd7a 	bl	800085c <__aeabi_ddiv>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	ec51 0b18 	vmov	r0, r1, d8
 8008d70:	f7f7 fa92 	bl	8000298 <__aeabi_dsub>
 8008d74:	4642      	mov	r2, r8
 8008d76:	464b      	mov	r3, r9
 8008d78:	f7f7 fa8e 	bl	8000298 <__aeabi_dsub>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	460b      	mov	r3, r1
 8008d80:	2000      	movs	r0, #0
 8008d82:	4927      	ldr	r1, [pc, #156]	; (8008e20 <__ieee754_exp+0x2f8>)
 8008d84:	f7f7 fa88 	bl	8000298 <__aeabi_dsub>
 8008d88:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8008d8c:	4592      	cmp	sl, r2
 8008d8e:	db02      	blt.n	8008d96 <__ieee754_exp+0x26e>
 8008d90:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8008d94:	e6e3      	b.n	8008b5e <__ieee754_exp+0x36>
 8008d96:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8008d9a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8008da4:	f7f7 fc30 	bl	8000608 <__aeabi_dmul>
 8008da8:	e6d9      	b.n	8008b5e <__ieee754_exp+0x36>
 8008daa:	bf00      	nop
 8008dac:	f3af 8000 	nop.w
 8008db0:	fefa39ef 	.word	0xfefa39ef
 8008db4:	40862e42 	.word	0x40862e42
 8008db8:	d52d3051 	.word	0xd52d3051
 8008dbc:	c0874910 	.word	0xc0874910
 8008dc0:	72bea4d0 	.word	0x72bea4d0
 8008dc4:	3e663769 	.word	0x3e663769
 8008dc8:	c5d26bf1 	.word	0xc5d26bf1
 8008dcc:	3ebbbd41 	.word	0x3ebbbd41
 8008dd0:	af25de2c 	.word	0xaf25de2c
 8008dd4:	3f11566a 	.word	0x3f11566a
 8008dd8:	16bebd93 	.word	0x16bebd93
 8008ddc:	3f66c16c 	.word	0x3f66c16c
 8008de0:	5555553e 	.word	0x5555553e
 8008de4:	3fc55555 	.word	0x3fc55555
 8008de8:	652b82fe 	.word	0x652b82fe
 8008dec:	3ff71547 	.word	0x3ff71547
 8008df0:	fee00000 	.word	0xfee00000
 8008df4:	3fe62e42 	.word	0x3fe62e42
 8008df8:	35793c76 	.word	0x35793c76
 8008dfc:	3dea39ef 	.word	0x3dea39ef
 8008e00:	8800759c 	.word	0x8800759c
 8008e04:	7e37e43c 	.word	0x7e37e43c
 8008e08:	40862e41 	.word	0x40862e41
 8008e0c:	7fefffff 	.word	0x7fefffff
 8008e10:	3fd62e42 	.word	0x3fd62e42
 8008e14:	3ff0a2b1 	.word	0x3ff0a2b1
 8008e18:	08009628 	.word	0x08009628
 8008e1c:	08009638 	.word	0x08009638
 8008e20:	3ff00000 	.word	0x3ff00000
 8008e24:	08009618 	.word	0x08009618
 8008e28:	3defffff 	.word	0x3defffff
 8008e2c:	00000000 	.word	0x00000000

08008e30 <__ieee754_log>:
 8008e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e34:	ec51 0b10 	vmov	r0, r1, d0
 8008e38:	ed2d 8b04 	vpush	{d8-d9}
 8008e3c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008e40:	b083      	sub	sp, #12
 8008e42:	460d      	mov	r5, r1
 8008e44:	da29      	bge.n	8008e9a <__ieee754_log+0x6a>
 8008e46:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008e4a:	4303      	orrs	r3, r0
 8008e4c:	ee10 2a10 	vmov	r2, s0
 8008e50:	d10c      	bne.n	8008e6c <__ieee754_log+0x3c>
 8008e52:	49cf      	ldr	r1, [pc, #828]	; (8009190 <__ieee754_log+0x360>)
 8008e54:	2200      	movs	r2, #0
 8008e56:	2300      	movs	r3, #0
 8008e58:	2000      	movs	r0, #0
 8008e5a:	f7f7 fcff 	bl	800085c <__aeabi_ddiv>
 8008e5e:	ec41 0b10 	vmov	d0, r0, r1
 8008e62:	b003      	add	sp, #12
 8008e64:	ecbd 8b04 	vpop	{d8-d9}
 8008e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e6c:	2900      	cmp	r1, #0
 8008e6e:	da05      	bge.n	8008e7c <__ieee754_log+0x4c>
 8008e70:	460b      	mov	r3, r1
 8008e72:	f7f7 fa11 	bl	8000298 <__aeabi_dsub>
 8008e76:	2200      	movs	r2, #0
 8008e78:	2300      	movs	r3, #0
 8008e7a:	e7ee      	b.n	8008e5a <__ieee754_log+0x2a>
 8008e7c:	4bc5      	ldr	r3, [pc, #788]	; (8009194 <__ieee754_log+0x364>)
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f7f7 fbc2 	bl	8000608 <__aeabi_dmul>
 8008e84:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8008e88:	460d      	mov	r5, r1
 8008e8a:	4ac3      	ldr	r2, [pc, #780]	; (8009198 <__ieee754_log+0x368>)
 8008e8c:	4295      	cmp	r5, r2
 8008e8e:	dd06      	ble.n	8008e9e <__ieee754_log+0x6e>
 8008e90:	4602      	mov	r2, r0
 8008e92:	460b      	mov	r3, r1
 8008e94:	f7f7 fa02 	bl	800029c <__adddf3>
 8008e98:	e7e1      	b.n	8008e5e <__ieee754_log+0x2e>
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	e7f5      	b.n	8008e8a <__ieee754_log+0x5a>
 8008e9e:	152c      	asrs	r4, r5, #20
 8008ea0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008ea4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8008ea8:	441c      	add	r4, r3
 8008eaa:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8008eae:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8008eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008eb6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8008eba:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8008ebe:	ea42 0105 	orr.w	r1, r2, r5
 8008ec2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	4bb4      	ldr	r3, [pc, #720]	; (800919c <__ieee754_log+0x36c>)
 8008eca:	f7f7 f9e5 	bl	8000298 <__aeabi_dsub>
 8008ece:	1cab      	adds	r3, r5, #2
 8008ed0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ed4:	2b02      	cmp	r3, #2
 8008ed6:	4682      	mov	sl, r0
 8008ed8:	468b      	mov	fp, r1
 8008eda:	f04f 0200 	mov.w	r2, #0
 8008ede:	dc53      	bgt.n	8008f88 <__ieee754_log+0x158>
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	f7f7 fdf9 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ee6:	b1d0      	cbz	r0, 8008f1e <__ieee754_log+0xee>
 8008ee8:	2c00      	cmp	r4, #0
 8008eea:	f000 8122 	beq.w	8009132 <__ieee754_log+0x302>
 8008eee:	4620      	mov	r0, r4
 8008ef0:	f7f7 fb20 	bl	8000534 <__aeabi_i2d>
 8008ef4:	a390      	add	r3, pc, #576	; (adr r3, 8009138 <__ieee754_log+0x308>)
 8008ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efa:	4606      	mov	r6, r0
 8008efc:	460f      	mov	r7, r1
 8008efe:	f7f7 fb83 	bl	8000608 <__aeabi_dmul>
 8008f02:	a38f      	add	r3, pc, #572	; (adr r3, 8009140 <__ieee754_log+0x310>)
 8008f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f08:	4604      	mov	r4, r0
 8008f0a:	460d      	mov	r5, r1
 8008f0c:	4630      	mov	r0, r6
 8008f0e:	4639      	mov	r1, r7
 8008f10:	f7f7 fb7a 	bl	8000608 <__aeabi_dmul>
 8008f14:	4602      	mov	r2, r0
 8008f16:	460b      	mov	r3, r1
 8008f18:	4620      	mov	r0, r4
 8008f1a:	4629      	mov	r1, r5
 8008f1c:	e7ba      	b.n	8008e94 <__ieee754_log+0x64>
 8008f1e:	a38a      	add	r3, pc, #552	; (adr r3, 8009148 <__ieee754_log+0x318>)
 8008f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f24:	4650      	mov	r0, sl
 8008f26:	4659      	mov	r1, fp
 8008f28:	f7f7 fb6e 	bl	8000608 <__aeabi_dmul>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	460b      	mov	r3, r1
 8008f30:	2000      	movs	r0, #0
 8008f32:	499b      	ldr	r1, [pc, #620]	; (80091a0 <__ieee754_log+0x370>)
 8008f34:	f7f7 f9b0 	bl	8000298 <__aeabi_dsub>
 8008f38:	4652      	mov	r2, sl
 8008f3a:	4606      	mov	r6, r0
 8008f3c:	460f      	mov	r7, r1
 8008f3e:	465b      	mov	r3, fp
 8008f40:	4650      	mov	r0, sl
 8008f42:	4659      	mov	r1, fp
 8008f44:	f7f7 fb60 	bl	8000608 <__aeabi_dmul>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	4630      	mov	r0, r6
 8008f4e:	4639      	mov	r1, r7
 8008f50:	f7f7 fb5a 	bl	8000608 <__aeabi_dmul>
 8008f54:	4606      	mov	r6, r0
 8008f56:	460f      	mov	r7, r1
 8008f58:	b914      	cbnz	r4, 8008f60 <__ieee754_log+0x130>
 8008f5a:	4632      	mov	r2, r6
 8008f5c:	463b      	mov	r3, r7
 8008f5e:	e0a2      	b.n	80090a6 <__ieee754_log+0x276>
 8008f60:	4620      	mov	r0, r4
 8008f62:	f7f7 fae7 	bl	8000534 <__aeabi_i2d>
 8008f66:	a374      	add	r3, pc, #464	; (adr r3, 8009138 <__ieee754_log+0x308>)
 8008f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f6c:	4680      	mov	r8, r0
 8008f6e:	4689      	mov	r9, r1
 8008f70:	f7f7 fb4a 	bl	8000608 <__aeabi_dmul>
 8008f74:	a372      	add	r3, pc, #456	; (adr r3, 8009140 <__ieee754_log+0x310>)
 8008f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f7a:	4604      	mov	r4, r0
 8008f7c:	460d      	mov	r5, r1
 8008f7e:	4640      	mov	r0, r8
 8008f80:	4649      	mov	r1, r9
 8008f82:	f7f7 fb41 	bl	8000608 <__aeabi_dmul>
 8008f86:	e0a7      	b.n	80090d8 <__ieee754_log+0x2a8>
 8008f88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008f8c:	f7f7 f986 	bl	800029c <__adddf3>
 8008f90:	4602      	mov	r2, r0
 8008f92:	460b      	mov	r3, r1
 8008f94:	4650      	mov	r0, sl
 8008f96:	4659      	mov	r1, fp
 8008f98:	f7f7 fc60 	bl	800085c <__aeabi_ddiv>
 8008f9c:	ec41 0b18 	vmov	d8, r0, r1
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	f7f7 fac7 	bl	8000534 <__aeabi_i2d>
 8008fa6:	ec53 2b18 	vmov	r2, r3, d8
 8008faa:	ec41 0b19 	vmov	d9, r0, r1
 8008fae:	ec51 0b18 	vmov	r0, r1, d8
 8008fb2:	f7f7 fb29 	bl	8000608 <__aeabi_dmul>
 8008fb6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8008fba:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8008fbe:	9301      	str	r3, [sp, #4]
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	4680      	mov	r8, r0
 8008fc6:	4689      	mov	r9, r1
 8008fc8:	f7f7 fb1e 	bl	8000608 <__aeabi_dmul>
 8008fcc:	a360      	add	r3, pc, #384	; (adr r3, 8009150 <__ieee754_log+0x320>)
 8008fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd2:	4606      	mov	r6, r0
 8008fd4:	460f      	mov	r7, r1
 8008fd6:	f7f7 fb17 	bl	8000608 <__aeabi_dmul>
 8008fda:	a35f      	add	r3, pc, #380	; (adr r3, 8009158 <__ieee754_log+0x328>)
 8008fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe0:	f7f7 f95c 	bl	800029c <__adddf3>
 8008fe4:	4632      	mov	r2, r6
 8008fe6:	463b      	mov	r3, r7
 8008fe8:	f7f7 fb0e 	bl	8000608 <__aeabi_dmul>
 8008fec:	a35c      	add	r3, pc, #368	; (adr r3, 8009160 <__ieee754_log+0x330>)
 8008fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff2:	f7f7 f953 	bl	800029c <__adddf3>
 8008ff6:	4632      	mov	r2, r6
 8008ff8:	463b      	mov	r3, r7
 8008ffa:	f7f7 fb05 	bl	8000608 <__aeabi_dmul>
 8008ffe:	a35a      	add	r3, pc, #360	; (adr r3, 8009168 <__ieee754_log+0x338>)
 8009000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009004:	f7f7 f94a 	bl	800029c <__adddf3>
 8009008:	4642      	mov	r2, r8
 800900a:	464b      	mov	r3, r9
 800900c:	f7f7 fafc 	bl	8000608 <__aeabi_dmul>
 8009010:	a357      	add	r3, pc, #348	; (adr r3, 8009170 <__ieee754_log+0x340>)
 8009012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009016:	4680      	mov	r8, r0
 8009018:	4689      	mov	r9, r1
 800901a:	4630      	mov	r0, r6
 800901c:	4639      	mov	r1, r7
 800901e:	f7f7 faf3 	bl	8000608 <__aeabi_dmul>
 8009022:	a355      	add	r3, pc, #340	; (adr r3, 8009178 <__ieee754_log+0x348>)
 8009024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009028:	f7f7 f938 	bl	800029c <__adddf3>
 800902c:	4632      	mov	r2, r6
 800902e:	463b      	mov	r3, r7
 8009030:	f7f7 faea 	bl	8000608 <__aeabi_dmul>
 8009034:	a352      	add	r3, pc, #328	; (adr r3, 8009180 <__ieee754_log+0x350>)
 8009036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903a:	f7f7 f92f 	bl	800029c <__adddf3>
 800903e:	4632      	mov	r2, r6
 8009040:	463b      	mov	r3, r7
 8009042:	f7f7 fae1 	bl	8000608 <__aeabi_dmul>
 8009046:	460b      	mov	r3, r1
 8009048:	4602      	mov	r2, r0
 800904a:	4649      	mov	r1, r9
 800904c:	4640      	mov	r0, r8
 800904e:	f7f7 f925 	bl	800029c <__adddf3>
 8009052:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8009056:	9b01      	ldr	r3, [sp, #4]
 8009058:	3551      	adds	r5, #81	; 0x51
 800905a:	431d      	orrs	r5, r3
 800905c:	2d00      	cmp	r5, #0
 800905e:	4680      	mov	r8, r0
 8009060:	4689      	mov	r9, r1
 8009062:	dd48      	ble.n	80090f6 <__ieee754_log+0x2c6>
 8009064:	4b4e      	ldr	r3, [pc, #312]	; (80091a0 <__ieee754_log+0x370>)
 8009066:	2200      	movs	r2, #0
 8009068:	4650      	mov	r0, sl
 800906a:	4659      	mov	r1, fp
 800906c:	f7f7 facc 	bl	8000608 <__aeabi_dmul>
 8009070:	4652      	mov	r2, sl
 8009072:	465b      	mov	r3, fp
 8009074:	f7f7 fac8 	bl	8000608 <__aeabi_dmul>
 8009078:	4602      	mov	r2, r0
 800907a:	460b      	mov	r3, r1
 800907c:	4606      	mov	r6, r0
 800907e:	460f      	mov	r7, r1
 8009080:	4640      	mov	r0, r8
 8009082:	4649      	mov	r1, r9
 8009084:	f7f7 f90a 	bl	800029c <__adddf3>
 8009088:	ec53 2b18 	vmov	r2, r3, d8
 800908c:	f7f7 fabc 	bl	8000608 <__aeabi_dmul>
 8009090:	4680      	mov	r8, r0
 8009092:	4689      	mov	r9, r1
 8009094:	b964      	cbnz	r4, 80090b0 <__ieee754_log+0x280>
 8009096:	4602      	mov	r2, r0
 8009098:	460b      	mov	r3, r1
 800909a:	4630      	mov	r0, r6
 800909c:	4639      	mov	r1, r7
 800909e:	f7f7 f8fb 	bl	8000298 <__aeabi_dsub>
 80090a2:	4602      	mov	r2, r0
 80090a4:	460b      	mov	r3, r1
 80090a6:	4650      	mov	r0, sl
 80090a8:	4659      	mov	r1, fp
 80090aa:	f7f7 f8f5 	bl	8000298 <__aeabi_dsub>
 80090ae:	e6d6      	b.n	8008e5e <__ieee754_log+0x2e>
 80090b0:	a321      	add	r3, pc, #132	; (adr r3, 8009138 <__ieee754_log+0x308>)
 80090b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b6:	ec51 0b19 	vmov	r0, r1, d9
 80090ba:	f7f7 faa5 	bl	8000608 <__aeabi_dmul>
 80090be:	a320      	add	r3, pc, #128	; (adr r3, 8009140 <__ieee754_log+0x310>)
 80090c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c4:	4604      	mov	r4, r0
 80090c6:	460d      	mov	r5, r1
 80090c8:	ec51 0b19 	vmov	r0, r1, d9
 80090cc:	f7f7 fa9c 	bl	8000608 <__aeabi_dmul>
 80090d0:	4642      	mov	r2, r8
 80090d2:	464b      	mov	r3, r9
 80090d4:	f7f7 f8e2 	bl	800029c <__adddf3>
 80090d8:	4602      	mov	r2, r0
 80090da:	460b      	mov	r3, r1
 80090dc:	4630      	mov	r0, r6
 80090de:	4639      	mov	r1, r7
 80090e0:	f7f7 f8da 	bl	8000298 <__aeabi_dsub>
 80090e4:	4652      	mov	r2, sl
 80090e6:	465b      	mov	r3, fp
 80090e8:	f7f7 f8d6 	bl	8000298 <__aeabi_dsub>
 80090ec:	4602      	mov	r2, r0
 80090ee:	460b      	mov	r3, r1
 80090f0:	4620      	mov	r0, r4
 80090f2:	4629      	mov	r1, r5
 80090f4:	e7d9      	b.n	80090aa <__ieee754_log+0x27a>
 80090f6:	4602      	mov	r2, r0
 80090f8:	460b      	mov	r3, r1
 80090fa:	4650      	mov	r0, sl
 80090fc:	4659      	mov	r1, fp
 80090fe:	f7f7 f8cb 	bl	8000298 <__aeabi_dsub>
 8009102:	ec53 2b18 	vmov	r2, r3, d8
 8009106:	f7f7 fa7f 	bl	8000608 <__aeabi_dmul>
 800910a:	4606      	mov	r6, r0
 800910c:	460f      	mov	r7, r1
 800910e:	2c00      	cmp	r4, #0
 8009110:	f43f af23 	beq.w	8008f5a <__ieee754_log+0x12a>
 8009114:	a308      	add	r3, pc, #32	; (adr r3, 8009138 <__ieee754_log+0x308>)
 8009116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911a:	ec51 0b19 	vmov	r0, r1, d9
 800911e:	f7f7 fa73 	bl	8000608 <__aeabi_dmul>
 8009122:	a307      	add	r3, pc, #28	; (adr r3, 8009140 <__ieee754_log+0x310>)
 8009124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009128:	4604      	mov	r4, r0
 800912a:	460d      	mov	r5, r1
 800912c:	ec51 0b19 	vmov	r0, r1, d9
 8009130:	e727      	b.n	8008f82 <__ieee754_log+0x152>
 8009132:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8009188 <__ieee754_log+0x358>
 8009136:	e694      	b.n	8008e62 <__ieee754_log+0x32>
 8009138:	fee00000 	.word	0xfee00000
 800913c:	3fe62e42 	.word	0x3fe62e42
 8009140:	35793c76 	.word	0x35793c76
 8009144:	3dea39ef 	.word	0x3dea39ef
 8009148:	55555555 	.word	0x55555555
 800914c:	3fd55555 	.word	0x3fd55555
 8009150:	df3e5244 	.word	0xdf3e5244
 8009154:	3fc2f112 	.word	0x3fc2f112
 8009158:	96cb03de 	.word	0x96cb03de
 800915c:	3fc74664 	.word	0x3fc74664
 8009160:	94229359 	.word	0x94229359
 8009164:	3fd24924 	.word	0x3fd24924
 8009168:	55555593 	.word	0x55555593
 800916c:	3fe55555 	.word	0x3fe55555
 8009170:	d078c69f 	.word	0xd078c69f
 8009174:	3fc39a09 	.word	0x3fc39a09
 8009178:	1d8e78af 	.word	0x1d8e78af
 800917c:	3fcc71c5 	.word	0x3fcc71c5
 8009180:	9997fa04 	.word	0x9997fa04
 8009184:	3fd99999 	.word	0x3fd99999
	...
 8009190:	c3500000 	.word	0xc3500000
 8009194:	43500000 	.word	0x43500000
 8009198:	7fefffff 	.word	0x7fefffff
 800919c:	3ff00000 	.word	0x3ff00000
 80091a0:	3fe00000 	.word	0x3fe00000

080091a4 <with_errno>:
 80091a4:	b570      	push	{r4, r5, r6, lr}
 80091a6:	4604      	mov	r4, r0
 80091a8:	460d      	mov	r5, r1
 80091aa:	4616      	mov	r6, r2
 80091ac:	f7fd fb76 	bl	800689c <__errno>
 80091b0:	4629      	mov	r1, r5
 80091b2:	6006      	str	r6, [r0, #0]
 80091b4:	4620      	mov	r0, r4
 80091b6:	bd70      	pop	{r4, r5, r6, pc}

080091b8 <xflow>:
 80091b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091ba:	4614      	mov	r4, r2
 80091bc:	461d      	mov	r5, r3
 80091be:	b108      	cbz	r0, 80091c4 <xflow+0xc>
 80091c0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80091c4:	e9cd 2300 	strd	r2, r3, [sp]
 80091c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091cc:	4620      	mov	r0, r4
 80091ce:	4629      	mov	r1, r5
 80091d0:	f7f7 fa1a 	bl	8000608 <__aeabi_dmul>
 80091d4:	2222      	movs	r2, #34	; 0x22
 80091d6:	b003      	add	sp, #12
 80091d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091dc:	f7ff bfe2 	b.w	80091a4 <with_errno>

080091e0 <__math_uflow>:
 80091e0:	b508      	push	{r3, lr}
 80091e2:	2200      	movs	r2, #0
 80091e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80091e8:	f7ff ffe6 	bl	80091b8 <xflow>
 80091ec:	ec41 0b10 	vmov	d0, r0, r1
 80091f0:	bd08      	pop	{r3, pc}

080091f2 <__math_oflow>:
 80091f2:	b508      	push	{r3, lr}
 80091f4:	2200      	movs	r2, #0
 80091f6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80091fa:	f7ff ffdd 	bl	80091b8 <xflow>
 80091fe:	ec41 0b10 	vmov	d0, r0, r1
 8009202:	bd08      	pop	{r3, pc}

08009204 <_init>:
 8009204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009206:	bf00      	nop
 8009208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800920a:	bc08      	pop	{r3}
 800920c:	469e      	mov	lr, r3
 800920e:	4770      	bx	lr

08009210 <_fini>:
 8009210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009212:	bf00      	nop
 8009214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009216:	bc08      	pop	{r3}
 8009218:	469e      	mov	lr, r3
 800921a:	4770      	bx	lr
