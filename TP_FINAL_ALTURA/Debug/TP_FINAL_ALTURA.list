
TP_FINAL_ALTURA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e6c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08009010  08009010  00019010  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009438  08009438  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009438  08009438  00019438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009440  08009440  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009440  08009440  00019440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009444  08009444  00019444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  200001dc  08009624  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000053c  08009624  0002053c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000df91  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024f8  00000000  00000000  0002e1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b78  00000000  00000000  000306d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008e9  00000000  00000000  00031250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017a76  00000000  00000000  00031b39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010b08  00000000  00000000  000495af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a183  00000000  00000000  0005a0b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004378  00000000  00000000  000e423c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000e85b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008ff4 	.word	0x08008ff4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08008ff4 	.word	0x08008ff4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295
 8000c76:	f000 b9bb 	b.w	8000ff0 <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f84d 	bl	8000d28 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f840 	bl	8000d28 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f82f 	bl	8000d28 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f821 	bl	8000d28 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b970 	b.w	8000ff0 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9e08      	ldr	r6, [sp, #32]
 8000d2e:	460d      	mov	r5, r1
 8000d30:	4604      	mov	r4, r0
 8000d32:	460f      	mov	r7, r1
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d14a      	bne.n	8000dce <__udivmoddi4+0xa6>
 8000d38:	428a      	cmp	r2, r1
 8000d3a:	4694      	mov	ip, r2
 8000d3c:	d965      	bls.n	8000e0a <__udivmoddi4+0xe2>
 8000d3e:	fab2 f382 	clz	r3, r2
 8000d42:	b143      	cbz	r3, 8000d56 <__udivmoddi4+0x2e>
 8000d44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d48:	f1c3 0220 	rsb	r2, r3, #32
 8000d4c:	409f      	lsls	r7, r3
 8000d4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d52:	4317      	orrs	r7, r2
 8000d54:	409c      	lsls	r4, r3
 8000d56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d5a:	fa1f f58c 	uxth.w	r5, ip
 8000d5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d62:	0c22      	lsrs	r2, r4, #16
 8000d64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d6c:	fb01 f005 	mul.w	r0, r1, r5
 8000d70:	4290      	cmp	r0, r2
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x62>
 8000d74:	eb1c 0202 	adds.w	r2, ip, r2
 8000d78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d7c:	f080 811c 	bcs.w	8000fb8 <__udivmoddi4+0x290>
 8000d80:	4290      	cmp	r0, r2
 8000d82:	f240 8119 	bls.w	8000fb8 <__udivmoddi4+0x290>
 8000d86:	3902      	subs	r1, #2
 8000d88:	4462      	add	r2, ip
 8000d8a:	1a12      	subs	r2, r2, r0
 8000d8c:	b2a4      	uxth	r4, r4
 8000d8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d9a:	fb00 f505 	mul.w	r5, r0, r5
 8000d9e:	42a5      	cmp	r5, r4
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x90>
 8000da2:	eb1c 0404 	adds.w	r4, ip, r4
 8000da6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000daa:	f080 8107 	bcs.w	8000fbc <__udivmoddi4+0x294>
 8000dae:	42a5      	cmp	r5, r4
 8000db0:	f240 8104 	bls.w	8000fbc <__udivmoddi4+0x294>
 8000db4:	4464      	add	r4, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dbc:	1b64      	subs	r4, r4, r5
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11e      	cbz	r6, 8000dca <__udivmoddi4+0xa2>
 8000dc2:	40dc      	lsrs	r4, r3
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0xbc>
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	f000 80ed 	beq.w	8000fb2 <__udivmoddi4+0x28a>
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e9c6 0500 	strd	r0, r5, [r6]
 8000dde:	4608      	mov	r0, r1
 8000de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de4:	fab3 f183 	clz	r1, r3
 8000de8:	2900      	cmp	r1, #0
 8000dea:	d149      	bne.n	8000e80 <__udivmoddi4+0x158>
 8000dec:	42ab      	cmp	r3, r5
 8000dee:	d302      	bcc.n	8000df6 <__udivmoddi4+0xce>
 8000df0:	4282      	cmp	r2, r0
 8000df2:	f200 80f8 	bhi.w	8000fe6 <__udivmoddi4+0x2be>
 8000df6:	1a84      	subs	r4, r0, r2
 8000df8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	4617      	mov	r7, r2
 8000e00:	2e00      	cmp	r6, #0
 8000e02:	d0e2      	beq.n	8000dca <__udivmoddi4+0xa2>
 8000e04:	e9c6 4700 	strd	r4, r7, [r6]
 8000e08:	e7df      	b.n	8000dca <__udivmoddi4+0xa2>
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xe6>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f382 	clz	r3, r2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x210>
 8000e18:	1a8a      	subs	r2, r1, r2
 8000e1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1e:	fa1f fe8c 	uxth.w	lr, ip
 8000e22:	2101      	movs	r1, #1
 8000e24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e28:	fb07 2015 	mls	r0, r7, r5, r2
 8000e2c:	0c22      	lsrs	r2, r4, #16
 8000e2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e32:	fb0e f005 	mul.w	r0, lr, r5
 8000e36:	4290      	cmp	r0, r2
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x124>
 8000e3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e42:	d202      	bcs.n	8000e4a <__udivmoddi4+0x122>
 8000e44:	4290      	cmp	r0, r2
 8000e46:	f200 80cb 	bhi.w	8000fe0 <__udivmoddi4+0x2b8>
 8000e4a:	4645      	mov	r5, r8
 8000e4c:	1a12      	subs	r2, r2, r0
 8000e4e:	b2a4      	uxth	r4, r4
 8000e50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e54:	fb07 2210 	mls	r2, r7, r0, r2
 8000e58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e60:	45a6      	cmp	lr, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x14e>
 8000e64:	eb1c 0404 	adds.w	r4, ip, r4
 8000e68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e6c:	d202      	bcs.n	8000e74 <__udivmoddi4+0x14c>
 8000e6e:	45a6      	cmp	lr, r4
 8000e70:	f200 80bb 	bhi.w	8000fea <__udivmoddi4+0x2c2>
 8000e74:	4610      	mov	r0, r2
 8000e76:	eba4 040e 	sub.w	r4, r4, lr
 8000e7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7e:	e79f      	b.n	8000dc0 <__udivmoddi4+0x98>
 8000e80:	f1c1 0720 	rsb	r7, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e92:	fa20 f307 	lsr.w	r3, r0, r7
 8000e96:	40fd      	lsrs	r5, r7
 8000e98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ea2:	fa1f fe8c 	uxth.w	lr, ip
 8000ea6:	fb09 5518 	mls	r5, r9, r8, r5
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eb0:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb4:	42a5      	cmp	r5, r4
 8000eb6:	fa02 f201 	lsl.w	r2, r2, r1
 8000eba:	fa00 f001 	lsl.w	r0, r0, r1
 8000ebe:	d90b      	bls.n	8000ed8 <__udivmoddi4+0x1b0>
 8000ec0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec8:	f080 8088 	bcs.w	8000fdc <__udivmoddi4+0x2b4>
 8000ecc:	42a5      	cmp	r5, r4
 8000ece:	f240 8085 	bls.w	8000fdc <__udivmoddi4+0x2b4>
 8000ed2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed6:	4464      	add	r4, ip
 8000ed8:	1b64      	subs	r4, r4, r5
 8000eda:	b29d      	uxth	r5, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000eec:	45a6      	cmp	lr, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1da>
 8000ef0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef8:	d26c      	bcs.n	8000fd4 <__udivmoddi4+0x2ac>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	d96a      	bls.n	8000fd4 <__udivmoddi4+0x2ac>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	4464      	add	r4, ip
 8000f02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f06:	fba3 9502 	umull	r9, r5, r3, r2
 8000f0a:	eba4 040e 	sub.w	r4, r4, lr
 8000f0e:	42ac      	cmp	r4, r5
 8000f10:	46c8      	mov	r8, r9
 8000f12:	46ae      	mov	lr, r5
 8000f14:	d356      	bcc.n	8000fc4 <__udivmoddi4+0x29c>
 8000f16:	d053      	beq.n	8000fc0 <__udivmoddi4+0x298>
 8000f18:	b156      	cbz	r6, 8000f30 <__udivmoddi4+0x208>
 8000f1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f22:	fa04 f707 	lsl.w	r7, r4, r7
 8000f26:	40ca      	lsrs	r2, r1
 8000f28:	40cc      	lsrs	r4, r1
 8000f2a:	4317      	orrs	r7, r2
 8000f2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f30:	4618      	mov	r0, r3
 8000f32:	2100      	movs	r1, #0
 8000f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f38:	f1c3 0120 	rsb	r1, r3, #32
 8000f3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f40:	fa20 f201 	lsr.w	r2, r0, r1
 8000f44:	fa25 f101 	lsr.w	r1, r5, r1
 8000f48:	409d      	lsls	r5, r3
 8000f4a:	432a      	orrs	r2, r5
 8000f4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f50:	fa1f fe8c 	uxth.w	lr, ip
 8000f54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f58:	fb07 1510 	mls	r5, r7, r0, r1
 8000f5c:	0c11      	lsrs	r1, r2, #16
 8000f5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f62:	fb00 f50e 	mul.w	r5, r0, lr
 8000f66:	428d      	cmp	r5, r1
 8000f68:	fa04 f403 	lsl.w	r4, r4, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x258>
 8000f6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f76:	d22f      	bcs.n	8000fd8 <__udivmoddi4+0x2b0>
 8000f78:	428d      	cmp	r5, r1
 8000f7a:	d92d      	bls.n	8000fd8 <__udivmoddi4+0x2b0>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4461      	add	r1, ip
 8000f80:	1b49      	subs	r1, r1, r5
 8000f82:	b292      	uxth	r2, r2
 8000f84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f88:	fb07 1115 	mls	r1, r7, r5, r1
 8000f8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f90:	fb05 f10e 	mul.w	r1, r5, lr
 8000f94:	4291      	cmp	r1, r2
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x282>
 8000f98:	eb1c 0202 	adds.w	r2, ip, r2
 8000f9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fa0:	d216      	bcs.n	8000fd0 <__udivmoddi4+0x2a8>
 8000fa2:	4291      	cmp	r1, r2
 8000fa4:	d914      	bls.n	8000fd0 <__udivmoddi4+0x2a8>
 8000fa6:	3d02      	subs	r5, #2
 8000fa8:	4462      	add	r2, ip
 8000faa:	1a52      	subs	r2, r2, r1
 8000fac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fb0:	e738      	b.n	8000e24 <__udivmoddi4+0xfc>
 8000fb2:	4631      	mov	r1, r6
 8000fb4:	4630      	mov	r0, r6
 8000fb6:	e708      	b.n	8000dca <__udivmoddi4+0xa2>
 8000fb8:	4639      	mov	r1, r7
 8000fba:	e6e6      	b.n	8000d8a <__udivmoddi4+0x62>
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	e6fb      	b.n	8000db8 <__udivmoddi4+0x90>
 8000fc0:	4548      	cmp	r0, r9
 8000fc2:	d2a9      	bcs.n	8000f18 <__udivmoddi4+0x1f0>
 8000fc4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	e7a3      	b.n	8000f18 <__udivmoddi4+0x1f0>
 8000fd0:	4645      	mov	r5, r8
 8000fd2:	e7ea      	b.n	8000faa <__udivmoddi4+0x282>
 8000fd4:	462b      	mov	r3, r5
 8000fd6:	e794      	b.n	8000f02 <__udivmoddi4+0x1da>
 8000fd8:	4640      	mov	r0, r8
 8000fda:	e7d1      	b.n	8000f80 <__udivmoddi4+0x258>
 8000fdc:	46d0      	mov	r8, sl
 8000fde:	e77b      	b.n	8000ed8 <__udivmoddi4+0x1b0>
 8000fe0:	3d02      	subs	r5, #2
 8000fe2:	4462      	add	r2, ip
 8000fe4:	e732      	b.n	8000e4c <__udivmoddi4+0x124>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e70a      	b.n	8000e00 <__udivmoddi4+0xd8>
 8000fea:	4464      	add	r4, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e742      	b.n	8000e76 <__udivmoddi4+0x14e>

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff8:	f001 fc5a 	bl	80028b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ffc:	f000 f814 	bl	8001028 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001000:	f000 f8d4 	bl	80011ac <MX_GPIO_Init>
  MX_I2C1_Init();
 8001004:	f000 f87a 	bl	80010fc <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001008:	f000 f8a6 	bl	8001158 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  BMP_280_Init2();
 800100c:	f000 fc16 	bl	800183c <BMP_280_Init2>
 UART_Init2();
 8001010:	f000 fbac 	bl	800176c <UART_Init2>
delayInit(&DelayPrint, 500);
 8001014:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001018:	4802      	ldr	r0, [pc, #8]	; (8001024 <main+0x30>)
 800101a:	f000 fb30 	bl	800167e <delayInit>
	  	  else {
	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);}

HAL_Delay(200);
*/
MEF();
 800101e:	f000 fd15 	bl	8001a4c <MEF>
 8001022:	e7fc      	b.n	800101e <main+0x2a>
 8001024:	200001f8 	.word	0x200001f8

08001028 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b094      	sub	sp, #80	; 0x50
 800102c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102e:	f107 0320 	add.w	r3, r7, #32
 8001032:	2230      	movs	r2, #48	; 0x30
 8001034:	2100      	movs	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f005 fad7 	bl	80065ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800104c:	2300      	movs	r3, #0
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <SystemClock_Config+0xcc>)
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	4a27      	ldr	r2, [pc, #156]	; (80010f4 <SystemClock_Config+0xcc>)
 8001056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800105a:	6413      	str	r3, [r2, #64]	; 0x40
 800105c:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <SystemClock_Config+0xcc>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001068:	2300      	movs	r3, #0
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <SystemClock_Config+0xd0>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001074:	4a20      	ldr	r2, [pc, #128]	; (80010f8 <SystemClock_Config+0xd0>)
 8001076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800107a:	6013      	str	r3, [r2, #0]
 800107c:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <SystemClock_Config+0xd0>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001088:	2302      	movs	r3, #2
 800108a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800108c:	2301      	movs	r3, #1
 800108e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001090:	2310      	movs	r3, #16
 8001092:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001094:	2302      	movs	r3, #2
 8001096:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001098:	2300      	movs	r3, #0
 800109a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800109c:	2308      	movs	r3, #8
 800109e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80010a0:	2354      	movs	r3, #84	; 0x54
 80010a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010a4:	2302      	movs	r3, #2
 80010a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010a8:	2304      	movs	r3, #4
 80010aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ac:	f107 0320 	add.w	r3, r7, #32
 80010b0:	4618      	mov	r0, r3
 80010b2:	f002 ffaf 	bl	8004014 <HAL_RCC_OscConfig>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010bc:	f000 f8e4 	bl	8001288 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c0:	230f      	movs	r3, #15
 80010c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c4:	2302      	movs	r3, #2
 80010c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010d6:	f107 030c 	add.w	r3, r7, #12
 80010da:	2102      	movs	r1, #2
 80010dc:	4618      	mov	r0, r3
 80010de:	f003 fa11 	bl	8004504 <HAL_RCC_ClockConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010e8:	f000 f8ce 	bl	8001288 <Error_Handler>
  }
}
 80010ec:	bf00      	nop
 80010ee:	3750      	adds	r7, #80	; 0x50
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40007000 	.word	0x40007000

080010fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <MX_I2C1_Init+0x50>)
 8001102:	4a13      	ldr	r2, [pc, #76]	; (8001150 <MX_I2C1_Init+0x54>)
 8001104:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <MX_I2C1_Init+0x50>)
 8001108:	4a12      	ldr	r2, [pc, #72]	; (8001154 <MX_I2C1_Init+0x58>)
 800110a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <MX_I2C1_Init+0x50>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <MX_I2C1_Init+0x50>)
 8001114:	2200      	movs	r2, #0
 8001116:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <MX_I2C1_Init+0x50>)
 800111a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800111e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001120:	4b0a      	ldr	r3, [pc, #40]	; (800114c <MX_I2C1_Init+0x50>)
 8001122:	2200      	movs	r2, #0
 8001124:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <MX_I2C1_Init+0x50>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800112c:	4b07      	ldr	r3, [pc, #28]	; (800114c <MX_I2C1_Init+0x50>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <MX_I2C1_Init+0x50>)
 8001134:	2200      	movs	r2, #0
 8001136:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001138:	4804      	ldr	r0, [pc, #16]	; (800114c <MX_I2C1_Init+0x50>)
 800113a:	f001 ffab 	bl	8003094 <HAL_I2C_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001144:	f000 f8a0 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000394 	.word	0x20000394
 8001150:	40005400 	.word	0x40005400
 8001154:	000186a0 	.word	0x000186a0

08001158 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <MX_USART2_UART_Init+0x4c>)
 800115e:	4a12      	ldr	r2, [pc, #72]	; (80011a8 <MX_USART2_UART_Init+0x50>)
 8001160:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <MX_USART2_UART_Init+0x4c>)
 8001164:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001168:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <MX_USART2_UART_Init+0x4c>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <MX_USART2_UART_Init+0x4c>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001176:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <MX_USART2_UART_Init+0x4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800117c:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <MX_USART2_UART_Init+0x4c>)
 800117e:	220c      	movs	r2, #12
 8001180:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001182:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <MX_USART2_UART_Init+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <MX_USART2_UART_Init+0x4c>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800118e:	4805      	ldr	r0, [pc, #20]	; (80011a4 <MX_USART2_UART_Init+0x4c>)
 8001190:	f003 fb98 	bl	80048c4 <HAL_UART_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800119a:	f000 f875 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000208 	.word	0x20000208
 80011a8:	40004400 	.word	0x40004400

080011ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	; 0x28
 80011b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
 80011c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	4b2d      	ldr	r3, [pc, #180]	; (800127c <MX_GPIO_Init+0xd0>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a2c      	ldr	r2, [pc, #176]	; (800127c <MX_GPIO_Init+0xd0>)
 80011cc:	f043 0304 	orr.w	r3, r3, #4
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b2a      	ldr	r3, [pc, #168]	; (800127c <MX_GPIO_Init+0xd0>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0304 	and.w	r3, r3, #4
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	4b26      	ldr	r3, [pc, #152]	; (800127c <MX_GPIO_Init+0xd0>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a25      	ldr	r2, [pc, #148]	; (800127c <MX_GPIO_Init+0xd0>)
 80011e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b23      	ldr	r3, [pc, #140]	; (800127c <MX_GPIO_Init+0xd0>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	4b1f      	ldr	r3, [pc, #124]	; (800127c <MX_GPIO_Init+0xd0>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a1e      	ldr	r2, [pc, #120]	; (800127c <MX_GPIO_Init+0xd0>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b1c      	ldr	r3, [pc, #112]	; (800127c <MX_GPIO_Init+0xd0>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	4b18      	ldr	r3, [pc, #96]	; (800127c <MX_GPIO_Init+0xd0>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a17      	ldr	r2, [pc, #92]	; (800127c <MX_GPIO_Init+0xd0>)
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <MX_GPIO_Init+0xd0>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	2120      	movs	r1, #32
 8001236:	4812      	ldr	r0, [pc, #72]	; (8001280 <MX_GPIO_Init+0xd4>)
 8001238:	f001 fef8 	bl	800302c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800123c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001242:	2300      	movs	r3, #0
 8001244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	4619      	mov	r1, r3
 8001250:	480c      	ldr	r0, [pc, #48]	; (8001284 <MX_GPIO_Init+0xd8>)
 8001252:	f001 fd67 	bl	8002d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001256:	2320      	movs	r3, #32
 8001258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125a:	2301      	movs	r3, #1
 800125c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	4619      	mov	r1, r3
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <MX_GPIO_Init+0xd4>)
 800126e:	f001 fd59 	bl	8002d24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001272:	bf00      	nop
 8001274:	3728      	adds	r7, #40	; 0x28
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800
 8001280:	40020000 	.word	0x40020000
 8001284:	40020800 	.word	0x40020800

08001288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800128c:	b672      	cpsid	i
}
 800128e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001290:	e7fe      	b.n	8001290 <Error_Handler+0x8>
	...

08001294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <HAL_MspInit+0x4c>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	4a0f      	ldr	r2, [pc, #60]	; (80012e0 <HAL_MspInit+0x4c>)
 80012a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a8:	6453      	str	r3, [r2, #68]	; 0x44
 80012aa:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <HAL_MspInit+0x4c>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	603b      	str	r3, [r7, #0]
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <HAL_MspInit+0x4c>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	4a08      	ldr	r2, [pc, #32]	; (80012e0 <HAL_MspInit+0x4c>)
 80012c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c4:	6413      	str	r3, [r2, #64]	; 0x40
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_MspInit+0x4c>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800

080012e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	; 0x28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a19      	ldr	r2, [pc, #100]	; (8001368 <HAL_I2C_MspInit+0x84>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d12c      	bne.n	8001360 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	4b18      	ldr	r3, [pc, #96]	; (800136c <HAL_I2C_MspInit+0x88>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a17      	ldr	r2, [pc, #92]	; (800136c <HAL_I2C_MspInit+0x88>)
 8001310:	f043 0302 	orr.w	r3, r3, #2
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <HAL_I2C_MspInit+0x88>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001322:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001328:	2312      	movs	r3, #18
 800132a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001330:	2303      	movs	r3, #3
 8001332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001334:	2304      	movs	r3, #4
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4619      	mov	r1, r3
 800133e:	480c      	ldr	r0, [pc, #48]	; (8001370 <HAL_I2C_MspInit+0x8c>)
 8001340:	f001 fcf0 	bl	8002d24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <HAL_I2C_MspInit+0x88>)
 800134a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134c:	4a07      	ldr	r2, [pc, #28]	; (800136c <HAL_I2C_MspInit+0x88>)
 800134e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001352:	6413      	str	r3, [r2, #64]	; 0x40
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <HAL_I2C_MspInit+0x88>)
 8001356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001360:	bf00      	nop
 8001362:	3728      	adds	r7, #40	; 0x28
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40005400 	.word	0x40005400
 800136c:	40023800 	.word	0x40023800
 8001370:	40020400 	.word	0x40020400

08001374 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	; 0x28
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a1d      	ldr	r2, [pc, #116]	; (8001408 <HAL_UART_MspInit+0x94>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d133      	bne.n	80013fe <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	4b1c      	ldr	r3, [pc, #112]	; (800140c <HAL_UART_MspInit+0x98>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	4a1b      	ldr	r2, [pc, #108]	; (800140c <HAL_UART_MspInit+0x98>)
 80013a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a4:	6413      	str	r3, [r2, #64]	; 0x40
 80013a6:	4b19      	ldr	r3, [pc, #100]	; (800140c <HAL_UART_MspInit+0x98>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <HAL_UART_MspInit+0x98>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a14      	ldr	r2, [pc, #80]	; (800140c <HAL_UART_MspInit+0x98>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b12      	ldr	r3, [pc, #72]	; (800140c <HAL_UART_MspInit+0x98>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013ce:	230c      	movs	r3, #12
 80013d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d2:	2302      	movs	r3, #2
 80013d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013da:	2303      	movs	r3, #3
 80013dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013de:	2307      	movs	r3, #7
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4619      	mov	r1, r3
 80013e8:	4809      	ldr	r0, [pc, #36]	; (8001410 <HAL_UART_MspInit+0x9c>)
 80013ea:	f001 fc9b 	bl	8002d24 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	2026      	movs	r0, #38	; 0x26
 80013f4:	f001 fbcd 	bl	8002b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013f8:	2026      	movs	r0, #38	; 0x26
 80013fa:	f001 fbe6 	bl	8002bca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013fe:	bf00      	nop
 8001400:	3728      	adds	r7, #40	; 0x28
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40004400 	.word	0x40004400
 800140c:	40023800 	.word	0x40023800
 8001410:	40020000 	.word	0x40020000

08001414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001418:	e7fe      	b.n	8001418 <NMI_Handler+0x4>

0800141a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800141e:	e7fe      	b.n	800141e <HardFault_Handler+0x4>

08001420 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001424:	e7fe      	b.n	8001424 <MemManage_Handler+0x4>

08001426 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800142a:	e7fe      	b.n	800142a <BusFault_Handler+0x4>

0800142c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <UsageFault_Handler+0x4>

08001432 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001460:	f001 fa78 	bl	8002954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}

08001468 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <USART2_IRQHandler+0x10>)
 800146e:	f003 fb39 	bl	8004ae4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000208 	.word	0x20000208

0800147c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return 1;
 8001480:	2301      	movs	r3, #1
}
 8001482:	4618      	mov	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <_kill>:

int _kill(int pid, int sig)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001496:	f005 f8fb 	bl	8006690 <__errno>
 800149a:	4603      	mov	r3, r0
 800149c:	2216      	movs	r2, #22
 800149e:	601a      	str	r2, [r3, #0]
  return -1;
 80014a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <_exit>:

void _exit (int status)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014b4:	f04f 31ff 	mov.w	r1, #4294967295
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7ff ffe7 	bl	800148c <_kill>
  while (1) {}    /* Make sure we hang here */
 80014be:	e7fe      	b.n	80014be <_exit+0x12>

080014c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	e00a      	b.n	80014e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014d2:	f3af 8000 	nop.w
 80014d6:	4601      	mov	r1, r0
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	1c5a      	adds	r2, r3, #1
 80014dc:	60ba      	str	r2, [r7, #8]
 80014de:	b2ca      	uxtb	r2, r1
 80014e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	3301      	adds	r3, #1
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	dbf0      	blt.n	80014d2 <_read+0x12>
  }

  return len;
 80014f0:	687b      	ldr	r3, [r7, #4]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b086      	sub	sp, #24
 80014fe:	af00      	add	r7, sp, #0
 8001500:	60f8      	str	r0, [r7, #12]
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	e009      	b.n	8001520 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	1c5a      	adds	r2, r3, #1
 8001510:	60ba      	str	r2, [r7, #8]
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	3301      	adds	r3, #1
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	429a      	cmp	r2, r3
 8001526:	dbf1      	blt.n	800150c <_write+0x12>
  }
  return len;
 8001528:	687b      	ldr	r3, [r7, #4]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <_close>:

int _close(int file)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800153a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
 8001552:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800155a:	605a      	str	r2, [r3, #4]
  return 0;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <_isatty>:

int _isatty(int file)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001572:	2301      	movs	r3, #1
}
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
	...

0800159c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a4:	4a14      	ldr	r2, [pc, #80]	; (80015f8 <_sbrk+0x5c>)
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <_sbrk+0x60>)
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d102      	bne.n	80015be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <_sbrk+0x64>)
 80015ba:	4a12      	ldr	r2, [pc, #72]	; (8001604 <_sbrk+0x68>)
 80015bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <_sbrk+0x64>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d207      	bcs.n	80015dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015cc:	f005 f860 	bl	8006690 <__errno>
 80015d0:	4603      	mov	r3, r0
 80015d2:	220c      	movs	r2, #12
 80015d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
 80015da:	e009      	b.n	80015f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <_sbrk+0x64>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015e2:	4b07      	ldr	r3, [pc, #28]	; (8001600 <_sbrk+0x64>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	4a05      	ldr	r2, [pc, #20]	; (8001600 <_sbrk+0x64>)
 80015ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ee:	68fb      	ldr	r3, [r7, #12]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20018000 	.word	0x20018000
 80015fc:	00000400 	.word	0x00000400
 8001600:	20000204 	.word	0x20000204
 8001604:	20000540 	.word	0x20000540

08001608 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <SystemInit+0x20>)
 800160e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001612:	4a05      	ldr	r2, [pc, #20]	; (8001628 <SystemInit+0x20>)
 8001614:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001618:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800162c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001664 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001630:	480d      	ldr	r0, [pc, #52]	; (8001668 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001632:	490e      	ldr	r1, [pc, #56]	; (800166c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001634:	4a0e      	ldr	r2, [pc, #56]	; (8001670 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001638:	e002      	b.n	8001640 <LoopCopyDataInit>

0800163a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800163a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800163c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800163e:	3304      	adds	r3, #4

08001640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001644:	d3f9      	bcc.n	800163a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001646:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001648:	4c0b      	ldr	r4, [pc, #44]	; (8001678 <LoopFillZerobss+0x26>)
  movs r3, #0
 800164a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800164c:	e001      	b.n	8001652 <LoopFillZerobss>

0800164e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800164e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001650:	3204      	adds	r2, #4

08001652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001654:	d3fb      	bcc.n	800164e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001656:	f7ff ffd7 	bl	8001608 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800165a:	f005 f81f 	bl	800669c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800165e:	f7ff fcc9 	bl	8000ff4 <main>
  bx  lr    
 8001662:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001664:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800166c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001670:	08009448 	.word	0x08009448
  ldr r2, =_sbss
 8001674:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001678:	2000053c 	.word	0x2000053c

0800167c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800167c:	e7fe      	b.n	800167c <ADC_IRQHandler>

0800167e <delayInit>:
 */

#include "API_Delay.h"

void delayInit(delay_t*delay, tick_t duration)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	6039      	str	r1, [r7, #0]
	delay->running = false;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	721a      	strb	r2, [r3, #8]
	delayWrite(delay, duration);
 800168e:	6839      	ldr	r1, [r7, #0]
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 f804 	bl	800169e <delayWrite>

}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <delayWrite>:
	}
	return false;
}

void delayWrite(delay_t*delay, tick_t duration)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
 80016a6:	6039      	str	r1, [r7, #0]
	delay->duration=duration;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	605a      	str	r2, [r3, #4]
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
	...

080016bc <UART_TrasmitSensor>:
static uint8_t rx_buffer[BUFFER_SIZE]; // Buffer que almacena los datos recibidos por la UART por interrupción
static uint16_t UART_Date;
volatile uint8_t rx_data_ready;
static UARTRead_t BUFFER_READ;

void UART_TrasmitSensor(ReadSensor Dato){
 80016bc:	b084      	sub	sp, #16
 80016be:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af06      	add	r7, sp, #24
 80016c6:	f107 0420 	add.w	r4, r7, #32
 80016ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t size;
	sprintf((char *)Data,"Presion: %.2f Pa, Temperatura: %.2f, Altura: %.2f, SetPoint: %.2f \r\n",Dato.Presion, Dato.Temperatura, Dato.altura, Dato.AlturaSet);
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe ff41 	bl	8000558 <__aeabi_f2d>
 80016d6:	4682      	mov	sl, r0
 80016d8:	468b      	mov	fp, r1
 80016da:	6a3b      	ldr	r3, [r7, #32]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7fe ff3b 	bl	8000558 <__aeabi_f2d>
 80016e2:	4604      	mov	r4, r0
 80016e4:	460d      	mov	r5, r1
 80016e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe ff35 	bl	8000558 <__aeabi_f2d>
 80016ee:	4680      	mov	r8, r0
 80016f0:	4689      	mov	r9, r1
 80016f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7fe ff2f 	bl	8000558 <__aeabi_f2d>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001702:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001706:	e9cd 4500 	strd	r4, r5, [sp]
 800170a:	4652      	mov	r2, sl
 800170c:	465b      	mov	r3, fp
 800170e:	490a      	ldr	r1, [pc, #40]	; (8001738 <UART_TrasmitSensor+0x7c>)
 8001710:	480a      	ldr	r0, [pc, #40]	; (800173c <UART_TrasmitSensor+0x80>)
 8001712:	f004 ff07 	bl	8006524 <siprintf>
	HAL_UART_Transmit(&huart2,Data, strlen(Data), Delay_Max_UART);
 8001716:	4809      	ldr	r0, [pc, #36]	; (800173c <UART_TrasmitSensor+0x80>)
 8001718:	f7fe fdb2 	bl	8000280 <strlen>
 800171c:	4603      	mov	r3, r0
 800171e:	b29a      	uxth	r2, r3
 8001720:	2364      	movs	r3, #100	; 0x64
 8001722:	4906      	ldr	r1, [pc, #24]	; (800173c <UART_TrasmitSensor+0x80>)
 8001724:	4806      	ldr	r0, [pc, #24]	; (8001740 <UART_TrasmitSensor+0x84>)
 8001726:	f003 f91a 	bl	800495e <HAL_UART_Transmit>
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001732:	b004      	add	sp, #16
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	08009010 	.word	0x08009010
 800173c:	2000024c 	.word	0x2000024c
 8001740:	20000208 	.word	0x20000208

08001744 <UART_TrasmitMessage>:

void UART_TrasmitMessage(const char *Message){
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)Message, strlen(Message),Delay_Max_UART);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7fe fd97 	bl	8000280 <strlen>
 8001752:	4603      	mov	r3, r0
 8001754:	b29a      	uxth	r2, r3
 8001756:	2364      	movs	r3, #100	; 0x64
 8001758:	6879      	ldr	r1, [r7, #4]
 800175a:	4803      	ldr	r0, [pc, #12]	; (8001768 <UART_TrasmitMessage+0x24>)
 800175c:	f003 f8ff 	bl	800495e <HAL_UART_Transmit>
}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000208 	.word	0x20000208

0800176c <UART_Init2>:

void UART_Init2 (){
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, (uint8_t *)rx_buffer, BUFFER_SIZE);
 8001770:	2203      	movs	r2, #3
 8001772:	4903      	ldr	r1, [pc, #12]	; (8001780 <UART_Init2+0x14>)
 8001774:	4803      	ldr	r0, [pc, #12]	; (8001784 <UART_Init2+0x18>)
 8001776:	f003 f984 	bl	8004a82 <HAL_UART_Receive_IT>
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	2000034c 	.word	0x2000034c
 8001784:	20000208 	.word	0x20000208

08001788 <UART_Read>:


UARTRead_t UART_Read(){
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
	if (rx_data_ready) {
 800178e:	4b13      	ldr	r3, [pc, #76]	; (80017dc <UART_Read+0x54>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b00      	cmp	r3, #0
 8001796:	d010      	beq.n	80017ba <UART_Read+0x32>
		rx_data_ready = 0;
 8001798:	4b10      	ldr	r3, [pc, #64]	; (80017dc <UART_Read+0x54>)
 800179a:	2200      	movs	r2, #0
 800179c:	701a      	strb	r2, [r3, #0]
		BUFFER_READ.estado = true;
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <UART_Read+0x58>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	701a      	strb	r2, [r3, #0]
		BUFFER_READ.dato=UART_Date;
 80017a4:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <UART_Read+0x5c>)
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <UART_Read+0x58>)
 80017ac:	705a      	strb	r2, [r3, #1]
		HAL_UART_Receive_IT(&huart2, rx_buffer, BUFFER_SIZE);
 80017ae:	2203      	movs	r2, #3
 80017b0:	490d      	ldr	r1, [pc, #52]	; (80017e8 <UART_Read+0x60>)
 80017b2:	480e      	ldr	r0, [pc, #56]	; (80017ec <UART_Read+0x64>)
 80017b4:	f003 f965 	bl	8004a82 <HAL_UART_Receive_IT>
 80017b8:	e002      	b.n	80017c0 <UART_Read+0x38>
	}
	else{
	    BUFFER_READ.estado=false;
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <UART_Read+0x58>)
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
	}
return BUFFER_READ;
 80017c0:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <UART_Read+0x58>)
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	80bb      	strh	r3, [r7, #4]
 80017c6:	2300      	movs	r3, #0
 80017c8:	793a      	ldrb	r2, [r7, #4]
 80017ca:	f362 0307 	bfi	r3, r2, #0, #8
 80017ce:	797a      	ldrb	r2, [r7, #5]
 80017d0:	f362 230f 	bfi	r3, r2, #8, #8
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000352 	.word	0x20000352
 80017e0:	20000354 	.word	0x20000354
 80017e4:	20000350 	.word	0x20000350
 80017e8:	2000034c 	.word	0x2000034c
 80017ec:	20000208 	.word	0x20000208

080017f0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]

	        // Convertir el buffer a un número entero
	        UART_Date = atoi((char *)rx_buffer);
 80017f8:	480c      	ldr	r0, [pc, #48]	; (800182c <HAL_UART_RxCpltCallback+0x3c>)
 80017fa:	f004 f8db 	bl	80059b4 <atoi>
 80017fe:	4603      	mov	r3, r0
 8001800:	b29a      	uxth	r2, r3
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <HAL_UART_RxCpltCallback+0x40>)
 8001804:	801a      	strh	r2, [r3, #0]
	        // Reiniciar la recepción
	        HAL_UART_Receive_IT(&huart2, rx_buffer, BUFFER_SIZE);
 8001806:	2203      	movs	r2, #3
 8001808:	4908      	ldr	r1, [pc, #32]	; (800182c <HAL_UART_RxCpltCallback+0x3c>)
 800180a:	480a      	ldr	r0, [pc, #40]	; (8001834 <HAL_UART_RxCpltCallback+0x44>)
 800180c:	f003 f939 	bl	8004a82 <HAL_UART_Receive_IT>
	        // Transmitir el número recibido (opcional, para depuración)
	        HAL_UART_Transmit(&huart2, (uint8_t *)rx_buffer, sizeof(rx_buffer), Delay_Max_UART);
 8001810:	2364      	movs	r3, #100	; 0x64
 8001812:	2203      	movs	r2, #3
 8001814:	4905      	ldr	r1, [pc, #20]	; (800182c <HAL_UART_RxCpltCallback+0x3c>)
 8001816:	4807      	ldr	r0, [pc, #28]	; (8001834 <HAL_UART_RxCpltCallback+0x44>)
 8001818:	f003 f8a1 	bl	800495e <HAL_UART_Transmit>
	    	rx_data_ready = 1;
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_UART_RxCpltCallback+0x48>)
 800181e:	2201      	movs	r2, #1
 8001820:	701a      	strb	r2, [r3, #0]
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	2000034c 	.word	0x2000034c
 8001830:	20000350 	.word	0x20000350
 8001834:	20000208 	.word	0x20000208
 8001838:	20000352 	.word	0x20000352

0800183c <BMP_280_Init2>:
static float PointSet=0;
I2C_HandleTypeDef hi2c1;



void BMP_280_Init2(){
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
	Point0=0;
 8001840:	4b0e      	ldr	r3, [pc, #56]	; (800187c <BMP_280_Init2+0x40>)
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
	 bmp280_init_default_params(&bmp280.params);
 8001848:	480d      	ldr	r0, [pc, #52]	; (8001880 <BMP_280_Init2+0x44>)
 800184a:	f000 fa03 	bl	8001c54 <bmp280_init_default_params>
		bmp280.addr = BMP280_I2C_ADDRESS_0;
 800184e:	4b0d      	ldr	r3, [pc, #52]	; (8001884 <BMP_280_Init2+0x48>)
 8001850:	2276      	movs	r2, #118	; 0x76
 8001852:	849a      	strh	r2, [r3, #36]	; 0x24
		bmp280.i2c = &hi2c1;
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <BMP_280_Init2+0x48>)
 8001856:	4a0c      	ldr	r2, [pc, #48]	; (8001888 <BMP_280_Init2+0x4c>)
 8001858:	629a      	str	r2, [r3, #40]	; 0x28
		if (!bmp280_init(&bmp280, &bmp280.params)) {
 800185a:	4909      	ldr	r1, [pc, #36]	; (8001880 <BMP_280_Init2+0x44>)
 800185c:	4809      	ldr	r0, [pc, #36]	; (8001884 <BMP_280_Init2+0x48>)
 800185e:	f000 fb73 	bl	8001f48 <bmp280_init>
 8001862:	4603      	mov	r3, r0
 8001864:	f083 0301 	eor.w	r3, r3, #1
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <BMP_280_Init2+0x36>
			Error_Handler();
 800186e:	f7ff fd0b 	bl	8001288 <Error_Handler>
			}
		HAL_Delay(150);
 8001872:	2096      	movs	r0, #150	; 0x96
 8001874:	f001 f88e 	bl	8002994 <HAL_Delay>
		}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}
 800187c:	2000038c 	.word	0x2000038c
 8001880:	20000384 	.word	0x20000384
 8001884:	20000358 	.word	0x20000358
 8001888:	20000394 	.word	0x20000394
 800188c:	00000000 	.word	0x00000000

08001890 <BMP_280_Read>:

ReadSensor BMP_280_Read(){
 8001890:	b5b0      	push	{r4, r5, r7, lr}
 8001892:	b08c      	sub	sp, #48	; 0x30
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
float pressure, temperature, humidity;
	ReadSensor Dato;
	  	  if (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8001898:	f107 031c 	add.w	r3, r7, #28
 800189c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80018a0:	f107 0120 	add.w	r1, r7, #32
 80018a4:	4850      	ldr	r0, [pc, #320]	; (80019e8 <BMP_280_Read+0x158>)
 80018a6:	f000 ffb7 	bl	8002818 <bmp280_read_float>
 80018aa:	4603      	mov	r3, r0
 80018ac:	f083 0301 	eor.w	r3, r3, #1
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <BMP_280_Read+0x2a>
	  	  	  Error_Handler();
 80018b6:	f7ff fce7 	bl	8001288 <Error_Handler>
	  	  		}
	  	 float temperatura_kelvin = temperature + 273.15;
 80018ba:	6a3b      	ldr	r3, [r7, #32]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7fe fe4b 	bl	8000558 <__aeabi_f2d>
 80018c2:	a341      	add	r3, pc, #260	; (adr r3, 80019c8 <BMP_280_Read+0x138>)
 80018c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c8:	f7fe fce8 	bl	800029c <__adddf3>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	f7ff f970 	bl	8000bb8 <__aeabi_d2f>
 80018d8:	4603      	mov	r3, r0
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
	  	    // Cálculo de la altitud
	  	    float altitud = (temperatura_kelvin / L) * (1 - exp((R * L) / (g * M) * (log(pressure) - log(P0))));
 80018dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80018de:	f7fe fe3b 	bl	8000558 <__aeabi_f2d>
 80018e2:	a33b      	add	r3, pc, #236	; (adr r3, 80019d0 <BMP_280_Read+0x140>)
 80018e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e8:	f7fe ffb8 	bl	800085c <__aeabi_ddiv>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4614      	mov	r4, r2
 80018f2:	461d      	mov	r5, r3
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fe2e 	bl	8000558 <__aeabi_f2d>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	ec43 2b10 	vmov	d0, r2, r3
 8001904:	f006 ffb4 	bl	8008870 <log>
 8001908:	ec51 0b10 	vmov	r0, r1, d0
 800190c:	a332      	add	r3, pc, #200	; (adr r3, 80019d8 <BMP_280_Read+0x148>)
 800190e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001912:	f7fe fcc1 	bl	8000298 <__aeabi_dsub>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4610      	mov	r0, r2
 800191c:	4619      	mov	r1, r3
 800191e:	a330      	add	r3, pc, #192	; (adr r3, 80019e0 <BMP_280_Read+0x150>)
 8001920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001924:	f7fe fe70 	bl	8000608 <__aeabi_dmul>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	ec43 2b17 	vmov	d7, r2, r3
 8001930:	eeb0 0a47 	vmov.f32	s0, s14
 8001934:	eef0 0a67 	vmov.f32	s1, s15
 8001938:	f006 ff52 	bl	80087e0 <exp>
 800193c:	ec53 2b10 	vmov	r2, r3, d0
 8001940:	f04f 0000 	mov.w	r0, #0
 8001944:	4929      	ldr	r1, [pc, #164]	; (80019ec <BMP_280_Read+0x15c>)
 8001946:	f7fe fca7 	bl	8000298 <__aeabi_dsub>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4620      	mov	r0, r4
 8001950:	4629      	mov	r1, r5
 8001952:	f7fe fe59 	bl	8000608 <__aeabi_dmul>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4610      	mov	r0, r2
 800195c:	4619      	mov	r1, r3
 800195e:	f7ff f92b 	bl	8000bb8 <__aeabi_d2f>
 8001962:	4603      	mov	r3, r0
 8001964:	62bb      	str	r3, [r7, #40]	; 0x28
	  	  Dato.Temperatura=temperature;
 8001966:	6a3b      	ldr	r3, [r7, #32]
 8001968:	60bb      	str	r3, [r7, #8]
	  	  Dato.Presion=pressure;
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	60fb      	str	r3, [r7, #12]
	  	  Dato.AlturaSet=PointSet;
 800196e:	4b20      	ldr	r3, [pc, #128]	; (80019f0 <BMP_280_Read+0x160>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	61bb      	str	r3, [r7, #24]
	  	  Dato.AlturaSet=PointSet;
 8001974:	4b1e      	ldr	r3, [pc, #120]	; (80019f0 <BMP_280_Read+0x160>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	61bb      	str	r3, [r7, #24]
	  	  if(altitud-Point0<0){
 800197a:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <BMP_280_Read+0x164>)
 800197c:	edd3 7a00 	vldr	s15, [r3]
 8001980:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001984:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001988:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800198c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001990:	d503      	bpl.n	800199a <BMP_280_Read+0x10a>
	  		  altitud=0;
 8001992:	f04f 0300 	mov.w	r3, #0
 8001996:	62bb      	str	r3, [r7, #40]	; 0x28
 8001998:	e008      	b.n	80019ac <BMP_280_Read+0x11c>
	  	  }
	  	  else {
	  		  Dato.altura=altitud-Point0;
 800199a:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <BMP_280_Read+0x164>)
 800199c:	edd3 7a00 	vldr	s15, [r3]
 80019a0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80019a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019a8:	edc7 7a04 	vstr	s15, [r7, #16]
	  	  }

return Dato;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	461d      	mov	r5, r3
 80019b0:	f107 0408 	add.w	r4, r7, #8
 80019b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019b8:	6823      	ldr	r3, [r4, #0]
 80019ba:	602b      	str	r3, [r5, #0]
}
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	3730      	adds	r7, #48	; 0x30
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bdb0      	pop	{r4, r5, r7, pc}
 80019c4:	f3af 8000 	nop.w
 80019c8:	66666666 	.word	0x66666666
 80019cc:	40711266 	.word	0x40711266
 80019d0:	76c8b439 	.word	0x76c8b439
 80019d4:	3f7a9fbe 	.word	0x3f7a9fbe
 80019d8:	772bf62a 	.word	0x772bf62a
 80019dc:	40270d5b 	.word	0x40270d5b
 80019e0:	c35d5e69 	.word	0xc35d5e69
 80019e4:	3fc85b40 	.word	0x3fc85b40
 80019e8:	20000358 	.word	0x20000358
 80019ec:	3ff00000 	.word	0x3ff00000
 80019f0:	20000390 	.word	0x20000390
 80019f4:	2000038c 	.word	0x2000038c

080019f8 <BMP_280_SetPoint>:
void BMP_280_SetPoint(uint8_t PointS){
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
	PointSet=PointS;
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	ee07 3a90 	vmov	s15, r3
 8001a08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <BMP_280_SetPoint+0x28>)
 8001a0e:	edc3 7a00 	vstr	s15, [r3]
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	20000390 	.word	0x20000390

08001a24 <BMP_280_ConfigP0>:

void BMP_280_ConfigP0(){
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
	ReadSensor Dato= BMP_280_Read(&hi2c1);
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	4905      	ldr	r1, [pc, #20]	; (8001a44 <BMP_280_ConfigP0+0x20>)
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff ff2e 	bl	8001890 <BMP_280_Read>
	Point0=Dato.altura;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4a04      	ldr	r2, [pc, #16]	; (8001a48 <BMP_280_ConfigP0+0x24>)
 8001a38:	6013      	str	r3, [r2, #0]
	}
 8001a3a:	bf00      	nop
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000394 	.word	0x20000394
 8001a48:	2000038c 	.word	0x2000038c

08001a4c <MEF>:
static float Limites[]={0.85, 1.20};
extern UART_HandleTypeDef huart2;
extern I2C_HandleTypeDef hi2c1;


void MEF(){
 8001a4c:	b5b0      	push	{r4, r5, r7, lr}
 8001a4e:	b0a6      	sub	sp, #152	; 0x98
 8001a50:	af12      	add	r7, sp, #72	; 0x48
	ReadSensor Dato;
	switch (FlagMEF){
 8001a52:	4b5c      	ldr	r3, [pc, #368]	; (8001bc4 <MEF+0x178>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b05      	cmp	r3, #5
 8001a58:	f200 80ab 	bhi.w	8001bb2 <MEF+0x166>
 8001a5c:	a201      	add	r2, pc, #4	; (adr r2, 8001a64 <MEF+0x18>)
 8001a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a62:	bf00      	nop
 8001a64:	08001a7d 	.word	0x08001a7d
 8001a68:	08001aa9 	.word	0x08001aa9
 8001a6c:	08001b07 	.word	0x08001b07
 8001a70:	08001b43 	.word	0x08001b43
 8001a74:	08001b79 	.word	0x08001b79
 8001a78:	08001af9 	.word	0x08001af9

	case Inicio:
char mensaje[]="Indique la altura de seteo: \r\n";
 8001a7c:	4b52      	ldr	r3, [pc, #328]	; (8001bc8 <MEF+0x17c>)
 8001a7e:	f107 041c 	add.w	r4, r7, #28
 8001a82:	461d      	mov	r5, r3
 8001a84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a88:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001a8c:	c407      	stmia	r4!, {r0, r1, r2}
 8001a8e:	8023      	strh	r3, [r4, #0]
 8001a90:	3402      	adds	r4, #2
 8001a92:	0c1b      	lsrs	r3, r3, #16
 8001a94:	7023      	strb	r3, [r4, #0]
UART_TrasmitMessage(mensaje);
 8001a96:	f107 031c 	add.w	r3, r7, #28
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fe52 	bl	8001744 <UART_TrasmitMessage>
FlagMEF=Altura_Seteo;
 8001aa0:	4b48      	ldr	r3, [pc, #288]	; (8001bc4 <MEF+0x178>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	701a      	strb	r2, [r3, #0]
break;
 8001aa6:	e089      	b.n	8001bbc <MEF+0x170>

	case Altura_Seteo:
		UARTRead_t AlturaSeteo=UART_Read();
 8001aa8:	f7ff fe6e 	bl	8001788 <UART_Read>
 8001aac:	4603      	mov	r3, r0
 8001aae:	833b      	strh	r3, [r7, #24]
		if(AlturaSeteo.estado){
 8001ab0:	7e3b      	ldrb	r3, [r7, #24]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 8081 	beq.w	8001bba <MEF+0x16e>
		    BMP_280_ConfigP0(hi2c1);
 8001ab8:	4c44      	ldr	r4, [pc, #272]	; (8001bcc <MEF+0x180>)
 8001aba:	4668      	mov	r0, sp
 8001abc:	f104 0310 	add.w	r3, r4, #16
 8001ac0:	2244      	movs	r2, #68	; 0x44
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	f004 fe11 	bl	80066ea <memcpy>
 8001ac8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001acc:	f7ff ffaa 	bl	8001a24 <BMP_280_ConfigP0>
		    BMP_280_SetPoint(AlturaSeteo.dato);
 8001ad0:	7e7b      	ldrb	r3, [r7, #25]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff ff90 	bl	80019f8 <BMP_280_SetPoint>
		     Dato= BMP_280_Read();
 8001ad8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff fed7 	bl	8001890 <BMP_280_Read>
		    UART_TrasmitSensor(Dato);
 8001ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001aea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001aec:	f7ff fde6 	bl	80016bc <UART_TrasmitSensor>
		    FlagMEF=Control_Alerta;
 8001af0:	4b34      	ldr	r3, [pc, #208]	; (8001bc4 <MEF+0x178>)
 8001af2:	2205      	movs	r2, #5
 8001af4:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001af6:	e060      	b.n	8001bba <MEF+0x16e>

	case Control_Alerta:
		FlagMEF=ControlAlerta();
 8001af8:	f000 f86c 	bl	8001bd4 <ControlAlerta>
 8001afc:	4603      	mov	r3, r0
 8001afe:	461a      	mov	r2, r3
 8001b00:	4b30      	ldr	r3, [pc, #192]	; (8001bc4 <MEF+0x178>)
 8001b02:	701a      	strb	r2, [r3, #0]
		break;
 8001b04:	e05a      	b.n	8001bbc <MEF+0x170>

	case Alerta_Abajo:
	     Dato= BMP_280_Read();
 8001b06:	463b      	mov	r3, r7
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff fec1 	bl	8001890 <BMP_280_Read>
 8001b0e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001b12:	463d      	mov	r5, r7
 8001b14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b18:	682b      	ldr	r3, [r5, #0]
 8001b1a:	6023      	str	r3, [r4, #0]
	    UART_TrasmitSensor(Dato);
 8001b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b26:	f7ff fdc9 	bl	80016bc <UART_TrasmitSensor>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001b2a:	2120      	movs	r1, #32
 8001b2c:	4828      	ldr	r0, [pc, #160]	; (8001bd0 <MEF+0x184>)
 8001b2e:	f001 fa96 	bl	800305e <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8001b32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b36:	f000 ff2d 	bl	8002994 <HAL_Delay>
		FlagMEF= Control_Alerta;
 8001b3a:	4b22      	ldr	r3, [pc, #136]	; (8001bc4 <MEF+0x178>)
 8001b3c:	2205      	movs	r2, #5
 8001b3e:	701a      	strb	r2, [r3, #0]
		break;
 8001b40:	e03c      	b.n	8001bbc <MEF+0x170>

	case Altura_Alcanzada:
	     Dato= BMP_280_Read();
 8001b42:	463b      	mov	r3, r7
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fea3 	bl	8001890 <BMP_280_Read>
 8001b4a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001b4e:	463d      	mov	r5, r7
 8001b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b54:	682b      	ldr	r3, [r5, #0]
 8001b56:	6023      	str	r3, [r4, #0]
	    UART_TrasmitSensor(Dato);
 8001b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b62:	f7ff fdab 	bl	80016bc <UART_TrasmitSensor>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8001b66:	2201      	movs	r2, #1
 8001b68:	2120      	movs	r1, #32
 8001b6a:	4819      	ldr	r0, [pc, #100]	; (8001bd0 <MEF+0x184>)
 8001b6c:	f001 fa5e 	bl	800302c <HAL_GPIO_WritePin>
		FlagMEF= Control_Alerta;
 8001b70:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <MEF+0x178>)
 8001b72:	2205      	movs	r2, #5
 8001b74:	701a      	strb	r2, [r3, #0]
		break;
 8001b76:	e021      	b.n	8001bbc <MEF+0x170>

	case Alerta_Arriba:
	     Dato= BMP_280_Read();
 8001b78:	463b      	mov	r3, r7
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fe88 	bl	8001890 <BMP_280_Read>
 8001b80:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001b84:	463d      	mov	r5, r7
 8001b86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b8a:	682b      	ldr	r3, [r5, #0]
 8001b8c:	6023      	str	r3, [r4, #0]
	    UART_TrasmitSensor(Dato);
 8001b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b98:	f7ff fd90 	bl	80016bc <UART_TrasmitSensor>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001b9c:	2120      	movs	r1, #32
 8001b9e:	480c      	ldr	r0, [pc, #48]	; (8001bd0 <MEF+0x184>)
 8001ba0:	f001 fa5d 	bl	800305e <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8001ba4:	2064      	movs	r0, #100	; 0x64
 8001ba6:	f000 fef5 	bl	8002994 <HAL_Delay>
		FlagMEF= Control_Alerta;
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <MEF+0x178>)
 8001bac:	2205      	movs	r2, #5
 8001bae:	701a      	strb	r2, [r3, #0]
		break;
 8001bb0:	e004      	b.n	8001bbc <MEF+0x170>
	default:
	FlagMEF=Inicio;
 8001bb2:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <MEF+0x178>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	701a      	strb	r2, [r3, #0]
	}
}
 8001bb8:	e000      	b.n	8001bbc <MEF+0x170>
		break;
 8001bba:	bf00      	nop
}
 8001bbc:	bf00      	nop
 8001bbe:	3750      	adds	r7, #80	; 0x50
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bdb0      	pop	{r4, r5, r7, pc}
 8001bc4:	200003e8 	.word	0x200003e8
 8001bc8:	08009058 	.word	0x08009058
 8001bcc:	20000394 	.word	0x20000394
 8001bd0:	40020000 	.word	0x40020000

08001bd4 <ControlAlerta>:

EstadoAlerta_t ControlAlerta(){
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
	enum EstadoMef Control;
	ReadSensor Dat=BMP_280_Read();
 8001bda:	463b      	mov	r3, r7
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff fe57 	bl	8001890 <BMP_280_Read>
if (Dat.AlturaSet/Dat.altura<Limites[0]){
 8001be2:	edd7 6a04 	vldr	s13, [r7, #16]
 8001be6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001bee:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <ControlAlerta+0x7c>)
 8001bf0:	edd3 7a00 	vldr	s15, [r3]
 8001bf4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfc:	d502      	bpl.n	8001c04 <ControlAlerta+0x30>
	Control=Alerta_Abajo;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	75fb      	strb	r3, [r7, #23]
 8001c02:	e020      	b.n	8001c46 <ControlAlerta+0x72>
	}
else if(Dat.AlturaSet/Dat.altura>Limites[0] && Dat.AlturaSet/Dat.altura>Limites[1] ) {
 8001c04:	edd7 6a04 	vldr	s13, [r7, #16]
 8001c08:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c10:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <ControlAlerta+0x7c>)
 8001c12:	edd3 7a00 	vldr	s15, [r3]
 8001c16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1e:	dd10      	ble.n	8001c42 <ControlAlerta+0x6e>
 8001c20:	edd7 6a04 	vldr	s13, [r7, #16]
 8001c24:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c2c:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <ControlAlerta+0x7c>)
 8001c2e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3a:	dd02      	ble.n	8001c42 <ControlAlerta+0x6e>
	Control=Altura_Alcanzada;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	75fb      	strb	r3, [r7, #23]
 8001c40:	e001      	b.n	8001c46 <ControlAlerta+0x72>
}
else {
	Control=Alerta_Arriba;
 8001c42:	2304      	movs	r3, #4
 8001c44:	75fb      	strb	r3, [r7, #23]
}
return Control;
 8001c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3718      	adds	r7, #24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20000004 	.word	0x20000004

08001c54 <bmp280_init_default_params>:
#define BMP280_RESET_VALUE     0xB6




void bmp280_init_default_params(bmp280_params_t *params) {
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2203      	movs	r2, #3
 8001c60:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2203      	movs	r2, #3
 8001c6c:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2203      	movs	r2, #3
 8001c72:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2203      	movs	r2, #3
 8001c78:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2203      	movs	r2, #3
 8001c7e:	715a      	strb	r2, [r3, #5]
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08a      	sub	sp, #40	; 0x28
 8001c90:	af04      	add	r7, sp, #16
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	460b      	mov	r3, r1
 8001c96:	607a      	str	r2, [r7, #4]
 8001c98:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001ca6:	7afb      	ldrb	r3, [r7, #11]
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	8af9      	ldrh	r1, [r7, #22]
 8001cac:	f241 3388 	movw	r3, #5000	; 0x1388
 8001cb0:	9302      	str	r3, [sp, #8]
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	9301      	str	r3, [sp, #4]
 8001cb6:	f107 0314 	add.w	r3, r7, #20
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	f001 fc27 	bl	8003510 <HAL_I2C_Mem_Read>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d10b      	bne.n	8001ce0 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001cc8:	7d7b      	ldrb	r3, [r7, #21]
 8001cca:	021b      	lsls	r3, r3, #8
 8001ccc:	b21a      	sxth	r2, r3
 8001cce:	7d3b      	ldrb	r3, [r7, #20]
 8001cd0:	b21b      	sxth	r3, r3
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	b21b      	sxth	r3, r3
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	801a      	strh	r2, [r3, #0]
		return true;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e000      	b.n	8001ce2 <read_register16+0x56>
	} else
		return false;
 8001ce0:	2300      	movs	r3, #0

}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001cea:	b590      	push	{r4, r7, lr}
 8001cec:	b08b      	sub	sp, #44	; 0x2c
 8001cee:	af04      	add	r7, sp, #16
 8001cf0:	60f8      	str	r0, [r7, #12]
 8001cf2:	607a      	str	r2, [r7, #4]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	72fb      	strb	r3, [r7, #11]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001d0a:	7afb      	ldrb	r3, [r7, #11]
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	7abb      	ldrb	r3, [r7, #10]
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	8af9      	ldrh	r1, [r7, #22]
 8001d14:	f241 3488 	movw	r4, #5000	; 0x1388
 8001d18:	9402      	str	r4, [sp, #8]
 8001d1a:	9301      	str	r3, [sp, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	2301      	movs	r3, #1
 8001d22:	f001 fbf5 	bl	8003510 <HAL_I2C_Mem_Read>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <read_data+0x46>
		return 0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	e000      	b.n	8001d32 <read_data+0x48>
	else
		return 1;
 8001d30:	2301      	movs	r3, #1

}
 8001d32:	4618      	mov	r0, r3
 8001d34:	371c      	adds	r7, #28
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd90      	pop	{r4, r7, pc}

08001d3a <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	461a      	mov	r2, r3
 8001d46:	2188      	movs	r1, #136	; 0x88
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7ff ff9f 	bl	8001c8c <read_register16>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d06f      	beq.n	8001e34 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3302      	adds	r3, #2
 8001d58:	461a      	mov	r2, r3
 8001d5a:	218a      	movs	r1, #138	; 0x8a
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff ff95 	bl	8001c8c <read_register16>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d065      	beq.n	8001e34 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	218c      	movs	r1, #140	; 0x8c
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff ff8b 	bl	8001c8c <read_register16>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d05b      	beq.n	8001e34 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3306      	adds	r3, #6
 8001d80:	461a      	mov	r2, r3
 8001d82:	218e      	movs	r1, #142	; 0x8e
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff ff81 	bl	8001c8c <read_register16>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d051      	beq.n	8001e34 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3308      	adds	r3, #8
 8001d94:	461a      	mov	r2, r3
 8001d96:	2190      	movs	r1, #144	; 0x90
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff ff77 	bl	8001c8c <read_register16>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d047      	beq.n	8001e34 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	330a      	adds	r3, #10
 8001da8:	461a      	mov	r2, r3
 8001daa:	2192      	movs	r1, #146	; 0x92
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff ff6d 	bl	8001c8c <read_register16>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d03d      	beq.n	8001e34 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	330c      	adds	r3, #12
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	2194      	movs	r1, #148	; 0x94
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff ff63 	bl	8001c8c <read_register16>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d033      	beq.n	8001e34 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	330e      	adds	r3, #14
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	2196      	movs	r1, #150	; 0x96
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff ff59 	bl	8001c8c <read_register16>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d029      	beq.n	8001e34 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3310      	adds	r3, #16
 8001de4:	461a      	mov	r2, r3
 8001de6:	2198      	movs	r1, #152	; 0x98
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff ff4f 	bl	8001c8c <read_register16>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d01f      	beq.n	8001e34 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3312      	adds	r3, #18
 8001df8:	461a      	mov	r2, r3
 8001dfa:	219a      	movs	r1, #154	; 0x9a
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff ff45 	bl	8001c8c <read_register16>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d015      	beq.n	8001e34 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3314      	adds	r3, #20
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	219c      	movs	r1, #156	; 0x9c
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7ff ff3b 	bl	8001c8c <read_register16>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00b      	beq.n	8001e34 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001e20:	461a      	mov	r2, r3
 8001e22:	219e      	movs	r1, #158	; 0x9e
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff ff31 	bl	8001c8c <read_register16>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <read_calibration_data+0xfa>

		return true;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e000      	b.n	8001e36 <read_calibration_data+0xfc>
	}

	return false;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b084      	sub	sp, #16
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f103 0218 	add.w	r2, r3, #24
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	21a1      	movs	r1, #161	; 0xa1
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff ff4a 	bl	8001cea <read_data>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d14b      	bne.n	8001ef4 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	331a      	adds	r3, #26
 8001e60:	461a      	mov	r2, r3
 8001e62:	21e1      	movs	r1, #225	; 0xe1
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7ff ff11 	bl	8001c8c <read_register16>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d041      	beq.n	8001ef4 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f103 021c 	add.w	r2, r3, #28
 8001e76:	2301      	movs	r3, #1
 8001e78:	21e3      	movs	r1, #227	; 0xe3
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff ff35 	bl	8001cea <read_data>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d136      	bne.n	8001ef4 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8001e86:	f107 030e 	add.w	r3, r7, #14
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	21e4      	movs	r1, #228	; 0xe4
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff fefc 	bl	8001c8c <read_register16>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d02c      	beq.n	8001ef4 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001e9a:	f107 030c 	add.w	r3, r7, #12
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	21e5      	movs	r1, #229	; 0xe5
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff fef2 	bl	8001c8c <read_register16>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d022      	beq.n	8001ef4 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	21e7      	movs	r1, #231	; 0xe7
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7ff ff16 	bl	8001cea <read_data>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d117      	bne.n	8001ef4 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8001ec4:	89fb      	ldrh	r3, [r7, #14]
 8001ec6:	011b      	lsls	r3, r3, #4
 8001ec8:	b21b      	sxth	r3, r3
 8001eca:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8001ece:	b21a      	sxth	r2, r3
 8001ed0:	89fb      	ldrh	r3, [r7, #14]
 8001ed2:	121b      	asrs	r3, r3, #8
 8001ed4:	b21b      	sxth	r3, r3
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	b21b      	sxth	r3, r3
 8001edc:	4313      	orrs	r3, r2
 8001ede:	b21a      	sxth	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001ee4:	89bb      	ldrh	r3, [r7, #12]
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	b21a      	sxth	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	841a      	strh	r2, [r3, #32]

		return true;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e000      	b.n	8001ef6 <read_hum_calibration_data+0xb8>
	}

	return false;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b088      	sub	sp, #32
 8001f02:	af04      	add	r7, sp, #16
 8001f04:	6078      	str	r0, [r7, #4]
 8001f06:	460b      	mov	r3, r1
 8001f08:	70fb      	strb	r3, [r7, #3]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001f1a:	78fb      	ldrb	r3, [r7, #3]
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	89f9      	ldrh	r1, [r7, #14]
 8001f20:	f242 7310 	movw	r3, #10000	; 0x2710
 8001f24:	9302      	str	r3, [sp, #8]
 8001f26:	2301      	movs	r3, #1
 8001f28:	9301      	str	r3, [sp, #4]
 8001f2a:	1cbb      	adds	r3, r7, #2
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	2301      	movs	r3, #1
 8001f30:	f001 f9f4 	bl	800331c <HAL_I2C_Mem_Write>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <write_register8+0x40>
		return false;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	e000      	b.n	8001f40 <write_register8+0x42>
	else
		return true;
 8001f3e:	2301      	movs	r3, #1
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001f56:	2b76      	cmp	r3, #118	; 0x76
 8001f58:	d005      	beq.n	8001f66 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001f5e:	2b77      	cmp	r3, #119	; 0x77
 8001f60:	d001      	beq.n	8001f66 <bmp280_init+0x1e>

		return false;
 8001f62:	2300      	movs	r3, #0
 8001f64:	e099      	b.n	800209a <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	21d0      	movs	r1, #208	; 0xd0
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7ff feba 	bl	8001cea <read_data>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <bmp280_init+0x38>
		return false;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	e08c      	b.n	800209a <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001f86:	2b58      	cmp	r3, #88	; 0x58
 8001f88:	d006      	beq.n	8001f98 <bmp280_init+0x50>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001f90:	2b60      	cmp	r3, #96	; 0x60
 8001f92:	d001      	beq.n	8001f98 <bmp280_init+0x50>

		return false;
 8001f94:	2300      	movs	r3, #0
 8001f96:	e080      	b.n	800209a <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001f98:	22b6      	movs	r2, #182	; 0xb6
 8001f9a:	21e0      	movs	r1, #224	; 0xe0
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff ffae 	bl	8001efe <write_register8>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <bmp280_init+0x64>
		return false;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	e076      	b.n	800209a <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001fac:	f107 020c 	add.w	r2, r7, #12
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	21f3      	movs	r1, #243	; 0xf3
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff fe98 	bl	8001cea <read_data>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1f5      	bne.n	8001fac <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001fc0:	7b3b      	ldrb	r3, [r7, #12]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1f0      	bne.n	8001fac <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff feb5 	bl	8001d3a <read_calibration_data>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	f083 0301 	eor.w	r3, r3, #1
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d100      	bne.n	8001fde <bmp280_init+0x96>
 8001fdc:	e001      	b.n	8001fe2 <bmp280_init+0x9a>
		return false;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	e05b      	b.n	800209a <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001fe8:	2b60      	cmp	r3, #96	; 0x60
 8001fea:	d10a      	bne.n	8002002 <bmp280_init+0xba>
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff ff26 	bl	8001e3e <read_hum_calibration_data>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	f083 0301 	eor.w	r3, r3, #1
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <bmp280_init+0xba>
		return false;
 8001ffe:	2300      	movs	r3, #0
 8002000:	e04b      	b.n	800209a <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	795b      	ldrb	r3, [r3, #5]
 8002006:	015b      	lsls	r3, r3, #5
 8002008:	b25a      	sxtb	r2, r3
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	785b      	ldrb	r3, [r3, #1]
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	b25b      	sxtb	r3, r3
 8002012:	4313      	orrs	r3, r2
 8002014:	b25b      	sxtb	r3, r3
 8002016:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8002018:	7bfb      	ldrb	r3, [r7, #15]
 800201a:	461a      	mov	r2, r3
 800201c:	21f5      	movs	r1, #245	; 0xf5
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff ff6d 	bl	8001efe <write_register8>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <bmp280_init+0xe6>
		return false;
 800202a:	2300      	movs	r3, #0
 800202c:	e035      	b.n	800209a <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d102      	bne.n	800203c <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	78db      	ldrb	r3, [r3, #3]
 8002040:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8002042:	b25a      	sxtb	r2, r3
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	789b      	ldrb	r3, [r3, #2]
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	b25b      	sxtb	r3, r3
 800204c:	4313      	orrs	r3, r2
 800204e:	b25a      	sxtb	r2, r3
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	b25b      	sxtb	r3, r3
 8002056:	4313      	orrs	r3, r2
 8002058:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 800205a:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002062:	2b60      	cmp	r3, #96	; 0x60
 8002064:	d10d      	bne.n	8002082 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	791b      	ldrb	r3, [r3, #4]
 800206a:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 800206c:	7b7b      	ldrb	r3, [r7, #13]
 800206e:	461a      	mov	r2, r3
 8002070:	21f2      	movs	r1, #242	; 0xf2
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff ff43 	bl	8001efe <write_register8>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <bmp280_init+0x13a>
			return false;
 800207e:	2300      	movs	r3, #0
 8002080:	e00b      	b.n	800209a <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8002082:	7bbb      	ldrb	r3, [r7, #14]
 8002084:	461a      	mov	r2, r3
 8002086:	21f4      	movs	r1, #244	; 0xf4
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff ff38 	bl	8001efe <write_register8>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <bmp280_init+0x150>
		return false;
 8002094:	2300      	movs	r3, #0
 8002096:	e000      	b.n	800209a <bmp280_init+0x152>
	}

	return true;
 8002098:	2301      	movs	r3, #1
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 80020a2:	b480      	push	{r7}
 80020a4:	b087      	sub	sp, #28
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	60f8      	str	r0, [r7, #12]
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	10da      	asrs	r2, r3, #3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80020c0:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80020c4:	12db      	asrs	r3, r3, #11
 80020c6:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	111b      	asrs	r3, r3, #4
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	8812      	ldrh	r2, [r2, #0]
 80020d0:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	1112      	asrs	r2, r2, #4
 80020d6:	68f9      	ldr	r1, [r7, #12]
 80020d8:	8809      	ldrh	r1, [r1, #0]
 80020da:	1a52      	subs	r2, r2, r1
 80020dc:	fb02 f303 	mul.w	r3, r2, r3
 80020e0:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80020e8:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80020ec:	139b      	asrs	r3, r3, #14
 80020ee:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	441a      	add	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	4613      	mov	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	3380      	adds	r3, #128	; 0x80
 8002106:	121b      	asrs	r3, r3, #8
}
 8002108:	4618      	mov	r0, r3
 800210a:	371c      	adds	r7, #28
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8002114:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002118:	b0cc      	sub	sp, #304	; 0x130
 800211a:	af00      	add	r7, sp, #0
 800211c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8002120:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8002124:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8002128:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800212c:	17da      	asrs	r2, r3, #31
 800212e:	461c      	mov	r4, r3
 8002130:	4615      	mov	r5, r2
 8002132:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8002136:	f145 3bff 	adc.w	fp, r5, #4294967295
 800213a:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 800213e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8002142:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002146:	fb03 f102 	mul.w	r1, r3, r2
 800214a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800214e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002152:	fb02 f303 	mul.w	r3, r2, r3
 8002156:	18ca      	adds	r2, r1, r3
 8002158:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800215c:	fba3 8903 	umull	r8, r9, r3, r3
 8002160:	eb02 0309 	add.w	r3, r2, r9
 8002164:	4699      	mov	r9, r3
 8002166:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800216a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800216e:	b21b      	sxth	r3, r3
 8002170:	17da      	asrs	r2, r3, #31
 8002172:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002176:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800217a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800217e:	4603      	mov	r3, r0
 8002180:	fb03 f209 	mul.w	r2, r3, r9
 8002184:	460b      	mov	r3, r1
 8002186:	fb08 f303 	mul.w	r3, r8, r3
 800218a:	4413      	add	r3, r2
 800218c:	4602      	mov	r2, r0
 800218e:	fba8 1202 	umull	r1, r2, r8, r2
 8002192:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002196:	460a      	mov	r2, r1
 8002198:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800219c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80021a0:	4413      	add	r3, r2
 80021a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80021a6:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80021aa:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 80021ae:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80021b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80021b6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80021ba:	b21b      	sxth	r3, r3
 80021bc:	17da      	asrs	r2, r3, #31
 80021be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80021c2:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80021c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80021ca:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80021ce:	462a      	mov	r2, r5
 80021d0:	fb02 f203 	mul.w	r2, r2, r3
 80021d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80021d8:	4621      	mov	r1, r4
 80021da:	fb01 f303 	mul.w	r3, r1, r3
 80021de:	441a      	add	r2, r3
 80021e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80021e4:	4621      	mov	r1, r4
 80021e6:	fba3 1301 	umull	r1, r3, r3, r1
 80021ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80021ee:	460b      	mov	r3, r1
 80021f0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80021f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80021f8:	18d3      	adds	r3, r2, r3
 80021fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80021fe:	f04f 0000 	mov.w	r0, #0
 8002202:	f04f 0100 	mov.w	r1, #0
 8002206:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800220a:	462b      	mov	r3, r5
 800220c:	0459      	lsls	r1, r3, #17
 800220e:	4623      	mov	r3, r4
 8002210:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8002214:	4623      	mov	r3, r4
 8002216:	0458      	lsls	r0, r3, #17
 8002218:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800221c:	1814      	adds	r4, r2, r0
 800221e:	643c      	str	r4, [r7, #64]	; 0x40
 8002220:	414b      	adcs	r3, r1
 8002222:	647b      	str	r3, [r7, #68]	; 0x44
 8002224:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002228:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 800222c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002230:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002234:	b21b      	sxth	r3, r3
 8002236:	17da      	asrs	r2, r3, #31
 8002238:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800223c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002240:	f04f 0000 	mov.w	r0, #0
 8002244:	f04f 0100 	mov.w	r1, #0
 8002248:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800224c:	00d9      	lsls	r1, r3, #3
 800224e:	2000      	movs	r0, #0
 8002250:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8002254:	1814      	adds	r4, r2, r0
 8002256:	63bc      	str	r4, [r7, #56]	; 0x38
 8002258:	414b      	adcs	r3, r1
 800225a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800225c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8002260:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8002264:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8002268:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800226c:	fb03 f102 	mul.w	r1, r3, r2
 8002270:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8002274:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002278:	fb02 f303 	mul.w	r3, r2, r3
 800227c:	18ca      	adds	r2, r1, r3
 800227e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002282:	fba3 1303 	umull	r1, r3, r3, r3
 8002286:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800228a:	460b      	mov	r3, r1
 800228c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002290:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002294:	18d3      	adds	r3, r2, r3
 8002296:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800229a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800229e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80022a2:	b21b      	sxth	r3, r3
 80022a4:	17da      	asrs	r2, r3, #31
 80022a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80022aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80022ae:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80022b2:	462b      	mov	r3, r5
 80022b4:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80022b8:	4642      	mov	r2, r8
 80022ba:	fb02 f203 	mul.w	r2, r2, r3
 80022be:	464b      	mov	r3, r9
 80022c0:	4621      	mov	r1, r4
 80022c2:	fb01 f303 	mul.w	r3, r1, r3
 80022c6:	4413      	add	r3, r2
 80022c8:	4622      	mov	r2, r4
 80022ca:	4641      	mov	r1, r8
 80022cc:	fba2 1201 	umull	r1, r2, r2, r1
 80022d0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80022d4:	460a      	mov	r2, r1
 80022d6:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80022da:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80022de:	4413      	add	r3, r2
 80022e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80022e4:	f04f 0000 	mov.w	r0, #0
 80022e8:	f04f 0100 	mov.w	r1, #0
 80022ec:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80022f0:	4623      	mov	r3, r4
 80022f2:	0a18      	lsrs	r0, r3, #8
 80022f4:	462b      	mov	r3, r5
 80022f6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80022fa:	462b      	mov	r3, r5
 80022fc:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 80022fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002302:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002306:	b21b      	sxth	r3, r3
 8002308:	17da      	asrs	r2, r3, #31
 800230a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800230e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002312:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002316:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 800231a:	464a      	mov	r2, r9
 800231c:	fb02 f203 	mul.w	r2, r2, r3
 8002320:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002324:	4644      	mov	r4, r8
 8002326:	fb04 f303 	mul.w	r3, r4, r3
 800232a:	441a      	add	r2, r3
 800232c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002330:	4644      	mov	r4, r8
 8002332:	fba3 4304 	umull	r4, r3, r3, r4
 8002336:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800233a:	4623      	mov	r3, r4
 800233c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002340:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002344:	18d3      	adds	r3, r2, r3
 8002346:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800234a:	f04f 0200 	mov.w	r2, #0
 800234e:	f04f 0300 	mov.w	r3, #0
 8002352:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002356:	464c      	mov	r4, r9
 8002358:	0323      	lsls	r3, r4, #12
 800235a:	4644      	mov	r4, r8
 800235c:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8002360:	4644      	mov	r4, r8
 8002362:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8002364:	1884      	adds	r4, r0, r2
 8002366:	633c      	str	r4, [r7, #48]	; 0x30
 8002368:	eb41 0303 	adc.w	r3, r1, r3
 800236c:	637b      	str	r3, [r7, #52]	; 0x34
 800236e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002372:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8002376:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800237a:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 800237e:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8002382:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8002386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800238a:	88db      	ldrh	r3, [r3, #6]
 800238c:	b29b      	uxth	r3, r3
 800238e:	2200      	movs	r2, #0
 8002390:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002394:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002398:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800239c:	462b      	mov	r3, r5
 800239e:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80023a2:	4642      	mov	r2, r8
 80023a4:	fb02 f203 	mul.w	r2, r2, r3
 80023a8:	464b      	mov	r3, r9
 80023aa:	4621      	mov	r1, r4
 80023ac:	fb01 f303 	mul.w	r3, r1, r3
 80023b0:	4413      	add	r3, r2
 80023b2:	4622      	mov	r2, r4
 80023b4:	4641      	mov	r1, r8
 80023b6:	fba2 1201 	umull	r1, r2, r2, r1
 80023ba:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80023be:	460a      	mov	r2, r1
 80023c0:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80023c4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80023c8:	4413      	add	r3, r2
 80023ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	f04f 0300 	mov.w	r3, #0
 80023d6:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80023da:	4629      	mov	r1, r5
 80023dc:	104a      	asrs	r2, r1, #1
 80023de:	4629      	mov	r1, r5
 80023e0:	17cb      	asrs	r3, r1, #31
 80023e2:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 80023e6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80023ea:	4313      	orrs	r3, r2
 80023ec:	d101      	bne.n	80023f2 <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 80023ee:	2300      	movs	r3, #0
 80023f0:	e148      	b.n	8002684 <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 80023f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80023f6:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80023fa:	17da      	asrs	r2, r3, #31
 80023fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80023fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002400:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8002404:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8002408:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800240c:	105b      	asrs	r3, r3, #1
 800240e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002412:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002416:	07db      	lsls	r3, r3, #31
 8002418:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800241c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8002420:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002424:	4621      	mov	r1, r4
 8002426:	1a89      	subs	r1, r1, r2
 8002428:	67b9      	str	r1, [r7, #120]	; 0x78
 800242a:	4629      	mov	r1, r5
 800242c:	eb61 0303 	sbc.w	r3, r1, r3
 8002430:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002432:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002436:	4622      	mov	r2, r4
 8002438:	462b      	mov	r3, r5
 800243a:	1891      	adds	r1, r2, r2
 800243c:	6239      	str	r1, [r7, #32]
 800243e:	415b      	adcs	r3, r3
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
 8002442:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002446:	4621      	mov	r1, r4
 8002448:	1851      	adds	r1, r2, r1
 800244a:	61b9      	str	r1, [r7, #24]
 800244c:	4629      	mov	r1, r5
 800244e:	414b      	adcs	r3, r1
 8002450:	61fb      	str	r3, [r7, #28]
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	f04f 0300 	mov.w	r3, #0
 800245a:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800245e:	4649      	mov	r1, r9
 8002460:	018b      	lsls	r3, r1, #6
 8002462:	4641      	mov	r1, r8
 8002464:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002468:	4641      	mov	r1, r8
 800246a:	018a      	lsls	r2, r1, #6
 800246c:	4641      	mov	r1, r8
 800246e:	1889      	adds	r1, r1, r2
 8002470:	6139      	str	r1, [r7, #16]
 8002472:	4649      	mov	r1, r9
 8002474:	eb43 0101 	adc.w	r1, r3, r1
 8002478:	6179      	str	r1, [r7, #20]
 800247a:	f04f 0200 	mov.w	r2, #0
 800247e:	f04f 0300 	mov.w	r3, #0
 8002482:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002486:	4649      	mov	r1, r9
 8002488:	008b      	lsls	r3, r1, #2
 800248a:	4641      	mov	r1, r8
 800248c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002490:	4641      	mov	r1, r8
 8002492:	008a      	lsls	r2, r1, #2
 8002494:	4610      	mov	r0, r2
 8002496:	4619      	mov	r1, r3
 8002498:	4603      	mov	r3, r0
 800249a:	4622      	mov	r2, r4
 800249c:	189b      	adds	r3, r3, r2
 800249e:	60bb      	str	r3, [r7, #8]
 80024a0:	460b      	mov	r3, r1
 80024a2:	462a      	mov	r2, r5
 80024a4:	eb42 0303 	adc.w	r3, r2, r3
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	f04f 0200 	mov.w	r2, #0
 80024ae:	f04f 0300 	mov.w	r3, #0
 80024b2:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80024b6:	4649      	mov	r1, r9
 80024b8:	008b      	lsls	r3, r1, #2
 80024ba:	4641      	mov	r1, r8
 80024bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024c0:	4641      	mov	r1, r8
 80024c2:	008a      	lsls	r2, r1, #2
 80024c4:	4610      	mov	r0, r2
 80024c6:	4619      	mov	r1, r3
 80024c8:	4603      	mov	r3, r0
 80024ca:	4622      	mov	r2, r4
 80024cc:	189b      	adds	r3, r3, r2
 80024ce:	673b      	str	r3, [r7, #112]	; 0x70
 80024d0:	462b      	mov	r3, r5
 80024d2:	460a      	mov	r2, r1
 80024d4:	eb42 0303 	adc.w	r3, r2, r3
 80024d8:	677b      	str	r3, [r7, #116]	; 0x74
 80024da:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80024de:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80024e2:	f7fe fbb9 	bl	8000c58 <__aeabi_ldivmod>
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 80024ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80024f2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80024f6:	b21b      	sxth	r3, r3
 80024f8:	17da      	asrs	r2, r3, #31
 80024fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80024fc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80024fe:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002502:	f04f 0000 	mov.w	r0, #0
 8002506:	f04f 0100 	mov.w	r1, #0
 800250a:	0b50      	lsrs	r0, r2, #13
 800250c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8002510:	1359      	asrs	r1, r3, #13
 8002512:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8002516:	462b      	mov	r3, r5
 8002518:	fb00 f203 	mul.w	r2, r0, r3
 800251c:	4623      	mov	r3, r4
 800251e:	fb03 f301 	mul.w	r3, r3, r1
 8002522:	4413      	add	r3, r2
 8002524:	4622      	mov	r2, r4
 8002526:	fba2 1200 	umull	r1, r2, r2, r0
 800252a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800252e:	460a      	mov	r2, r1
 8002530:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8002534:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002538:	4413      	add	r3, r2
 800253a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800253e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002542:	f04f 0000 	mov.w	r0, #0
 8002546:	f04f 0100 	mov.w	r1, #0
 800254a:	0b50      	lsrs	r0, r2, #13
 800254c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8002550:	1359      	asrs	r1, r3, #13
 8002552:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002556:	462b      	mov	r3, r5
 8002558:	fb00 f203 	mul.w	r2, r0, r3
 800255c:	4623      	mov	r3, r4
 800255e:	fb03 f301 	mul.w	r3, r3, r1
 8002562:	4413      	add	r3, r2
 8002564:	4622      	mov	r2, r4
 8002566:	fba2 1200 	umull	r1, r2, r2, r0
 800256a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800256e:	460a      	mov	r2, r1
 8002570:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8002574:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002578:	4413      	add	r3, r2
 800257a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f04f 0300 	mov.w	r3, #0
 8002586:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800258a:	4621      	mov	r1, r4
 800258c:	0e4a      	lsrs	r2, r1, #25
 800258e:	4629      	mov	r1, r5
 8002590:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8002594:	4629      	mov	r1, r5
 8002596:	164b      	asrs	r3, r1, #25
 8002598:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 800259c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80025a0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80025a4:	b21b      	sxth	r3, r3
 80025a6:	17da      	asrs	r2, r3, #31
 80025a8:	663b      	str	r3, [r7, #96]	; 0x60
 80025aa:	667a      	str	r2, [r7, #100]	; 0x64
 80025ac:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80025b0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80025b4:	462a      	mov	r2, r5
 80025b6:	fb02 f203 	mul.w	r2, r2, r3
 80025ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80025be:	4621      	mov	r1, r4
 80025c0:	fb01 f303 	mul.w	r3, r1, r3
 80025c4:	4413      	add	r3, r2
 80025c6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80025ca:	4621      	mov	r1, r4
 80025cc:	fba2 1201 	umull	r1, r2, r2, r1
 80025d0:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80025d4:	460a      	mov	r2, r1
 80025d6:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80025da:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80025de:	4413      	add	r3, r2
 80025e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80025f0:	4621      	mov	r1, r4
 80025f2:	0cca      	lsrs	r2, r1, #19
 80025f4:	4629      	mov	r1, r5
 80025f6:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80025fa:	4629      	mov	r1, r5
 80025fc:	14cb      	asrs	r3, r1, #19
 80025fe:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8002602:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8002606:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800260a:	1884      	adds	r4, r0, r2
 800260c:	65bc      	str	r4, [r7, #88]	; 0x58
 800260e:	eb41 0303 	adc.w	r3, r1, r3
 8002612:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002614:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8002618:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800261c:	4621      	mov	r1, r4
 800261e:	1889      	adds	r1, r1, r2
 8002620:	6539      	str	r1, [r7, #80]	; 0x50
 8002622:	4629      	mov	r1, r5
 8002624:	eb43 0101 	adc.w	r1, r3, r1
 8002628:	6579      	str	r1, [r7, #84]	; 0x54
 800262a:	f04f 0000 	mov.w	r0, #0
 800262e:	f04f 0100 	mov.w	r1, #0
 8002632:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002636:	4623      	mov	r3, r4
 8002638:	0a18      	lsrs	r0, r3, #8
 800263a:	462b      	mov	r3, r5
 800263c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002640:	462b      	mov	r3, r5
 8002642:	1219      	asrs	r1, r3, #8
 8002644:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002648:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800264c:	b21b      	sxth	r3, r3
 800264e:	17da      	asrs	r2, r3, #31
 8002650:	64bb      	str	r3, [r7, #72]	; 0x48
 8002652:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	f04f 0300 	mov.w	r3, #0
 800265c:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8002660:	464c      	mov	r4, r9
 8002662:	0123      	lsls	r3, r4, #4
 8002664:	4644      	mov	r4, r8
 8002666:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800266a:	4644      	mov	r4, r8
 800266c:	0122      	lsls	r2, r4, #4
 800266e:	1884      	adds	r4, r0, r2
 8002670:	603c      	str	r4, [r7, #0]
 8002672:	eb41 0303 	adc.w	r3, r1, r3
 8002676:	607b      	str	r3, [r7, #4]
 8002678:	e9d7 3400 	ldrd	r3, r4, [r7]
 800267c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 8002680:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 8002684:	4618      	mov	r0, r3
 8002686:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800268a:	46bd      	mov	sp, r7
 800268c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002690 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8002690:	b480      	push	{r7}
 8002692:	b087      	sub	sp, #28
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80026a2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	039a      	lsls	r2, r3, #14
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80026ae:	051b      	lsls	r3, r3, #20
 80026b0:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80026b8:	4619      	mov	r1, r3
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	fb01 f303 	mul.w	r3, r1, r3
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80026c6:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 80026ce:	4611      	mov	r1, r2
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	fb01 f202 	mul.w	r2, r1, r2
 80026d6:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80026d8:	68f9      	ldr	r1, [r7, #12]
 80026da:	7f09      	ldrb	r1, [r1, #28]
 80026dc:	4608      	mov	r0, r1
 80026de:	6979      	ldr	r1, [r7, #20]
 80026e0:	fb00 f101 	mul.w	r1, r0, r1
 80026e4:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80026e6:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80026ea:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80026ee:	1292      	asrs	r2, r2, #10
 80026f0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 80026f4:	68f9      	ldr	r1, [r7, #12]
 80026f6:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 80026fa:	fb01 f202 	mul.w	r2, r1, r2
 80026fe:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8002702:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8002704:	fb02 f303 	mul.w	r3, r2, r3
 8002708:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	13db      	asrs	r3, r3, #15
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	13d2      	asrs	r2, r2, #15
 8002712:	fb02 f303 	mul.w	r3, r2, r3
 8002716:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	7e12      	ldrb	r2, [r2, #24]
 800271c:	fb02 f303 	mul.w	r3, r2, r3
 8002720:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800272e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8002736:	bfa8      	it	ge
 8002738:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 800273c:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	131b      	asrs	r3, r3, #12
}
 8002742:	4618      	mov	r0, r3
 8002744:	371c      	adds	r7, #28
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,	uint32_t *humidity) {
 800274e:	b580      	push	{r7, lr}
 8002750:	b08c      	sub	sp, #48	; 0x30
 8002752:	af00      	add	r7, sp, #0
 8002754:	60f8      	str	r0, [r7, #12]
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	607a      	str	r2, [r7, #4]
 800275a:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002762:	2b60      	cmp	r3, #96	; 0x60
 8002764:	d007      	beq.n	8002776 <bmp280_read_fixed+0x28>
		if (humidity)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d002      	beq.n	8002772 <bmp280_read_fixed+0x24>
			*humidity = 0;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8002772:	2300      	movs	r3, #0
 8002774:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <bmp280_read_fixed+0x32>
 800277c:	2308      	movs	r3, #8
 800277e:	e000      	b.n	8002782 <bmp280_read_fixed+0x34>
 8002780:	2306      	movs	r3, #6
 8002782:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8002784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002786:	b2db      	uxtb	r3, r3
 8002788:	f107 0218 	add.w	r2, r7, #24
 800278c:	21f7      	movs	r1, #247	; 0xf7
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f7ff faab 	bl	8001cea <read_data>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <bmp280_read_fixed+0x50>
		return false;
 800279a:	2300      	movs	r3, #0
 800279c:	e038      	b.n	8002810 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 800279e:	7e3b      	ldrb	r3, [r7, #24]
 80027a0:	031a      	lsls	r2, r3, #12
 80027a2:	7e7b      	ldrb	r3, [r7, #25]
 80027a4:	011b      	lsls	r3, r3, #4
 80027a6:	4313      	orrs	r3, r2
 80027a8:	7eba      	ldrb	r2, [r7, #26]
 80027aa:	0912      	lsrs	r2, r2, #4
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	4313      	orrs	r3, r2
 80027b0:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80027b2:	7efb      	ldrb	r3, [r7, #27]
 80027b4:	031a      	lsls	r2, r3, #12
 80027b6:	7f3b      	ldrb	r3, [r7, #28]
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	4313      	orrs	r3, r2
 80027bc:	7f7a      	ldrb	r2, [r7, #29]
 80027be:	0912      	lsrs	r2, r2, #4
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	4313      	orrs	r3, r2
 80027c4:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 80027c6:	f107 0314 	add.w	r3, r7, #20
 80027ca:	461a      	mov	r2, r3
 80027cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f7ff fc67 	bl	80020a2 <compensate_temperature>
 80027d4:	4602      	mov	r2, r0
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	461a      	mov	r2, r3
 80027de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f7ff fc97 	bl	8002114 <compensate_pressure>
 80027e6:	4602      	mov	r2, r0
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	601a      	str	r2, [r3, #0]

	if (humidity) {
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00d      	beq.n	800280e <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 80027f2:	7fbb      	ldrb	r3, [r7, #30]
 80027f4:	021b      	lsls	r3, r3, #8
 80027f6:	7ffa      	ldrb	r2, [r7, #31]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	461a      	mov	r2, r3
 8002800:	6a39      	ldr	r1, [r7, #32]
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f7ff ff44 	bl	8002690 <compensate_humidity>
 8002808:	4602      	mov	r2, r0
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	601a      	str	r2, [r3, #0]
	}

	return true;
 800280e:	2301      	movs	r3, #1
}
 8002810:	4618      	mov	r0, r3
 8002812:	3730      	adds	r7, #48	; 0x30
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8002818:	b580      	push	{r7, lr}
 800281a:	b088      	sub	sp, #32
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
 8002824:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d002      	beq.n	8002832 <bmp280_read_float+0x1a>
 800282c:	f107 0314 	add.w	r3, r7, #20
 8002830:	e000      	b.n	8002834 <bmp280_read_float+0x1c>
 8002832:	2300      	movs	r3, #0
 8002834:	f107 0218 	add.w	r2, r7, #24
 8002838:	f107 011c 	add.w	r1, r7, #28
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f7ff ff86 	bl	800274e <bmp280_read_fixed>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d028      	beq.n	800289a <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	ee07 3a90 	vmov	s15, r3
 800284e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002852:	eddf 6a14 	vldr	s13, [pc, #80]	; 80028a4 <bmp280_read_float+0x8c>
 8002856:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	ee07 3a90 	vmov	s15, r3
 8002866:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800286a:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80028a8 <bmp280_read_float+0x90>
 800286e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00b      	beq.n	8002896 <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	ee07 3a90 	vmov	s15, r3
 8002884:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002888:	eddf 6a08 	vldr	s13, [pc, #32]	; 80028ac <bmp280_read_float+0x94>
 800288c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <bmp280_read_float+0x84>
	}

	return false;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3720      	adds	r7, #32
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	42c80000 	.word	0x42c80000
 80028a8:	43800000 	.word	0x43800000
 80028ac:	44800000 	.word	0x44800000

080028b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028b4:	4b0e      	ldr	r3, [pc, #56]	; (80028f0 <HAL_Init+0x40>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a0d      	ldr	r2, [pc, #52]	; (80028f0 <HAL_Init+0x40>)
 80028ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HAL_Init+0x40>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a0a      	ldr	r2, [pc, #40]	; (80028f0 <HAL_Init+0x40>)
 80028c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028cc:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <HAL_Init+0x40>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a07      	ldr	r2, [pc, #28]	; (80028f0 <HAL_Init+0x40>)
 80028d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028d8:	2003      	movs	r0, #3
 80028da:	f000 f94f 	bl	8002b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028de:	200f      	movs	r0, #15
 80028e0:	f000 f808 	bl	80028f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028e4:	f7fe fcd6 	bl	8001294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40023c00 	.word	0x40023c00

080028f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028fc:	4b12      	ldr	r3, [pc, #72]	; (8002948 <HAL_InitTick+0x54>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	4b12      	ldr	r3, [pc, #72]	; (800294c <HAL_InitTick+0x58>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	4619      	mov	r1, r3
 8002906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800290a:	fbb3 f3f1 	udiv	r3, r3, r1
 800290e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002912:	4618      	mov	r0, r3
 8002914:	f000 f967 	bl	8002be6 <HAL_SYSTICK_Config>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e00e      	b.n	8002940 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b0f      	cmp	r3, #15
 8002926:	d80a      	bhi.n	800293e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002928:	2200      	movs	r2, #0
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	f04f 30ff 	mov.w	r0, #4294967295
 8002930:	f000 f92f 	bl	8002b92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002934:	4a06      	ldr	r2, [pc, #24]	; (8002950 <HAL_InitTick+0x5c>)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800293a:	2300      	movs	r3, #0
 800293c:	e000      	b.n	8002940 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
}
 8002940:	4618      	mov	r0, r3
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	20000000 	.word	0x20000000
 800294c:	20000010 	.word	0x20000010
 8002950:	2000000c 	.word	0x2000000c

08002954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002958:	4b06      	ldr	r3, [pc, #24]	; (8002974 <HAL_IncTick+0x20>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	4b06      	ldr	r3, [pc, #24]	; (8002978 <HAL_IncTick+0x24>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4413      	add	r3, r2
 8002964:	4a04      	ldr	r2, [pc, #16]	; (8002978 <HAL_IncTick+0x24>)
 8002966:	6013      	str	r3, [r2, #0]
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	20000010 	.word	0x20000010
 8002978:	200003ec 	.word	0x200003ec

0800297c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return uwTick;
 8002980:	4b03      	ldr	r3, [pc, #12]	; (8002990 <HAL_GetTick+0x14>)
 8002982:	681b      	ldr	r3, [r3, #0]
}
 8002984:	4618      	mov	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	200003ec 	.word	0x200003ec

08002994 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800299c:	f7ff ffee 	bl	800297c <HAL_GetTick>
 80029a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ac:	d005      	beq.n	80029ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ae:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <HAL_Delay+0x44>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	461a      	mov	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4413      	add	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029ba:	bf00      	nop
 80029bc:	f7ff ffde 	bl	800297c <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d8f7      	bhi.n	80029bc <HAL_Delay+0x28>
  {
  }
}
 80029cc:	bf00      	nop
 80029ce:	bf00      	nop
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000010 	.word	0x20000010

080029dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029ec:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <__NVIC_SetPriorityGrouping+0x44>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029f8:	4013      	ands	r3, r2
 80029fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a0e:	4a04      	ldr	r2, [pc, #16]	; (8002a20 <__NVIC_SetPriorityGrouping+0x44>)
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	60d3      	str	r3, [r2, #12]
}
 8002a14:	bf00      	nop
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	e000ed00 	.word	0xe000ed00

08002a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a28:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <__NVIC_GetPriorityGrouping+0x18>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	0a1b      	lsrs	r3, r3, #8
 8002a2e:	f003 0307 	and.w	r3, r3, #7
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	e000ed00 	.word	0xe000ed00

08002a40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	db0b      	blt.n	8002a6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a52:	79fb      	ldrb	r3, [r7, #7]
 8002a54:	f003 021f 	and.w	r2, r3, #31
 8002a58:	4907      	ldr	r1, [pc, #28]	; (8002a78 <__NVIC_EnableIRQ+0x38>)
 8002a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5e:	095b      	lsrs	r3, r3, #5
 8002a60:	2001      	movs	r0, #1
 8002a62:	fa00 f202 	lsl.w	r2, r0, r2
 8002a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	e000e100 	.word	0xe000e100

08002a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	6039      	str	r1, [r7, #0]
 8002a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	db0a      	blt.n	8002aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	490c      	ldr	r1, [pc, #48]	; (8002ac8 <__NVIC_SetPriority+0x4c>)
 8002a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9a:	0112      	lsls	r2, r2, #4
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aa4:	e00a      	b.n	8002abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	4908      	ldr	r1, [pc, #32]	; (8002acc <__NVIC_SetPriority+0x50>)
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	3b04      	subs	r3, #4
 8002ab4:	0112      	lsls	r2, r2, #4
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	440b      	add	r3, r1
 8002aba:	761a      	strb	r2, [r3, #24]
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	e000e100 	.word	0xe000e100
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b089      	sub	sp, #36	; 0x24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f1c3 0307 	rsb	r3, r3, #7
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	bf28      	it	cs
 8002aee:	2304      	movcs	r3, #4
 8002af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	3304      	adds	r3, #4
 8002af6:	2b06      	cmp	r3, #6
 8002af8:	d902      	bls.n	8002b00 <NVIC_EncodePriority+0x30>
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3b03      	subs	r3, #3
 8002afe:	e000      	b.n	8002b02 <NVIC_EncodePriority+0x32>
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b04:	f04f 32ff 	mov.w	r2, #4294967295
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43da      	mvns	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	401a      	ands	r2, r3
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b18:	f04f 31ff 	mov.w	r1, #4294967295
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b22:	43d9      	mvns	r1, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b28:	4313      	orrs	r3, r2
         );
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3724      	adds	r7, #36	; 0x24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
	...

08002b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3b01      	subs	r3, #1
 8002b44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b48:	d301      	bcc.n	8002b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e00f      	b.n	8002b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b4e:	4a0a      	ldr	r2, [pc, #40]	; (8002b78 <SysTick_Config+0x40>)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3b01      	subs	r3, #1
 8002b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b56:	210f      	movs	r1, #15
 8002b58:	f04f 30ff 	mov.w	r0, #4294967295
 8002b5c:	f7ff ff8e 	bl	8002a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b60:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <SysTick_Config+0x40>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b66:	4b04      	ldr	r3, [pc, #16]	; (8002b78 <SysTick_Config+0x40>)
 8002b68:	2207      	movs	r2, #7
 8002b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	e000e010 	.word	0xe000e010

08002b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7ff ff29 	bl	80029dc <__NVIC_SetPriorityGrouping>
}
 8002b8a:	bf00      	nop
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b086      	sub	sp, #24
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	4603      	mov	r3, r0
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	607a      	str	r2, [r7, #4]
 8002b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ba4:	f7ff ff3e 	bl	8002a24 <__NVIC_GetPriorityGrouping>
 8002ba8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	68b9      	ldr	r1, [r7, #8]
 8002bae:	6978      	ldr	r0, [r7, #20]
 8002bb0:	f7ff ff8e 	bl	8002ad0 <NVIC_EncodePriority>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bba:	4611      	mov	r1, r2
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff ff5d 	bl	8002a7c <__NVIC_SetPriority>
}
 8002bc2:	bf00      	nop
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b082      	sub	sp, #8
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff ff31 	bl	8002a40 <__NVIC_EnableIRQ>
}
 8002bde:	bf00      	nop
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b082      	sub	sp, #8
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7ff ffa2 	bl	8002b38 <SysTick_Config>
 8002bf4:	4603      	mov	r3, r0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b084      	sub	sp, #16
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c0c:	f7ff feb6 	bl	800297c <HAL_GetTick>
 8002c10:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d008      	beq.n	8002c30 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2280      	movs	r2, #128	; 0x80
 8002c22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e052      	b.n	8002cd6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0216 	bic.w	r2, r2, #22
 8002c3e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	695a      	ldr	r2, [r3, #20]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c4e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d103      	bne.n	8002c60 <HAL_DMA_Abort+0x62>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d007      	beq.n	8002c70 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0208 	bic.w	r2, r2, #8
 8002c6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 0201 	bic.w	r2, r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c80:	e013      	b.n	8002caa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c82:	f7ff fe7b 	bl	800297c <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b05      	cmp	r3, #5
 8002c8e:	d90c      	bls.n	8002caa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2220      	movs	r2, #32
 8002c94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2203      	movs	r2, #3
 8002c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e015      	b.n	8002cd6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1e4      	bne.n	8002c82 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbc:	223f      	movs	r2, #63	; 0x3f
 8002cbe:	409a      	lsls	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d004      	beq.n	8002cfc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2280      	movs	r2, #128	; 0x80
 8002cf6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e00c      	b.n	8002d16 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2205      	movs	r2, #5
 8002d00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0201 	bic.w	r2, r2, #1
 8002d12:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
	...

08002d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b089      	sub	sp, #36	; 0x24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61fb      	str	r3, [r7, #28]
 8002d3e:	e159      	b.n	8002ff4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d40:	2201      	movs	r2, #1
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	4013      	ands	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	f040 8148 	bne.w	8002fee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d005      	beq.n	8002d76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d130      	bne.n	8002dd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	2203      	movs	r2, #3
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dac:	2201      	movs	r2, #1
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4013      	ands	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	091b      	lsrs	r3, r3, #4
 8002dc2:	f003 0201 	and.w	r2, r3, #1
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 0303 	and.w	r3, r3, #3
 8002de0:	2b03      	cmp	r3, #3
 8002de2:	d017      	beq.n	8002e14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	2203      	movs	r2, #3
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	43db      	mvns	r3, r3
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d123      	bne.n	8002e68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	08da      	lsrs	r2, r3, #3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3208      	adds	r2, #8
 8002e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	220f      	movs	r2, #15
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4013      	ands	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	691a      	ldr	r2, [r3, #16]
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	08da      	lsrs	r2, r3, #3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	3208      	adds	r2, #8
 8002e62:	69b9      	ldr	r1, [r7, #24]
 8002e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	2203      	movs	r2, #3
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f003 0203 	and.w	r2, r3, #3
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 80a2 	beq.w	8002fee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	4b57      	ldr	r3, [pc, #348]	; (800300c <HAL_GPIO_Init+0x2e8>)
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb2:	4a56      	ldr	r2, [pc, #344]	; (800300c <HAL_GPIO_Init+0x2e8>)
 8002eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eba:	4b54      	ldr	r3, [pc, #336]	; (800300c <HAL_GPIO_Init+0x2e8>)
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ec6:	4a52      	ldr	r2, [pc, #328]	; (8003010 <HAL_GPIO_Init+0x2ec>)
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	089b      	lsrs	r3, r3, #2
 8002ecc:	3302      	adds	r3, #2
 8002ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	220f      	movs	r2, #15
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a49      	ldr	r2, [pc, #292]	; (8003014 <HAL_GPIO_Init+0x2f0>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d019      	beq.n	8002f26 <HAL_GPIO_Init+0x202>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a48      	ldr	r2, [pc, #288]	; (8003018 <HAL_GPIO_Init+0x2f4>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d013      	beq.n	8002f22 <HAL_GPIO_Init+0x1fe>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a47      	ldr	r2, [pc, #284]	; (800301c <HAL_GPIO_Init+0x2f8>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d00d      	beq.n	8002f1e <HAL_GPIO_Init+0x1fa>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a46      	ldr	r2, [pc, #280]	; (8003020 <HAL_GPIO_Init+0x2fc>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d007      	beq.n	8002f1a <HAL_GPIO_Init+0x1f6>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a45      	ldr	r2, [pc, #276]	; (8003024 <HAL_GPIO_Init+0x300>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d101      	bne.n	8002f16 <HAL_GPIO_Init+0x1f2>
 8002f12:	2304      	movs	r3, #4
 8002f14:	e008      	b.n	8002f28 <HAL_GPIO_Init+0x204>
 8002f16:	2307      	movs	r3, #7
 8002f18:	e006      	b.n	8002f28 <HAL_GPIO_Init+0x204>
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e004      	b.n	8002f28 <HAL_GPIO_Init+0x204>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	e002      	b.n	8002f28 <HAL_GPIO_Init+0x204>
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <HAL_GPIO_Init+0x204>
 8002f26:	2300      	movs	r3, #0
 8002f28:	69fa      	ldr	r2, [r7, #28]
 8002f2a:	f002 0203 	and.w	r2, r2, #3
 8002f2e:	0092      	lsls	r2, r2, #2
 8002f30:	4093      	lsls	r3, r2
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f38:	4935      	ldr	r1, [pc, #212]	; (8003010 <HAL_GPIO_Init+0x2ec>)
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	089b      	lsrs	r3, r3, #2
 8002f3e:	3302      	adds	r3, #2
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f46:	4b38      	ldr	r3, [pc, #224]	; (8003028 <HAL_GPIO_Init+0x304>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4013      	ands	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f6a:	4a2f      	ldr	r2, [pc, #188]	; (8003028 <HAL_GPIO_Init+0x304>)
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f70:	4b2d      	ldr	r3, [pc, #180]	; (8003028 <HAL_GPIO_Init+0x304>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f94:	4a24      	ldr	r2, [pc, #144]	; (8003028 <HAL_GPIO_Init+0x304>)
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f9a:	4b23      	ldr	r3, [pc, #140]	; (8003028 <HAL_GPIO_Init+0x304>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fbe:	4a1a      	ldr	r2, [pc, #104]	; (8003028 <HAL_GPIO_Init+0x304>)
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fc4:	4b18      	ldr	r3, [pc, #96]	; (8003028 <HAL_GPIO_Init+0x304>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fe8:	4a0f      	ldr	r2, [pc, #60]	; (8003028 <HAL_GPIO_Init+0x304>)
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	61fb      	str	r3, [r7, #28]
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	2b0f      	cmp	r3, #15
 8002ff8:	f67f aea2 	bls.w	8002d40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ffc:	bf00      	nop
 8002ffe:	bf00      	nop
 8003000:	3724      	adds	r7, #36	; 0x24
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	40023800 	.word	0x40023800
 8003010:	40013800 	.word	0x40013800
 8003014:	40020000 	.word	0x40020000
 8003018:	40020400 	.word	0x40020400
 800301c:	40020800 	.word	0x40020800
 8003020:	40020c00 	.word	0x40020c00
 8003024:	40021000 	.word	0x40021000
 8003028:	40013c00 	.word	0x40013c00

0800302c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	460b      	mov	r3, r1
 8003036:	807b      	strh	r3, [r7, #2]
 8003038:	4613      	mov	r3, r2
 800303a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800303c:	787b      	ldrb	r3, [r7, #1]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003042:	887a      	ldrh	r2, [r7, #2]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003048:	e003      	b.n	8003052 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800304a:	887b      	ldrh	r3, [r7, #2]
 800304c:	041a      	lsls	r2, r3, #16
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	619a      	str	r2, [r3, #24]
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800305e:	b480      	push	{r7}
 8003060:	b085      	sub	sp, #20
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
 8003066:	460b      	mov	r3, r1
 8003068:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003070:	887a      	ldrh	r2, [r7, #2]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	4013      	ands	r3, r2
 8003076:	041a      	lsls	r2, r3, #16
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	43d9      	mvns	r1, r3
 800307c:	887b      	ldrh	r3, [r7, #2]
 800307e:	400b      	ands	r3, r1
 8003080:	431a      	orrs	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	619a      	str	r2, [r3, #24]
}
 8003086:	bf00      	nop
 8003088:	3714      	adds	r7, #20
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
	...

08003094 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e12b      	b.n	80032fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d106      	bne.n	80030c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7fe f912 	bl	80012e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2224      	movs	r2, #36	; 0x24
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0201 	bic.w	r2, r2, #1
 80030d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030f8:	f001 fbbc 	bl	8004874 <HAL_RCC_GetPCLK1Freq>
 80030fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	4a81      	ldr	r2, [pc, #516]	; (8003308 <HAL_I2C_Init+0x274>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d807      	bhi.n	8003118 <HAL_I2C_Init+0x84>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4a80      	ldr	r2, [pc, #512]	; (800330c <HAL_I2C_Init+0x278>)
 800310c:	4293      	cmp	r3, r2
 800310e:	bf94      	ite	ls
 8003110:	2301      	movls	r3, #1
 8003112:	2300      	movhi	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	e006      	b.n	8003126 <HAL_I2C_Init+0x92>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4a7d      	ldr	r2, [pc, #500]	; (8003310 <HAL_I2C_Init+0x27c>)
 800311c:	4293      	cmp	r3, r2
 800311e:	bf94      	ite	ls
 8003120:	2301      	movls	r3, #1
 8003122:	2300      	movhi	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e0e7      	b.n	80032fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	4a78      	ldr	r2, [pc, #480]	; (8003314 <HAL_I2C_Init+0x280>)
 8003132:	fba2 2303 	umull	r2, r3, r2, r3
 8003136:	0c9b      	lsrs	r3, r3, #18
 8003138:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	430a      	orrs	r2, r1
 800314c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	4a6a      	ldr	r2, [pc, #424]	; (8003308 <HAL_I2C_Init+0x274>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d802      	bhi.n	8003168 <HAL_I2C_Init+0xd4>
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	3301      	adds	r3, #1
 8003166:	e009      	b.n	800317c <HAL_I2C_Init+0xe8>
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800316e:	fb02 f303 	mul.w	r3, r2, r3
 8003172:	4a69      	ldr	r2, [pc, #420]	; (8003318 <HAL_I2C_Init+0x284>)
 8003174:	fba2 2303 	umull	r2, r3, r2, r3
 8003178:	099b      	lsrs	r3, r3, #6
 800317a:	3301      	adds	r3, #1
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	6812      	ldr	r2, [r2, #0]
 8003180:	430b      	orrs	r3, r1
 8003182:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800318e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	495c      	ldr	r1, [pc, #368]	; (8003308 <HAL_I2C_Init+0x274>)
 8003198:	428b      	cmp	r3, r1
 800319a:	d819      	bhi.n	80031d0 <HAL_I2C_Init+0x13c>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	1e59      	subs	r1, r3, #1
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80031aa:	1c59      	adds	r1, r3, #1
 80031ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031b0:	400b      	ands	r3, r1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <HAL_I2C_Init+0x138>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	1e59      	subs	r1, r3, #1
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80031c4:	3301      	adds	r3, #1
 80031c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ca:	e051      	b.n	8003270 <HAL_I2C_Init+0x1dc>
 80031cc:	2304      	movs	r3, #4
 80031ce:	e04f      	b.n	8003270 <HAL_I2C_Init+0x1dc>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d111      	bne.n	80031fc <HAL_I2C_Init+0x168>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	1e58      	subs	r0, r3, #1
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6859      	ldr	r1, [r3, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	440b      	add	r3, r1
 80031e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ea:	3301      	adds	r3, #1
 80031ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	bf0c      	ite	eq
 80031f4:	2301      	moveq	r3, #1
 80031f6:	2300      	movne	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	e012      	b.n	8003222 <HAL_I2C_Init+0x18e>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	1e58      	subs	r0, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6859      	ldr	r1, [r3, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	0099      	lsls	r1, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003212:	3301      	adds	r3, #1
 8003214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003218:	2b00      	cmp	r3, #0
 800321a:	bf0c      	ite	eq
 800321c:	2301      	moveq	r3, #1
 800321e:	2300      	movne	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <HAL_I2C_Init+0x196>
 8003226:	2301      	movs	r3, #1
 8003228:	e022      	b.n	8003270 <HAL_I2C_Init+0x1dc>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10e      	bne.n	8003250 <HAL_I2C_Init+0x1bc>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	1e58      	subs	r0, r3, #1
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6859      	ldr	r1, [r3, #4]
 800323a:	460b      	mov	r3, r1
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	440b      	add	r3, r1
 8003240:	fbb0 f3f3 	udiv	r3, r0, r3
 8003244:	3301      	adds	r3, #1
 8003246:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800324a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800324e:	e00f      	b.n	8003270 <HAL_I2C_Init+0x1dc>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	1e58      	subs	r0, r3, #1
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6859      	ldr	r1, [r3, #4]
 8003258:	460b      	mov	r3, r1
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	0099      	lsls	r1, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	fbb0 f3f3 	udiv	r3, r0, r3
 8003266:	3301      	adds	r3, #1
 8003268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800326c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	6809      	ldr	r1, [r1, #0]
 8003274:	4313      	orrs	r3, r2
 8003276:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69da      	ldr	r2, [r3, #28]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800329e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6911      	ldr	r1, [r2, #16]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	68d2      	ldr	r2, [r2, #12]
 80032aa:	4311      	orrs	r1, r2
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6812      	ldr	r2, [r2, #0]
 80032b0:	430b      	orrs	r3, r1
 80032b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695a      	ldr	r2, [r3, #20]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0201 	orr.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2220      	movs	r2, #32
 80032ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	000186a0 	.word	0x000186a0
 800330c:	001e847f 	.word	0x001e847f
 8003310:	003d08ff 	.word	0x003d08ff
 8003314:	431bde83 	.word	0x431bde83
 8003318:	10624dd3 	.word	0x10624dd3

0800331c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b088      	sub	sp, #32
 8003320:	af02      	add	r7, sp, #8
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	4608      	mov	r0, r1
 8003326:	4611      	mov	r1, r2
 8003328:	461a      	mov	r2, r3
 800332a:	4603      	mov	r3, r0
 800332c:	817b      	strh	r3, [r7, #10]
 800332e:	460b      	mov	r3, r1
 8003330:	813b      	strh	r3, [r7, #8]
 8003332:	4613      	mov	r3, r2
 8003334:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003336:	f7ff fb21 	bl	800297c <HAL_GetTick>
 800333a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b20      	cmp	r3, #32
 8003346:	f040 80d9 	bne.w	80034fc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	2319      	movs	r3, #25
 8003350:	2201      	movs	r2, #1
 8003352:	496d      	ldr	r1, [pc, #436]	; (8003508 <HAL_I2C_Mem_Write+0x1ec>)
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f000 fc7f 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003360:	2302      	movs	r3, #2
 8003362:	e0cc      	b.n	80034fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800336a:	2b01      	cmp	r3, #1
 800336c:	d101      	bne.n	8003372 <HAL_I2C_Mem_Write+0x56>
 800336e:	2302      	movs	r3, #2
 8003370:	e0c5      	b.n	80034fe <HAL_I2C_Mem_Write+0x1e2>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b01      	cmp	r3, #1
 8003386:	d007      	beq.n	8003398 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 0201 	orr.w	r2, r2, #1
 8003396:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2221      	movs	r2, #33	; 0x21
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2240      	movs	r2, #64	; 0x40
 80033b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6a3a      	ldr	r2, [r7, #32]
 80033c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80033c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4a4d      	ldr	r2, [pc, #308]	; (800350c <HAL_I2C_Mem_Write+0x1f0>)
 80033d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033da:	88f8      	ldrh	r0, [r7, #6]
 80033dc:	893a      	ldrh	r2, [r7, #8]
 80033de:	8979      	ldrh	r1, [r7, #10]
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	9301      	str	r3, [sp, #4]
 80033e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e6:	9300      	str	r3, [sp, #0]
 80033e8:	4603      	mov	r3, r0
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 fab6 	bl	800395c <I2C_RequestMemoryWrite>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d052      	beq.n	800349c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e081      	b.n	80034fe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 fd00 	bl	8003e04 <I2C_WaitOnTXEFlagUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00d      	beq.n	8003426 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	2b04      	cmp	r3, #4
 8003410:	d107      	bne.n	8003422 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003420:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e06b      	b.n	80034fe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	781a      	ldrb	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003440:	3b01      	subs	r3, #1
 8003442:	b29a      	uxth	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344c:	b29b      	uxth	r3, r3
 800344e:	3b01      	subs	r3, #1
 8003450:	b29a      	uxth	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b04      	cmp	r3, #4
 8003462:	d11b      	bne.n	800349c <HAL_I2C_Mem_Write+0x180>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003468:	2b00      	cmp	r3, #0
 800346a:	d017      	beq.n	800349c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	781a      	ldrb	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003486:	3b01      	subs	r3, #1
 8003488:	b29a      	uxth	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003492:	b29b      	uxth	r3, r3
 8003494:	3b01      	subs	r3, #1
 8003496:	b29a      	uxth	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1aa      	bne.n	80033fa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 fcec 	bl	8003e86 <I2C_WaitOnBTFFlagUntilTimeout>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00d      	beq.n	80034d0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d107      	bne.n	80034cc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e016      	b.n	80034fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	e000      	b.n	80034fe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80034fc:	2302      	movs	r3, #2
  }
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3718      	adds	r7, #24
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	00100002 	.word	0x00100002
 800350c:	ffff0000 	.word	0xffff0000

08003510 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08c      	sub	sp, #48	; 0x30
 8003514:	af02      	add	r7, sp, #8
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	4608      	mov	r0, r1
 800351a:	4611      	mov	r1, r2
 800351c:	461a      	mov	r2, r3
 800351e:	4603      	mov	r3, r0
 8003520:	817b      	strh	r3, [r7, #10]
 8003522:	460b      	mov	r3, r1
 8003524:	813b      	strh	r3, [r7, #8]
 8003526:	4613      	mov	r3, r2
 8003528:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800352a:	f7ff fa27 	bl	800297c <HAL_GetTick>
 800352e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b20      	cmp	r3, #32
 800353a:	f040 8208 	bne.w	800394e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	2319      	movs	r3, #25
 8003544:	2201      	movs	r2, #1
 8003546:	497b      	ldr	r1, [pc, #492]	; (8003734 <HAL_I2C_Mem_Read+0x224>)
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 fb85 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003554:	2302      	movs	r3, #2
 8003556:	e1fb      	b.n	8003950 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <HAL_I2C_Mem_Read+0x56>
 8003562:	2302      	movs	r3, #2
 8003564:	e1f4      	b.n	8003950 <HAL_I2C_Mem_Read+0x440>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b01      	cmp	r3, #1
 800357a:	d007      	beq.n	800358c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 0201 	orr.w	r2, r2, #1
 800358a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800359a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2222      	movs	r2, #34	; 0x22
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2240      	movs	r2, #64	; 0x40
 80035a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80035bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4a5b      	ldr	r2, [pc, #364]	; (8003738 <HAL_I2C_Mem_Read+0x228>)
 80035cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035ce:	88f8      	ldrh	r0, [r7, #6]
 80035d0:	893a      	ldrh	r2, [r7, #8]
 80035d2:	8979      	ldrh	r1, [r7, #10]
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	9301      	str	r3, [sp, #4]
 80035d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	4603      	mov	r3, r0
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 fa52 	bl	8003a88 <I2C_RequestMemoryRead>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e1b0      	b.n	8003950 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d113      	bne.n	800361e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035f6:	2300      	movs	r3, #0
 80035f8:	623b      	str	r3, [r7, #32]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	623b      	str	r3, [r7, #32]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	623b      	str	r3, [r7, #32]
 800360a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	e184      	b.n	8003928 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003622:	2b01      	cmp	r3, #1
 8003624:	d11b      	bne.n	800365e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003634:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003636:	2300      	movs	r3, #0
 8003638:	61fb      	str	r3, [r7, #28]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	61fb      	str	r3, [r7, #28]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	61fb      	str	r3, [r7, #28]
 800364a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	e164      	b.n	8003928 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003662:	2b02      	cmp	r3, #2
 8003664:	d11b      	bne.n	800369e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003674:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003684:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003686:	2300      	movs	r3, #0
 8003688:	61bb      	str	r3, [r7, #24]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	61bb      	str	r3, [r7, #24]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	61bb      	str	r3, [r7, #24]
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	e144      	b.n	8003928 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800369e:	2300      	movs	r3, #0
 80036a0:	617b      	str	r3, [r7, #20]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	617b      	str	r3, [r7, #20]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	617b      	str	r3, [r7, #20]
 80036b2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80036b4:	e138      	b.n	8003928 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ba:	2b03      	cmp	r3, #3
 80036bc:	f200 80f1 	bhi.w	80038a2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d123      	bne.n	8003710 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 fc1b 	bl	8003f08 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e139      	b.n	8003950 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	691a      	ldr	r2, [r3, #16]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	1c5a      	adds	r2, r3, #1
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003704:	b29b      	uxth	r3, r3
 8003706:	3b01      	subs	r3, #1
 8003708:	b29a      	uxth	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800370e:	e10b      	b.n	8003928 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003714:	2b02      	cmp	r3, #2
 8003716:	d14e      	bne.n	80037b6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371e:	2200      	movs	r2, #0
 8003720:	4906      	ldr	r1, [pc, #24]	; (800373c <HAL_I2C_Mem_Read+0x22c>)
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f000 fa98 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d008      	beq.n	8003740 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e10e      	b.n	8003950 <HAL_I2C_Mem_Read+0x440>
 8003732:	bf00      	nop
 8003734:	00100002 	.word	0x00100002
 8003738:	ffff0000 	.word	0xffff0000
 800373c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800374e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	691a      	ldr	r2, [r3, #16]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	1c5a      	adds	r2, r3, #1
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376c:	3b01      	subs	r3, #1
 800376e:	b29a      	uxth	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003778:	b29b      	uxth	r3, r3
 800377a:	3b01      	subs	r3, #1
 800377c:	b29a      	uxth	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	691a      	ldr	r2, [r3, #16]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	b2d2      	uxtb	r2, r2
 800378e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	1c5a      	adds	r2, r3, #1
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	3b01      	subs	r3, #1
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037b4:	e0b8      	b.n	8003928 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037bc:	2200      	movs	r2, #0
 80037be:	4966      	ldr	r1, [pc, #408]	; (8003958 <HAL_I2C_Mem_Read+0x448>)
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 fa49 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e0bf      	b.n	8003950 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	691a      	ldr	r2, [r3, #16]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	b2d2      	uxtb	r2, r2
 80037ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	1c5a      	adds	r2, r3, #1
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b29a      	uxth	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003808:	b29b      	uxth	r3, r3
 800380a:	3b01      	subs	r3, #1
 800380c:	b29a      	uxth	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003818:	2200      	movs	r2, #0
 800381a:	494f      	ldr	r1, [pc, #316]	; (8003958 <HAL_I2C_Mem_Read+0x448>)
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 fa1b 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e091      	b.n	8003950 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800383a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691a      	ldr	r2, [r3, #16]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	1c5a      	adds	r2, r3, #1
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003858:	3b01      	subs	r3, #1
 800385a:	b29a      	uxth	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003864:	b29b      	uxth	r3, r3
 8003866:	3b01      	subs	r3, #1
 8003868:	b29a      	uxth	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	691a      	ldr	r2, [r3, #16]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	1c5a      	adds	r2, r3, #1
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800388a:	3b01      	subs	r3, #1
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003896:	b29b      	uxth	r3, r3
 8003898:	3b01      	subs	r3, #1
 800389a:	b29a      	uxth	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038a0:	e042      	b.n	8003928 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 fb2e 	bl	8003f08 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e04c      	b.n	8003950 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	691a      	ldr	r2, [r3, #16]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	b2d2      	uxtb	r2, r2
 80038c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	1c5a      	adds	r2, r3, #1
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d2:	3b01      	subs	r3, #1
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038de:	b29b      	uxth	r3, r3
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	f003 0304 	and.w	r3, r3, #4
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d118      	bne.n	8003928 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391e:	b29b      	uxth	r3, r3
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392c:	2b00      	cmp	r3, #0
 800392e:	f47f aec2 	bne.w	80036b6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2220      	movs	r2, #32
 8003936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800394a:	2300      	movs	r3, #0
 800394c:	e000      	b.n	8003950 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800394e:	2302      	movs	r3, #2
  }
}
 8003950:	4618      	mov	r0, r3
 8003952:	3728      	adds	r7, #40	; 0x28
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	00010004 	.word	0x00010004

0800395c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b088      	sub	sp, #32
 8003960:	af02      	add	r7, sp, #8
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	4608      	mov	r0, r1
 8003966:	4611      	mov	r1, r2
 8003968:	461a      	mov	r2, r3
 800396a:	4603      	mov	r3, r0
 800396c:	817b      	strh	r3, [r7, #10]
 800396e:	460b      	mov	r3, r1
 8003970:	813b      	strh	r3, [r7, #8]
 8003972:	4613      	mov	r3, r2
 8003974:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003984:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	2200      	movs	r2, #0
 800398e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 f960 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00d      	beq.n	80039ba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ac:	d103      	bne.n	80039b6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e05f      	b.n	8003a7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039ba:	897b      	ldrh	r3, [r7, #10]
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	461a      	mov	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	6a3a      	ldr	r2, [r7, #32]
 80039ce:	492d      	ldr	r1, [pc, #180]	; (8003a84 <I2C_RequestMemoryWrite+0x128>)
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 f998 	bl	8003d06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e04c      	b.n	8003a7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039e0:	2300      	movs	r3, #0
 80039e2:	617b      	str	r3, [r7, #20]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	617b      	str	r3, [r7, #20]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	617b      	str	r3, [r7, #20]
 80039f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f8:	6a39      	ldr	r1, [r7, #32]
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 fa02 	bl	8003e04 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00d      	beq.n	8003a22 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d107      	bne.n	8003a1e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e02b      	b.n	8003a7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a22:	88fb      	ldrh	r3, [r7, #6]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d105      	bne.n	8003a34 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a28:	893b      	ldrh	r3, [r7, #8]
 8003a2a:	b2da      	uxtb	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	611a      	str	r2, [r3, #16]
 8003a32:	e021      	b.n	8003a78 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a34:	893b      	ldrh	r3, [r7, #8]
 8003a36:	0a1b      	lsrs	r3, r3, #8
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	b2da      	uxtb	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a44:	6a39      	ldr	r1, [r7, #32]
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 f9dc 	bl	8003e04 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00d      	beq.n	8003a6e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	d107      	bne.n	8003a6a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e005      	b.n	8003a7a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a6e:	893b      	ldrh	r3, [r7, #8]
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	00010002 	.word	0x00010002

08003a88 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af02      	add	r7, sp, #8
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	4608      	mov	r0, r1
 8003a92:	4611      	mov	r1, r2
 8003a94:	461a      	mov	r2, r3
 8003a96:	4603      	mov	r3, r0
 8003a98:	817b      	strh	r3, [r7, #10]
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	813b      	strh	r3, [r7, #8]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ab0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ac0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f000 f8c2 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00d      	beq.n	8003af6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ae8:	d103      	bne.n	8003af2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003af0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e0aa      	b.n	8003c4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003af6:	897b      	ldrh	r3, [r7, #10]
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	461a      	mov	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	6a3a      	ldr	r2, [r7, #32]
 8003b0a:	4952      	ldr	r1, [pc, #328]	; (8003c54 <I2C_RequestMemoryRead+0x1cc>)
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 f8fa 	bl	8003d06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e097      	b.n	8003c4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	617b      	str	r3, [r7, #20]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	617b      	str	r3, [r7, #20]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b34:	6a39      	ldr	r1, [r7, #32]
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f000 f964 	bl	8003e04 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00d      	beq.n	8003b5e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	d107      	bne.n	8003b5a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e076      	b.n	8003c4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b5e:	88fb      	ldrh	r3, [r7, #6]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d105      	bne.n	8003b70 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b64:	893b      	ldrh	r3, [r7, #8]
 8003b66:	b2da      	uxtb	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	611a      	str	r2, [r3, #16]
 8003b6e:	e021      	b.n	8003bb4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b70:	893b      	ldrh	r3, [r7, #8]
 8003b72:	0a1b      	lsrs	r3, r3, #8
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b80:	6a39      	ldr	r1, [r7, #32]
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f000 f93e 	bl	8003e04 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00d      	beq.n	8003baa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d107      	bne.n	8003ba6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ba4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e050      	b.n	8003c4c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003baa:	893b      	ldrh	r3, [r7, #8]
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb6:	6a39      	ldr	r1, [r7, #32]
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 f923 	bl	8003e04 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00d      	beq.n	8003be0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	2b04      	cmp	r3, #4
 8003bca:	d107      	bne.n	8003bdc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bda:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e035      	b.n	8003c4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 f82b 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00d      	beq.n	8003c24 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c16:	d103      	bne.n	8003c20 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e013      	b.n	8003c4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c24:	897b      	ldrh	r3, [r7, #10]
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	f043 0301 	orr.w	r3, r3, #1
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c36:	6a3a      	ldr	r2, [r7, #32]
 8003c38:	4906      	ldr	r1, [pc, #24]	; (8003c54 <I2C_RequestMemoryRead+0x1cc>)
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 f863 	bl	8003d06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	00010002 	.word	0x00010002

08003c58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	603b      	str	r3, [r7, #0]
 8003c64:	4613      	mov	r3, r2
 8003c66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c68:	e025      	b.n	8003cb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c70:	d021      	beq.n	8003cb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c72:	f7fe fe83 	bl	800297c <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d302      	bcc.n	8003c88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d116      	bne.n	8003cb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2220      	movs	r2, #32
 8003c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	f043 0220 	orr.w	r2, r3, #32
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e023      	b.n	8003cfe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	0c1b      	lsrs	r3, r3, #16
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d10d      	bne.n	8003cdc <I2C_WaitOnFlagUntilTimeout+0x84>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	43da      	mvns	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	bf0c      	ite	eq
 8003cd2:	2301      	moveq	r3, #1
 8003cd4:	2300      	movne	r3, #0
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	461a      	mov	r2, r3
 8003cda:	e00c      	b.n	8003cf6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	43da      	mvns	r2, r3
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	bf0c      	ite	eq
 8003cee:	2301      	moveq	r3, #1
 8003cf0:	2300      	movne	r3, #0
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	79fb      	ldrb	r3, [r7, #7]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d0b6      	beq.n	8003c6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b084      	sub	sp, #16
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	607a      	str	r2, [r7, #4]
 8003d12:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d14:	e051      	b.n	8003dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d24:	d123      	bne.n	8003d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d34:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d3e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	f043 0204 	orr.w	r2, r3, #4
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e046      	b.n	8003dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d74:	d021      	beq.n	8003dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d76:	f7fe fe01 	bl	800297c <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d302      	bcc.n	8003d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d116      	bne.n	8003dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2220      	movs	r2, #32
 8003d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	f043 0220 	orr.w	r2, r3, #32
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e020      	b.n	8003dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	0c1b      	lsrs	r3, r3, #16
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d10c      	bne.n	8003dde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	43da      	mvns	r2, r3
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	bf14      	ite	ne
 8003dd6:	2301      	movne	r3, #1
 8003dd8:	2300      	moveq	r3, #0
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	e00b      	b.n	8003df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	43da      	mvns	r2, r3
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	4013      	ands	r3, r2
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	bf14      	ite	ne
 8003df0:	2301      	movne	r3, #1
 8003df2:	2300      	moveq	r3, #0
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d18d      	bne.n	8003d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e10:	e02d      	b.n	8003e6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 f8ce 	bl	8003fb4 <I2C_IsAcknowledgeFailed>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e02d      	b.n	8003e7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e28:	d021      	beq.n	8003e6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e2a:	f7fe fda7 	bl	800297c <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d302      	bcc.n	8003e40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d116      	bne.n	8003e6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	f043 0220 	orr.w	r2, r3, #32
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e007      	b.n	8003e7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e78:	2b80      	cmp	r3, #128	; 0x80
 8003e7a:	d1ca      	bne.n	8003e12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b084      	sub	sp, #16
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e92:	e02d      	b.n	8003ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 f88d 	bl	8003fb4 <I2C_IsAcknowledgeFailed>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e02d      	b.n	8003f00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eaa:	d021      	beq.n	8003ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eac:	f7fe fd66 	bl	800297c <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d302      	bcc.n	8003ec2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d116      	bne.n	8003ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003edc:	f043 0220 	orr.w	r2, r3, #32
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e007      	b.n	8003f00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	f003 0304 	and.w	r3, r3, #4
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d1ca      	bne.n	8003e94 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f14:	e042      	b.n	8003f9c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	f003 0310 	and.w	r3, r3, #16
 8003f20:	2b10      	cmp	r3, #16
 8003f22:	d119      	bne.n	8003f58 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f06f 0210 	mvn.w	r2, #16
 8003f2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e029      	b.n	8003fac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f58:	f7fe fd10 	bl	800297c <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d302      	bcc.n	8003f6e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d116      	bne.n	8003f9c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f88:	f043 0220 	orr.w	r2, r3, #32
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e007      	b.n	8003fac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa6:	2b40      	cmp	r3, #64	; 0x40
 8003fa8:	d1b5      	bne.n	8003f16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fca:	d11b      	bne.n	8004004 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fd4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff0:	f043 0204 	orr.w	r2, r3, #4
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e000      	b.n	8004006 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
	...

08004014 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e267      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d075      	beq.n	800411e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004032:	4b88      	ldr	r3, [pc, #544]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 030c 	and.w	r3, r3, #12
 800403a:	2b04      	cmp	r3, #4
 800403c:	d00c      	beq.n	8004058 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800403e:	4b85      	ldr	r3, [pc, #532]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004046:	2b08      	cmp	r3, #8
 8004048:	d112      	bne.n	8004070 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800404a:	4b82      	ldr	r3, [pc, #520]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004052:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004056:	d10b      	bne.n	8004070 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004058:	4b7e      	ldr	r3, [pc, #504]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d05b      	beq.n	800411c <HAL_RCC_OscConfig+0x108>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d157      	bne.n	800411c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e242      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004078:	d106      	bne.n	8004088 <HAL_RCC_OscConfig+0x74>
 800407a:	4b76      	ldr	r3, [pc, #472]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a75      	ldr	r2, [pc, #468]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 8004080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	e01d      	b.n	80040c4 <HAL_RCC_OscConfig+0xb0>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004090:	d10c      	bne.n	80040ac <HAL_RCC_OscConfig+0x98>
 8004092:	4b70      	ldr	r3, [pc, #448]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a6f      	ldr	r2, [pc, #444]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 8004098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800409c:	6013      	str	r3, [r2, #0]
 800409e:	4b6d      	ldr	r3, [pc, #436]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a6c      	ldr	r2, [pc, #432]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 80040a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	e00b      	b.n	80040c4 <HAL_RCC_OscConfig+0xb0>
 80040ac:	4b69      	ldr	r3, [pc, #420]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a68      	ldr	r2, [pc, #416]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 80040b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040b6:	6013      	str	r3, [r2, #0]
 80040b8:	4b66      	ldr	r3, [pc, #408]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a65      	ldr	r2, [pc, #404]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 80040be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d013      	beq.n	80040f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040cc:	f7fe fc56 	bl	800297c <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040d4:	f7fe fc52 	bl	800297c <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b64      	cmp	r3, #100	; 0x64
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e207      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040e6:	4b5b      	ldr	r3, [pc, #364]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0f0      	beq.n	80040d4 <HAL_RCC_OscConfig+0xc0>
 80040f2:	e014      	b.n	800411e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f4:	f7fe fc42 	bl	800297c <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040fc:	f7fe fc3e 	bl	800297c <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b64      	cmp	r3, #100	; 0x64
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e1f3      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800410e:	4b51      	ldr	r3, [pc, #324]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f0      	bne.n	80040fc <HAL_RCC_OscConfig+0xe8>
 800411a:	e000      	b.n	800411e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800411c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d063      	beq.n	80041f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800412a:	4b4a      	ldr	r3, [pc, #296]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 030c 	and.w	r3, r3, #12
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00b      	beq.n	800414e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004136:	4b47      	ldr	r3, [pc, #284]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800413e:	2b08      	cmp	r3, #8
 8004140:	d11c      	bne.n	800417c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004142:	4b44      	ldr	r3, [pc, #272]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d116      	bne.n	800417c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800414e:	4b41      	ldr	r3, [pc, #260]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d005      	beq.n	8004166 <HAL_RCC_OscConfig+0x152>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d001      	beq.n	8004166 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e1c7      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004166:	4b3b      	ldr	r3, [pc, #236]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	4937      	ldr	r1, [pc, #220]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 8004176:	4313      	orrs	r3, r2
 8004178:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800417a:	e03a      	b.n	80041f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d020      	beq.n	80041c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004184:	4b34      	ldr	r3, [pc, #208]	; (8004258 <HAL_RCC_OscConfig+0x244>)
 8004186:	2201      	movs	r2, #1
 8004188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418a:	f7fe fbf7 	bl	800297c <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004192:	f7fe fbf3 	bl	800297c <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e1a8      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041a4:	4b2b      	ldr	r3, [pc, #172]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d0f0      	beq.n	8004192 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b0:	4b28      	ldr	r3, [pc, #160]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	4925      	ldr	r1, [pc, #148]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	600b      	str	r3, [r1, #0]
 80041c4:	e015      	b.n	80041f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041c6:	4b24      	ldr	r3, [pc, #144]	; (8004258 <HAL_RCC_OscConfig+0x244>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041cc:	f7fe fbd6 	bl	800297c <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041d4:	f7fe fbd2 	bl	800297c <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e187      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041e6:	4b1b      	ldr	r3, [pc, #108]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1f0      	bne.n	80041d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d036      	beq.n	800426c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d016      	beq.n	8004234 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004206:	4b15      	ldr	r3, [pc, #84]	; (800425c <HAL_RCC_OscConfig+0x248>)
 8004208:	2201      	movs	r2, #1
 800420a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800420c:	f7fe fbb6 	bl	800297c <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004214:	f7fe fbb2 	bl	800297c <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e167      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004226:	4b0b      	ldr	r3, [pc, #44]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 8004228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0f0      	beq.n	8004214 <HAL_RCC_OscConfig+0x200>
 8004232:	e01b      	b.n	800426c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004234:	4b09      	ldr	r3, [pc, #36]	; (800425c <HAL_RCC_OscConfig+0x248>)
 8004236:	2200      	movs	r2, #0
 8004238:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800423a:	f7fe fb9f 	bl	800297c <HAL_GetTick>
 800423e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004240:	e00e      	b.n	8004260 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004242:	f7fe fb9b 	bl	800297c <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d907      	bls.n	8004260 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e150      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
 8004254:	40023800 	.word	0x40023800
 8004258:	42470000 	.word	0x42470000
 800425c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004260:	4b88      	ldr	r3, [pc, #544]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 8004262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1ea      	bne.n	8004242 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 8097 	beq.w	80043a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800427a:	2300      	movs	r3, #0
 800427c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800427e:	4b81      	ldr	r3, [pc, #516]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10f      	bne.n	80042aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800428a:	2300      	movs	r3, #0
 800428c:	60bb      	str	r3, [r7, #8]
 800428e:	4b7d      	ldr	r3, [pc, #500]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	4a7c      	ldr	r2, [pc, #496]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 8004294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004298:	6413      	str	r3, [r2, #64]	; 0x40
 800429a:	4b7a      	ldr	r3, [pc, #488]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a2:	60bb      	str	r3, [r7, #8]
 80042a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042a6:	2301      	movs	r3, #1
 80042a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042aa:	4b77      	ldr	r3, [pc, #476]	; (8004488 <HAL_RCC_OscConfig+0x474>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d118      	bne.n	80042e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042b6:	4b74      	ldr	r3, [pc, #464]	; (8004488 <HAL_RCC_OscConfig+0x474>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a73      	ldr	r2, [pc, #460]	; (8004488 <HAL_RCC_OscConfig+0x474>)
 80042bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042c2:	f7fe fb5b 	bl	800297c <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c8:	e008      	b.n	80042dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ca:	f7fe fb57 	bl	800297c <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e10c      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042dc:	4b6a      	ldr	r3, [pc, #424]	; (8004488 <HAL_RCC_OscConfig+0x474>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0f0      	beq.n	80042ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d106      	bne.n	80042fe <HAL_RCC_OscConfig+0x2ea>
 80042f0:	4b64      	ldr	r3, [pc, #400]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 80042f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f4:	4a63      	ldr	r2, [pc, #396]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 80042f6:	f043 0301 	orr.w	r3, r3, #1
 80042fa:	6713      	str	r3, [r2, #112]	; 0x70
 80042fc:	e01c      	b.n	8004338 <HAL_RCC_OscConfig+0x324>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	2b05      	cmp	r3, #5
 8004304:	d10c      	bne.n	8004320 <HAL_RCC_OscConfig+0x30c>
 8004306:	4b5f      	ldr	r3, [pc, #380]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 8004308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430a:	4a5e      	ldr	r2, [pc, #376]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 800430c:	f043 0304 	orr.w	r3, r3, #4
 8004310:	6713      	str	r3, [r2, #112]	; 0x70
 8004312:	4b5c      	ldr	r3, [pc, #368]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 8004314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004316:	4a5b      	ldr	r2, [pc, #364]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 8004318:	f043 0301 	orr.w	r3, r3, #1
 800431c:	6713      	str	r3, [r2, #112]	; 0x70
 800431e:	e00b      	b.n	8004338 <HAL_RCC_OscConfig+0x324>
 8004320:	4b58      	ldr	r3, [pc, #352]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 8004322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004324:	4a57      	ldr	r2, [pc, #348]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 8004326:	f023 0301 	bic.w	r3, r3, #1
 800432a:	6713      	str	r3, [r2, #112]	; 0x70
 800432c:	4b55      	ldr	r3, [pc, #340]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 800432e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004330:	4a54      	ldr	r2, [pc, #336]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 8004332:	f023 0304 	bic.w	r3, r3, #4
 8004336:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d015      	beq.n	800436c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004340:	f7fe fb1c 	bl	800297c <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004346:	e00a      	b.n	800435e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004348:	f7fe fb18 	bl	800297c <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	f241 3288 	movw	r2, #5000	; 0x1388
 8004356:	4293      	cmp	r3, r2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e0cb      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800435e:	4b49      	ldr	r3, [pc, #292]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 8004360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0ee      	beq.n	8004348 <HAL_RCC_OscConfig+0x334>
 800436a:	e014      	b.n	8004396 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800436c:	f7fe fb06 	bl	800297c <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004372:	e00a      	b.n	800438a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004374:	f7fe fb02 	bl	800297c <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004382:	4293      	cmp	r3, r2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e0b5      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800438a:	4b3e      	ldr	r3, [pc, #248]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 800438c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1ee      	bne.n	8004374 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004396:	7dfb      	ldrb	r3, [r7, #23]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d105      	bne.n	80043a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800439c:	4b39      	ldr	r3, [pc, #228]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 800439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a0:	4a38      	ldr	r2, [pc, #224]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 80043a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 80a1 	beq.w	80044f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043b2:	4b34      	ldr	r3, [pc, #208]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 030c 	and.w	r3, r3, #12
 80043ba:	2b08      	cmp	r3, #8
 80043bc:	d05c      	beq.n	8004478 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d141      	bne.n	800444a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043c6:	4b31      	ldr	r3, [pc, #196]	; (800448c <HAL_RCC_OscConfig+0x478>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043cc:	f7fe fad6 	bl	800297c <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043d4:	f7fe fad2 	bl	800297c <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e087      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043e6:	4b27      	ldr	r3, [pc, #156]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1f0      	bne.n	80043d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69da      	ldr	r2, [r3, #28]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	431a      	orrs	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	019b      	lsls	r3, r3, #6
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004408:	085b      	lsrs	r3, r3, #1
 800440a:	3b01      	subs	r3, #1
 800440c:	041b      	lsls	r3, r3, #16
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004414:	061b      	lsls	r3, r3, #24
 8004416:	491b      	ldr	r1, [pc, #108]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 8004418:	4313      	orrs	r3, r2
 800441a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800441c:	4b1b      	ldr	r3, [pc, #108]	; (800448c <HAL_RCC_OscConfig+0x478>)
 800441e:	2201      	movs	r2, #1
 8004420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004422:	f7fe faab 	bl	800297c <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800442a:	f7fe faa7 	bl	800297c <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e05c      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800443c:	4b11      	ldr	r3, [pc, #68]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0f0      	beq.n	800442a <HAL_RCC_OscConfig+0x416>
 8004448:	e054      	b.n	80044f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800444a:	4b10      	ldr	r3, [pc, #64]	; (800448c <HAL_RCC_OscConfig+0x478>)
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004450:	f7fe fa94 	bl	800297c <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004458:	f7fe fa90 	bl	800297c <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e045      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800446a:	4b06      	ldr	r3, [pc, #24]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f0      	bne.n	8004458 <HAL_RCC_OscConfig+0x444>
 8004476:	e03d      	b.n	80044f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d107      	bne.n	8004490 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e038      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
 8004484:	40023800 	.word	0x40023800
 8004488:	40007000 	.word	0x40007000
 800448c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004490:	4b1b      	ldr	r3, [pc, #108]	; (8004500 <HAL_RCC_OscConfig+0x4ec>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d028      	beq.n	80044f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d121      	bne.n	80044f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d11a      	bne.n	80044f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044c0:	4013      	ands	r3, r2
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d111      	bne.n	80044f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d6:	085b      	lsrs	r3, r3, #1
 80044d8:	3b01      	subs	r3, #1
 80044da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044dc:	429a      	cmp	r2, r3
 80044de:	d107      	bne.n	80044f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d001      	beq.n	80044f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e000      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	40023800 	.word	0x40023800

08004504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e0cc      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004518:	4b68      	ldr	r3, [pc, #416]	; (80046bc <HAL_RCC_ClockConfig+0x1b8>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d90c      	bls.n	8004540 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004526:	4b65      	ldr	r3, [pc, #404]	; (80046bc <HAL_RCC_ClockConfig+0x1b8>)
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800452e:	4b63      	ldr	r3, [pc, #396]	; (80046bc <HAL_RCC_ClockConfig+0x1b8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	429a      	cmp	r2, r3
 800453a:	d001      	beq.n	8004540 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e0b8      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d020      	beq.n	800458e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004558:	4b59      	ldr	r3, [pc, #356]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	4a58      	ldr	r2, [pc, #352]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 800455e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004562:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0308 	and.w	r3, r3, #8
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004570:	4b53      	ldr	r3, [pc, #332]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	4a52      	ldr	r2, [pc, #328]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004576:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800457a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800457c:	4b50      	ldr	r3, [pc, #320]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	494d      	ldr	r1, [pc, #308]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 800458a:	4313      	orrs	r3, r2
 800458c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d044      	beq.n	8004624 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d107      	bne.n	80045b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a2:	4b47      	ldr	r3, [pc, #284]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d119      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e07f      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d003      	beq.n	80045c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045be:	2b03      	cmp	r3, #3
 80045c0:	d107      	bne.n	80045d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045c2:	4b3f      	ldr	r3, [pc, #252]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d109      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e06f      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045d2:	4b3b      	ldr	r3, [pc, #236]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e067      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045e2:	4b37      	ldr	r3, [pc, #220]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f023 0203 	bic.w	r2, r3, #3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	4934      	ldr	r1, [pc, #208]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045f4:	f7fe f9c2 	bl	800297c <HAL_GetTick>
 80045f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045fa:	e00a      	b.n	8004612 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045fc:	f7fe f9be 	bl	800297c <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	f241 3288 	movw	r2, #5000	; 0x1388
 800460a:	4293      	cmp	r3, r2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e04f      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004612:	4b2b      	ldr	r3, [pc, #172]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 020c 	and.w	r2, r3, #12
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	429a      	cmp	r2, r3
 8004622:	d1eb      	bne.n	80045fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004624:	4b25      	ldr	r3, [pc, #148]	; (80046bc <HAL_RCC_ClockConfig+0x1b8>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	429a      	cmp	r2, r3
 8004630:	d20c      	bcs.n	800464c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004632:	4b22      	ldr	r3, [pc, #136]	; (80046bc <HAL_RCC_ClockConfig+0x1b8>)
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	b2d2      	uxtb	r2, r2
 8004638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800463a:	4b20      	ldr	r3, [pc, #128]	; (80046bc <HAL_RCC_ClockConfig+0x1b8>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	d001      	beq.n	800464c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e032      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	2b00      	cmp	r3, #0
 8004656:	d008      	beq.n	800466a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004658:	4b19      	ldr	r3, [pc, #100]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	4916      	ldr	r1, [pc, #88]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004666:	4313      	orrs	r3, r2
 8004668:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0308 	and.w	r3, r3, #8
 8004672:	2b00      	cmp	r3, #0
 8004674:	d009      	beq.n	800468a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004676:	4b12      	ldr	r3, [pc, #72]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	490e      	ldr	r1, [pc, #56]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004686:	4313      	orrs	r3, r2
 8004688:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800468a:	f000 f821 	bl	80046d0 <HAL_RCC_GetSysClockFreq>
 800468e:	4602      	mov	r2, r0
 8004690:	4b0b      	ldr	r3, [pc, #44]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	091b      	lsrs	r3, r3, #4
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	490a      	ldr	r1, [pc, #40]	; (80046c4 <HAL_RCC_ClockConfig+0x1c0>)
 800469c:	5ccb      	ldrb	r3, [r1, r3]
 800469e:	fa22 f303 	lsr.w	r3, r2, r3
 80046a2:	4a09      	ldr	r2, [pc, #36]	; (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 80046a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046a6:	4b09      	ldr	r3, [pc, #36]	; (80046cc <HAL_RCC_ClockConfig+0x1c8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fe f922 	bl	80028f4 <HAL_InitTick>

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	40023c00 	.word	0x40023c00
 80046c0:	40023800 	.word	0x40023800
 80046c4:	08009078 	.word	0x08009078
 80046c8:	20000000 	.word	0x20000000
 80046cc:	2000000c 	.word	0x2000000c

080046d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046d4:	b090      	sub	sp, #64	; 0x40
 80046d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046d8:	2300      	movs	r3, #0
 80046da:	637b      	str	r3, [r7, #52]	; 0x34
 80046dc:	2300      	movs	r3, #0
 80046de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046e0:	2300      	movs	r3, #0
 80046e2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046e8:	4b59      	ldr	r3, [pc, #356]	; (8004850 <HAL_RCC_GetSysClockFreq+0x180>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f003 030c 	and.w	r3, r3, #12
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d00d      	beq.n	8004710 <HAL_RCC_GetSysClockFreq+0x40>
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	f200 80a1 	bhi.w	800483c <HAL_RCC_GetSysClockFreq+0x16c>
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d002      	beq.n	8004704 <HAL_RCC_GetSysClockFreq+0x34>
 80046fe:	2b04      	cmp	r3, #4
 8004700:	d003      	beq.n	800470a <HAL_RCC_GetSysClockFreq+0x3a>
 8004702:	e09b      	b.n	800483c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004704:	4b53      	ldr	r3, [pc, #332]	; (8004854 <HAL_RCC_GetSysClockFreq+0x184>)
 8004706:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004708:	e09b      	b.n	8004842 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800470a:	4b53      	ldr	r3, [pc, #332]	; (8004858 <HAL_RCC_GetSysClockFreq+0x188>)
 800470c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800470e:	e098      	b.n	8004842 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004710:	4b4f      	ldr	r3, [pc, #316]	; (8004850 <HAL_RCC_GetSysClockFreq+0x180>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004718:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800471a:	4b4d      	ldr	r3, [pc, #308]	; (8004850 <HAL_RCC_GetSysClockFreq+0x180>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d028      	beq.n	8004778 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004726:	4b4a      	ldr	r3, [pc, #296]	; (8004850 <HAL_RCC_GetSysClockFreq+0x180>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	099b      	lsrs	r3, r3, #6
 800472c:	2200      	movs	r2, #0
 800472e:	623b      	str	r3, [r7, #32]
 8004730:	627a      	str	r2, [r7, #36]	; 0x24
 8004732:	6a3b      	ldr	r3, [r7, #32]
 8004734:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004738:	2100      	movs	r1, #0
 800473a:	4b47      	ldr	r3, [pc, #284]	; (8004858 <HAL_RCC_GetSysClockFreq+0x188>)
 800473c:	fb03 f201 	mul.w	r2, r3, r1
 8004740:	2300      	movs	r3, #0
 8004742:	fb00 f303 	mul.w	r3, r0, r3
 8004746:	4413      	add	r3, r2
 8004748:	4a43      	ldr	r2, [pc, #268]	; (8004858 <HAL_RCC_GetSysClockFreq+0x188>)
 800474a:	fba0 1202 	umull	r1, r2, r0, r2
 800474e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004750:	460a      	mov	r2, r1
 8004752:	62ba      	str	r2, [r7, #40]	; 0x28
 8004754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004756:	4413      	add	r3, r2
 8004758:	62fb      	str	r3, [r7, #44]	; 0x2c
 800475a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800475c:	2200      	movs	r2, #0
 800475e:	61bb      	str	r3, [r7, #24]
 8004760:	61fa      	str	r2, [r7, #28]
 8004762:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004766:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800476a:	f7fc fac5 	bl	8000cf8 <__aeabi_uldivmod>
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	4613      	mov	r3, r2
 8004774:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004776:	e053      	b.n	8004820 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004778:	4b35      	ldr	r3, [pc, #212]	; (8004850 <HAL_RCC_GetSysClockFreq+0x180>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	099b      	lsrs	r3, r3, #6
 800477e:	2200      	movs	r2, #0
 8004780:	613b      	str	r3, [r7, #16]
 8004782:	617a      	str	r2, [r7, #20]
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800478a:	f04f 0b00 	mov.w	fp, #0
 800478e:	4652      	mov	r2, sl
 8004790:	465b      	mov	r3, fp
 8004792:	f04f 0000 	mov.w	r0, #0
 8004796:	f04f 0100 	mov.w	r1, #0
 800479a:	0159      	lsls	r1, r3, #5
 800479c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047a0:	0150      	lsls	r0, r2, #5
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	ebb2 080a 	subs.w	r8, r2, sl
 80047aa:	eb63 090b 	sbc.w	r9, r3, fp
 80047ae:	f04f 0200 	mov.w	r2, #0
 80047b2:	f04f 0300 	mov.w	r3, #0
 80047b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80047ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80047be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80047c2:	ebb2 0408 	subs.w	r4, r2, r8
 80047c6:	eb63 0509 	sbc.w	r5, r3, r9
 80047ca:	f04f 0200 	mov.w	r2, #0
 80047ce:	f04f 0300 	mov.w	r3, #0
 80047d2:	00eb      	lsls	r3, r5, #3
 80047d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047d8:	00e2      	lsls	r2, r4, #3
 80047da:	4614      	mov	r4, r2
 80047dc:	461d      	mov	r5, r3
 80047de:	eb14 030a 	adds.w	r3, r4, sl
 80047e2:	603b      	str	r3, [r7, #0]
 80047e4:	eb45 030b 	adc.w	r3, r5, fp
 80047e8:	607b      	str	r3, [r7, #4]
 80047ea:	f04f 0200 	mov.w	r2, #0
 80047ee:	f04f 0300 	mov.w	r3, #0
 80047f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047f6:	4629      	mov	r1, r5
 80047f8:	028b      	lsls	r3, r1, #10
 80047fa:	4621      	mov	r1, r4
 80047fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004800:	4621      	mov	r1, r4
 8004802:	028a      	lsls	r2, r1, #10
 8004804:	4610      	mov	r0, r2
 8004806:	4619      	mov	r1, r3
 8004808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800480a:	2200      	movs	r2, #0
 800480c:	60bb      	str	r3, [r7, #8]
 800480e:	60fa      	str	r2, [r7, #12]
 8004810:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004814:	f7fc fa70 	bl	8000cf8 <__aeabi_uldivmod>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	4613      	mov	r3, r2
 800481e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004820:	4b0b      	ldr	r3, [pc, #44]	; (8004850 <HAL_RCC_GetSysClockFreq+0x180>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	0c1b      	lsrs	r3, r3, #16
 8004826:	f003 0303 	and.w	r3, r3, #3
 800482a:	3301      	adds	r3, #1
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004830:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004834:	fbb2 f3f3 	udiv	r3, r2, r3
 8004838:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800483a:	e002      	b.n	8004842 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800483c:	4b05      	ldr	r3, [pc, #20]	; (8004854 <HAL_RCC_GetSysClockFreq+0x184>)
 800483e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004840:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004844:	4618      	mov	r0, r3
 8004846:	3740      	adds	r7, #64	; 0x40
 8004848:	46bd      	mov	sp, r7
 800484a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800484e:	bf00      	nop
 8004850:	40023800 	.word	0x40023800
 8004854:	00f42400 	.word	0x00f42400
 8004858:	017d7840 	.word	0x017d7840

0800485c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004860:	4b03      	ldr	r3, [pc, #12]	; (8004870 <HAL_RCC_GetHCLKFreq+0x14>)
 8004862:	681b      	ldr	r3, [r3, #0]
}
 8004864:	4618      	mov	r0, r3
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	20000000 	.word	0x20000000

08004874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004878:	f7ff fff0 	bl	800485c <HAL_RCC_GetHCLKFreq>
 800487c:	4602      	mov	r2, r0
 800487e:	4b05      	ldr	r3, [pc, #20]	; (8004894 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	0a9b      	lsrs	r3, r3, #10
 8004884:	f003 0307 	and.w	r3, r3, #7
 8004888:	4903      	ldr	r1, [pc, #12]	; (8004898 <HAL_RCC_GetPCLK1Freq+0x24>)
 800488a:	5ccb      	ldrb	r3, [r1, r3]
 800488c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004890:	4618      	mov	r0, r3
 8004892:	bd80      	pop	{r7, pc}
 8004894:	40023800 	.word	0x40023800
 8004898:	08009088 	.word	0x08009088

0800489c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80048a0:	f7ff ffdc 	bl	800485c <HAL_RCC_GetHCLKFreq>
 80048a4:	4602      	mov	r2, r0
 80048a6:	4b05      	ldr	r3, [pc, #20]	; (80048bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	0b5b      	lsrs	r3, r3, #13
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	4903      	ldr	r1, [pc, #12]	; (80048c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048b2:	5ccb      	ldrb	r3, [r1, r3]
 80048b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	40023800 	.word	0x40023800
 80048c0:	08009088 	.word	0x08009088

080048c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e03f      	b.n	8004956 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d106      	bne.n	80048f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7fc fd42 	bl	8001374 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2224      	movs	r2, #36	; 0x24
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004906:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 fddf 	bl	80054cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	691a      	ldr	r2, [r3, #16]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800491c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	695a      	ldr	r2, [r3, #20]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800492c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68da      	ldr	r2, [r3, #12]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800493c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2220      	movs	r2, #32
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2220      	movs	r2, #32
 8004950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b08a      	sub	sp, #40	; 0x28
 8004962:	af02      	add	r7, sp, #8
 8004964:	60f8      	str	r0, [r7, #12]
 8004966:	60b9      	str	r1, [r7, #8]
 8004968:	603b      	str	r3, [r7, #0]
 800496a:	4613      	mov	r3, r2
 800496c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800496e:	2300      	movs	r3, #0
 8004970:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b20      	cmp	r3, #32
 800497c:	d17c      	bne.n	8004a78 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d002      	beq.n	800498a <HAL_UART_Transmit+0x2c>
 8004984:	88fb      	ldrh	r3, [r7, #6]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e075      	b.n	8004a7a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004994:	2b01      	cmp	r3, #1
 8004996:	d101      	bne.n	800499c <HAL_UART_Transmit+0x3e>
 8004998:	2302      	movs	r3, #2
 800499a:	e06e      	b.n	8004a7a <HAL_UART_Transmit+0x11c>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2221      	movs	r2, #33	; 0x21
 80049ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049b2:	f7fd ffe3 	bl	800297c <HAL_GetTick>
 80049b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	88fa      	ldrh	r2, [r7, #6]
 80049bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	88fa      	ldrh	r2, [r7, #6]
 80049c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049cc:	d108      	bne.n	80049e0 <HAL_UART_Transmit+0x82>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d104      	bne.n	80049e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80049d6:	2300      	movs	r3, #0
 80049d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	61bb      	str	r3, [r7, #24]
 80049de:	e003      	b.n	80049e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049e4:	2300      	movs	r3, #0
 80049e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80049f0:	e02a      	b.n	8004a48 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	2200      	movs	r2, #0
 80049fa:	2180      	movs	r1, #128	; 0x80
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f000 fb1f 	bl	8005040 <UART_WaitOnFlagUntilTimeout>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e036      	b.n	8004a7a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10b      	bne.n	8004a2a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	881b      	ldrh	r3, [r3, #0]
 8004a16:	461a      	mov	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	3302      	adds	r3, #2
 8004a26:	61bb      	str	r3, [r7, #24]
 8004a28:	e007      	b.n	8004a3a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	781a      	ldrb	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	3301      	adds	r3, #1
 8004a38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	3b01      	subs	r3, #1
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1cf      	bne.n	80049f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	2140      	movs	r1, #64	; 0x40
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 faef 	bl	8005040 <UART_WaitOnFlagUntilTimeout>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e006      	b.n	8004a7a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a74:	2300      	movs	r3, #0
 8004a76:	e000      	b.n	8004a7a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004a78:	2302      	movs	r3, #2
  }
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3720      	adds	r7, #32
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b084      	sub	sp, #16
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	60f8      	str	r0, [r7, #12]
 8004a8a:	60b9      	str	r1, [r7, #8]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b20      	cmp	r3, #32
 8004a9a:	d11d      	bne.n	8004ad8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d002      	beq.n	8004aa8 <HAL_UART_Receive_IT+0x26>
 8004aa2:	88fb      	ldrh	r3, [r7, #6]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d101      	bne.n	8004aac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e016      	b.n	8004ada <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d101      	bne.n	8004aba <HAL_UART_Receive_IT+0x38>
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	e00f      	b.n	8004ada <HAL_UART_Receive_IT+0x58>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004ac8:	88fb      	ldrh	r3, [r7, #6]
 8004aca:	461a      	mov	r2, r3
 8004acc:	68b9      	ldr	r1, [r7, #8]
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f000 fb24 	bl	800511c <UART_Start_Receive_IT>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	e000      	b.n	8004ada <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004ad8:	2302      	movs	r3, #2
  }
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
	...

08004ae4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b0ba      	sub	sp, #232	; 0xe8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004b10:	2300      	movs	r3, #0
 8004b12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004b22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10f      	bne.n	8004b4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b2e:	f003 0320 	and.w	r3, r3, #32
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d009      	beq.n	8004b4a <HAL_UART_IRQHandler+0x66>
 8004b36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b3a:	f003 0320 	and.w	r3, r3, #32
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 fc07 	bl	8005356 <UART_Receive_IT>
      return;
 8004b48:	e256      	b.n	8004ff8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 80de 	beq.w	8004d10 <HAL_UART_IRQHandler+0x22c>
 8004b54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d106      	bne.n	8004b6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b64:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 80d1 	beq.w	8004d10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00b      	beq.n	8004b92 <HAL_UART_IRQHandler+0xae>
 8004b7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d005      	beq.n	8004b92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	f043 0201 	orr.w	r2, r3, #1
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b96:	f003 0304 	and.w	r3, r3, #4
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00b      	beq.n	8004bb6 <HAL_UART_IRQHandler+0xd2>
 8004b9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d005      	beq.n	8004bb6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	f043 0202 	orr.w	r2, r3, #2
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00b      	beq.n	8004bda <HAL_UART_IRQHandler+0xf6>
 8004bc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d005      	beq.n	8004bda <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	f043 0204 	orr.w	r2, r3, #4
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bde:	f003 0308 	and.w	r3, r3, #8
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d011      	beq.n	8004c0a <HAL_UART_IRQHandler+0x126>
 8004be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bea:	f003 0320 	and.w	r3, r3, #32
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d105      	bne.n	8004bfe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004bf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d005      	beq.n	8004c0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	f043 0208 	orr.w	r2, r3, #8
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f000 81ed 	beq.w	8004fee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c18:	f003 0320 	and.w	r3, r3, #32
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d008      	beq.n	8004c32 <HAL_UART_IRQHandler+0x14e>
 8004c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c24:	f003 0320 	and.w	r3, r3, #32
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d002      	beq.n	8004c32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 fb92 	bl	8005356 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3c:	2b40      	cmp	r3, #64	; 0x40
 8004c3e:	bf0c      	ite	eq
 8004c40:	2301      	moveq	r3, #1
 8004c42:	2300      	movne	r3, #0
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	f003 0308 	and.w	r3, r3, #8
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d103      	bne.n	8004c5e <HAL_UART_IRQHandler+0x17a>
 8004c56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d04f      	beq.n	8004cfe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 fa9a 	bl	8005198 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c6e:	2b40      	cmp	r3, #64	; 0x40
 8004c70:	d141      	bne.n	8004cf6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	3314      	adds	r3, #20
 8004c78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c80:	e853 3f00 	ldrex	r3, [r3]
 8004c84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004c88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3314      	adds	r3, #20
 8004c9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004ca2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004caa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004cae:	e841 2300 	strex	r3, r2, [r1]
 8004cb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004cb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1d9      	bne.n	8004c72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d013      	beq.n	8004cee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cca:	4a7d      	ldr	r2, [pc, #500]	; (8004ec0 <HAL_UART_IRQHandler+0x3dc>)
 8004ccc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fe f803 	bl	8002cde <HAL_DMA_Abort_IT>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d016      	beq.n	8004d0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ce8:	4610      	mov	r0, r2
 8004cea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cec:	e00e      	b.n	8004d0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f990 	bl	8005014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf4:	e00a      	b.n	8004d0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f98c 	bl	8005014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cfc:	e006      	b.n	8004d0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f988 	bl	8005014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004d0a:	e170      	b.n	8004fee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d0c:	bf00      	nop
    return;
 8004d0e:	e16e      	b.n	8004fee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	f040 814a 	bne.w	8004fae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d1e:	f003 0310 	and.w	r3, r3, #16
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f000 8143 	beq.w	8004fae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d2c:	f003 0310 	and.w	r3, r3, #16
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 813c 	beq.w	8004fae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d36:	2300      	movs	r3, #0
 8004d38:	60bb      	str	r3, [r7, #8]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	60bb      	str	r3, [r7, #8]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	60bb      	str	r3, [r7, #8]
 8004d4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d56:	2b40      	cmp	r3, #64	; 0x40
 8004d58:	f040 80b4 	bne.w	8004ec4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 8140 	beq.w	8004ff2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	f080 8139 	bcs.w	8004ff2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d86:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	69db      	ldr	r3, [r3, #28]
 8004d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d92:	f000 8088 	beq.w	8004ea6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	330c      	adds	r3, #12
 8004d9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004da4:	e853 3f00 	ldrex	r3, [r3]
 8004da8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004dac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004db0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004db4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	330c      	adds	r3, #12
 8004dbe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004dc2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004dc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004dce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004dd2:	e841 2300 	strex	r3, r2, [r1]
 8004dd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004dda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1d9      	bne.n	8004d96 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	3314      	adds	r3, #20
 8004de8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dec:	e853 3f00 	ldrex	r3, [r3]
 8004df0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004df2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004df4:	f023 0301 	bic.w	r3, r3, #1
 8004df8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	3314      	adds	r3, #20
 8004e02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004e0a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004e0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e12:	e841 2300 	strex	r3, r2, [r1]
 8004e16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004e18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1e1      	bne.n	8004de2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3314      	adds	r3, #20
 8004e24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e28:	e853 3f00 	ldrex	r3, [r3]
 8004e2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004e2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	3314      	adds	r3, #20
 8004e3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004e42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e4a:	e841 2300 	strex	r3, r2, [r1]
 8004e4e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004e50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1e3      	bne.n	8004e1e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2220      	movs	r2, #32
 8004e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	330c      	adds	r3, #12
 8004e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e6e:	e853 3f00 	ldrex	r3, [r3]
 8004e72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e76:	f023 0310 	bic.w	r3, r3, #16
 8004e7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	330c      	adds	r3, #12
 8004e84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004e88:	65ba      	str	r2, [r7, #88]	; 0x58
 8004e8a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e90:	e841 2300 	strex	r3, r2, [r1]
 8004e94:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1e3      	bne.n	8004e64 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7fd feac 	bl	8002bfe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f8b6 	bl	8005028 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ebc:	e099      	b.n	8004ff2 <HAL_UART_IRQHandler+0x50e>
 8004ebe:	bf00      	nop
 8004ec0:	0800525f 	.word	0x0800525f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f000 808b 	beq.w	8004ff6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004ee0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f000 8086 	beq.w	8004ff6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	330c      	adds	r3, #12
 8004ef0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef4:	e853 3f00 	ldrex	r3, [r3]
 8004ef8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004efc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	330c      	adds	r3, #12
 8004f0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004f0e:	647a      	str	r2, [r7, #68]	; 0x44
 8004f10:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f16:	e841 2300 	strex	r3, r2, [r1]
 8004f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1e3      	bne.n	8004eea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	3314      	adds	r3, #20
 8004f28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	e853 3f00 	ldrex	r3, [r3]
 8004f30:	623b      	str	r3, [r7, #32]
   return(result);
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	f023 0301 	bic.w	r3, r3, #1
 8004f38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	3314      	adds	r3, #20
 8004f42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004f46:	633a      	str	r2, [r7, #48]	; 0x30
 8004f48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f4e:	e841 2300 	strex	r3, r2, [r1]
 8004f52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1e3      	bne.n	8004f22 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	330c      	adds	r3, #12
 8004f6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	e853 3f00 	ldrex	r3, [r3]
 8004f76:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f023 0310 	bic.w	r3, r3, #16
 8004f7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	330c      	adds	r3, #12
 8004f88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004f8c:	61fa      	str	r2, [r7, #28]
 8004f8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f90:	69b9      	ldr	r1, [r7, #24]
 8004f92:	69fa      	ldr	r2, [r7, #28]
 8004f94:	e841 2300 	strex	r3, r2, [r1]
 8004f98:	617b      	str	r3, [r7, #20]
   return(result);
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1e3      	bne.n	8004f68 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004fa0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f83e 	bl	8005028 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fac:	e023      	b.n	8004ff6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d009      	beq.n	8004fce <HAL_UART_IRQHandler+0x4ea>
 8004fba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d003      	beq.n	8004fce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f95d 	bl	8005286 <UART_Transmit_IT>
    return;
 8004fcc:	e014      	b.n	8004ff8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00e      	beq.n	8004ff8 <HAL_UART_IRQHandler+0x514>
 8004fda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d008      	beq.n	8004ff8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f99d 	bl	8005326 <UART_EndTransmit_IT>
    return;
 8004fec:	e004      	b.n	8004ff8 <HAL_UART_IRQHandler+0x514>
    return;
 8004fee:	bf00      	nop
 8004ff0:	e002      	b.n	8004ff8 <HAL_UART_IRQHandler+0x514>
      return;
 8004ff2:	bf00      	nop
 8004ff4:	e000      	b.n	8004ff8 <HAL_UART_IRQHandler+0x514>
      return;
 8004ff6:	bf00      	nop
  }
}
 8004ff8:	37e8      	adds	r7, #232	; 0xe8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop

08005000 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	460b      	mov	r3, r1
 8005032:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b090      	sub	sp, #64	; 0x40
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	603b      	str	r3, [r7, #0]
 800504c:	4613      	mov	r3, r2
 800504e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005050:	e050      	b.n	80050f4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005058:	d04c      	beq.n	80050f4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800505a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800505c:	2b00      	cmp	r3, #0
 800505e:	d007      	beq.n	8005070 <UART_WaitOnFlagUntilTimeout+0x30>
 8005060:	f7fd fc8c 	bl	800297c <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800506c:	429a      	cmp	r2, r3
 800506e:	d241      	bcs.n	80050f4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	330c      	adds	r3, #12
 8005076:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507a:	e853 3f00 	ldrex	r3, [r3]
 800507e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005082:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005086:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	330c      	adds	r3, #12
 800508e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005090:	637a      	str	r2, [r7, #52]	; 0x34
 8005092:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005094:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005096:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005098:	e841 2300 	strex	r3, r2, [r1]
 800509c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800509e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1e5      	bne.n	8005070 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	3314      	adds	r3, #20
 80050aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	e853 3f00 	ldrex	r3, [r3]
 80050b2:	613b      	str	r3, [r7, #16]
   return(result);
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	f023 0301 	bic.w	r3, r3, #1
 80050ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	3314      	adds	r3, #20
 80050c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050c4:	623a      	str	r2, [r7, #32]
 80050c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c8:	69f9      	ldr	r1, [r7, #28]
 80050ca:	6a3a      	ldr	r2, [r7, #32]
 80050cc:	e841 2300 	strex	r3, r2, [r1]
 80050d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1e5      	bne.n	80050a4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2220      	movs	r2, #32
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2220      	movs	r2, #32
 80050e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e00f      	b.n	8005114 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	4013      	ands	r3, r2
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	429a      	cmp	r2, r3
 8005102:	bf0c      	ite	eq
 8005104:	2301      	moveq	r3, #1
 8005106:	2300      	movne	r3, #0
 8005108:	b2db      	uxtb	r3, r3
 800510a:	461a      	mov	r2, r3
 800510c:	79fb      	ldrb	r3, [r7, #7]
 800510e:	429a      	cmp	r2, r3
 8005110:	d09f      	beq.n	8005052 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3740      	adds	r7, #64	; 0x40
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	4613      	mov	r3, r2
 8005128:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	88fa      	ldrh	r2, [r7, #6]
 8005134:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	88fa      	ldrh	r2, [r7, #6]
 800513a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2222      	movs	r2, #34	; 0x22
 8005146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d007      	beq.n	800516a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68da      	ldr	r2, [r3, #12]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005168:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	695a      	ldr	r2, [r3, #20]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f042 0201 	orr.w	r2, r2, #1
 8005178:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68da      	ldr	r2, [r3, #12]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f042 0220 	orr.w	r2, r2, #32
 8005188:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3714      	adds	r7, #20
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005198:	b480      	push	{r7}
 800519a:	b095      	sub	sp, #84	; 0x54
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	330c      	adds	r3, #12
 80051a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051aa:	e853 3f00 	ldrex	r3, [r3]
 80051ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	330c      	adds	r3, #12
 80051be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051c0:	643a      	str	r2, [r7, #64]	; 0x40
 80051c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051c8:	e841 2300 	strex	r3, r2, [r1]
 80051cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1e5      	bne.n	80051a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	3314      	adds	r3, #20
 80051da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051dc:	6a3b      	ldr	r3, [r7, #32]
 80051de:	e853 3f00 	ldrex	r3, [r3]
 80051e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	f023 0301 	bic.w	r3, r3, #1
 80051ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3314      	adds	r3, #20
 80051f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051fc:	e841 2300 	strex	r3, r2, [r1]
 8005200:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1e5      	bne.n	80051d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520c:	2b01      	cmp	r3, #1
 800520e:	d119      	bne.n	8005244 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	330c      	adds	r3, #12
 8005216:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	e853 3f00 	ldrex	r3, [r3]
 800521e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	f023 0310 	bic.w	r3, r3, #16
 8005226:	647b      	str	r3, [r7, #68]	; 0x44
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	330c      	adds	r3, #12
 800522e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005230:	61ba      	str	r2, [r7, #24]
 8005232:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005234:	6979      	ldr	r1, [r7, #20]
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	e841 2300 	strex	r3, r2, [r1]
 800523c:	613b      	str	r3, [r7, #16]
   return(result);
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1e5      	bne.n	8005210 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2220      	movs	r2, #32
 8005248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005252:	bf00      	nop
 8005254:	3754      	adds	r7, #84	; 0x54
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b084      	sub	sp, #16
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f7ff fecb 	bl	8005014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800527e:	bf00      	nop
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005286:	b480      	push	{r7}
 8005288:	b085      	sub	sp, #20
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b21      	cmp	r3, #33	; 0x21
 8005298:	d13e      	bne.n	8005318 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052a2:	d114      	bne.n	80052ce <UART_Transmit_IT+0x48>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d110      	bne.n	80052ce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	881b      	ldrh	r3, [r3, #0]
 80052b6:	461a      	mov	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	1c9a      	adds	r2, r3, #2
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	621a      	str	r2, [r3, #32]
 80052cc:	e008      	b.n	80052e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	1c59      	adds	r1, r3, #1
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	6211      	str	r1, [r2, #32]
 80052d8:	781a      	ldrb	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	3b01      	subs	r3, #1
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	4619      	mov	r1, r3
 80052ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10f      	bne.n	8005314 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68da      	ldr	r2, [r3, #12]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005302:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68da      	ldr	r2, [r3, #12]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005312:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005314:	2300      	movs	r3, #0
 8005316:	e000      	b.n	800531a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005318:	2302      	movs	r3, #2
  }
}
 800531a:	4618      	mov	r0, r3
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b082      	sub	sp, #8
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68da      	ldr	r2, [r3, #12]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800533c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2220      	movs	r2, #32
 8005342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7ff fe5a 	bl	8005000 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b08c      	sub	sp, #48	; 0x30
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b22      	cmp	r3, #34	; 0x22
 8005368:	f040 80ab 	bne.w	80054c2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005374:	d117      	bne.n	80053a6 <UART_Receive_IT+0x50>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d113      	bne.n	80053a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800537e:	2300      	movs	r3, #0
 8005380:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005386:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	b29b      	uxth	r3, r3
 8005390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005394:	b29a      	uxth	r2, r3
 8005396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005398:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539e:	1c9a      	adds	r2, r3, #2
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	629a      	str	r2, [r3, #40]	; 0x28
 80053a4:	e026      	b.n	80053f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80053ac:	2300      	movs	r3, #0
 80053ae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053b8:	d007      	beq.n	80053ca <UART_Receive_IT+0x74>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10a      	bne.n	80053d8 <UART_Receive_IT+0x82>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d106      	bne.n	80053d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d4:	701a      	strb	r2, [r3, #0]
 80053d6:	e008      	b.n	80053ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053e4:	b2da      	uxtb	r2, r3
 80053e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ee:	1c5a      	adds	r2, r3, #1
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	3b01      	subs	r3, #1
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	4619      	mov	r1, r3
 8005402:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005404:	2b00      	cmp	r3, #0
 8005406:	d15a      	bne.n	80054be <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68da      	ldr	r2, [r3, #12]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f022 0220 	bic.w	r2, r2, #32
 8005416:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68da      	ldr	r2, [r3, #12]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005426:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	695a      	ldr	r2, [r3, #20]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f022 0201 	bic.w	r2, r2, #1
 8005436:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2220      	movs	r2, #32
 800543c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005444:	2b01      	cmp	r3, #1
 8005446:	d135      	bne.n	80054b4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	330c      	adds	r3, #12
 8005454:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	e853 3f00 	ldrex	r3, [r3]
 800545c:	613b      	str	r3, [r7, #16]
   return(result);
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	f023 0310 	bic.w	r3, r3, #16
 8005464:	627b      	str	r3, [r7, #36]	; 0x24
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	330c      	adds	r3, #12
 800546c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800546e:	623a      	str	r2, [r7, #32]
 8005470:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005472:	69f9      	ldr	r1, [r7, #28]
 8005474:	6a3a      	ldr	r2, [r7, #32]
 8005476:	e841 2300 	strex	r3, r2, [r1]
 800547a:	61bb      	str	r3, [r7, #24]
   return(result);
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1e5      	bne.n	800544e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0310 	and.w	r3, r3, #16
 800548c:	2b10      	cmp	r3, #16
 800548e:	d10a      	bne.n	80054a6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005490:	2300      	movs	r3, #0
 8005492:	60fb      	str	r3, [r7, #12]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	60fb      	str	r3, [r7, #12]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	60fb      	str	r3, [r7, #12]
 80054a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80054aa:	4619      	mov	r1, r3
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7ff fdbb 	bl	8005028 <HAL_UARTEx_RxEventCallback>
 80054b2:	e002      	b.n	80054ba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f7fc f99b 	bl	80017f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80054ba:	2300      	movs	r3, #0
 80054bc:	e002      	b.n	80054c4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80054be:	2300      	movs	r3, #0
 80054c0:	e000      	b.n	80054c4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80054c2:	2302      	movs	r3, #2
  }
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3730      	adds	r7, #48	; 0x30
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054d0:	b0c0      	sub	sp, #256	; 0x100
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80054e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e8:	68d9      	ldr	r1, [r3, #12]
 80054ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	ea40 0301 	orr.w	r3, r0, r1
 80054f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80054f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054fa:	689a      	ldr	r2, [r3, #8]
 80054fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	431a      	orrs	r2, r3
 8005504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	431a      	orrs	r2, r3
 800550c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	4313      	orrs	r3, r2
 8005514:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005524:	f021 010c 	bic.w	r1, r1, #12
 8005528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005532:	430b      	orrs	r3, r1
 8005534:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005546:	6999      	ldr	r1, [r3, #24]
 8005548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	ea40 0301 	orr.w	r3, r0, r1
 8005552:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	4b8f      	ldr	r3, [pc, #572]	; (8005798 <UART_SetConfig+0x2cc>)
 800555c:	429a      	cmp	r2, r3
 800555e:	d005      	beq.n	800556c <UART_SetConfig+0xa0>
 8005560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	4b8d      	ldr	r3, [pc, #564]	; (800579c <UART_SetConfig+0x2d0>)
 8005568:	429a      	cmp	r2, r3
 800556a:	d104      	bne.n	8005576 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800556c:	f7ff f996 	bl	800489c <HAL_RCC_GetPCLK2Freq>
 8005570:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005574:	e003      	b.n	800557e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005576:	f7ff f97d 	bl	8004874 <HAL_RCC_GetPCLK1Freq>
 800557a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800557e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005582:	69db      	ldr	r3, [r3, #28]
 8005584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005588:	f040 810c 	bne.w	80057a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800558c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005590:	2200      	movs	r2, #0
 8005592:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005596:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800559a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800559e:	4622      	mov	r2, r4
 80055a0:	462b      	mov	r3, r5
 80055a2:	1891      	adds	r1, r2, r2
 80055a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80055a6:	415b      	adcs	r3, r3
 80055a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80055ae:	4621      	mov	r1, r4
 80055b0:	eb12 0801 	adds.w	r8, r2, r1
 80055b4:	4629      	mov	r1, r5
 80055b6:	eb43 0901 	adc.w	r9, r3, r1
 80055ba:	f04f 0200 	mov.w	r2, #0
 80055be:	f04f 0300 	mov.w	r3, #0
 80055c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055ce:	4690      	mov	r8, r2
 80055d0:	4699      	mov	r9, r3
 80055d2:	4623      	mov	r3, r4
 80055d4:	eb18 0303 	adds.w	r3, r8, r3
 80055d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80055dc:	462b      	mov	r3, r5
 80055de:	eb49 0303 	adc.w	r3, r9, r3
 80055e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80055e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80055f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80055f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80055fa:	460b      	mov	r3, r1
 80055fc:	18db      	adds	r3, r3, r3
 80055fe:	653b      	str	r3, [r7, #80]	; 0x50
 8005600:	4613      	mov	r3, r2
 8005602:	eb42 0303 	adc.w	r3, r2, r3
 8005606:	657b      	str	r3, [r7, #84]	; 0x54
 8005608:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800560c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005610:	f7fb fb72 	bl	8000cf8 <__aeabi_uldivmod>
 8005614:	4602      	mov	r2, r0
 8005616:	460b      	mov	r3, r1
 8005618:	4b61      	ldr	r3, [pc, #388]	; (80057a0 <UART_SetConfig+0x2d4>)
 800561a:	fba3 2302 	umull	r2, r3, r3, r2
 800561e:	095b      	lsrs	r3, r3, #5
 8005620:	011c      	lsls	r4, r3, #4
 8005622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005626:	2200      	movs	r2, #0
 8005628:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800562c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005630:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005634:	4642      	mov	r2, r8
 8005636:	464b      	mov	r3, r9
 8005638:	1891      	adds	r1, r2, r2
 800563a:	64b9      	str	r1, [r7, #72]	; 0x48
 800563c:	415b      	adcs	r3, r3
 800563e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005640:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005644:	4641      	mov	r1, r8
 8005646:	eb12 0a01 	adds.w	sl, r2, r1
 800564a:	4649      	mov	r1, r9
 800564c:	eb43 0b01 	adc.w	fp, r3, r1
 8005650:	f04f 0200 	mov.w	r2, #0
 8005654:	f04f 0300 	mov.w	r3, #0
 8005658:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800565c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005660:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005664:	4692      	mov	sl, r2
 8005666:	469b      	mov	fp, r3
 8005668:	4643      	mov	r3, r8
 800566a:	eb1a 0303 	adds.w	r3, sl, r3
 800566e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005672:	464b      	mov	r3, r9
 8005674:	eb4b 0303 	adc.w	r3, fp, r3
 8005678:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800567c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005688:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800568c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005690:	460b      	mov	r3, r1
 8005692:	18db      	adds	r3, r3, r3
 8005694:	643b      	str	r3, [r7, #64]	; 0x40
 8005696:	4613      	mov	r3, r2
 8005698:	eb42 0303 	adc.w	r3, r2, r3
 800569c:	647b      	str	r3, [r7, #68]	; 0x44
 800569e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80056a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80056a6:	f7fb fb27 	bl	8000cf8 <__aeabi_uldivmod>
 80056aa:	4602      	mov	r2, r0
 80056ac:	460b      	mov	r3, r1
 80056ae:	4611      	mov	r1, r2
 80056b0:	4b3b      	ldr	r3, [pc, #236]	; (80057a0 <UART_SetConfig+0x2d4>)
 80056b2:	fba3 2301 	umull	r2, r3, r3, r1
 80056b6:	095b      	lsrs	r3, r3, #5
 80056b8:	2264      	movs	r2, #100	; 0x64
 80056ba:	fb02 f303 	mul.w	r3, r2, r3
 80056be:	1acb      	subs	r3, r1, r3
 80056c0:	00db      	lsls	r3, r3, #3
 80056c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80056c6:	4b36      	ldr	r3, [pc, #216]	; (80057a0 <UART_SetConfig+0x2d4>)
 80056c8:	fba3 2302 	umull	r2, r3, r3, r2
 80056cc:	095b      	lsrs	r3, r3, #5
 80056ce:	005b      	lsls	r3, r3, #1
 80056d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056d4:	441c      	add	r4, r3
 80056d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056da:	2200      	movs	r2, #0
 80056dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80056e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80056e8:	4642      	mov	r2, r8
 80056ea:	464b      	mov	r3, r9
 80056ec:	1891      	adds	r1, r2, r2
 80056ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80056f0:	415b      	adcs	r3, r3
 80056f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80056f8:	4641      	mov	r1, r8
 80056fa:	1851      	adds	r1, r2, r1
 80056fc:	6339      	str	r1, [r7, #48]	; 0x30
 80056fe:	4649      	mov	r1, r9
 8005700:	414b      	adcs	r3, r1
 8005702:	637b      	str	r3, [r7, #52]	; 0x34
 8005704:	f04f 0200 	mov.w	r2, #0
 8005708:	f04f 0300 	mov.w	r3, #0
 800570c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005710:	4659      	mov	r1, fp
 8005712:	00cb      	lsls	r3, r1, #3
 8005714:	4651      	mov	r1, sl
 8005716:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800571a:	4651      	mov	r1, sl
 800571c:	00ca      	lsls	r2, r1, #3
 800571e:	4610      	mov	r0, r2
 8005720:	4619      	mov	r1, r3
 8005722:	4603      	mov	r3, r0
 8005724:	4642      	mov	r2, r8
 8005726:	189b      	adds	r3, r3, r2
 8005728:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800572c:	464b      	mov	r3, r9
 800572e:	460a      	mov	r2, r1
 8005730:	eb42 0303 	adc.w	r3, r2, r3
 8005734:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005744:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005748:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800574c:	460b      	mov	r3, r1
 800574e:	18db      	adds	r3, r3, r3
 8005750:	62bb      	str	r3, [r7, #40]	; 0x28
 8005752:	4613      	mov	r3, r2
 8005754:	eb42 0303 	adc.w	r3, r2, r3
 8005758:	62fb      	str	r3, [r7, #44]	; 0x2c
 800575a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800575e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005762:	f7fb fac9 	bl	8000cf8 <__aeabi_uldivmod>
 8005766:	4602      	mov	r2, r0
 8005768:	460b      	mov	r3, r1
 800576a:	4b0d      	ldr	r3, [pc, #52]	; (80057a0 <UART_SetConfig+0x2d4>)
 800576c:	fba3 1302 	umull	r1, r3, r3, r2
 8005770:	095b      	lsrs	r3, r3, #5
 8005772:	2164      	movs	r1, #100	; 0x64
 8005774:	fb01 f303 	mul.w	r3, r1, r3
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	00db      	lsls	r3, r3, #3
 800577c:	3332      	adds	r3, #50	; 0x32
 800577e:	4a08      	ldr	r2, [pc, #32]	; (80057a0 <UART_SetConfig+0x2d4>)
 8005780:	fba2 2303 	umull	r2, r3, r2, r3
 8005784:	095b      	lsrs	r3, r3, #5
 8005786:	f003 0207 	and.w	r2, r3, #7
 800578a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4422      	add	r2, r4
 8005792:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005794:	e106      	b.n	80059a4 <UART_SetConfig+0x4d8>
 8005796:	bf00      	nop
 8005798:	40011000 	.word	0x40011000
 800579c:	40011400 	.word	0x40011400
 80057a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057a8:	2200      	movs	r2, #0
 80057aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80057ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80057b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80057b6:	4642      	mov	r2, r8
 80057b8:	464b      	mov	r3, r9
 80057ba:	1891      	adds	r1, r2, r2
 80057bc:	6239      	str	r1, [r7, #32]
 80057be:	415b      	adcs	r3, r3
 80057c0:	627b      	str	r3, [r7, #36]	; 0x24
 80057c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80057c6:	4641      	mov	r1, r8
 80057c8:	1854      	adds	r4, r2, r1
 80057ca:	4649      	mov	r1, r9
 80057cc:	eb43 0501 	adc.w	r5, r3, r1
 80057d0:	f04f 0200 	mov.w	r2, #0
 80057d4:	f04f 0300 	mov.w	r3, #0
 80057d8:	00eb      	lsls	r3, r5, #3
 80057da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057de:	00e2      	lsls	r2, r4, #3
 80057e0:	4614      	mov	r4, r2
 80057e2:	461d      	mov	r5, r3
 80057e4:	4643      	mov	r3, r8
 80057e6:	18e3      	adds	r3, r4, r3
 80057e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80057ec:	464b      	mov	r3, r9
 80057ee:	eb45 0303 	adc.w	r3, r5, r3
 80057f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80057f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005802:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005806:	f04f 0200 	mov.w	r2, #0
 800580a:	f04f 0300 	mov.w	r3, #0
 800580e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005812:	4629      	mov	r1, r5
 8005814:	008b      	lsls	r3, r1, #2
 8005816:	4621      	mov	r1, r4
 8005818:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800581c:	4621      	mov	r1, r4
 800581e:	008a      	lsls	r2, r1, #2
 8005820:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005824:	f7fb fa68 	bl	8000cf8 <__aeabi_uldivmod>
 8005828:	4602      	mov	r2, r0
 800582a:	460b      	mov	r3, r1
 800582c:	4b60      	ldr	r3, [pc, #384]	; (80059b0 <UART_SetConfig+0x4e4>)
 800582e:	fba3 2302 	umull	r2, r3, r3, r2
 8005832:	095b      	lsrs	r3, r3, #5
 8005834:	011c      	lsls	r4, r3, #4
 8005836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800583a:	2200      	movs	r2, #0
 800583c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005840:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005844:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005848:	4642      	mov	r2, r8
 800584a:	464b      	mov	r3, r9
 800584c:	1891      	adds	r1, r2, r2
 800584e:	61b9      	str	r1, [r7, #24]
 8005850:	415b      	adcs	r3, r3
 8005852:	61fb      	str	r3, [r7, #28]
 8005854:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005858:	4641      	mov	r1, r8
 800585a:	1851      	adds	r1, r2, r1
 800585c:	6139      	str	r1, [r7, #16]
 800585e:	4649      	mov	r1, r9
 8005860:	414b      	adcs	r3, r1
 8005862:	617b      	str	r3, [r7, #20]
 8005864:	f04f 0200 	mov.w	r2, #0
 8005868:	f04f 0300 	mov.w	r3, #0
 800586c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005870:	4659      	mov	r1, fp
 8005872:	00cb      	lsls	r3, r1, #3
 8005874:	4651      	mov	r1, sl
 8005876:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800587a:	4651      	mov	r1, sl
 800587c:	00ca      	lsls	r2, r1, #3
 800587e:	4610      	mov	r0, r2
 8005880:	4619      	mov	r1, r3
 8005882:	4603      	mov	r3, r0
 8005884:	4642      	mov	r2, r8
 8005886:	189b      	adds	r3, r3, r2
 8005888:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800588c:	464b      	mov	r3, r9
 800588e:	460a      	mov	r2, r1
 8005890:	eb42 0303 	adc.w	r3, r2, r3
 8005894:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80058a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80058a4:	f04f 0200 	mov.w	r2, #0
 80058a8:	f04f 0300 	mov.w	r3, #0
 80058ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80058b0:	4649      	mov	r1, r9
 80058b2:	008b      	lsls	r3, r1, #2
 80058b4:	4641      	mov	r1, r8
 80058b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058ba:	4641      	mov	r1, r8
 80058bc:	008a      	lsls	r2, r1, #2
 80058be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80058c2:	f7fb fa19 	bl	8000cf8 <__aeabi_uldivmod>
 80058c6:	4602      	mov	r2, r0
 80058c8:	460b      	mov	r3, r1
 80058ca:	4611      	mov	r1, r2
 80058cc:	4b38      	ldr	r3, [pc, #224]	; (80059b0 <UART_SetConfig+0x4e4>)
 80058ce:	fba3 2301 	umull	r2, r3, r3, r1
 80058d2:	095b      	lsrs	r3, r3, #5
 80058d4:	2264      	movs	r2, #100	; 0x64
 80058d6:	fb02 f303 	mul.w	r3, r2, r3
 80058da:	1acb      	subs	r3, r1, r3
 80058dc:	011b      	lsls	r3, r3, #4
 80058de:	3332      	adds	r3, #50	; 0x32
 80058e0:	4a33      	ldr	r2, [pc, #204]	; (80059b0 <UART_SetConfig+0x4e4>)
 80058e2:	fba2 2303 	umull	r2, r3, r2, r3
 80058e6:	095b      	lsrs	r3, r3, #5
 80058e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058ec:	441c      	add	r4, r3
 80058ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058f2:	2200      	movs	r2, #0
 80058f4:	673b      	str	r3, [r7, #112]	; 0x70
 80058f6:	677a      	str	r2, [r7, #116]	; 0x74
 80058f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80058fc:	4642      	mov	r2, r8
 80058fe:	464b      	mov	r3, r9
 8005900:	1891      	adds	r1, r2, r2
 8005902:	60b9      	str	r1, [r7, #8]
 8005904:	415b      	adcs	r3, r3
 8005906:	60fb      	str	r3, [r7, #12]
 8005908:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800590c:	4641      	mov	r1, r8
 800590e:	1851      	adds	r1, r2, r1
 8005910:	6039      	str	r1, [r7, #0]
 8005912:	4649      	mov	r1, r9
 8005914:	414b      	adcs	r3, r1
 8005916:	607b      	str	r3, [r7, #4]
 8005918:	f04f 0200 	mov.w	r2, #0
 800591c:	f04f 0300 	mov.w	r3, #0
 8005920:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005924:	4659      	mov	r1, fp
 8005926:	00cb      	lsls	r3, r1, #3
 8005928:	4651      	mov	r1, sl
 800592a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800592e:	4651      	mov	r1, sl
 8005930:	00ca      	lsls	r2, r1, #3
 8005932:	4610      	mov	r0, r2
 8005934:	4619      	mov	r1, r3
 8005936:	4603      	mov	r3, r0
 8005938:	4642      	mov	r2, r8
 800593a:	189b      	adds	r3, r3, r2
 800593c:	66bb      	str	r3, [r7, #104]	; 0x68
 800593e:	464b      	mov	r3, r9
 8005940:	460a      	mov	r2, r1
 8005942:	eb42 0303 	adc.w	r3, r2, r3
 8005946:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	663b      	str	r3, [r7, #96]	; 0x60
 8005952:	667a      	str	r2, [r7, #100]	; 0x64
 8005954:	f04f 0200 	mov.w	r2, #0
 8005958:	f04f 0300 	mov.w	r3, #0
 800595c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005960:	4649      	mov	r1, r9
 8005962:	008b      	lsls	r3, r1, #2
 8005964:	4641      	mov	r1, r8
 8005966:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800596a:	4641      	mov	r1, r8
 800596c:	008a      	lsls	r2, r1, #2
 800596e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005972:	f7fb f9c1 	bl	8000cf8 <__aeabi_uldivmod>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	4b0d      	ldr	r3, [pc, #52]	; (80059b0 <UART_SetConfig+0x4e4>)
 800597c:	fba3 1302 	umull	r1, r3, r3, r2
 8005980:	095b      	lsrs	r3, r3, #5
 8005982:	2164      	movs	r1, #100	; 0x64
 8005984:	fb01 f303 	mul.w	r3, r1, r3
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	011b      	lsls	r3, r3, #4
 800598c:	3332      	adds	r3, #50	; 0x32
 800598e:	4a08      	ldr	r2, [pc, #32]	; (80059b0 <UART_SetConfig+0x4e4>)
 8005990:	fba2 2303 	umull	r2, r3, r2, r3
 8005994:	095b      	lsrs	r3, r3, #5
 8005996:	f003 020f 	and.w	r2, r3, #15
 800599a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4422      	add	r2, r4
 80059a2:	609a      	str	r2, [r3, #8]
}
 80059a4:	bf00      	nop
 80059a6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80059aa:	46bd      	mov	sp, r7
 80059ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059b0:	51eb851f 	.word	0x51eb851f

080059b4 <atoi>:
 80059b4:	220a      	movs	r2, #10
 80059b6:	2100      	movs	r1, #0
 80059b8:	f000 b882 	b.w	8005ac0 <strtol>

080059bc <_strtol_l.constprop.0>:
 80059bc:	2b01      	cmp	r3, #1
 80059be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059c2:	d001      	beq.n	80059c8 <_strtol_l.constprop.0+0xc>
 80059c4:	2b24      	cmp	r3, #36	; 0x24
 80059c6:	d906      	bls.n	80059d6 <_strtol_l.constprop.0+0x1a>
 80059c8:	f000 fe62 	bl	8006690 <__errno>
 80059cc:	2316      	movs	r3, #22
 80059ce:	6003      	str	r3, [r0, #0]
 80059d0:	2000      	movs	r0, #0
 80059d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059d6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005abc <_strtol_l.constprop.0+0x100>
 80059da:	460d      	mov	r5, r1
 80059dc:	462e      	mov	r6, r5
 80059de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80059e2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80059e6:	f017 0708 	ands.w	r7, r7, #8
 80059ea:	d1f7      	bne.n	80059dc <_strtol_l.constprop.0+0x20>
 80059ec:	2c2d      	cmp	r4, #45	; 0x2d
 80059ee:	d132      	bne.n	8005a56 <_strtol_l.constprop.0+0x9a>
 80059f0:	782c      	ldrb	r4, [r5, #0]
 80059f2:	2701      	movs	r7, #1
 80059f4:	1cb5      	adds	r5, r6, #2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d05b      	beq.n	8005ab2 <_strtol_l.constprop.0+0xf6>
 80059fa:	2b10      	cmp	r3, #16
 80059fc:	d109      	bne.n	8005a12 <_strtol_l.constprop.0+0x56>
 80059fe:	2c30      	cmp	r4, #48	; 0x30
 8005a00:	d107      	bne.n	8005a12 <_strtol_l.constprop.0+0x56>
 8005a02:	782c      	ldrb	r4, [r5, #0]
 8005a04:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005a08:	2c58      	cmp	r4, #88	; 0x58
 8005a0a:	d14d      	bne.n	8005aa8 <_strtol_l.constprop.0+0xec>
 8005a0c:	786c      	ldrb	r4, [r5, #1]
 8005a0e:	2310      	movs	r3, #16
 8005a10:	3502      	adds	r5, #2
 8005a12:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005a16:	f108 38ff 	add.w	r8, r8, #4294967295
 8005a1a:	f04f 0e00 	mov.w	lr, #0
 8005a1e:	fbb8 f9f3 	udiv	r9, r8, r3
 8005a22:	4676      	mov	r6, lr
 8005a24:	fb03 8a19 	mls	sl, r3, r9, r8
 8005a28:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005a2c:	f1bc 0f09 	cmp.w	ip, #9
 8005a30:	d816      	bhi.n	8005a60 <_strtol_l.constprop.0+0xa4>
 8005a32:	4664      	mov	r4, ip
 8005a34:	42a3      	cmp	r3, r4
 8005a36:	dd24      	ble.n	8005a82 <_strtol_l.constprop.0+0xc6>
 8005a38:	f1be 3fff 	cmp.w	lr, #4294967295
 8005a3c:	d008      	beq.n	8005a50 <_strtol_l.constprop.0+0x94>
 8005a3e:	45b1      	cmp	r9, r6
 8005a40:	d31c      	bcc.n	8005a7c <_strtol_l.constprop.0+0xc0>
 8005a42:	d101      	bne.n	8005a48 <_strtol_l.constprop.0+0x8c>
 8005a44:	45a2      	cmp	sl, r4
 8005a46:	db19      	blt.n	8005a7c <_strtol_l.constprop.0+0xc0>
 8005a48:	fb06 4603 	mla	r6, r6, r3, r4
 8005a4c:	f04f 0e01 	mov.w	lr, #1
 8005a50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a54:	e7e8      	b.n	8005a28 <_strtol_l.constprop.0+0x6c>
 8005a56:	2c2b      	cmp	r4, #43	; 0x2b
 8005a58:	bf04      	itt	eq
 8005a5a:	782c      	ldrbeq	r4, [r5, #0]
 8005a5c:	1cb5      	addeq	r5, r6, #2
 8005a5e:	e7ca      	b.n	80059f6 <_strtol_l.constprop.0+0x3a>
 8005a60:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005a64:	f1bc 0f19 	cmp.w	ip, #25
 8005a68:	d801      	bhi.n	8005a6e <_strtol_l.constprop.0+0xb2>
 8005a6a:	3c37      	subs	r4, #55	; 0x37
 8005a6c:	e7e2      	b.n	8005a34 <_strtol_l.constprop.0+0x78>
 8005a6e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005a72:	f1bc 0f19 	cmp.w	ip, #25
 8005a76:	d804      	bhi.n	8005a82 <_strtol_l.constprop.0+0xc6>
 8005a78:	3c57      	subs	r4, #87	; 0x57
 8005a7a:	e7db      	b.n	8005a34 <_strtol_l.constprop.0+0x78>
 8005a7c:	f04f 3eff 	mov.w	lr, #4294967295
 8005a80:	e7e6      	b.n	8005a50 <_strtol_l.constprop.0+0x94>
 8005a82:	f1be 3fff 	cmp.w	lr, #4294967295
 8005a86:	d105      	bne.n	8005a94 <_strtol_l.constprop.0+0xd8>
 8005a88:	2322      	movs	r3, #34	; 0x22
 8005a8a:	6003      	str	r3, [r0, #0]
 8005a8c:	4646      	mov	r6, r8
 8005a8e:	b942      	cbnz	r2, 8005aa2 <_strtol_l.constprop.0+0xe6>
 8005a90:	4630      	mov	r0, r6
 8005a92:	e79e      	b.n	80059d2 <_strtol_l.constprop.0+0x16>
 8005a94:	b107      	cbz	r7, 8005a98 <_strtol_l.constprop.0+0xdc>
 8005a96:	4276      	negs	r6, r6
 8005a98:	2a00      	cmp	r2, #0
 8005a9a:	d0f9      	beq.n	8005a90 <_strtol_l.constprop.0+0xd4>
 8005a9c:	f1be 0f00 	cmp.w	lr, #0
 8005aa0:	d000      	beq.n	8005aa4 <_strtol_l.constprop.0+0xe8>
 8005aa2:	1e69      	subs	r1, r5, #1
 8005aa4:	6011      	str	r1, [r2, #0]
 8005aa6:	e7f3      	b.n	8005a90 <_strtol_l.constprop.0+0xd4>
 8005aa8:	2430      	movs	r4, #48	; 0x30
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1b1      	bne.n	8005a12 <_strtol_l.constprop.0+0x56>
 8005aae:	2308      	movs	r3, #8
 8005ab0:	e7af      	b.n	8005a12 <_strtol_l.constprop.0+0x56>
 8005ab2:	2c30      	cmp	r4, #48	; 0x30
 8005ab4:	d0a5      	beq.n	8005a02 <_strtol_l.constprop.0+0x46>
 8005ab6:	230a      	movs	r3, #10
 8005ab8:	e7ab      	b.n	8005a12 <_strtol_l.constprop.0+0x56>
 8005aba:	bf00      	nop
 8005abc:	08009091 	.word	0x08009091

08005ac0 <strtol>:
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	460a      	mov	r2, r1
 8005ac4:	4601      	mov	r1, r0
 8005ac6:	4802      	ldr	r0, [pc, #8]	; (8005ad0 <strtol+0x10>)
 8005ac8:	6800      	ldr	r0, [r0, #0]
 8005aca:	f7ff bf77 	b.w	80059bc <_strtol_l.constprop.0>
 8005ace:	bf00      	nop
 8005ad0:	2000006c 	.word	0x2000006c

08005ad4 <__cvt>:
 8005ad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ad8:	ec55 4b10 	vmov	r4, r5, d0
 8005adc:	2d00      	cmp	r5, #0
 8005ade:	460e      	mov	r6, r1
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	462b      	mov	r3, r5
 8005ae4:	bfbb      	ittet	lt
 8005ae6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005aea:	461d      	movlt	r5, r3
 8005aec:	2300      	movge	r3, #0
 8005aee:	232d      	movlt	r3, #45	; 0x2d
 8005af0:	700b      	strb	r3, [r1, #0]
 8005af2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005af4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005af8:	4691      	mov	r9, r2
 8005afa:	f023 0820 	bic.w	r8, r3, #32
 8005afe:	bfbc      	itt	lt
 8005b00:	4622      	movlt	r2, r4
 8005b02:	4614      	movlt	r4, r2
 8005b04:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b08:	d005      	beq.n	8005b16 <__cvt+0x42>
 8005b0a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005b0e:	d100      	bne.n	8005b12 <__cvt+0x3e>
 8005b10:	3601      	adds	r6, #1
 8005b12:	2102      	movs	r1, #2
 8005b14:	e000      	b.n	8005b18 <__cvt+0x44>
 8005b16:	2103      	movs	r1, #3
 8005b18:	ab03      	add	r3, sp, #12
 8005b1a:	9301      	str	r3, [sp, #4]
 8005b1c:	ab02      	add	r3, sp, #8
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	ec45 4b10 	vmov	d0, r4, r5
 8005b24:	4653      	mov	r3, sl
 8005b26:	4632      	mov	r2, r6
 8005b28:	f000 fe76 	bl	8006818 <_dtoa_r>
 8005b2c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005b30:	4607      	mov	r7, r0
 8005b32:	d102      	bne.n	8005b3a <__cvt+0x66>
 8005b34:	f019 0f01 	tst.w	r9, #1
 8005b38:	d022      	beq.n	8005b80 <__cvt+0xac>
 8005b3a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b3e:	eb07 0906 	add.w	r9, r7, r6
 8005b42:	d110      	bne.n	8005b66 <__cvt+0x92>
 8005b44:	783b      	ldrb	r3, [r7, #0]
 8005b46:	2b30      	cmp	r3, #48	; 0x30
 8005b48:	d10a      	bne.n	8005b60 <__cvt+0x8c>
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	4620      	mov	r0, r4
 8005b50:	4629      	mov	r1, r5
 8005b52:	f7fa ffc1 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b56:	b918      	cbnz	r0, 8005b60 <__cvt+0x8c>
 8005b58:	f1c6 0601 	rsb	r6, r6, #1
 8005b5c:	f8ca 6000 	str.w	r6, [sl]
 8005b60:	f8da 3000 	ldr.w	r3, [sl]
 8005b64:	4499      	add	r9, r3
 8005b66:	2200      	movs	r2, #0
 8005b68:	2300      	movs	r3, #0
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	4629      	mov	r1, r5
 8005b6e:	f7fa ffb3 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b72:	b108      	cbz	r0, 8005b78 <__cvt+0xa4>
 8005b74:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b78:	2230      	movs	r2, #48	; 0x30
 8005b7a:	9b03      	ldr	r3, [sp, #12]
 8005b7c:	454b      	cmp	r3, r9
 8005b7e:	d307      	bcc.n	8005b90 <__cvt+0xbc>
 8005b80:	9b03      	ldr	r3, [sp, #12]
 8005b82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b84:	1bdb      	subs	r3, r3, r7
 8005b86:	4638      	mov	r0, r7
 8005b88:	6013      	str	r3, [r2, #0]
 8005b8a:	b004      	add	sp, #16
 8005b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b90:	1c59      	adds	r1, r3, #1
 8005b92:	9103      	str	r1, [sp, #12]
 8005b94:	701a      	strb	r2, [r3, #0]
 8005b96:	e7f0      	b.n	8005b7a <__cvt+0xa6>

08005b98 <__exponent>:
 8005b98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2900      	cmp	r1, #0
 8005b9e:	bfb8      	it	lt
 8005ba0:	4249      	neglt	r1, r1
 8005ba2:	f803 2b02 	strb.w	r2, [r3], #2
 8005ba6:	bfb4      	ite	lt
 8005ba8:	222d      	movlt	r2, #45	; 0x2d
 8005baa:	222b      	movge	r2, #43	; 0x2b
 8005bac:	2909      	cmp	r1, #9
 8005bae:	7042      	strb	r2, [r0, #1]
 8005bb0:	dd2a      	ble.n	8005c08 <__exponent+0x70>
 8005bb2:	f10d 0207 	add.w	r2, sp, #7
 8005bb6:	4617      	mov	r7, r2
 8005bb8:	260a      	movs	r6, #10
 8005bba:	4694      	mov	ip, r2
 8005bbc:	fb91 f5f6 	sdiv	r5, r1, r6
 8005bc0:	fb06 1415 	mls	r4, r6, r5, r1
 8005bc4:	3430      	adds	r4, #48	; 0x30
 8005bc6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005bca:	460c      	mov	r4, r1
 8005bcc:	2c63      	cmp	r4, #99	; 0x63
 8005bce:	f102 32ff 	add.w	r2, r2, #4294967295
 8005bd2:	4629      	mov	r1, r5
 8005bd4:	dcf1      	bgt.n	8005bba <__exponent+0x22>
 8005bd6:	3130      	adds	r1, #48	; 0x30
 8005bd8:	f1ac 0402 	sub.w	r4, ip, #2
 8005bdc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005be0:	1c41      	adds	r1, r0, #1
 8005be2:	4622      	mov	r2, r4
 8005be4:	42ba      	cmp	r2, r7
 8005be6:	d30a      	bcc.n	8005bfe <__exponent+0x66>
 8005be8:	f10d 0209 	add.w	r2, sp, #9
 8005bec:	eba2 020c 	sub.w	r2, r2, ip
 8005bf0:	42bc      	cmp	r4, r7
 8005bf2:	bf88      	it	hi
 8005bf4:	2200      	movhi	r2, #0
 8005bf6:	4413      	add	r3, r2
 8005bf8:	1a18      	subs	r0, r3, r0
 8005bfa:	b003      	add	sp, #12
 8005bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bfe:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005c02:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005c06:	e7ed      	b.n	8005be4 <__exponent+0x4c>
 8005c08:	2330      	movs	r3, #48	; 0x30
 8005c0a:	3130      	adds	r1, #48	; 0x30
 8005c0c:	7083      	strb	r3, [r0, #2]
 8005c0e:	70c1      	strb	r1, [r0, #3]
 8005c10:	1d03      	adds	r3, r0, #4
 8005c12:	e7f1      	b.n	8005bf8 <__exponent+0x60>

08005c14 <_printf_float>:
 8005c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c18:	ed2d 8b02 	vpush	{d8}
 8005c1c:	b08d      	sub	sp, #52	; 0x34
 8005c1e:	460c      	mov	r4, r1
 8005c20:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005c24:	4616      	mov	r6, r2
 8005c26:	461f      	mov	r7, r3
 8005c28:	4605      	mov	r5, r0
 8005c2a:	f000 fce7 	bl	80065fc <_localeconv_r>
 8005c2e:	f8d0 a000 	ldr.w	sl, [r0]
 8005c32:	4650      	mov	r0, sl
 8005c34:	f7fa fb24 	bl	8000280 <strlen>
 8005c38:	2300      	movs	r3, #0
 8005c3a:	930a      	str	r3, [sp, #40]	; 0x28
 8005c3c:	6823      	ldr	r3, [r4, #0]
 8005c3e:	9305      	str	r3, [sp, #20]
 8005c40:	f8d8 3000 	ldr.w	r3, [r8]
 8005c44:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005c48:	3307      	adds	r3, #7
 8005c4a:	f023 0307 	bic.w	r3, r3, #7
 8005c4e:	f103 0208 	add.w	r2, r3, #8
 8005c52:	f8c8 2000 	str.w	r2, [r8]
 8005c56:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005c5e:	9307      	str	r3, [sp, #28]
 8005c60:	f8cd 8018 	str.w	r8, [sp, #24]
 8005c64:	ee08 0a10 	vmov	s16, r0
 8005c68:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005c6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c70:	4b9e      	ldr	r3, [pc, #632]	; (8005eec <_printf_float+0x2d8>)
 8005c72:	f04f 32ff 	mov.w	r2, #4294967295
 8005c76:	f7fa ff61 	bl	8000b3c <__aeabi_dcmpun>
 8005c7a:	bb88      	cbnz	r0, 8005ce0 <_printf_float+0xcc>
 8005c7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c80:	4b9a      	ldr	r3, [pc, #616]	; (8005eec <_printf_float+0x2d8>)
 8005c82:	f04f 32ff 	mov.w	r2, #4294967295
 8005c86:	f7fa ff3b 	bl	8000b00 <__aeabi_dcmple>
 8005c8a:	bb48      	cbnz	r0, 8005ce0 <_printf_float+0xcc>
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	2300      	movs	r3, #0
 8005c90:	4640      	mov	r0, r8
 8005c92:	4649      	mov	r1, r9
 8005c94:	f7fa ff2a 	bl	8000aec <__aeabi_dcmplt>
 8005c98:	b110      	cbz	r0, 8005ca0 <_printf_float+0x8c>
 8005c9a:	232d      	movs	r3, #45	; 0x2d
 8005c9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ca0:	4a93      	ldr	r2, [pc, #588]	; (8005ef0 <_printf_float+0x2dc>)
 8005ca2:	4b94      	ldr	r3, [pc, #592]	; (8005ef4 <_printf_float+0x2e0>)
 8005ca4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005ca8:	bf94      	ite	ls
 8005caa:	4690      	movls	r8, r2
 8005cac:	4698      	movhi	r8, r3
 8005cae:	2303      	movs	r3, #3
 8005cb0:	6123      	str	r3, [r4, #16]
 8005cb2:	9b05      	ldr	r3, [sp, #20]
 8005cb4:	f023 0304 	bic.w	r3, r3, #4
 8005cb8:	6023      	str	r3, [r4, #0]
 8005cba:	f04f 0900 	mov.w	r9, #0
 8005cbe:	9700      	str	r7, [sp, #0]
 8005cc0:	4633      	mov	r3, r6
 8005cc2:	aa0b      	add	r2, sp, #44	; 0x2c
 8005cc4:	4621      	mov	r1, r4
 8005cc6:	4628      	mov	r0, r5
 8005cc8:	f000 f9da 	bl	8006080 <_printf_common>
 8005ccc:	3001      	adds	r0, #1
 8005cce:	f040 8090 	bne.w	8005df2 <_printf_float+0x1de>
 8005cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd6:	b00d      	add	sp, #52	; 0x34
 8005cd8:	ecbd 8b02 	vpop	{d8}
 8005cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ce0:	4642      	mov	r2, r8
 8005ce2:	464b      	mov	r3, r9
 8005ce4:	4640      	mov	r0, r8
 8005ce6:	4649      	mov	r1, r9
 8005ce8:	f7fa ff28 	bl	8000b3c <__aeabi_dcmpun>
 8005cec:	b140      	cbz	r0, 8005d00 <_printf_float+0xec>
 8005cee:	464b      	mov	r3, r9
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	bfbc      	itt	lt
 8005cf4:	232d      	movlt	r3, #45	; 0x2d
 8005cf6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005cfa:	4a7f      	ldr	r2, [pc, #508]	; (8005ef8 <_printf_float+0x2e4>)
 8005cfc:	4b7f      	ldr	r3, [pc, #508]	; (8005efc <_printf_float+0x2e8>)
 8005cfe:	e7d1      	b.n	8005ca4 <_printf_float+0x90>
 8005d00:	6863      	ldr	r3, [r4, #4]
 8005d02:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005d06:	9206      	str	r2, [sp, #24]
 8005d08:	1c5a      	adds	r2, r3, #1
 8005d0a:	d13f      	bne.n	8005d8c <_printf_float+0x178>
 8005d0c:	2306      	movs	r3, #6
 8005d0e:	6063      	str	r3, [r4, #4]
 8005d10:	9b05      	ldr	r3, [sp, #20]
 8005d12:	6861      	ldr	r1, [r4, #4]
 8005d14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005d18:	2300      	movs	r3, #0
 8005d1a:	9303      	str	r3, [sp, #12]
 8005d1c:	ab0a      	add	r3, sp, #40	; 0x28
 8005d1e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005d22:	ab09      	add	r3, sp, #36	; 0x24
 8005d24:	ec49 8b10 	vmov	d0, r8, r9
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	6022      	str	r2, [r4, #0]
 8005d2c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005d30:	4628      	mov	r0, r5
 8005d32:	f7ff fecf 	bl	8005ad4 <__cvt>
 8005d36:	9b06      	ldr	r3, [sp, #24]
 8005d38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d3a:	2b47      	cmp	r3, #71	; 0x47
 8005d3c:	4680      	mov	r8, r0
 8005d3e:	d108      	bne.n	8005d52 <_printf_float+0x13e>
 8005d40:	1cc8      	adds	r0, r1, #3
 8005d42:	db02      	blt.n	8005d4a <_printf_float+0x136>
 8005d44:	6863      	ldr	r3, [r4, #4]
 8005d46:	4299      	cmp	r1, r3
 8005d48:	dd41      	ble.n	8005dce <_printf_float+0x1ba>
 8005d4a:	f1ab 0302 	sub.w	r3, fp, #2
 8005d4e:	fa5f fb83 	uxtb.w	fp, r3
 8005d52:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005d56:	d820      	bhi.n	8005d9a <_printf_float+0x186>
 8005d58:	3901      	subs	r1, #1
 8005d5a:	465a      	mov	r2, fp
 8005d5c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d60:	9109      	str	r1, [sp, #36]	; 0x24
 8005d62:	f7ff ff19 	bl	8005b98 <__exponent>
 8005d66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d68:	1813      	adds	r3, r2, r0
 8005d6a:	2a01      	cmp	r2, #1
 8005d6c:	4681      	mov	r9, r0
 8005d6e:	6123      	str	r3, [r4, #16]
 8005d70:	dc02      	bgt.n	8005d78 <_printf_float+0x164>
 8005d72:	6822      	ldr	r2, [r4, #0]
 8005d74:	07d2      	lsls	r2, r2, #31
 8005d76:	d501      	bpl.n	8005d7c <_printf_float+0x168>
 8005d78:	3301      	adds	r3, #1
 8005d7a:	6123      	str	r3, [r4, #16]
 8005d7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d09c      	beq.n	8005cbe <_printf_float+0xaa>
 8005d84:	232d      	movs	r3, #45	; 0x2d
 8005d86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d8a:	e798      	b.n	8005cbe <_printf_float+0xaa>
 8005d8c:	9a06      	ldr	r2, [sp, #24]
 8005d8e:	2a47      	cmp	r2, #71	; 0x47
 8005d90:	d1be      	bne.n	8005d10 <_printf_float+0xfc>
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1bc      	bne.n	8005d10 <_printf_float+0xfc>
 8005d96:	2301      	movs	r3, #1
 8005d98:	e7b9      	b.n	8005d0e <_printf_float+0xfa>
 8005d9a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005d9e:	d118      	bne.n	8005dd2 <_printf_float+0x1be>
 8005da0:	2900      	cmp	r1, #0
 8005da2:	6863      	ldr	r3, [r4, #4]
 8005da4:	dd0b      	ble.n	8005dbe <_printf_float+0x1aa>
 8005da6:	6121      	str	r1, [r4, #16]
 8005da8:	b913      	cbnz	r3, 8005db0 <_printf_float+0x19c>
 8005daa:	6822      	ldr	r2, [r4, #0]
 8005dac:	07d0      	lsls	r0, r2, #31
 8005dae:	d502      	bpl.n	8005db6 <_printf_float+0x1a2>
 8005db0:	3301      	adds	r3, #1
 8005db2:	440b      	add	r3, r1
 8005db4:	6123      	str	r3, [r4, #16]
 8005db6:	65a1      	str	r1, [r4, #88]	; 0x58
 8005db8:	f04f 0900 	mov.w	r9, #0
 8005dbc:	e7de      	b.n	8005d7c <_printf_float+0x168>
 8005dbe:	b913      	cbnz	r3, 8005dc6 <_printf_float+0x1b2>
 8005dc0:	6822      	ldr	r2, [r4, #0]
 8005dc2:	07d2      	lsls	r2, r2, #31
 8005dc4:	d501      	bpl.n	8005dca <_printf_float+0x1b6>
 8005dc6:	3302      	adds	r3, #2
 8005dc8:	e7f4      	b.n	8005db4 <_printf_float+0x1a0>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e7f2      	b.n	8005db4 <_printf_float+0x1a0>
 8005dce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005dd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dd4:	4299      	cmp	r1, r3
 8005dd6:	db05      	blt.n	8005de4 <_printf_float+0x1d0>
 8005dd8:	6823      	ldr	r3, [r4, #0]
 8005dda:	6121      	str	r1, [r4, #16]
 8005ddc:	07d8      	lsls	r0, r3, #31
 8005dde:	d5ea      	bpl.n	8005db6 <_printf_float+0x1a2>
 8005de0:	1c4b      	adds	r3, r1, #1
 8005de2:	e7e7      	b.n	8005db4 <_printf_float+0x1a0>
 8005de4:	2900      	cmp	r1, #0
 8005de6:	bfd4      	ite	le
 8005de8:	f1c1 0202 	rsble	r2, r1, #2
 8005dec:	2201      	movgt	r2, #1
 8005dee:	4413      	add	r3, r2
 8005df0:	e7e0      	b.n	8005db4 <_printf_float+0x1a0>
 8005df2:	6823      	ldr	r3, [r4, #0]
 8005df4:	055a      	lsls	r2, r3, #21
 8005df6:	d407      	bmi.n	8005e08 <_printf_float+0x1f4>
 8005df8:	6923      	ldr	r3, [r4, #16]
 8005dfa:	4642      	mov	r2, r8
 8005dfc:	4631      	mov	r1, r6
 8005dfe:	4628      	mov	r0, r5
 8005e00:	47b8      	blx	r7
 8005e02:	3001      	adds	r0, #1
 8005e04:	d12c      	bne.n	8005e60 <_printf_float+0x24c>
 8005e06:	e764      	b.n	8005cd2 <_printf_float+0xbe>
 8005e08:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005e0c:	f240 80e0 	bls.w	8005fd0 <_printf_float+0x3bc>
 8005e10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e14:	2200      	movs	r2, #0
 8005e16:	2300      	movs	r3, #0
 8005e18:	f7fa fe5e 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	d034      	beq.n	8005e8a <_printf_float+0x276>
 8005e20:	4a37      	ldr	r2, [pc, #220]	; (8005f00 <_printf_float+0x2ec>)
 8005e22:	2301      	movs	r3, #1
 8005e24:	4631      	mov	r1, r6
 8005e26:	4628      	mov	r0, r5
 8005e28:	47b8      	blx	r7
 8005e2a:	3001      	adds	r0, #1
 8005e2c:	f43f af51 	beq.w	8005cd2 <_printf_float+0xbe>
 8005e30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e34:	429a      	cmp	r2, r3
 8005e36:	db02      	blt.n	8005e3e <_printf_float+0x22a>
 8005e38:	6823      	ldr	r3, [r4, #0]
 8005e3a:	07d8      	lsls	r0, r3, #31
 8005e3c:	d510      	bpl.n	8005e60 <_printf_float+0x24c>
 8005e3e:	ee18 3a10 	vmov	r3, s16
 8005e42:	4652      	mov	r2, sl
 8005e44:	4631      	mov	r1, r6
 8005e46:	4628      	mov	r0, r5
 8005e48:	47b8      	blx	r7
 8005e4a:	3001      	adds	r0, #1
 8005e4c:	f43f af41 	beq.w	8005cd2 <_printf_float+0xbe>
 8005e50:	f04f 0800 	mov.w	r8, #0
 8005e54:	f104 091a 	add.w	r9, r4, #26
 8005e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	4543      	cmp	r3, r8
 8005e5e:	dc09      	bgt.n	8005e74 <_printf_float+0x260>
 8005e60:	6823      	ldr	r3, [r4, #0]
 8005e62:	079b      	lsls	r3, r3, #30
 8005e64:	f100 8107 	bmi.w	8006076 <_printf_float+0x462>
 8005e68:	68e0      	ldr	r0, [r4, #12]
 8005e6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e6c:	4298      	cmp	r0, r3
 8005e6e:	bfb8      	it	lt
 8005e70:	4618      	movlt	r0, r3
 8005e72:	e730      	b.n	8005cd6 <_printf_float+0xc2>
 8005e74:	2301      	movs	r3, #1
 8005e76:	464a      	mov	r2, r9
 8005e78:	4631      	mov	r1, r6
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	47b8      	blx	r7
 8005e7e:	3001      	adds	r0, #1
 8005e80:	f43f af27 	beq.w	8005cd2 <_printf_float+0xbe>
 8005e84:	f108 0801 	add.w	r8, r8, #1
 8005e88:	e7e6      	b.n	8005e58 <_printf_float+0x244>
 8005e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	dc39      	bgt.n	8005f04 <_printf_float+0x2f0>
 8005e90:	4a1b      	ldr	r2, [pc, #108]	; (8005f00 <_printf_float+0x2ec>)
 8005e92:	2301      	movs	r3, #1
 8005e94:	4631      	mov	r1, r6
 8005e96:	4628      	mov	r0, r5
 8005e98:	47b8      	blx	r7
 8005e9a:	3001      	adds	r0, #1
 8005e9c:	f43f af19 	beq.w	8005cd2 <_printf_float+0xbe>
 8005ea0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	d102      	bne.n	8005eae <_printf_float+0x29a>
 8005ea8:	6823      	ldr	r3, [r4, #0]
 8005eaa:	07d9      	lsls	r1, r3, #31
 8005eac:	d5d8      	bpl.n	8005e60 <_printf_float+0x24c>
 8005eae:	ee18 3a10 	vmov	r3, s16
 8005eb2:	4652      	mov	r2, sl
 8005eb4:	4631      	mov	r1, r6
 8005eb6:	4628      	mov	r0, r5
 8005eb8:	47b8      	blx	r7
 8005eba:	3001      	adds	r0, #1
 8005ebc:	f43f af09 	beq.w	8005cd2 <_printf_float+0xbe>
 8005ec0:	f04f 0900 	mov.w	r9, #0
 8005ec4:	f104 0a1a 	add.w	sl, r4, #26
 8005ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eca:	425b      	negs	r3, r3
 8005ecc:	454b      	cmp	r3, r9
 8005ece:	dc01      	bgt.n	8005ed4 <_printf_float+0x2c0>
 8005ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ed2:	e792      	b.n	8005dfa <_printf_float+0x1e6>
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	4652      	mov	r2, sl
 8005ed8:	4631      	mov	r1, r6
 8005eda:	4628      	mov	r0, r5
 8005edc:	47b8      	blx	r7
 8005ede:	3001      	adds	r0, #1
 8005ee0:	f43f aef7 	beq.w	8005cd2 <_printf_float+0xbe>
 8005ee4:	f109 0901 	add.w	r9, r9, #1
 8005ee8:	e7ee      	b.n	8005ec8 <_printf_float+0x2b4>
 8005eea:	bf00      	nop
 8005eec:	7fefffff 	.word	0x7fefffff
 8005ef0:	08009191 	.word	0x08009191
 8005ef4:	08009195 	.word	0x08009195
 8005ef8:	08009199 	.word	0x08009199
 8005efc:	0800919d 	.word	0x0800919d
 8005f00:	080091a1 	.word	0x080091a1
 8005f04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	bfa8      	it	ge
 8005f0c:	461a      	movge	r2, r3
 8005f0e:	2a00      	cmp	r2, #0
 8005f10:	4691      	mov	r9, r2
 8005f12:	dc37      	bgt.n	8005f84 <_printf_float+0x370>
 8005f14:	f04f 0b00 	mov.w	fp, #0
 8005f18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f1c:	f104 021a 	add.w	r2, r4, #26
 8005f20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f22:	9305      	str	r3, [sp, #20]
 8005f24:	eba3 0309 	sub.w	r3, r3, r9
 8005f28:	455b      	cmp	r3, fp
 8005f2a:	dc33      	bgt.n	8005f94 <_printf_float+0x380>
 8005f2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f30:	429a      	cmp	r2, r3
 8005f32:	db3b      	blt.n	8005fac <_printf_float+0x398>
 8005f34:	6823      	ldr	r3, [r4, #0]
 8005f36:	07da      	lsls	r2, r3, #31
 8005f38:	d438      	bmi.n	8005fac <_printf_float+0x398>
 8005f3a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005f3e:	eba2 0903 	sub.w	r9, r2, r3
 8005f42:	9b05      	ldr	r3, [sp, #20]
 8005f44:	1ad2      	subs	r2, r2, r3
 8005f46:	4591      	cmp	r9, r2
 8005f48:	bfa8      	it	ge
 8005f4a:	4691      	movge	r9, r2
 8005f4c:	f1b9 0f00 	cmp.w	r9, #0
 8005f50:	dc35      	bgt.n	8005fbe <_printf_float+0x3aa>
 8005f52:	f04f 0800 	mov.w	r8, #0
 8005f56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f5a:	f104 0a1a 	add.w	sl, r4, #26
 8005f5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f62:	1a9b      	subs	r3, r3, r2
 8005f64:	eba3 0309 	sub.w	r3, r3, r9
 8005f68:	4543      	cmp	r3, r8
 8005f6a:	f77f af79 	ble.w	8005e60 <_printf_float+0x24c>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	4652      	mov	r2, sl
 8005f72:	4631      	mov	r1, r6
 8005f74:	4628      	mov	r0, r5
 8005f76:	47b8      	blx	r7
 8005f78:	3001      	adds	r0, #1
 8005f7a:	f43f aeaa 	beq.w	8005cd2 <_printf_float+0xbe>
 8005f7e:	f108 0801 	add.w	r8, r8, #1
 8005f82:	e7ec      	b.n	8005f5e <_printf_float+0x34a>
 8005f84:	4613      	mov	r3, r2
 8005f86:	4631      	mov	r1, r6
 8005f88:	4642      	mov	r2, r8
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	47b8      	blx	r7
 8005f8e:	3001      	adds	r0, #1
 8005f90:	d1c0      	bne.n	8005f14 <_printf_float+0x300>
 8005f92:	e69e      	b.n	8005cd2 <_printf_float+0xbe>
 8005f94:	2301      	movs	r3, #1
 8005f96:	4631      	mov	r1, r6
 8005f98:	4628      	mov	r0, r5
 8005f9a:	9205      	str	r2, [sp, #20]
 8005f9c:	47b8      	blx	r7
 8005f9e:	3001      	adds	r0, #1
 8005fa0:	f43f ae97 	beq.w	8005cd2 <_printf_float+0xbe>
 8005fa4:	9a05      	ldr	r2, [sp, #20]
 8005fa6:	f10b 0b01 	add.w	fp, fp, #1
 8005faa:	e7b9      	b.n	8005f20 <_printf_float+0x30c>
 8005fac:	ee18 3a10 	vmov	r3, s16
 8005fb0:	4652      	mov	r2, sl
 8005fb2:	4631      	mov	r1, r6
 8005fb4:	4628      	mov	r0, r5
 8005fb6:	47b8      	blx	r7
 8005fb8:	3001      	adds	r0, #1
 8005fba:	d1be      	bne.n	8005f3a <_printf_float+0x326>
 8005fbc:	e689      	b.n	8005cd2 <_printf_float+0xbe>
 8005fbe:	9a05      	ldr	r2, [sp, #20]
 8005fc0:	464b      	mov	r3, r9
 8005fc2:	4442      	add	r2, r8
 8005fc4:	4631      	mov	r1, r6
 8005fc6:	4628      	mov	r0, r5
 8005fc8:	47b8      	blx	r7
 8005fca:	3001      	adds	r0, #1
 8005fcc:	d1c1      	bne.n	8005f52 <_printf_float+0x33e>
 8005fce:	e680      	b.n	8005cd2 <_printf_float+0xbe>
 8005fd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fd2:	2a01      	cmp	r2, #1
 8005fd4:	dc01      	bgt.n	8005fda <_printf_float+0x3c6>
 8005fd6:	07db      	lsls	r3, r3, #31
 8005fd8:	d53a      	bpl.n	8006050 <_printf_float+0x43c>
 8005fda:	2301      	movs	r3, #1
 8005fdc:	4642      	mov	r2, r8
 8005fde:	4631      	mov	r1, r6
 8005fe0:	4628      	mov	r0, r5
 8005fe2:	47b8      	blx	r7
 8005fe4:	3001      	adds	r0, #1
 8005fe6:	f43f ae74 	beq.w	8005cd2 <_printf_float+0xbe>
 8005fea:	ee18 3a10 	vmov	r3, s16
 8005fee:	4652      	mov	r2, sl
 8005ff0:	4631      	mov	r1, r6
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	47b8      	blx	r7
 8005ff6:	3001      	adds	r0, #1
 8005ff8:	f43f ae6b 	beq.w	8005cd2 <_printf_float+0xbe>
 8005ffc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006000:	2200      	movs	r2, #0
 8006002:	2300      	movs	r3, #0
 8006004:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006008:	f7fa fd66 	bl	8000ad8 <__aeabi_dcmpeq>
 800600c:	b9d8      	cbnz	r0, 8006046 <_printf_float+0x432>
 800600e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006012:	f108 0201 	add.w	r2, r8, #1
 8006016:	4631      	mov	r1, r6
 8006018:	4628      	mov	r0, r5
 800601a:	47b8      	blx	r7
 800601c:	3001      	adds	r0, #1
 800601e:	d10e      	bne.n	800603e <_printf_float+0x42a>
 8006020:	e657      	b.n	8005cd2 <_printf_float+0xbe>
 8006022:	2301      	movs	r3, #1
 8006024:	4652      	mov	r2, sl
 8006026:	4631      	mov	r1, r6
 8006028:	4628      	mov	r0, r5
 800602a:	47b8      	blx	r7
 800602c:	3001      	adds	r0, #1
 800602e:	f43f ae50 	beq.w	8005cd2 <_printf_float+0xbe>
 8006032:	f108 0801 	add.w	r8, r8, #1
 8006036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006038:	3b01      	subs	r3, #1
 800603a:	4543      	cmp	r3, r8
 800603c:	dcf1      	bgt.n	8006022 <_printf_float+0x40e>
 800603e:	464b      	mov	r3, r9
 8006040:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006044:	e6da      	b.n	8005dfc <_printf_float+0x1e8>
 8006046:	f04f 0800 	mov.w	r8, #0
 800604a:	f104 0a1a 	add.w	sl, r4, #26
 800604e:	e7f2      	b.n	8006036 <_printf_float+0x422>
 8006050:	2301      	movs	r3, #1
 8006052:	4642      	mov	r2, r8
 8006054:	e7df      	b.n	8006016 <_printf_float+0x402>
 8006056:	2301      	movs	r3, #1
 8006058:	464a      	mov	r2, r9
 800605a:	4631      	mov	r1, r6
 800605c:	4628      	mov	r0, r5
 800605e:	47b8      	blx	r7
 8006060:	3001      	adds	r0, #1
 8006062:	f43f ae36 	beq.w	8005cd2 <_printf_float+0xbe>
 8006066:	f108 0801 	add.w	r8, r8, #1
 800606a:	68e3      	ldr	r3, [r4, #12]
 800606c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800606e:	1a5b      	subs	r3, r3, r1
 8006070:	4543      	cmp	r3, r8
 8006072:	dcf0      	bgt.n	8006056 <_printf_float+0x442>
 8006074:	e6f8      	b.n	8005e68 <_printf_float+0x254>
 8006076:	f04f 0800 	mov.w	r8, #0
 800607a:	f104 0919 	add.w	r9, r4, #25
 800607e:	e7f4      	b.n	800606a <_printf_float+0x456>

08006080 <_printf_common>:
 8006080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006084:	4616      	mov	r6, r2
 8006086:	4699      	mov	r9, r3
 8006088:	688a      	ldr	r2, [r1, #8]
 800608a:	690b      	ldr	r3, [r1, #16]
 800608c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006090:	4293      	cmp	r3, r2
 8006092:	bfb8      	it	lt
 8006094:	4613      	movlt	r3, r2
 8006096:	6033      	str	r3, [r6, #0]
 8006098:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800609c:	4607      	mov	r7, r0
 800609e:	460c      	mov	r4, r1
 80060a0:	b10a      	cbz	r2, 80060a6 <_printf_common+0x26>
 80060a2:	3301      	adds	r3, #1
 80060a4:	6033      	str	r3, [r6, #0]
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	0699      	lsls	r1, r3, #26
 80060aa:	bf42      	ittt	mi
 80060ac:	6833      	ldrmi	r3, [r6, #0]
 80060ae:	3302      	addmi	r3, #2
 80060b0:	6033      	strmi	r3, [r6, #0]
 80060b2:	6825      	ldr	r5, [r4, #0]
 80060b4:	f015 0506 	ands.w	r5, r5, #6
 80060b8:	d106      	bne.n	80060c8 <_printf_common+0x48>
 80060ba:	f104 0a19 	add.w	sl, r4, #25
 80060be:	68e3      	ldr	r3, [r4, #12]
 80060c0:	6832      	ldr	r2, [r6, #0]
 80060c2:	1a9b      	subs	r3, r3, r2
 80060c4:	42ab      	cmp	r3, r5
 80060c6:	dc26      	bgt.n	8006116 <_printf_common+0x96>
 80060c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060cc:	1e13      	subs	r3, r2, #0
 80060ce:	6822      	ldr	r2, [r4, #0]
 80060d0:	bf18      	it	ne
 80060d2:	2301      	movne	r3, #1
 80060d4:	0692      	lsls	r2, r2, #26
 80060d6:	d42b      	bmi.n	8006130 <_printf_common+0xb0>
 80060d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060dc:	4649      	mov	r1, r9
 80060de:	4638      	mov	r0, r7
 80060e0:	47c0      	blx	r8
 80060e2:	3001      	adds	r0, #1
 80060e4:	d01e      	beq.n	8006124 <_printf_common+0xa4>
 80060e6:	6823      	ldr	r3, [r4, #0]
 80060e8:	6922      	ldr	r2, [r4, #16]
 80060ea:	f003 0306 	and.w	r3, r3, #6
 80060ee:	2b04      	cmp	r3, #4
 80060f0:	bf02      	ittt	eq
 80060f2:	68e5      	ldreq	r5, [r4, #12]
 80060f4:	6833      	ldreq	r3, [r6, #0]
 80060f6:	1aed      	subeq	r5, r5, r3
 80060f8:	68a3      	ldr	r3, [r4, #8]
 80060fa:	bf0c      	ite	eq
 80060fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006100:	2500      	movne	r5, #0
 8006102:	4293      	cmp	r3, r2
 8006104:	bfc4      	itt	gt
 8006106:	1a9b      	subgt	r3, r3, r2
 8006108:	18ed      	addgt	r5, r5, r3
 800610a:	2600      	movs	r6, #0
 800610c:	341a      	adds	r4, #26
 800610e:	42b5      	cmp	r5, r6
 8006110:	d11a      	bne.n	8006148 <_printf_common+0xc8>
 8006112:	2000      	movs	r0, #0
 8006114:	e008      	b.n	8006128 <_printf_common+0xa8>
 8006116:	2301      	movs	r3, #1
 8006118:	4652      	mov	r2, sl
 800611a:	4649      	mov	r1, r9
 800611c:	4638      	mov	r0, r7
 800611e:	47c0      	blx	r8
 8006120:	3001      	adds	r0, #1
 8006122:	d103      	bne.n	800612c <_printf_common+0xac>
 8006124:	f04f 30ff 	mov.w	r0, #4294967295
 8006128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800612c:	3501      	adds	r5, #1
 800612e:	e7c6      	b.n	80060be <_printf_common+0x3e>
 8006130:	18e1      	adds	r1, r4, r3
 8006132:	1c5a      	adds	r2, r3, #1
 8006134:	2030      	movs	r0, #48	; 0x30
 8006136:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800613a:	4422      	add	r2, r4
 800613c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006140:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006144:	3302      	adds	r3, #2
 8006146:	e7c7      	b.n	80060d8 <_printf_common+0x58>
 8006148:	2301      	movs	r3, #1
 800614a:	4622      	mov	r2, r4
 800614c:	4649      	mov	r1, r9
 800614e:	4638      	mov	r0, r7
 8006150:	47c0      	blx	r8
 8006152:	3001      	adds	r0, #1
 8006154:	d0e6      	beq.n	8006124 <_printf_common+0xa4>
 8006156:	3601      	adds	r6, #1
 8006158:	e7d9      	b.n	800610e <_printf_common+0x8e>
	...

0800615c <_printf_i>:
 800615c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006160:	7e0f      	ldrb	r7, [r1, #24]
 8006162:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006164:	2f78      	cmp	r7, #120	; 0x78
 8006166:	4691      	mov	r9, r2
 8006168:	4680      	mov	r8, r0
 800616a:	460c      	mov	r4, r1
 800616c:	469a      	mov	sl, r3
 800616e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006172:	d807      	bhi.n	8006184 <_printf_i+0x28>
 8006174:	2f62      	cmp	r7, #98	; 0x62
 8006176:	d80a      	bhi.n	800618e <_printf_i+0x32>
 8006178:	2f00      	cmp	r7, #0
 800617a:	f000 80d4 	beq.w	8006326 <_printf_i+0x1ca>
 800617e:	2f58      	cmp	r7, #88	; 0x58
 8006180:	f000 80c0 	beq.w	8006304 <_printf_i+0x1a8>
 8006184:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006188:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800618c:	e03a      	b.n	8006204 <_printf_i+0xa8>
 800618e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006192:	2b15      	cmp	r3, #21
 8006194:	d8f6      	bhi.n	8006184 <_printf_i+0x28>
 8006196:	a101      	add	r1, pc, #4	; (adr r1, 800619c <_printf_i+0x40>)
 8006198:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800619c:	080061f5 	.word	0x080061f5
 80061a0:	08006209 	.word	0x08006209
 80061a4:	08006185 	.word	0x08006185
 80061a8:	08006185 	.word	0x08006185
 80061ac:	08006185 	.word	0x08006185
 80061b0:	08006185 	.word	0x08006185
 80061b4:	08006209 	.word	0x08006209
 80061b8:	08006185 	.word	0x08006185
 80061bc:	08006185 	.word	0x08006185
 80061c0:	08006185 	.word	0x08006185
 80061c4:	08006185 	.word	0x08006185
 80061c8:	0800630d 	.word	0x0800630d
 80061cc:	08006235 	.word	0x08006235
 80061d0:	080062c7 	.word	0x080062c7
 80061d4:	08006185 	.word	0x08006185
 80061d8:	08006185 	.word	0x08006185
 80061dc:	0800632f 	.word	0x0800632f
 80061e0:	08006185 	.word	0x08006185
 80061e4:	08006235 	.word	0x08006235
 80061e8:	08006185 	.word	0x08006185
 80061ec:	08006185 	.word	0x08006185
 80061f0:	080062cf 	.word	0x080062cf
 80061f4:	682b      	ldr	r3, [r5, #0]
 80061f6:	1d1a      	adds	r2, r3, #4
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	602a      	str	r2, [r5, #0]
 80061fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006200:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006204:	2301      	movs	r3, #1
 8006206:	e09f      	b.n	8006348 <_printf_i+0x1ec>
 8006208:	6820      	ldr	r0, [r4, #0]
 800620a:	682b      	ldr	r3, [r5, #0]
 800620c:	0607      	lsls	r7, r0, #24
 800620e:	f103 0104 	add.w	r1, r3, #4
 8006212:	6029      	str	r1, [r5, #0]
 8006214:	d501      	bpl.n	800621a <_printf_i+0xbe>
 8006216:	681e      	ldr	r6, [r3, #0]
 8006218:	e003      	b.n	8006222 <_printf_i+0xc6>
 800621a:	0646      	lsls	r6, r0, #25
 800621c:	d5fb      	bpl.n	8006216 <_printf_i+0xba>
 800621e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006222:	2e00      	cmp	r6, #0
 8006224:	da03      	bge.n	800622e <_printf_i+0xd2>
 8006226:	232d      	movs	r3, #45	; 0x2d
 8006228:	4276      	negs	r6, r6
 800622a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800622e:	485a      	ldr	r0, [pc, #360]	; (8006398 <_printf_i+0x23c>)
 8006230:	230a      	movs	r3, #10
 8006232:	e012      	b.n	800625a <_printf_i+0xfe>
 8006234:	682b      	ldr	r3, [r5, #0]
 8006236:	6820      	ldr	r0, [r4, #0]
 8006238:	1d19      	adds	r1, r3, #4
 800623a:	6029      	str	r1, [r5, #0]
 800623c:	0605      	lsls	r5, r0, #24
 800623e:	d501      	bpl.n	8006244 <_printf_i+0xe8>
 8006240:	681e      	ldr	r6, [r3, #0]
 8006242:	e002      	b.n	800624a <_printf_i+0xee>
 8006244:	0641      	lsls	r1, r0, #25
 8006246:	d5fb      	bpl.n	8006240 <_printf_i+0xe4>
 8006248:	881e      	ldrh	r6, [r3, #0]
 800624a:	4853      	ldr	r0, [pc, #332]	; (8006398 <_printf_i+0x23c>)
 800624c:	2f6f      	cmp	r7, #111	; 0x6f
 800624e:	bf0c      	ite	eq
 8006250:	2308      	moveq	r3, #8
 8006252:	230a      	movne	r3, #10
 8006254:	2100      	movs	r1, #0
 8006256:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800625a:	6865      	ldr	r5, [r4, #4]
 800625c:	60a5      	str	r5, [r4, #8]
 800625e:	2d00      	cmp	r5, #0
 8006260:	bfa2      	ittt	ge
 8006262:	6821      	ldrge	r1, [r4, #0]
 8006264:	f021 0104 	bicge.w	r1, r1, #4
 8006268:	6021      	strge	r1, [r4, #0]
 800626a:	b90e      	cbnz	r6, 8006270 <_printf_i+0x114>
 800626c:	2d00      	cmp	r5, #0
 800626e:	d04b      	beq.n	8006308 <_printf_i+0x1ac>
 8006270:	4615      	mov	r5, r2
 8006272:	fbb6 f1f3 	udiv	r1, r6, r3
 8006276:	fb03 6711 	mls	r7, r3, r1, r6
 800627a:	5dc7      	ldrb	r7, [r0, r7]
 800627c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006280:	4637      	mov	r7, r6
 8006282:	42bb      	cmp	r3, r7
 8006284:	460e      	mov	r6, r1
 8006286:	d9f4      	bls.n	8006272 <_printf_i+0x116>
 8006288:	2b08      	cmp	r3, #8
 800628a:	d10b      	bne.n	80062a4 <_printf_i+0x148>
 800628c:	6823      	ldr	r3, [r4, #0]
 800628e:	07de      	lsls	r6, r3, #31
 8006290:	d508      	bpl.n	80062a4 <_printf_i+0x148>
 8006292:	6923      	ldr	r3, [r4, #16]
 8006294:	6861      	ldr	r1, [r4, #4]
 8006296:	4299      	cmp	r1, r3
 8006298:	bfde      	ittt	le
 800629a:	2330      	movle	r3, #48	; 0x30
 800629c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062a4:	1b52      	subs	r2, r2, r5
 80062a6:	6122      	str	r2, [r4, #16]
 80062a8:	f8cd a000 	str.w	sl, [sp]
 80062ac:	464b      	mov	r3, r9
 80062ae:	aa03      	add	r2, sp, #12
 80062b0:	4621      	mov	r1, r4
 80062b2:	4640      	mov	r0, r8
 80062b4:	f7ff fee4 	bl	8006080 <_printf_common>
 80062b8:	3001      	adds	r0, #1
 80062ba:	d14a      	bne.n	8006352 <_printf_i+0x1f6>
 80062bc:	f04f 30ff 	mov.w	r0, #4294967295
 80062c0:	b004      	add	sp, #16
 80062c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062c6:	6823      	ldr	r3, [r4, #0]
 80062c8:	f043 0320 	orr.w	r3, r3, #32
 80062cc:	6023      	str	r3, [r4, #0]
 80062ce:	4833      	ldr	r0, [pc, #204]	; (800639c <_printf_i+0x240>)
 80062d0:	2778      	movs	r7, #120	; 0x78
 80062d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80062d6:	6823      	ldr	r3, [r4, #0]
 80062d8:	6829      	ldr	r1, [r5, #0]
 80062da:	061f      	lsls	r7, r3, #24
 80062dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80062e0:	d402      	bmi.n	80062e8 <_printf_i+0x18c>
 80062e2:	065f      	lsls	r7, r3, #25
 80062e4:	bf48      	it	mi
 80062e6:	b2b6      	uxthmi	r6, r6
 80062e8:	07df      	lsls	r7, r3, #31
 80062ea:	bf48      	it	mi
 80062ec:	f043 0320 	orrmi.w	r3, r3, #32
 80062f0:	6029      	str	r1, [r5, #0]
 80062f2:	bf48      	it	mi
 80062f4:	6023      	strmi	r3, [r4, #0]
 80062f6:	b91e      	cbnz	r6, 8006300 <_printf_i+0x1a4>
 80062f8:	6823      	ldr	r3, [r4, #0]
 80062fa:	f023 0320 	bic.w	r3, r3, #32
 80062fe:	6023      	str	r3, [r4, #0]
 8006300:	2310      	movs	r3, #16
 8006302:	e7a7      	b.n	8006254 <_printf_i+0xf8>
 8006304:	4824      	ldr	r0, [pc, #144]	; (8006398 <_printf_i+0x23c>)
 8006306:	e7e4      	b.n	80062d2 <_printf_i+0x176>
 8006308:	4615      	mov	r5, r2
 800630a:	e7bd      	b.n	8006288 <_printf_i+0x12c>
 800630c:	682b      	ldr	r3, [r5, #0]
 800630e:	6826      	ldr	r6, [r4, #0]
 8006310:	6961      	ldr	r1, [r4, #20]
 8006312:	1d18      	adds	r0, r3, #4
 8006314:	6028      	str	r0, [r5, #0]
 8006316:	0635      	lsls	r5, r6, #24
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	d501      	bpl.n	8006320 <_printf_i+0x1c4>
 800631c:	6019      	str	r1, [r3, #0]
 800631e:	e002      	b.n	8006326 <_printf_i+0x1ca>
 8006320:	0670      	lsls	r0, r6, #25
 8006322:	d5fb      	bpl.n	800631c <_printf_i+0x1c0>
 8006324:	8019      	strh	r1, [r3, #0]
 8006326:	2300      	movs	r3, #0
 8006328:	6123      	str	r3, [r4, #16]
 800632a:	4615      	mov	r5, r2
 800632c:	e7bc      	b.n	80062a8 <_printf_i+0x14c>
 800632e:	682b      	ldr	r3, [r5, #0]
 8006330:	1d1a      	adds	r2, r3, #4
 8006332:	602a      	str	r2, [r5, #0]
 8006334:	681d      	ldr	r5, [r3, #0]
 8006336:	6862      	ldr	r2, [r4, #4]
 8006338:	2100      	movs	r1, #0
 800633a:	4628      	mov	r0, r5
 800633c:	f7f9 ff50 	bl	80001e0 <memchr>
 8006340:	b108      	cbz	r0, 8006346 <_printf_i+0x1ea>
 8006342:	1b40      	subs	r0, r0, r5
 8006344:	6060      	str	r0, [r4, #4]
 8006346:	6863      	ldr	r3, [r4, #4]
 8006348:	6123      	str	r3, [r4, #16]
 800634a:	2300      	movs	r3, #0
 800634c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006350:	e7aa      	b.n	80062a8 <_printf_i+0x14c>
 8006352:	6923      	ldr	r3, [r4, #16]
 8006354:	462a      	mov	r2, r5
 8006356:	4649      	mov	r1, r9
 8006358:	4640      	mov	r0, r8
 800635a:	47d0      	blx	sl
 800635c:	3001      	adds	r0, #1
 800635e:	d0ad      	beq.n	80062bc <_printf_i+0x160>
 8006360:	6823      	ldr	r3, [r4, #0]
 8006362:	079b      	lsls	r3, r3, #30
 8006364:	d413      	bmi.n	800638e <_printf_i+0x232>
 8006366:	68e0      	ldr	r0, [r4, #12]
 8006368:	9b03      	ldr	r3, [sp, #12]
 800636a:	4298      	cmp	r0, r3
 800636c:	bfb8      	it	lt
 800636e:	4618      	movlt	r0, r3
 8006370:	e7a6      	b.n	80062c0 <_printf_i+0x164>
 8006372:	2301      	movs	r3, #1
 8006374:	4632      	mov	r2, r6
 8006376:	4649      	mov	r1, r9
 8006378:	4640      	mov	r0, r8
 800637a:	47d0      	blx	sl
 800637c:	3001      	adds	r0, #1
 800637e:	d09d      	beq.n	80062bc <_printf_i+0x160>
 8006380:	3501      	adds	r5, #1
 8006382:	68e3      	ldr	r3, [r4, #12]
 8006384:	9903      	ldr	r1, [sp, #12]
 8006386:	1a5b      	subs	r3, r3, r1
 8006388:	42ab      	cmp	r3, r5
 800638a:	dcf2      	bgt.n	8006372 <_printf_i+0x216>
 800638c:	e7eb      	b.n	8006366 <_printf_i+0x20a>
 800638e:	2500      	movs	r5, #0
 8006390:	f104 0619 	add.w	r6, r4, #25
 8006394:	e7f5      	b.n	8006382 <_printf_i+0x226>
 8006396:	bf00      	nop
 8006398:	080091a3 	.word	0x080091a3
 800639c:	080091b4 	.word	0x080091b4

080063a0 <std>:
 80063a0:	2300      	movs	r3, #0
 80063a2:	b510      	push	{r4, lr}
 80063a4:	4604      	mov	r4, r0
 80063a6:	e9c0 3300 	strd	r3, r3, [r0]
 80063aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80063ae:	6083      	str	r3, [r0, #8]
 80063b0:	8181      	strh	r1, [r0, #12]
 80063b2:	6643      	str	r3, [r0, #100]	; 0x64
 80063b4:	81c2      	strh	r2, [r0, #14]
 80063b6:	6183      	str	r3, [r0, #24]
 80063b8:	4619      	mov	r1, r3
 80063ba:	2208      	movs	r2, #8
 80063bc:	305c      	adds	r0, #92	; 0x5c
 80063be:	f000 f914 	bl	80065ea <memset>
 80063c2:	4b0d      	ldr	r3, [pc, #52]	; (80063f8 <std+0x58>)
 80063c4:	6263      	str	r3, [r4, #36]	; 0x24
 80063c6:	4b0d      	ldr	r3, [pc, #52]	; (80063fc <std+0x5c>)
 80063c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80063ca:	4b0d      	ldr	r3, [pc, #52]	; (8006400 <std+0x60>)
 80063cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80063ce:	4b0d      	ldr	r3, [pc, #52]	; (8006404 <std+0x64>)
 80063d0:	6323      	str	r3, [r4, #48]	; 0x30
 80063d2:	4b0d      	ldr	r3, [pc, #52]	; (8006408 <std+0x68>)
 80063d4:	6224      	str	r4, [r4, #32]
 80063d6:	429c      	cmp	r4, r3
 80063d8:	d006      	beq.n	80063e8 <std+0x48>
 80063da:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80063de:	4294      	cmp	r4, r2
 80063e0:	d002      	beq.n	80063e8 <std+0x48>
 80063e2:	33d0      	adds	r3, #208	; 0xd0
 80063e4:	429c      	cmp	r4, r3
 80063e6:	d105      	bne.n	80063f4 <std+0x54>
 80063e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80063ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063f0:	f000 b978 	b.w	80066e4 <__retarget_lock_init_recursive>
 80063f4:	bd10      	pop	{r4, pc}
 80063f6:	bf00      	nop
 80063f8:	08006565 	.word	0x08006565
 80063fc:	08006587 	.word	0x08006587
 8006400:	080065bf 	.word	0x080065bf
 8006404:	080065e3 	.word	0x080065e3
 8006408:	200003f0 	.word	0x200003f0

0800640c <stdio_exit_handler>:
 800640c:	4a02      	ldr	r2, [pc, #8]	; (8006418 <stdio_exit_handler+0xc>)
 800640e:	4903      	ldr	r1, [pc, #12]	; (800641c <stdio_exit_handler+0x10>)
 8006410:	4803      	ldr	r0, [pc, #12]	; (8006420 <stdio_exit_handler+0x14>)
 8006412:	f000 b869 	b.w	80064e8 <_fwalk_sglue>
 8006416:	bf00      	nop
 8006418:	20000014 	.word	0x20000014
 800641c:	080080b1 	.word	0x080080b1
 8006420:	20000020 	.word	0x20000020

08006424 <cleanup_stdio>:
 8006424:	6841      	ldr	r1, [r0, #4]
 8006426:	4b0c      	ldr	r3, [pc, #48]	; (8006458 <cleanup_stdio+0x34>)
 8006428:	4299      	cmp	r1, r3
 800642a:	b510      	push	{r4, lr}
 800642c:	4604      	mov	r4, r0
 800642e:	d001      	beq.n	8006434 <cleanup_stdio+0x10>
 8006430:	f001 fe3e 	bl	80080b0 <_fflush_r>
 8006434:	68a1      	ldr	r1, [r4, #8]
 8006436:	4b09      	ldr	r3, [pc, #36]	; (800645c <cleanup_stdio+0x38>)
 8006438:	4299      	cmp	r1, r3
 800643a:	d002      	beq.n	8006442 <cleanup_stdio+0x1e>
 800643c:	4620      	mov	r0, r4
 800643e:	f001 fe37 	bl	80080b0 <_fflush_r>
 8006442:	68e1      	ldr	r1, [r4, #12]
 8006444:	4b06      	ldr	r3, [pc, #24]	; (8006460 <cleanup_stdio+0x3c>)
 8006446:	4299      	cmp	r1, r3
 8006448:	d004      	beq.n	8006454 <cleanup_stdio+0x30>
 800644a:	4620      	mov	r0, r4
 800644c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006450:	f001 be2e 	b.w	80080b0 <_fflush_r>
 8006454:	bd10      	pop	{r4, pc}
 8006456:	bf00      	nop
 8006458:	200003f0 	.word	0x200003f0
 800645c:	20000458 	.word	0x20000458
 8006460:	200004c0 	.word	0x200004c0

08006464 <global_stdio_init.part.0>:
 8006464:	b510      	push	{r4, lr}
 8006466:	4b0b      	ldr	r3, [pc, #44]	; (8006494 <global_stdio_init.part.0+0x30>)
 8006468:	4c0b      	ldr	r4, [pc, #44]	; (8006498 <global_stdio_init.part.0+0x34>)
 800646a:	4a0c      	ldr	r2, [pc, #48]	; (800649c <global_stdio_init.part.0+0x38>)
 800646c:	601a      	str	r2, [r3, #0]
 800646e:	4620      	mov	r0, r4
 8006470:	2200      	movs	r2, #0
 8006472:	2104      	movs	r1, #4
 8006474:	f7ff ff94 	bl	80063a0 <std>
 8006478:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800647c:	2201      	movs	r2, #1
 800647e:	2109      	movs	r1, #9
 8006480:	f7ff ff8e 	bl	80063a0 <std>
 8006484:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006488:	2202      	movs	r2, #2
 800648a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800648e:	2112      	movs	r1, #18
 8006490:	f7ff bf86 	b.w	80063a0 <std>
 8006494:	20000528 	.word	0x20000528
 8006498:	200003f0 	.word	0x200003f0
 800649c:	0800640d 	.word	0x0800640d

080064a0 <__sfp_lock_acquire>:
 80064a0:	4801      	ldr	r0, [pc, #4]	; (80064a8 <__sfp_lock_acquire+0x8>)
 80064a2:	f000 b920 	b.w	80066e6 <__retarget_lock_acquire_recursive>
 80064a6:	bf00      	nop
 80064a8:	20000531 	.word	0x20000531

080064ac <__sfp_lock_release>:
 80064ac:	4801      	ldr	r0, [pc, #4]	; (80064b4 <__sfp_lock_release+0x8>)
 80064ae:	f000 b91b 	b.w	80066e8 <__retarget_lock_release_recursive>
 80064b2:	bf00      	nop
 80064b4:	20000531 	.word	0x20000531

080064b8 <__sinit>:
 80064b8:	b510      	push	{r4, lr}
 80064ba:	4604      	mov	r4, r0
 80064bc:	f7ff fff0 	bl	80064a0 <__sfp_lock_acquire>
 80064c0:	6a23      	ldr	r3, [r4, #32]
 80064c2:	b11b      	cbz	r3, 80064cc <__sinit+0x14>
 80064c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064c8:	f7ff bff0 	b.w	80064ac <__sfp_lock_release>
 80064cc:	4b04      	ldr	r3, [pc, #16]	; (80064e0 <__sinit+0x28>)
 80064ce:	6223      	str	r3, [r4, #32]
 80064d0:	4b04      	ldr	r3, [pc, #16]	; (80064e4 <__sinit+0x2c>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1f5      	bne.n	80064c4 <__sinit+0xc>
 80064d8:	f7ff ffc4 	bl	8006464 <global_stdio_init.part.0>
 80064dc:	e7f2      	b.n	80064c4 <__sinit+0xc>
 80064de:	bf00      	nop
 80064e0:	08006425 	.word	0x08006425
 80064e4:	20000528 	.word	0x20000528

080064e8 <_fwalk_sglue>:
 80064e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064ec:	4607      	mov	r7, r0
 80064ee:	4688      	mov	r8, r1
 80064f0:	4614      	mov	r4, r2
 80064f2:	2600      	movs	r6, #0
 80064f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064f8:	f1b9 0901 	subs.w	r9, r9, #1
 80064fc:	d505      	bpl.n	800650a <_fwalk_sglue+0x22>
 80064fe:	6824      	ldr	r4, [r4, #0]
 8006500:	2c00      	cmp	r4, #0
 8006502:	d1f7      	bne.n	80064f4 <_fwalk_sglue+0xc>
 8006504:	4630      	mov	r0, r6
 8006506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800650a:	89ab      	ldrh	r3, [r5, #12]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d907      	bls.n	8006520 <_fwalk_sglue+0x38>
 8006510:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006514:	3301      	adds	r3, #1
 8006516:	d003      	beq.n	8006520 <_fwalk_sglue+0x38>
 8006518:	4629      	mov	r1, r5
 800651a:	4638      	mov	r0, r7
 800651c:	47c0      	blx	r8
 800651e:	4306      	orrs	r6, r0
 8006520:	3568      	adds	r5, #104	; 0x68
 8006522:	e7e9      	b.n	80064f8 <_fwalk_sglue+0x10>

08006524 <siprintf>:
 8006524:	b40e      	push	{r1, r2, r3}
 8006526:	b500      	push	{lr}
 8006528:	b09c      	sub	sp, #112	; 0x70
 800652a:	ab1d      	add	r3, sp, #116	; 0x74
 800652c:	9002      	str	r0, [sp, #8]
 800652e:	9006      	str	r0, [sp, #24]
 8006530:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006534:	4809      	ldr	r0, [pc, #36]	; (800655c <siprintf+0x38>)
 8006536:	9107      	str	r1, [sp, #28]
 8006538:	9104      	str	r1, [sp, #16]
 800653a:	4909      	ldr	r1, [pc, #36]	; (8006560 <siprintf+0x3c>)
 800653c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006540:	9105      	str	r1, [sp, #20]
 8006542:	6800      	ldr	r0, [r0, #0]
 8006544:	9301      	str	r3, [sp, #4]
 8006546:	a902      	add	r1, sp, #8
 8006548:	f001 fc2e 	bl	8007da8 <_svfiprintf_r>
 800654c:	9b02      	ldr	r3, [sp, #8]
 800654e:	2200      	movs	r2, #0
 8006550:	701a      	strb	r2, [r3, #0]
 8006552:	b01c      	add	sp, #112	; 0x70
 8006554:	f85d eb04 	ldr.w	lr, [sp], #4
 8006558:	b003      	add	sp, #12
 800655a:	4770      	bx	lr
 800655c:	2000006c 	.word	0x2000006c
 8006560:	ffff0208 	.word	0xffff0208

08006564 <__sread>:
 8006564:	b510      	push	{r4, lr}
 8006566:	460c      	mov	r4, r1
 8006568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800656c:	f000 f86c 	bl	8006648 <_read_r>
 8006570:	2800      	cmp	r0, #0
 8006572:	bfab      	itete	ge
 8006574:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006576:	89a3      	ldrhlt	r3, [r4, #12]
 8006578:	181b      	addge	r3, r3, r0
 800657a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800657e:	bfac      	ite	ge
 8006580:	6563      	strge	r3, [r4, #84]	; 0x54
 8006582:	81a3      	strhlt	r3, [r4, #12]
 8006584:	bd10      	pop	{r4, pc}

08006586 <__swrite>:
 8006586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800658a:	461f      	mov	r7, r3
 800658c:	898b      	ldrh	r3, [r1, #12]
 800658e:	05db      	lsls	r3, r3, #23
 8006590:	4605      	mov	r5, r0
 8006592:	460c      	mov	r4, r1
 8006594:	4616      	mov	r6, r2
 8006596:	d505      	bpl.n	80065a4 <__swrite+0x1e>
 8006598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800659c:	2302      	movs	r3, #2
 800659e:	2200      	movs	r2, #0
 80065a0:	f000 f840 	bl	8006624 <_lseek_r>
 80065a4:	89a3      	ldrh	r3, [r4, #12]
 80065a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065ae:	81a3      	strh	r3, [r4, #12]
 80065b0:	4632      	mov	r2, r6
 80065b2:	463b      	mov	r3, r7
 80065b4:	4628      	mov	r0, r5
 80065b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065ba:	f000 b857 	b.w	800666c <_write_r>

080065be <__sseek>:
 80065be:	b510      	push	{r4, lr}
 80065c0:	460c      	mov	r4, r1
 80065c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065c6:	f000 f82d 	bl	8006624 <_lseek_r>
 80065ca:	1c43      	adds	r3, r0, #1
 80065cc:	89a3      	ldrh	r3, [r4, #12]
 80065ce:	bf15      	itete	ne
 80065d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80065d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80065d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80065da:	81a3      	strheq	r3, [r4, #12]
 80065dc:	bf18      	it	ne
 80065de:	81a3      	strhne	r3, [r4, #12]
 80065e0:	bd10      	pop	{r4, pc}

080065e2 <__sclose>:
 80065e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065e6:	f000 b80d 	b.w	8006604 <_close_r>

080065ea <memset>:
 80065ea:	4402      	add	r2, r0
 80065ec:	4603      	mov	r3, r0
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d100      	bne.n	80065f4 <memset+0xa>
 80065f2:	4770      	bx	lr
 80065f4:	f803 1b01 	strb.w	r1, [r3], #1
 80065f8:	e7f9      	b.n	80065ee <memset+0x4>
	...

080065fc <_localeconv_r>:
 80065fc:	4800      	ldr	r0, [pc, #0]	; (8006600 <_localeconv_r+0x4>)
 80065fe:	4770      	bx	lr
 8006600:	20000160 	.word	0x20000160

08006604 <_close_r>:
 8006604:	b538      	push	{r3, r4, r5, lr}
 8006606:	4d06      	ldr	r5, [pc, #24]	; (8006620 <_close_r+0x1c>)
 8006608:	2300      	movs	r3, #0
 800660a:	4604      	mov	r4, r0
 800660c:	4608      	mov	r0, r1
 800660e:	602b      	str	r3, [r5, #0]
 8006610:	f7fa ff8f 	bl	8001532 <_close>
 8006614:	1c43      	adds	r3, r0, #1
 8006616:	d102      	bne.n	800661e <_close_r+0x1a>
 8006618:	682b      	ldr	r3, [r5, #0]
 800661a:	b103      	cbz	r3, 800661e <_close_r+0x1a>
 800661c:	6023      	str	r3, [r4, #0]
 800661e:	bd38      	pop	{r3, r4, r5, pc}
 8006620:	2000052c 	.word	0x2000052c

08006624 <_lseek_r>:
 8006624:	b538      	push	{r3, r4, r5, lr}
 8006626:	4d07      	ldr	r5, [pc, #28]	; (8006644 <_lseek_r+0x20>)
 8006628:	4604      	mov	r4, r0
 800662a:	4608      	mov	r0, r1
 800662c:	4611      	mov	r1, r2
 800662e:	2200      	movs	r2, #0
 8006630:	602a      	str	r2, [r5, #0]
 8006632:	461a      	mov	r2, r3
 8006634:	f7fa ffa4 	bl	8001580 <_lseek>
 8006638:	1c43      	adds	r3, r0, #1
 800663a:	d102      	bne.n	8006642 <_lseek_r+0x1e>
 800663c:	682b      	ldr	r3, [r5, #0]
 800663e:	b103      	cbz	r3, 8006642 <_lseek_r+0x1e>
 8006640:	6023      	str	r3, [r4, #0]
 8006642:	bd38      	pop	{r3, r4, r5, pc}
 8006644:	2000052c 	.word	0x2000052c

08006648 <_read_r>:
 8006648:	b538      	push	{r3, r4, r5, lr}
 800664a:	4d07      	ldr	r5, [pc, #28]	; (8006668 <_read_r+0x20>)
 800664c:	4604      	mov	r4, r0
 800664e:	4608      	mov	r0, r1
 8006650:	4611      	mov	r1, r2
 8006652:	2200      	movs	r2, #0
 8006654:	602a      	str	r2, [r5, #0]
 8006656:	461a      	mov	r2, r3
 8006658:	f7fa ff32 	bl	80014c0 <_read>
 800665c:	1c43      	adds	r3, r0, #1
 800665e:	d102      	bne.n	8006666 <_read_r+0x1e>
 8006660:	682b      	ldr	r3, [r5, #0]
 8006662:	b103      	cbz	r3, 8006666 <_read_r+0x1e>
 8006664:	6023      	str	r3, [r4, #0]
 8006666:	bd38      	pop	{r3, r4, r5, pc}
 8006668:	2000052c 	.word	0x2000052c

0800666c <_write_r>:
 800666c:	b538      	push	{r3, r4, r5, lr}
 800666e:	4d07      	ldr	r5, [pc, #28]	; (800668c <_write_r+0x20>)
 8006670:	4604      	mov	r4, r0
 8006672:	4608      	mov	r0, r1
 8006674:	4611      	mov	r1, r2
 8006676:	2200      	movs	r2, #0
 8006678:	602a      	str	r2, [r5, #0]
 800667a:	461a      	mov	r2, r3
 800667c:	f7fa ff3d 	bl	80014fa <_write>
 8006680:	1c43      	adds	r3, r0, #1
 8006682:	d102      	bne.n	800668a <_write_r+0x1e>
 8006684:	682b      	ldr	r3, [r5, #0]
 8006686:	b103      	cbz	r3, 800668a <_write_r+0x1e>
 8006688:	6023      	str	r3, [r4, #0]
 800668a:	bd38      	pop	{r3, r4, r5, pc}
 800668c:	2000052c 	.word	0x2000052c

08006690 <__errno>:
 8006690:	4b01      	ldr	r3, [pc, #4]	; (8006698 <__errno+0x8>)
 8006692:	6818      	ldr	r0, [r3, #0]
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	2000006c 	.word	0x2000006c

0800669c <__libc_init_array>:
 800669c:	b570      	push	{r4, r5, r6, lr}
 800669e:	4d0d      	ldr	r5, [pc, #52]	; (80066d4 <__libc_init_array+0x38>)
 80066a0:	4c0d      	ldr	r4, [pc, #52]	; (80066d8 <__libc_init_array+0x3c>)
 80066a2:	1b64      	subs	r4, r4, r5
 80066a4:	10a4      	asrs	r4, r4, #2
 80066a6:	2600      	movs	r6, #0
 80066a8:	42a6      	cmp	r6, r4
 80066aa:	d109      	bne.n	80066c0 <__libc_init_array+0x24>
 80066ac:	4d0b      	ldr	r5, [pc, #44]	; (80066dc <__libc_init_array+0x40>)
 80066ae:	4c0c      	ldr	r4, [pc, #48]	; (80066e0 <__libc_init_array+0x44>)
 80066b0:	f002 fca0 	bl	8008ff4 <_init>
 80066b4:	1b64      	subs	r4, r4, r5
 80066b6:	10a4      	asrs	r4, r4, #2
 80066b8:	2600      	movs	r6, #0
 80066ba:	42a6      	cmp	r6, r4
 80066bc:	d105      	bne.n	80066ca <__libc_init_array+0x2e>
 80066be:	bd70      	pop	{r4, r5, r6, pc}
 80066c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80066c4:	4798      	blx	r3
 80066c6:	3601      	adds	r6, #1
 80066c8:	e7ee      	b.n	80066a8 <__libc_init_array+0xc>
 80066ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ce:	4798      	blx	r3
 80066d0:	3601      	adds	r6, #1
 80066d2:	e7f2      	b.n	80066ba <__libc_init_array+0x1e>
 80066d4:	08009440 	.word	0x08009440
 80066d8:	08009440 	.word	0x08009440
 80066dc:	08009440 	.word	0x08009440
 80066e0:	08009444 	.word	0x08009444

080066e4 <__retarget_lock_init_recursive>:
 80066e4:	4770      	bx	lr

080066e6 <__retarget_lock_acquire_recursive>:
 80066e6:	4770      	bx	lr

080066e8 <__retarget_lock_release_recursive>:
 80066e8:	4770      	bx	lr

080066ea <memcpy>:
 80066ea:	440a      	add	r2, r1
 80066ec:	4291      	cmp	r1, r2
 80066ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80066f2:	d100      	bne.n	80066f6 <memcpy+0xc>
 80066f4:	4770      	bx	lr
 80066f6:	b510      	push	{r4, lr}
 80066f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006700:	4291      	cmp	r1, r2
 8006702:	d1f9      	bne.n	80066f8 <memcpy+0xe>
 8006704:	bd10      	pop	{r4, pc}

08006706 <quorem>:
 8006706:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800670a:	6903      	ldr	r3, [r0, #16]
 800670c:	690c      	ldr	r4, [r1, #16]
 800670e:	42a3      	cmp	r3, r4
 8006710:	4607      	mov	r7, r0
 8006712:	db7e      	blt.n	8006812 <quorem+0x10c>
 8006714:	3c01      	subs	r4, #1
 8006716:	f101 0814 	add.w	r8, r1, #20
 800671a:	f100 0514 	add.w	r5, r0, #20
 800671e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006722:	9301      	str	r3, [sp, #4]
 8006724:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006728:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800672c:	3301      	adds	r3, #1
 800672e:	429a      	cmp	r2, r3
 8006730:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006734:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006738:	fbb2 f6f3 	udiv	r6, r2, r3
 800673c:	d331      	bcc.n	80067a2 <quorem+0x9c>
 800673e:	f04f 0e00 	mov.w	lr, #0
 8006742:	4640      	mov	r0, r8
 8006744:	46ac      	mov	ip, r5
 8006746:	46f2      	mov	sl, lr
 8006748:	f850 2b04 	ldr.w	r2, [r0], #4
 800674c:	b293      	uxth	r3, r2
 800674e:	fb06 e303 	mla	r3, r6, r3, lr
 8006752:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006756:	0c1a      	lsrs	r2, r3, #16
 8006758:	b29b      	uxth	r3, r3
 800675a:	ebaa 0303 	sub.w	r3, sl, r3
 800675e:	f8dc a000 	ldr.w	sl, [ip]
 8006762:	fa13 f38a 	uxtah	r3, r3, sl
 8006766:	fb06 220e 	mla	r2, r6, lr, r2
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	9b00      	ldr	r3, [sp, #0]
 800676e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006772:	b292      	uxth	r2, r2
 8006774:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006778:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800677c:	f8bd 3000 	ldrh.w	r3, [sp]
 8006780:	4581      	cmp	r9, r0
 8006782:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006786:	f84c 3b04 	str.w	r3, [ip], #4
 800678a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800678e:	d2db      	bcs.n	8006748 <quorem+0x42>
 8006790:	f855 300b 	ldr.w	r3, [r5, fp]
 8006794:	b92b      	cbnz	r3, 80067a2 <quorem+0x9c>
 8006796:	9b01      	ldr	r3, [sp, #4]
 8006798:	3b04      	subs	r3, #4
 800679a:	429d      	cmp	r5, r3
 800679c:	461a      	mov	r2, r3
 800679e:	d32c      	bcc.n	80067fa <quorem+0xf4>
 80067a0:	613c      	str	r4, [r7, #16]
 80067a2:	4638      	mov	r0, r7
 80067a4:	f001 f9a6 	bl	8007af4 <__mcmp>
 80067a8:	2800      	cmp	r0, #0
 80067aa:	db22      	blt.n	80067f2 <quorem+0xec>
 80067ac:	3601      	adds	r6, #1
 80067ae:	4629      	mov	r1, r5
 80067b0:	2000      	movs	r0, #0
 80067b2:	f858 2b04 	ldr.w	r2, [r8], #4
 80067b6:	f8d1 c000 	ldr.w	ip, [r1]
 80067ba:	b293      	uxth	r3, r2
 80067bc:	1ac3      	subs	r3, r0, r3
 80067be:	0c12      	lsrs	r2, r2, #16
 80067c0:	fa13 f38c 	uxtah	r3, r3, ip
 80067c4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80067c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067d2:	45c1      	cmp	r9, r8
 80067d4:	f841 3b04 	str.w	r3, [r1], #4
 80067d8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80067dc:	d2e9      	bcs.n	80067b2 <quorem+0xac>
 80067de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067e6:	b922      	cbnz	r2, 80067f2 <quorem+0xec>
 80067e8:	3b04      	subs	r3, #4
 80067ea:	429d      	cmp	r5, r3
 80067ec:	461a      	mov	r2, r3
 80067ee:	d30a      	bcc.n	8006806 <quorem+0x100>
 80067f0:	613c      	str	r4, [r7, #16]
 80067f2:	4630      	mov	r0, r6
 80067f4:	b003      	add	sp, #12
 80067f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067fa:	6812      	ldr	r2, [r2, #0]
 80067fc:	3b04      	subs	r3, #4
 80067fe:	2a00      	cmp	r2, #0
 8006800:	d1ce      	bne.n	80067a0 <quorem+0x9a>
 8006802:	3c01      	subs	r4, #1
 8006804:	e7c9      	b.n	800679a <quorem+0x94>
 8006806:	6812      	ldr	r2, [r2, #0]
 8006808:	3b04      	subs	r3, #4
 800680a:	2a00      	cmp	r2, #0
 800680c:	d1f0      	bne.n	80067f0 <quorem+0xea>
 800680e:	3c01      	subs	r4, #1
 8006810:	e7eb      	b.n	80067ea <quorem+0xe4>
 8006812:	2000      	movs	r0, #0
 8006814:	e7ee      	b.n	80067f4 <quorem+0xee>
	...

08006818 <_dtoa_r>:
 8006818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800681c:	ed2d 8b04 	vpush	{d8-d9}
 8006820:	69c5      	ldr	r5, [r0, #28]
 8006822:	b093      	sub	sp, #76	; 0x4c
 8006824:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006828:	ec57 6b10 	vmov	r6, r7, d0
 800682c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006830:	9107      	str	r1, [sp, #28]
 8006832:	4604      	mov	r4, r0
 8006834:	920a      	str	r2, [sp, #40]	; 0x28
 8006836:	930d      	str	r3, [sp, #52]	; 0x34
 8006838:	b975      	cbnz	r5, 8006858 <_dtoa_r+0x40>
 800683a:	2010      	movs	r0, #16
 800683c:	f000 fe2a 	bl	8007494 <malloc>
 8006840:	4602      	mov	r2, r0
 8006842:	61e0      	str	r0, [r4, #28]
 8006844:	b920      	cbnz	r0, 8006850 <_dtoa_r+0x38>
 8006846:	4bae      	ldr	r3, [pc, #696]	; (8006b00 <_dtoa_r+0x2e8>)
 8006848:	21ef      	movs	r1, #239	; 0xef
 800684a:	48ae      	ldr	r0, [pc, #696]	; (8006b04 <_dtoa_r+0x2ec>)
 800684c:	f001 fc82 	bl	8008154 <__assert_func>
 8006850:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006854:	6005      	str	r5, [r0, #0]
 8006856:	60c5      	str	r5, [r0, #12]
 8006858:	69e3      	ldr	r3, [r4, #28]
 800685a:	6819      	ldr	r1, [r3, #0]
 800685c:	b151      	cbz	r1, 8006874 <_dtoa_r+0x5c>
 800685e:	685a      	ldr	r2, [r3, #4]
 8006860:	604a      	str	r2, [r1, #4]
 8006862:	2301      	movs	r3, #1
 8006864:	4093      	lsls	r3, r2
 8006866:	608b      	str	r3, [r1, #8]
 8006868:	4620      	mov	r0, r4
 800686a:	f000 ff07 	bl	800767c <_Bfree>
 800686e:	69e3      	ldr	r3, [r4, #28]
 8006870:	2200      	movs	r2, #0
 8006872:	601a      	str	r2, [r3, #0]
 8006874:	1e3b      	subs	r3, r7, #0
 8006876:	bfbb      	ittet	lt
 8006878:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800687c:	9303      	strlt	r3, [sp, #12]
 800687e:	2300      	movge	r3, #0
 8006880:	2201      	movlt	r2, #1
 8006882:	bfac      	ite	ge
 8006884:	f8c8 3000 	strge.w	r3, [r8]
 8006888:	f8c8 2000 	strlt.w	r2, [r8]
 800688c:	4b9e      	ldr	r3, [pc, #632]	; (8006b08 <_dtoa_r+0x2f0>)
 800688e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006892:	ea33 0308 	bics.w	r3, r3, r8
 8006896:	d11b      	bne.n	80068d0 <_dtoa_r+0xb8>
 8006898:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800689a:	f242 730f 	movw	r3, #9999	; 0x270f
 800689e:	6013      	str	r3, [r2, #0]
 80068a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80068a4:	4333      	orrs	r3, r6
 80068a6:	f000 8593 	beq.w	80073d0 <_dtoa_r+0xbb8>
 80068aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068ac:	b963      	cbnz	r3, 80068c8 <_dtoa_r+0xb0>
 80068ae:	4b97      	ldr	r3, [pc, #604]	; (8006b0c <_dtoa_r+0x2f4>)
 80068b0:	e027      	b.n	8006902 <_dtoa_r+0xea>
 80068b2:	4b97      	ldr	r3, [pc, #604]	; (8006b10 <_dtoa_r+0x2f8>)
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	3308      	adds	r3, #8
 80068b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80068ba:	6013      	str	r3, [r2, #0]
 80068bc:	9800      	ldr	r0, [sp, #0]
 80068be:	b013      	add	sp, #76	; 0x4c
 80068c0:	ecbd 8b04 	vpop	{d8-d9}
 80068c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068c8:	4b90      	ldr	r3, [pc, #576]	; (8006b0c <_dtoa_r+0x2f4>)
 80068ca:	9300      	str	r3, [sp, #0]
 80068cc:	3303      	adds	r3, #3
 80068ce:	e7f3      	b.n	80068b8 <_dtoa_r+0xa0>
 80068d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80068d4:	2200      	movs	r2, #0
 80068d6:	ec51 0b17 	vmov	r0, r1, d7
 80068da:	eeb0 8a47 	vmov.f32	s16, s14
 80068de:	eef0 8a67 	vmov.f32	s17, s15
 80068e2:	2300      	movs	r3, #0
 80068e4:	f7fa f8f8 	bl	8000ad8 <__aeabi_dcmpeq>
 80068e8:	4681      	mov	r9, r0
 80068ea:	b160      	cbz	r0, 8006906 <_dtoa_r+0xee>
 80068ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80068ee:	2301      	movs	r3, #1
 80068f0:	6013      	str	r3, [r2, #0]
 80068f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f000 8568 	beq.w	80073ca <_dtoa_r+0xbb2>
 80068fa:	4b86      	ldr	r3, [pc, #536]	; (8006b14 <_dtoa_r+0x2fc>)
 80068fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80068fe:	6013      	str	r3, [r2, #0]
 8006900:	3b01      	subs	r3, #1
 8006902:	9300      	str	r3, [sp, #0]
 8006904:	e7da      	b.n	80068bc <_dtoa_r+0xa4>
 8006906:	aa10      	add	r2, sp, #64	; 0x40
 8006908:	a911      	add	r1, sp, #68	; 0x44
 800690a:	4620      	mov	r0, r4
 800690c:	eeb0 0a48 	vmov.f32	s0, s16
 8006910:	eef0 0a68 	vmov.f32	s1, s17
 8006914:	f001 f994 	bl	8007c40 <__d2b>
 8006918:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800691c:	4682      	mov	sl, r0
 800691e:	2d00      	cmp	r5, #0
 8006920:	d07f      	beq.n	8006a22 <_dtoa_r+0x20a>
 8006922:	ee18 3a90 	vmov	r3, s17
 8006926:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800692a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800692e:	ec51 0b18 	vmov	r0, r1, d8
 8006932:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006936:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800693a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800693e:	4619      	mov	r1, r3
 8006940:	2200      	movs	r2, #0
 8006942:	4b75      	ldr	r3, [pc, #468]	; (8006b18 <_dtoa_r+0x300>)
 8006944:	f7f9 fca8 	bl	8000298 <__aeabi_dsub>
 8006948:	a367      	add	r3, pc, #412	; (adr r3, 8006ae8 <_dtoa_r+0x2d0>)
 800694a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694e:	f7f9 fe5b 	bl	8000608 <__aeabi_dmul>
 8006952:	a367      	add	r3, pc, #412	; (adr r3, 8006af0 <_dtoa_r+0x2d8>)
 8006954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006958:	f7f9 fca0 	bl	800029c <__adddf3>
 800695c:	4606      	mov	r6, r0
 800695e:	4628      	mov	r0, r5
 8006960:	460f      	mov	r7, r1
 8006962:	f7f9 fde7 	bl	8000534 <__aeabi_i2d>
 8006966:	a364      	add	r3, pc, #400	; (adr r3, 8006af8 <_dtoa_r+0x2e0>)
 8006968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696c:	f7f9 fe4c 	bl	8000608 <__aeabi_dmul>
 8006970:	4602      	mov	r2, r0
 8006972:	460b      	mov	r3, r1
 8006974:	4630      	mov	r0, r6
 8006976:	4639      	mov	r1, r7
 8006978:	f7f9 fc90 	bl	800029c <__adddf3>
 800697c:	4606      	mov	r6, r0
 800697e:	460f      	mov	r7, r1
 8006980:	f7fa f8f2 	bl	8000b68 <__aeabi_d2iz>
 8006984:	2200      	movs	r2, #0
 8006986:	4683      	mov	fp, r0
 8006988:	2300      	movs	r3, #0
 800698a:	4630      	mov	r0, r6
 800698c:	4639      	mov	r1, r7
 800698e:	f7fa f8ad 	bl	8000aec <__aeabi_dcmplt>
 8006992:	b148      	cbz	r0, 80069a8 <_dtoa_r+0x190>
 8006994:	4658      	mov	r0, fp
 8006996:	f7f9 fdcd 	bl	8000534 <__aeabi_i2d>
 800699a:	4632      	mov	r2, r6
 800699c:	463b      	mov	r3, r7
 800699e:	f7fa f89b 	bl	8000ad8 <__aeabi_dcmpeq>
 80069a2:	b908      	cbnz	r0, 80069a8 <_dtoa_r+0x190>
 80069a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80069a8:	f1bb 0f16 	cmp.w	fp, #22
 80069ac:	d857      	bhi.n	8006a5e <_dtoa_r+0x246>
 80069ae:	4b5b      	ldr	r3, [pc, #364]	; (8006b1c <_dtoa_r+0x304>)
 80069b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80069b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b8:	ec51 0b18 	vmov	r0, r1, d8
 80069bc:	f7fa f896 	bl	8000aec <__aeabi_dcmplt>
 80069c0:	2800      	cmp	r0, #0
 80069c2:	d04e      	beq.n	8006a62 <_dtoa_r+0x24a>
 80069c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80069c8:	2300      	movs	r3, #0
 80069ca:	930c      	str	r3, [sp, #48]	; 0x30
 80069cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80069ce:	1b5b      	subs	r3, r3, r5
 80069d0:	1e5a      	subs	r2, r3, #1
 80069d2:	bf45      	ittet	mi
 80069d4:	f1c3 0301 	rsbmi	r3, r3, #1
 80069d8:	9305      	strmi	r3, [sp, #20]
 80069da:	2300      	movpl	r3, #0
 80069dc:	2300      	movmi	r3, #0
 80069de:	9206      	str	r2, [sp, #24]
 80069e0:	bf54      	ite	pl
 80069e2:	9305      	strpl	r3, [sp, #20]
 80069e4:	9306      	strmi	r3, [sp, #24]
 80069e6:	f1bb 0f00 	cmp.w	fp, #0
 80069ea:	db3c      	blt.n	8006a66 <_dtoa_r+0x24e>
 80069ec:	9b06      	ldr	r3, [sp, #24]
 80069ee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80069f2:	445b      	add	r3, fp
 80069f4:	9306      	str	r3, [sp, #24]
 80069f6:	2300      	movs	r3, #0
 80069f8:	9308      	str	r3, [sp, #32]
 80069fa:	9b07      	ldr	r3, [sp, #28]
 80069fc:	2b09      	cmp	r3, #9
 80069fe:	d868      	bhi.n	8006ad2 <_dtoa_r+0x2ba>
 8006a00:	2b05      	cmp	r3, #5
 8006a02:	bfc4      	itt	gt
 8006a04:	3b04      	subgt	r3, #4
 8006a06:	9307      	strgt	r3, [sp, #28]
 8006a08:	9b07      	ldr	r3, [sp, #28]
 8006a0a:	f1a3 0302 	sub.w	r3, r3, #2
 8006a0e:	bfcc      	ite	gt
 8006a10:	2500      	movgt	r5, #0
 8006a12:	2501      	movle	r5, #1
 8006a14:	2b03      	cmp	r3, #3
 8006a16:	f200 8085 	bhi.w	8006b24 <_dtoa_r+0x30c>
 8006a1a:	e8df f003 	tbb	[pc, r3]
 8006a1e:	3b2e      	.short	0x3b2e
 8006a20:	5839      	.short	0x5839
 8006a22:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006a26:	441d      	add	r5, r3
 8006a28:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006a2c:	2b20      	cmp	r3, #32
 8006a2e:	bfc1      	itttt	gt
 8006a30:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006a34:	fa08 f803 	lslgt.w	r8, r8, r3
 8006a38:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006a3c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006a40:	bfd6      	itet	le
 8006a42:	f1c3 0320 	rsble	r3, r3, #32
 8006a46:	ea48 0003 	orrgt.w	r0, r8, r3
 8006a4a:	fa06 f003 	lslle.w	r0, r6, r3
 8006a4e:	f7f9 fd61 	bl	8000514 <__aeabi_ui2d>
 8006a52:	2201      	movs	r2, #1
 8006a54:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006a58:	3d01      	subs	r5, #1
 8006a5a:	920e      	str	r2, [sp, #56]	; 0x38
 8006a5c:	e76f      	b.n	800693e <_dtoa_r+0x126>
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e7b3      	b.n	80069ca <_dtoa_r+0x1b2>
 8006a62:	900c      	str	r0, [sp, #48]	; 0x30
 8006a64:	e7b2      	b.n	80069cc <_dtoa_r+0x1b4>
 8006a66:	9b05      	ldr	r3, [sp, #20]
 8006a68:	eba3 030b 	sub.w	r3, r3, fp
 8006a6c:	9305      	str	r3, [sp, #20]
 8006a6e:	f1cb 0300 	rsb	r3, fp, #0
 8006a72:	9308      	str	r3, [sp, #32]
 8006a74:	2300      	movs	r3, #0
 8006a76:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a78:	e7bf      	b.n	80069fa <_dtoa_r+0x1e2>
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	dc52      	bgt.n	8006b2a <_dtoa_r+0x312>
 8006a84:	2301      	movs	r3, #1
 8006a86:	9301      	str	r3, [sp, #4]
 8006a88:	9304      	str	r3, [sp, #16]
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	920a      	str	r2, [sp, #40]	; 0x28
 8006a8e:	e00b      	b.n	8006aa8 <_dtoa_r+0x290>
 8006a90:	2301      	movs	r3, #1
 8006a92:	e7f3      	b.n	8006a7c <_dtoa_r+0x264>
 8006a94:	2300      	movs	r3, #0
 8006a96:	9309      	str	r3, [sp, #36]	; 0x24
 8006a98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a9a:	445b      	add	r3, fp
 8006a9c:	9301      	str	r3, [sp, #4]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	9304      	str	r3, [sp, #16]
 8006aa4:	bfb8      	it	lt
 8006aa6:	2301      	movlt	r3, #1
 8006aa8:	69e0      	ldr	r0, [r4, #28]
 8006aaa:	2100      	movs	r1, #0
 8006aac:	2204      	movs	r2, #4
 8006aae:	f102 0614 	add.w	r6, r2, #20
 8006ab2:	429e      	cmp	r6, r3
 8006ab4:	d93d      	bls.n	8006b32 <_dtoa_r+0x31a>
 8006ab6:	6041      	str	r1, [r0, #4]
 8006ab8:	4620      	mov	r0, r4
 8006aba:	f000 fd9f 	bl	80075fc <_Balloc>
 8006abe:	9000      	str	r0, [sp, #0]
 8006ac0:	2800      	cmp	r0, #0
 8006ac2:	d139      	bne.n	8006b38 <_dtoa_r+0x320>
 8006ac4:	4b16      	ldr	r3, [pc, #88]	; (8006b20 <_dtoa_r+0x308>)
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	f240 11af 	movw	r1, #431	; 0x1af
 8006acc:	e6bd      	b.n	800684a <_dtoa_r+0x32>
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e7e1      	b.n	8006a96 <_dtoa_r+0x27e>
 8006ad2:	2501      	movs	r5, #1
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	9307      	str	r3, [sp, #28]
 8006ad8:	9509      	str	r5, [sp, #36]	; 0x24
 8006ada:	f04f 33ff 	mov.w	r3, #4294967295
 8006ade:	9301      	str	r3, [sp, #4]
 8006ae0:	9304      	str	r3, [sp, #16]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	2312      	movs	r3, #18
 8006ae6:	e7d1      	b.n	8006a8c <_dtoa_r+0x274>
 8006ae8:	636f4361 	.word	0x636f4361
 8006aec:	3fd287a7 	.word	0x3fd287a7
 8006af0:	8b60c8b3 	.word	0x8b60c8b3
 8006af4:	3fc68a28 	.word	0x3fc68a28
 8006af8:	509f79fb 	.word	0x509f79fb
 8006afc:	3fd34413 	.word	0x3fd34413
 8006b00:	080091d2 	.word	0x080091d2
 8006b04:	080091e9 	.word	0x080091e9
 8006b08:	7ff00000 	.word	0x7ff00000
 8006b0c:	080091ce 	.word	0x080091ce
 8006b10:	080091c5 	.word	0x080091c5
 8006b14:	080091a2 	.word	0x080091a2
 8006b18:	3ff80000 	.word	0x3ff80000
 8006b1c:	080092d8 	.word	0x080092d8
 8006b20:	08009241 	.word	0x08009241
 8006b24:	2301      	movs	r3, #1
 8006b26:	9309      	str	r3, [sp, #36]	; 0x24
 8006b28:	e7d7      	b.n	8006ada <_dtoa_r+0x2c2>
 8006b2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b2c:	9301      	str	r3, [sp, #4]
 8006b2e:	9304      	str	r3, [sp, #16]
 8006b30:	e7ba      	b.n	8006aa8 <_dtoa_r+0x290>
 8006b32:	3101      	adds	r1, #1
 8006b34:	0052      	lsls	r2, r2, #1
 8006b36:	e7ba      	b.n	8006aae <_dtoa_r+0x296>
 8006b38:	69e3      	ldr	r3, [r4, #28]
 8006b3a:	9a00      	ldr	r2, [sp, #0]
 8006b3c:	601a      	str	r2, [r3, #0]
 8006b3e:	9b04      	ldr	r3, [sp, #16]
 8006b40:	2b0e      	cmp	r3, #14
 8006b42:	f200 80a8 	bhi.w	8006c96 <_dtoa_r+0x47e>
 8006b46:	2d00      	cmp	r5, #0
 8006b48:	f000 80a5 	beq.w	8006c96 <_dtoa_r+0x47e>
 8006b4c:	f1bb 0f00 	cmp.w	fp, #0
 8006b50:	dd38      	ble.n	8006bc4 <_dtoa_r+0x3ac>
 8006b52:	4bc0      	ldr	r3, [pc, #768]	; (8006e54 <_dtoa_r+0x63c>)
 8006b54:	f00b 020f 	and.w	r2, fp, #15
 8006b58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b5c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006b60:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006b64:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006b68:	d019      	beq.n	8006b9e <_dtoa_r+0x386>
 8006b6a:	4bbb      	ldr	r3, [pc, #748]	; (8006e58 <_dtoa_r+0x640>)
 8006b6c:	ec51 0b18 	vmov	r0, r1, d8
 8006b70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006b74:	f7f9 fe72 	bl	800085c <__aeabi_ddiv>
 8006b78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b7c:	f008 080f 	and.w	r8, r8, #15
 8006b80:	2503      	movs	r5, #3
 8006b82:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006e58 <_dtoa_r+0x640>
 8006b86:	f1b8 0f00 	cmp.w	r8, #0
 8006b8a:	d10a      	bne.n	8006ba2 <_dtoa_r+0x38a>
 8006b8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b90:	4632      	mov	r2, r6
 8006b92:	463b      	mov	r3, r7
 8006b94:	f7f9 fe62 	bl	800085c <__aeabi_ddiv>
 8006b98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b9c:	e02b      	b.n	8006bf6 <_dtoa_r+0x3de>
 8006b9e:	2502      	movs	r5, #2
 8006ba0:	e7ef      	b.n	8006b82 <_dtoa_r+0x36a>
 8006ba2:	f018 0f01 	tst.w	r8, #1
 8006ba6:	d008      	beq.n	8006bba <_dtoa_r+0x3a2>
 8006ba8:	4630      	mov	r0, r6
 8006baa:	4639      	mov	r1, r7
 8006bac:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006bb0:	f7f9 fd2a 	bl	8000608 <__aeabi_dmul>
 8006bb4:	3501      	adds	r5, #1
 8006bb6:	4606      	mov	r6, r0
 8006bb8:	460f      	mov	r7, r1
 8006bba:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006bbe:	f109 0908 	add.w	r9, r9, #8
 8006bc2:	e7e0      	b.n	8006b86 <_dtoa_r+0x36e>
 8006bc4:	f000 809f 	beq.w	8006d06 <_dtoa_r+0x4ee>
 8006bc8:	f1cb 0600 	rsb	r6, fp, #0
 8006bcc:	4ba1      	ldr	r3, [pc, #644]	; (8006e54 <_dtoa_r+0x63c>)
 8006bce:	4fa2      	ldr	r7, [pc, #648]	; (8006e58 <_dtoa_r+0x640>)
 8006bd0:	f006 020f 	and.w	r2, r6, #15
 8006bd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bdc:	ec51 0b18 	vmov	r0, r1, d8
 8006be0:	f7f9 fd12 	bl	8000608 <__aeabi_dmul>
 8006be4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006be8:	1136      	asrs	r6, r6, #4
 8006bea:	2300      	movs	r3, #0
 8006bec:	2502      	movs	r5, #2
 8006bee:	2e00      	cmp	r6, #0
 8006bf0:	d17e      	bne.n	8006cf0 <_dtoa_r+0x4d8>
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1d0      	bne.n	8006b98 <_dtoa_r+0x380>
 8006bf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bf8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f000 8084 	beq.w	8006d0a <_dtoa_r+0x4f2>
 8006c02:	4b96      	ldr	r3, [pc, #600]	; (8006e5c <_dtoa_r+0x644>)
 8006c04:	2200      	movs	r2, #0
 8006c06:	4640      	mov	r0, r8
 8006c08:	4649      	mov	r1, r9
 8006c0a:	f7f9 ff6f 	bl	8000aec <__aeabi_dcmplt>
 8006c0e:	2800      	cmp	r0, #0
 8006c10:	d07b      	beq.n	8006d0a <_dtoa_r+0x4f2>
 8006c12:	9b04      	ldr	r3, [sp, #16]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d078      	beq.n	8006d0a <_dtoa_r+0x4f2>
 8006c18:	9b01      	ldr	r3, [sp, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	dd39      	ble.n	8006c92 <_dtoa_r+0x47a>
 8006c1e:	4b90      	ldr	r3, [pc, #576]	; (8006e60 <_dtoa_r+0x648>)
 8006c20:	2200      	movs	r2, #0
 8006c22:	4640      	mov	r0, r8
 8006c24:	4649      	mov	r1, r9
 8006c26:	f7f9 fcef 	bl	8000608 <__aeabi_dmul>
 8006c2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c2e:	9e01      	ldr	r6, [sp, #4]
 8006c30:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006c34:	3501      	adds	r5, #1
 8006c36:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006c3a:	4628      	mov	r0, r5
 8006c3c:	f7f9 fc7a 	bl	8000534 <__aeabi_i2d>
 8006c40:	4642      	mov	r2, r8
 8006c42:	464b      	mov	r3, r9
 8006c44:	f7f9 fce0 	bl	8000608 <__aeabi_dmul>
 8006c48:	4b86      	ldr	r3, [pc, #536]	; (8006e64 <_dtoa_r+0x64c>)
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f7f9 fb26 	bl	800029c <__adddf3>
 8006c50:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006c54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c58:	9303      	str	r3, [sp, #12]
 8006c5a:	2e00      	cmp	r6, #0
 8006c5c:	d158      	bne.n	8006d10 <_dtoa_r+0x4f8>
 8006c5e:	4b82      	ldr	r3, [pc, #520]	; (8006e68 <_dtoa_r+0x650>)
 8006c60:	2200      	movs	r2, #0
 8006c62:	4640      	mov	r0, r8
 8006c64:	4649      	mov	r1, r9
 8006c66:	f7f9 fb17 	bl	8000298 <__aeabi_dsub>
 8006c6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c6e:	4680      	mov	r8, r0
 8006c70:	4689      	mov	r9, r1
 8006c72:	f7f9 ff59 	bl	8000b28 <__aeabi_dcmpgt>
 8006c76:	2800      	cmp	r0, #0
 8006c78:	f040 8296 	bne.w	80071a8 <_dtoa_r+0x990>
 8006c7c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006c80:	4640      	mov	r0, r8
 8006c82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c86:	4649      	mov	r1, r9
 8006c88:	f7f9 ff30 	bl	8000aec <__aeabi_dcmplt>
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	f040 8289 	bne.w	80071a4 <_dtoa_r+0x98c>
 8006c92:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006c96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f2c0 814e 	blt.w	8006f3a <_dtoa_r+0x722>
 8006c9e:	f1bb 0f0e 	cmp.w	fp, #14
 8006ca2:	f300 814a 	bgt.w	8006f3a <_dtoa_r+0x722>
 8006ca6:	4b6b      	ldr	r3, [pc, #428]	; (8006e54 <_dtoa_r+0x63c>)
 8006ca8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006cac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006cb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	f280 80dc 	bge.w	8006e70 <_dtoa_r+0x658>
 8006cb8:	9b04      	ldr	r3, [sp, #16]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f300 80d8 	bgt.w	8006e70 <_dtoa_r+0x658>
 8006cc0:	f040 826f 	bne.w	80071a2 <_dtoa_r+0x98a>
 8006cc4:	4b68      	ldr	r3, [pc, #416]	; (8006e68 <_dtoa_r+0x650>)
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	4640      	mov	r0, r8
 8006cca:	4649      	mov	r1, r9
 8006ccc:	f7f9 fc9c 	bl	8000608 <__aeabi_dmul>
 8006cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cd4:	f7f9 ff1e 	bl	8000b14 <__aeabi_dcmpge>
 8006cd8:	9e04      	ldr	r6, [sp, #16]
 8006cda:	4637      	mov	r7, r6
 8006cdc:	2800      	cmp	r0, #0
 8006cde:	f040 8245 	bne.w	800716c <_dtoa_r+0x954>
 8006ce2:	9d00      	ldr	r5, [sp, #0]
 8006ce4:	2331      	movs	r3, #49	; 0x31
 8006ce6:	f805 3b01 	strb.w	r3, [r5], #1
 8006cea:	f10b 0b01 	add.w	fp, fp, #1
 8006cee:	e241      	b.n	8007174 <_dtoa_r+0x95c>
 8006cf0:	07f2      	lsls	r2, r6, #31
 8006cf2:	d505      	bpl.n	8006d00 <_dtoa_r+0x4e8>
 8006cf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cf8:	f7f9 fc86 	bl	8000608 <__aeabi_dmul>
 8006cfc:	3501      	adds	r5, #1
 8006cfe:	2301      	movs	r3, #1
 8006d00:	1076      	asrs	r6, r6, #1
 8006d02:	3708      	adds	r7, #8
 8006d04:	e773      	b.n	8006bee <_dtoa_r+0x3d6>
 8006d06:	2502      	movs	r5, #2
 8006d08:	e775      	b.n	8006bf6 <_dtoa_r+0x3de>
 8006d0a:	9e04      	ldr	r6, [sp, #16]
 8006d0c:	465f      	mov	r7, fp
 8006d0e:	e792      	b.n	8006c36 <_dtoa_r+0x41e>
 8006d10:	9900      	ldr	r1, [sp, #0]
 8006d12:	4b50      	ldr	r3, [pc, #320]	; (8006e54 <_dtoa_r+0x63c>)
 8006d14:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006d18:	4431      	add	r1, r6
 8006d1a:	9102      	str	r1, [sp, #8]
 8006d1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d1e:	eeb0 9a47 	vmov.f32	s18, s14
 8006d22:	eef0 9a67 	vmov.f32	s19, s15
 8006d26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006d2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006d2e:	2900      	cmp	r1, #0
 8006d30:	d044      	beq.n	8006dbc <_dtoa_r+0x5a4>
 8006d32:	494e      	ldr	r1, [pc, #312]	; (8006e6c <_dtoa_r+0x654>)
 8006d34:	2000      	movs	r0, #0
 8006d36:	f7f9 fd91 	bl	800085c <__aeabi_ddiv>
 8006d3a:	ec53 2b19 	vmov	r2, r3, d9
 8006d3e:	f7f9 faab 	bl	8000298 <__aeabi_dsub>
 8006d42:	9d00      	ldr	r5, [sp, #0]
 8006d44:	ec41 0b19 	vmov	d9, r0, r1
 8006d48:	4649      	mov	r1, r9
 8006d4a:	4640      	mov	r0, r8
 8006d4c:	f7f9 ff0c 	bl	8000b68 <__aeabi_d2iz>
 8006d50:	4606      	mov	r6, r0
 8006d52:	f7f9 fbef 	bl	8000534 <__aeabi_i2d>
 8006d56:	4602      	mov	r2, r0
 8006d58:	460b      	mov	r3, r1
 8006d5a:	4640      	mov	r0, r8
 8006d5c:	4649      	mov	r1, r9
 8006d5e:	f7f9 fa9b 	bl	8000298 <__aeabi_dsub>
 8006d62:	3630      	adds	r6, #48	; 0x30
 8006d64:	f805 6b01 	strb.w	r6, [r5], #1
 8006d68:	ec53 2b19 	vmov	r2, r3, d9
 8006d6c:	4680      	mov	r8, r0
 8006d6e:	4689      	mov	r9, r1
 8006d70:	f7f9 febc 	bl	8000aec <__aeabi_dcmplt>
 8006d74:	2800      	cmp	r0, #0
 8006d76:	d164      	bne.n	8006e42 <_dtoa_r+0x62a>
 8006d78:	4642      	mov	r2, r8
 8006d7a:	464b      	mov	r3, r9
 8006d7c:	4937      	ldr	r1, [pc, #220]	; (8006e5c <_dtoa_r+0x644>)
 8006d7e:	2000      	movs	r0, #0
 8006d80:	f7f9 fa8a 	bl	8000298 <__aeabi_dsub>
 8006d84:	ec53 2b19 	vmov	r2, r3, d9
 8006d88:	f7f9 feb0 	bl	8000aec <__aeabi_dcmplt>
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	f040 80b6 	bne.w	8006efe <_dtoa_r+0x6e6>
 8006d92:	9b02      	ldr	r3, [sp, #8]
 8006d94:	429d      	cmp	r5, r3
 8006d96:	f43f af7c 	beq.w	8006c92 <_dtoa_r+0x47a>
 8006d9a:	4b31      	ldr	r3, [pc, #196]	; (8006e60 <_dtoa_r+0x648>)
 8006d9c:	ec51 0b19 	vmov	r0, r1, d9
 8006da0:	2200      	movs	r2, #0
 8006da2:	f7f9 fc31 	bl	8000608 <__aeabi_dmul>
 8006da6:	4b2e      	ldr	r3, [pc, #184]	; (8006e60 <_dtoa_r+0x648>)
 8006da8:	ec41 0b19 	vmov	d9, r0, r1
 8006dac:	2200      	movs	r2, #0
 8006dae:	4640      	mov	r0, r8
 8006db0:	4649      	mov	r1, r9
 8006db2:	f7f9 fc29 	bl	8000608 <__aeabi_dmul>
 8006db6:	4680      	mov	r8, r0
 8006db8:	4689      	mov	r9, r1
 8006dba:	e7c5      	b.n	8006d48 <_dtoa_r+0x530>
 8006dbc:	ec51 0b17 	vmov	r0, r1, d7
 8006dc0:	f7f9 fc22 	bl	8000608 <__aeabi_dmul>
 8006dc4:	9b02      	ldr	r3, [sp, #8]
 8006dc6:	9d00      	ldr	r5, [sp, #0]
 8006dc8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006dca:	ec41 0b19 	vmov	d9, r0, r1
 8006dce:	4649      	mov	r1, r9
 8006dd0:	4640      	mov	r0, r8
 8006dd2:	f7f9 fec9 	bl	8000b68 <__aeabi_d2iz>
 8006dd6:	4606      	mov	r6, r0
 8006dd8:	f7f9 fbac 	bl	8000534 <__aeabi_i2d>
 8006ddc:	3630      	adds	r6, #48	; 0x30
 8006dde:	4602      	mov	r2, r0
 8006de0:	460b      	mov	r3, r1
 8006de2:	4640      	mov	r0, r8
 8006de4:	4649      	mov	r1, r9
 8006de6:	f7f9 fa57 	bl	8000298 <__aeabi_dsub>
 8006dea:	f805 6b01 	strb.w	r6, [r5], #1
 8006dee:	9b02      	ldr	r3, [sp, #8]
 8006df0:	429d      	cmp	r5, r3
 8006df2:	4680      	mov	r8, r0
 8006df4:	4689      	mov	r9, r1
 8006df6:	f04f 0200 	mov.w	r2, #0
 8006dfa:	d124      	bne.n	8006e46 <_dtoa_r+0x62e>
 8006dfc:	4b1b      	ldr	r3, [pc, #108]	; (8006e6c <_dtoa_r+0x654>)
 8006dfe:	ec51 0b19 	vmov	r0, r1, d9
 8006e02:	f7f9 fa4b 	bl	800029c <__adddf3>
 8006e06:	4602      	mov	r2, r0
 8006e08:	460b      	mov	r3, r1
 8006e0a:	4640      	mov	r0, r8
 8006e0c:	4649      	mov	r1, r9
 8006e0e:	f7f9 fe8b 	bl	8000b28 <__aeabi_dcmpgt>
 8006e12:	2800      	cmp	r0, #0
 8006e14:	d173      	bne.n	8006efe <_dtoa_r+0x6e6>
 8006e16:	ec53 2b19 	vmov	r2, r3, d9
 8006e1a:	4914      	ldr	r1, [pc, #80]	; (8006e6c <_dtoa_r+0x654>)
 8006e1c:	2000      	movs	r0, #0
 8006e1e:	f7f9 fa3b 	bl	8000298 <__aeabi_dsub>
 8006e22:	4602      	mov	r2, r0
 8006e24:	460b      	mov	r3, r1
 8006e26:	4640      	mov	r0, r8
 8006e28:	4649      	mov	r1, r9
 8006e2a:	f7f9 fe5f 	bl	8000aec <__aeabi_dcmplt>
 8006e2e:	2800      	cmp	r0, #0
 8006e30:	f43f af2f 	beq.w	8006c92 <_dtoa_r+0x47a>
 8006e34:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006e36:	1e6b      	subs	r3, r5, #1
 8006e38:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006e3e:	2b30      	cmp	r3, #48	; 0x30
 8006e40:	d0f8      	beq.n	8006e34 <_dtoa_r+0x61c>
 8006e42:	46bb      	mov	fp, r7
 8006e44:	e04a      	b.n	8006edc <_dtoa_r+0x6c4>
 8006e46:	4b06      	ldr	r3, [pc, #24]	; (8006e60 <_dtoa_r+0x648>)
 8006e48:	f7f9 fbde 	bl	8000608 <__aeabi_dmul>
 8006e4c:	4680      	mov	r8, r0
 8006e4e:	4689      	mov	r9, r1
 8006e50:	e7bd      	b.n	8006dce <_dtoa_r+0x5b6>
 8006e52:	bf00      	nop
 8006e54:	080092d8 	.word	0x080092d8
 8006e58:	080092b0 	.word	0x080092b0
 8006e5c:	3ff00000 	.word	0x3ff00000
 8006e60:	40240000 	.word	0x40240000
 8006e64:	401c0000 	.word	0x401c0000
 8006e68:	40140000 	.word	0x40140000
 8006e6c:	3fe00000 	.word	0x3fe00000
 8006e70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006e74:	9d00      	ldr	r5, [sp, #0]
 8006e76:	4642      	mov	r2, r8
 8006e78:	464b      	mov	r3, r9
 8006e7a:	4630      	mov	r0, r6
 8006e7c:	4639      	mov	r1, r7
 8006e7e:	f7f9 fced 	bl	800085c <__aeabi_ddiv>
 8006e82:	f7f9 fe71 	bl	8000b68 <__aeabi_d2iz>
 8006e86:	9001      	str	r0, [sp, #4]
 8006e88:	f7f9 fb54 	bl	8000534 <__aeabi_i2d>
 8006e8c:	4642      	mov	r2, r8
 8006e8e:	464b      	mov	r3, r9
 8006e90:	f7f9 fbba 	bl	8000608 <__aeabi_dmul>
 8006e94:	4602      	mov	r2, r0
 8006e96:	460b      	mov	r3, r1
 8006e98:	4630      	mov	r0, r6
 8006e9a:	4639      	mov	r1, r7
 8006e9c:	f7f9 f9fc 	bl	8000298 <__aeabi_dsub>
 8006ea0:	9e01      	ldr	r6, [sp, #4]
 8006ea2:	9f04      	ldr	r7, [sp, #16]
 8006ea4:	3630      	adds	r6, #48	; 0x30
 8006ea6:	f805 6b01 	strb.w	r6, [r5], #1
 8006eaa:	9e00      	ldr	r6, [sp, #0]
 8006eac:	1bae      	subs	r6, r5, r6
 8006eae:	42b7      	cmp	r7, r6
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	d134      	bne.n	8006f20 <_dtoa_r+0x708>
 8006eb6:	f7f9 f9f1 	bl	800029c <__adddf3>
 8006eba:	4642      	mov	r2, r8
 8006ebc:	464b      	mov	r3, r9
 8006ebe:	4606      	mov	r6, r0
 8006ec0:	460f      	mov	r7, r1
 8006ec2:	f7f9 fe31 	bl	8000b28 <__aeabi_dcmpgt>
 8006ec6:	b9c8      	cbnz	r0, 8006efc <_dtoa_r+0x6e4>
 8006ec8:	4642      	mov	r2, r8
 8006eca:	464b      	mov	r3, r9
 8006ecc:	4630      	mov	r0, r6
 8006ece:	4639      	mov	r1, r7
 8006ed0:	f7f9 fe02 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ed4:	b110      	cbz	r0, 8006edc <_dtoa_r+0x6c4>
 8006ed6:	9b01      	ldr	r3, [sp, #4]
 8006ed8:	07db      	lsls	r3, r3, #31
 8006eda:	d40f      	bmi.n	8006efc <_dtoa_r+0x6e4>
 8006edc:	4651      	mov	r1, sl
 8006ede:	4620      	mov	r0, r4
 8006ee0:	f000 fbcc 	bl	800767c <_Bfree>
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ee8:	702b      	strb	r3, [r5, #0]
 8006eea:	f10b 0301 	add.w	r3, fp, #1
 8006eee:	6013      	str	r3, [r2, #0]
 8006ef0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f43f ace2 	beq.w	80068bc <_dtoa_r+0xa4>
 8006ef8:	601d      	str	r5, [r3, #0]
 8006efa:	e4df      	b.n	80068bc <_dtoa_r+0xa4>
 8006efc:	465f      	mov	r7, fp
 8006efe:	462b      	mov	r3, r5
 8006f00:	461d      	mov	r5, r3
 8006f02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f06:	2a39      	cmp	r2, #57	; 0x39
 8006f08:	d106      	bne.n	8006f18 <_dtoa_r+0x700>
 8006f0a:	9a00      	ldr	r2, [sp, #0]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d1f7      	bne.n	8006f00 <_dtoa_r+0x6e8>
 8006f10:	9900      	ldr	r1, [sp, #0]
 8006f12:	2230      	movs	r2, #48	; 0x30
 8006f14:	3701      	adds	r7, #1
 8006f16:	700a      	strb	r2, [r1, #0]
 8006f18:	781a      	ldrb	r2, [r3, #0]
 8006f1a:	3201      	adds	r2, #1
 8006f1c:	701a      	strb	r2, [r3, #0]
 8006f1e:	e790      	b.n	8006e42 <_dtoa_r+0x62a>
 8006f20:	4ba3      	ldr	r3, [pc, #652]	; (80071b0 <_dtoa_r+0x998>)
 8006f22:	2200      	movs	r2, #0
 8006f24:	f7f9 fb70 	bl	8000608 <__aeabi_dmul>
 8006f28:	2200      	movs	r2, #0
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	4606      	mov	r6, r0
 8006f2e:	460f      	mov	r7, r1
 8006f30:	f7f9 fdd2 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f34:	2800      	cmp	r0, #0
 8006f36:	d09e      	beq.n	8006e76 <_dtoa_r+0x65e>
 8006f38:	e7d0      	b.n	8006edc <_dtoa_r+0x6c4>
 8006f3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f3c:	2a00      	cmp	r2, #0
 8006f3e:	f000 80ca 	beq.w	80070d6 <_dtoa_r+0x8be>
 8006f42:	9a07      	ldr	r2, [sp, #28]
 8006f44:	2a01      	cmp	r2, #1
 8006f46:	f300 80ad 	bgt.w	80070a4 <_dtoa_r+0x88c>
 8006f4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f4c:	2a00      	cmp	r2, #0
 8006f4e:	f000 80a5 	beq.w	800709c <_dtoa_r+0x884>
 8006f52:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006f56:	9e08      	ldr	r6, [sp, #32]
 8006f58:	9d05      	ldr	r5, [sp, #20]
 8006f5a:	9a05      	ldr	r2, [sp, #20]
 8006f5c:	441a      	add	r2, r3
 8006f5e:	9205      	str	r2, [sp, #20]
 8006f60:	9a06      	ldr	r2, [sp, #24]
 8006f62:	2101      	movs	r1, #1
 8006f64:	441a      	add	r2, r3
 8006f66:	4620      	mov	r0, r4
 8006f68:	9206      	str	r2, [sp, #24]
 8006f6a:	f000 fc3d 	bl	80077e8 <__i2b>
 8006f6e:	4607      	mov	r7, r0
 8006f70:	b165      	cbz	r5, 8006f8c <_dtoa_r+0x774>
 8006f72:	9b06      	ldr	r3, [sp, #24]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	dd09      	ble.n	8006f8c <_dtoa_r+0x774>
 8006f78:	42ab      	cmp	r3, r5
 8006f7a:	9a05      	ldr	r2, [sp, #20]
 8006f7c:	bfa8      	it	ge
 8006f7e:	462b      	movge	r3, r5
 8006f80:	1ad2      	subs	r2, r2, r3
 8006f82:	9205      	str	r2, [sp, #20]
 8006f84:	9a06      	ldr	r2, [sp, #24]
 8006f86:	1aed      	subs	r5, r5, r3
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	9306      	str	r3, [sp, #24]
 8006f8c:	9b08      	ldr	r3, [sp, #32]
 8006f8e:	b1f3      	cbz	r3, 8006fce <_dtoa_r+0x7b6>
 8006f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f000 80a3 	beq.w	80070de <_dtoa_r+0x8c6>
 8006f98:	2e00      	cmp	r6, #0
 8006f9a:	dd10      	ble.n	8006fbe <_dtoa_r+0x7a6>
 8006f9c:	4639      	mov	r1, r7
 8006f9e:	4632      	mov	r2, r6
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	f000 fce1 	bl	8007968 <__pow5mult>
 8006fa6:	4652      	mov	r2, sl
 8006fa8:	4601      	mov	r1, r0
 8006faa:	4607      	mov	r7, r0
 8006fac:	4620      	mov	r0, r4
 8006fae:	f000 fc31 	bl	8007814 <__multiply>
 8006fb2:	4651      	mov	r1, sl
 8006fb4:	4680      	mov	r8, r0
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	f000 fb60 	bl	800767c <_Bfree>
 8006fbc:	46c2      	mov	sl, r8
 8006fbe:	9b08      	ldr	r3, [sp, #32]
 8006fc0:	1b9a      	subs	r2, r3, r6
 8006fc2:	d004      	beq.n	8006fce <_dtoa_r+0x7b6>
 8006fc4:	4651      	mov	r1, sl
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	f000 fcce 	bl	8007968 <__pow5mult>
 8006fcc:	4682      	mov	sl, r0
 8006fce:	2101      	movs	r1, #1
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	f000 fc09 	bl	80077e8 <__i2b>
 8006fd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	4606      	mov	r6, r0
 8006fdc:	f340 8081 	ble.w	80070e2 <_dtoa_r+0x8ca>
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	4601      	mov	r1, r0
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	f000 fcbf 	bl	8007968 <__pow5mult>
 8006fea:	9b07      	ldr	r3, [sp, #28]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	4606      	mov	r6, r0
 8006ff0:	dd7a      	ble.n	80070e8 <_dtoa_r+0x8d0>
 8006ff2:	f04f 0800 	mov.w	r8, #0
 8006ff6:	6933      	ldr	r3, [r6, #16]
 8006ff8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006ffc:	6918      	ldr	r0, [r3, #16]
 8006ffe:	f000 fba5 	bl	800774c <__hi0bits>
 8007002:	f1c0 0020 	rsb	r0, r0, #32
 8007006:	9b06      	ldr	r3, [sp, #24]
 8007008:	4418      	add	r0, r3
 800700a:	f010 001f 	ands.w	r0, r0, #31
 800700e:	f000 8094 	beq.w	800713a <_dtoa_r+0x922>
 8007012:	f1c0 0320 	rsb	r3, r0, #32
 8007016:	2b04      	cmp	r3, #4
 8007018:	f340 8085 	ble.w	8007126 <_dtoa_r+0x90e>
 800701c:	9b05      	ldr	r3, [sp, #20]
 800701e:	f1c0 001c 	rsb	r0, r0, #28
 8007022:	4403      	add	r3, r0
 8007024:	9305      	str	r3, [sp, #20]
 8007026:	9b06      	ldr	r3, [sp, #24]
 8007028:	4403      	add	r3, r0
 800702a:	4405      	add	r5, r0
 800702c:	9306      	str	r3, [sp, #24]
 800702e:	9b05      	ldr	r3, [sp, #20]
 8007030:	2b00      	cmp	r3, #0
 8007032:	dd05      	ble.n	8007040 <_dtoa_r+0x828>
 8007034:	4651      	mov	r1, sl
 8007036:	461a      	mov	r2, r3
 8007038:	4620      	mov	r0, r4
 800703a:	f000 fcef 	bl	8007a1c <__lshift>
 800703e:	4682      	mov	sl, r0
 8007040:	9b06      	ldr	r3, [sp, #24]
 8007042:	2b00      	cmp	r3, #0
 8007044:	dd05      	ble.n	8007052 <_dtoa_r+0x83a>
 8007046:	4631      	mov	r1, r6
 8007048:	461a      	mov	r2, r3
 800704a:	4620      	mov	r0, r4
 800704c:	f000 fce6 	bl	8007a1c <__lshift>
 8007050:	4606      	mov	r6, r0
 8007052:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007054:	2b00      	cmp	r3, #0
 8007056:	d072      	beq.n	800713e <_dtoa_r+0x926>
 8007058:	4631      	mov	r1, r6
 800705a:	4650      	mov	r0, sl
 800705c:	f000 fd4a 	bl	8007af4 <__mcmp>
 8007060:	2800      	cmp	r0, #0
 8007062:	da6c      	bge.n	800713e <_dtoa_r+0x926>
 8007064:	2300      	movs	r3, #0
 8007066:	4651      	mov	r1, sl
 8007068:	220a      	movs	r2, #10
 800706a:	4620      	mov	r0, r4
 800706c:	f000 fb28 	bl	80076c0 <__multadd>
 8007070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007072:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007076:	4682      	mov	sl, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	f000 81b0 	beq.w	80073de <_dtoa_r+0xbc6>
 800707e:	2300      	movs	r3, #0
 8007080:	4639      	mov	r1, r7
 8007082:	220a      	movs	r2, #10
 8007084:	4620      	mov	r0, r4
 8007086:	f000 fb1b 	bl	80076c0 <__multadd>
 800708a:	9b01      	ldr	r3, [sp, #4]
 800708c:	2b00      	cmp	r3, #0
 800708e:	4607      	mov	r7, r0
 8007090:	f300 8096 	bgt.w	80071c0 <_dtoa_r+0x9a8>
 8007094:	9b07      	ldr	r3, [sp, #28]
 8007096:	2b02      	cmp	r3, #2
 8007098:	dc59      	bgt.n	800714e <_dtoa_r+0x936>
 800709a:	e091      	b.n	80071c0 <_dtoa_r+0x9a8>
 800709c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800709e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80070a2:	e758      	b.n	8006f56 <_dtoa_r+0x73e>
 80070a4:	9b04      	ldr	r3, [sp, #16]
 80070a6:	1e5e      	subs	r6, r3, #1
 80070a8:	9b08      	ldr	r3, [sp, #32]
 80070aa:	42b3      	cmp	r3, r6
 80070ac:	bfbf      	itttt	lt
 80070ae:	9b08      	ldrlt	r3, [sp, #32]
 80070b0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80070b2:	9608      	strlt	r6, [sp, #32]
 80070b4:	1af3      	sublt	r3, r6, r3
 80070b6:	bfb4      	ite	lt
 80070b8:	18d2      	addlt	r2, r2, r3
 80070ba:	1b9e      	subge	r6, r3, r6
 80070bc:	9b04      	ldr	r3, [sp, #16]
 80070be:	bfbc      	itt	lt
 80070c0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80070c2:	2600      	movlt	r6, #0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	bfb7      	itett	lt
 80070c8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80070cc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80070d0:	1a9d      	sublt	r5, r3, r2
 80070d2:	2300      	movlt	r3, #0
 80070d4:	e741      	b.n	8006f5a <_dtoa_r+0x742>
 80070d6:	9e08      	ldr	r6, [sp, #32]
 80070d8:	9d05      	ldr	r5, [sp, #20]
 80070da:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80070dc:	e748      	b.n	8006f70 <_dtoa_r+0x758>
 80070de:	9a08      	ldr	r2, [sp, #32]
 80070e0:	e770      	b.n	8006fc4 <_dtoa_r+0x7ac>
 80070e2:	9b07      	ldr	r3, [sp, #28]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	dc19      	bgt.n	800711c <_dtoa_r+0x904>
 80070e8:	9b02      	ldr	r3, [sp, #8]
 80070ea:	b9bb      	cbnz	r3, 800711c <_dtoa_r+0x904>
 80070ec:	9b03      	ldr	r3, [sp, #12]
 80070ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070f2:	b99b      	cbnz	r3, 800711c <_dtoa_r+0x904>
 80070f4:	9b03      	ldr	r3, [sp, #12]
 80070f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070fa:	0d1b      	lsrs	r3, r3, #20
 80070fc:	051b      	lsls	r3, r3, #20
 80070fe:	b183      	cbz	r3, 8007122 <_dtoa_r+0x90a>
 8007100:	9b05      	ldr	r3, [sp, #20]
 8007102:	3301      	adds	r3, #1
 8007104:	9305      	str	r3, [sp, #20]
 8007106:	9b06      	ldr	r3, [sp, #24]
 8007108:	3301      	adds	r3, #1
 800710a:	9306      	str	r3, [sp, #24]
 800710c:	f04f 0801 	mov.w	r8, #1
 8007110:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007112:	2b00      	cmp	r3, #0
 8007114:	f47f af6f 	bne.w	8006ff6 <_dtoa_r+0x7de>
 8007118:	2001      	movs	r0, #1
 800711a:	e774      	b.n	8007006 <_dtoa_r+0x7ee>
 800711c:	f04f 0800 	mov.w	r8, #0
 8007120:	e7f6      	b.n	8007110 <_dtoa_r+0x8f8>
 8007122:	4698      	mov	r8, r3
 8007124:	e7f4      	b.n	8007110 <_dtoa_r+0x8f8>
 8007126:	d082      	beq.n	800702e <_dtoa_r+0x816>
 8007128:	9a05      	ldr	r2, [sp, #20]
 800712a:	331c      	adds	r3, #28
 800712c:	441a      	add	r2, r3
 800712e:	9205      	str	r2, [sp, #20]
 8007130:	9a06      	ldr	r2, [sp, #24]
 8007132:	441a      	add	r2, r3
 8007134:	441d      	add	r5, r3
 8007136:	9206      	str	r2, [sp, #24]
 8007138:	e779      	b.n	800702e <_dtoa_r+0x816>
 800713a:	4603      	mov	r3, r0
 800713c:	e7f4      	b.n	8007128 <_dtoa_r+0x910>
 800713e:	9b04      	ldr	r3, [sp, #16]
 8007140:	2b00      	cmp	r3, #0
 8007142:	dc37      	bgt.n	80071b4 <_dtoa_r+0x99c>
 8007144:	9b07      	ldr	r3, [sp, #28]
 8007146:	2b02      	cmp	r3, #2
 8007148:	dd34      	ble.n	80071b4 <_dtoa_r+0x99c>
 800714a:	9b04      	ldr	r3, [sp, #16]
 800714c:	9301      	str	r3, [sp, #4]
 800714e:	9b01      	ldr	r3, [sp, #4]
 8007150:	b963      	cbnz	r3, 800716c <_dtoa_r+0x954>
 8007152:	4631      	mov	r1, r6
 8007154:	2205      	movs	r2, #5
 8007156:	4620      	mov	r0, r4
 8007158:	f000 fab2 	bl	80076c0 <__multadd>
 800715c:	4601      	mov	r1, r0
 800715e:	4606      	mov	r6, r0
 8007160:	4650      	mov	r0, sl
 8007162:	f000 fcc7 	bl	8007af4 <__mcmp>
 8007166:	2800      	cmp	r0, #0
 8007168:	f73f adbb 	bgt.w	8006ce2 <_dtoa_r+0x4ca>
 800716c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800716e:	9d00      	ldr	r5, [sp, #0]
 8007170:	ea6f 0b03 	mvn.w	fp, r3
 8007174:	f04f 0800 	mov.w	r8, #0
 8007178:	4631      	mov	r1, r6
 800717a:	4620      	mov	r0, r4
 800717c:	f000 fa7e 	bl	800767c <_Bfree>
 8007180:	2f00      	cmp	r7, #0
 8007182:	f43f aeab 	beq.w	8006edc <_dtoa_r+0x6c4>
 8007186:	f1b8 0f00 	cmp.w	r8, #0
 800718a:	d005      	beq.n	8007198 <_dtoa_r+0x980>
 800718c:	45b8      	cmp	r8, r7
 800718e:	d003      	beq.n	8007198 <_dtoa_r+0x980>
 8007190:	4641      	mov	r1, r8
 8007192:	4620      	mov	r0, r4
 8007194:	f000 fa72 	bl	800767c <_Bfree>
 8007198:	4639      	mov	r1, r7
 800719a:	4620      	mov	r0, r4
 800719c:	f000 fa6e 	bl	800767c <_Bfree>
 80071a0:	e69c      	b.n	8006edc <_dtoa_r+0x6c4>
 80071a2:	2600      	movs	r6, #0
 80071a4:	4637      	mov	r7, r6
 80071a6:	e7e1      	b.n	800716c <_dtoa_r+0x954>
 80071a8:	46bb      	mov	fp, r7
 80071aa:	4637      	mov	r7, r6
 80071ac:	e599      	b.n	8006ce2 <_dtoa_r+0x4ca>
 80071ae:	bf00      	nop
 80071b0:	40240000 	.word	0x40240000
 80071b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	f000 80c8 	beq.w	800734c <_dtoa_r+0xb34>
 80071bc:	9b04      	ldr	r3, [sp, #16]
 80071be:	9301      	str	r3, [sp, #4]
 80071c0:	2d00      	cmp	r5, #0
 80071c2:	dd05      	ble.n	80071d0 <_dtoa_r+0x9b8>
 80071c4:	4639      	mov	r1, r7
 80071c6:	462a      	mov	r2, r5
 80071c8:	4620      	mov	r0, r4
 80071ca:	f000 fc27 	bl	8007a1c <__lshift>
 80071ce:	4607      	mov	r7, r0
 80071d0:	f1b8 0f00 	cmp.w	r8, #0
 80071d4:	d05b      	beq.n	800728e <_dtoa_r+0xa76>
 80071d6:	6879      	ldr	r1, [r7, #4]
 80071d8:	4620      	mov	r0, r4
 80071da:	f000 fa0f 	bl	80075fc <_Balloc>
 80071de:	4605      	mov	r5, r0
 80071e0:	b928      	cbnz	r0, 80071ee <_dtoa_r+0x9d6>
 80071e2:	4b83      	ldr	r3, [pc, #524]	; (80073f0 <_dtoa_r+0xbd8>)
 80071e4:	4602      	mov	r2, r0
 80071e6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80071ea:	f7ff bb2e 	b.w	800684a <_dtoa_r+0x32>
 80071ee:	693a      	ldr	r2, [r7, #16]
 80071f0:	3202      	adds	r2, #2
 80071f2:	0092      	lsls	r2, r2, #2
 80071f4:	f107 010c 	add.w	r1, r7, #12
 80071f8:	300c      	adds	r0, #12
 80071fa:	f7ff fa76 	bl	80066ea <memcpy>
 80071fe:	2201      	movs	r2, #1
 8007200:	4629      	mov	r1, r5
 8007202:	4620      	mov	r0, r4
 8007204:	f000 fc0a 	bl	8007a1c <__lshift>
 8007208:	9b00      	ldr	r3, [sp, #0]
 800720a:	3301      	adds	r3, #1
 800720c:	9304      	str	r3, [sp, #16]
 800720e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007212:	4413      	add	r3, r2
 8007214:	9308      	str	r3, [sp, #32]
 8007216:	9b02      	ldr	r3, [sp, #8]
 8007218:	f003 0301 	and.w	r3, r3, #1
 800721c:	46b8      	mov	r8, r7
 800721e:	9306      	str	r3, [sp, #24]
 8007220:	4607      	mov	r7, r0
 8007222:	9b04      	ldr	r3, [sp, #16]
 8007224:	4631      	mov	r1, r6
 8007226:	3b01      	subs	r3, #1
 8007228:	4650      	mov	r0, sl
 800722a:	9301      	str	r3, [sp, #4]
 800722c:	f7ff fa6b 	bl	8006706 <quorem>
 8007230:	4641      	mov	r1, r8
 8007232:	9002      	str	r0, [sp, #8]
 8007234:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007238:	4650      	mov	r0, sl
 800723a:	f000 fc5b 	bl	8007af4 <__mcmp>
 800723e:	463a      	mov	r2, r7
 8007240:	9005      	str	r0, [sp, #20]
 8007242:	4631      	mov	r1, r6
 8007244:	4620      	mov	r0, r4
 8007246:	f000 fc71 	bl	8007b2c <__mdiff>
 800724a:	68c2      	ldr	r2, [r0, #12]
 800724c:	4605      	mov	r5, r0
 800724e:	bb02      	cbnz	r2, 8007292 <_dtoa_r+0xa7a>
 8007250:	4601      	mov	r1, r0
 8007252:	4650      	mov	r0, sl
 8007254:	f000 fc4e 	bl	8007af4 <__mcmp>
 8007258:	4602      	mov	r2, r0
 800725a:	4629      	mov	r1, r5
 800725c:	4620      	mov	r0, r4
 800725e:	9209      	str	r2, [sp, #36]	; 0x24
 8007260:	f000 fa0c 	bl	800767c <_Bfree>
 8007264:	9b07      	ldr	r3, [sp, #28]
 8007266:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007268:	9d04      	ldr	r5, [sp, #16]
 800726a:	ea43 0102 	orr.w	r1, r3, r2
 800726e:	9b06      	ldr	r3, [sp, #24]
 8007270:	4319      	orrs	r1, r3
 8007272:	d110      	bne.n	8007296 <_dtoa_r+0xa7e>
 8007274:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007278:	d029      	beq.n	80072ce <_dtoa_r+0xab6>
 800727a:	9b05      	ldr	r3, [sp, #20]
 800727c:	2b00      	cmp	r3, #0
 800727e:	dd02      	ble.n	8007286 <_dtoa_r+0xa6e>
 8007280:	9b02      	ldr	r3, [sp, #8]
 8007282:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007286:	9b01      	ldr	r3, [sp, #4]
 8007288:	f883 9000 	strb.w	r9, [r3]
 800728c:	e774      	b.n	8007178 <_dtoa_r+0x960>
 800728e:	4638      	mov	r0, r7
 8007290:	e7ba      	b.n	8007208 <_dtoa_r+0x9f0>
 8007292:	2201      	movs	r2, #1
 8007294:	e7e1      	b.n	800725a <_dtoa_r+0xa42>
 8007296:	9b05      	ldr	r3, [sp, #20]
 8007298:	2b00      	cmp	r3, #0
 800729a:	db04      	blt.n	80072a6 <_dtoa_r+0xa8e>
 800729c:	9907      	ldr	r1, [sp, #28]
 800729e:	430b      	orrs	r3, r1
 80072a0:	9906      	ldr	r1, [sp, #24]
 80072a2:	430b      	orrs	r3, r1
 80072a4:	d120      	bne.n	80072e8 <_dtoa_r+0xad0>
 80072a6:	2a00      	cmp	r2, #0
 80072a8:	dded      	ble.n	8007286 <_dtoa_r+0xa6e>
 80072aa:	4651      	mov	r1, sl
 80072ac:	2201      	movs	r2, #1
 80072ae:	4620      	mov	r0, r4
 80072b0:	f000 fbb4 	bl	8007a1c <__lshift>
 80072b4:	4631      	mov	r1, r6
 80072b6:	4682      	mov	sl, r0
 80072b8:	f000 fc1c 	bl	8007af4 <__mcmp>
 80072bc:	2800      	cmp	r0, #0
 80072be:	dc03      	bgt.n	80072c8 <_dtoa_r+0xab0>
 80072c0:	d1e1      	bne.n	8007286 <_dtoa_r+0xa6e>
 80072c2:	f019 0f01 	tst.w	r9, #1
 80072c6:	d0de      	beq.n	8007286 <_dtoa_r+0xa6e>
 80072c8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80072cc:	d1d8      	bne.n	8007280 <_dtoa_r+0xa68>
 80072ce:	9a01      	ldr	r2, [sp, #4]
 80072d0:	2339      	movs	r3, #57	; 0x39
 80072d2:	7013      	strb	r3, [r2, #0]
 80072d4:	462b      	mov	r3, r5
 80072d6:	461d      	mov	r5, r3
 80072d8:	3b01      	subs	r3, #1
 80072da:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80072de:	2a39      	cmp	r2, #57	; 0x39
 80072e0:	d06c      	beq.n	80073bc <_dtoa_r+0xba4>
 80072e2:	3201      	adds	r2, #1
 80072e4:	701a      	strb	r2, [r3, #0]
 80072e6:	e747      	b.n	8007178 <_dtoa_r+0x960>
 80072e8:	2a00      	cmp	r2, #0
 80072ea:	dd07      	ble.n	80072fc <_dtoa_r+0xae4>
 80072ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80072f0:	d0ed      	beq.n	80072ce <_dtoa_r+0xab6>
 80072f2:	9a01      	ldr	r2, [sp, #4]
 80072f4:	f109 0301 	add.w	r3, r9, #1
 80072f8:	7013      	strb	r3, [r2, #0]
 80072fa:	e73d      	b.n	8007178 <_dtoa_r+0x960>
 80072fc:	9b04      	ldr	r3, [sp, #16]
 80072fe:	9a08      	ldr	r2, [sp, #32]
 8007300:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007304:	4293      	cmp	r3, r2
 8007306:	d043      	beq.n	8007390 <_dtoa_r+0xb78>
 8007308:	4651      	mov	r1, sl
 800730a:	2300      	movs	r3, #0
 800730c:	220a      	movs	r2, #10
 800730e:	4620      	mov	r0, r4
 8007310:	f000 f9d6 	bl	80076c0 <__multadd>
 8007314:	45b8      	cmp	r8, r7
 8007316:	4682      	mov	sl, r0
 8007318:	f04f 0300 	mov.w	r3, #0
 800731c:	f04f 020a 	mov.w	r2, #10
 8007320:	4641      	mov	r1, r8
 8007322:	4620      	mov	r0, r4
 8007324:	d107      	bne.n	8007336 <_dtoa_r+0xb1e>
 8007326:	f000 f9cb 	bl	80076c0 <__multadd>
 800732a:	4680      	mov	r8, r0
 800732c:	4607      	mov	r7, r0
 800732e:	9b04      	ldr	r3, [sp, #16]
 8007330:	3301      	adds	r3, #1
 8007332:	9304      	str	r3, [sp, #16]
 8007334:	e775      	b.n	8007222 <_dtoa_r+0xa0a>
 8007336:	f000 f9c3 	bl	80076c0 <__multadd>
 800733a:	4639      	mov	r1, r7
 800733c:	4680      	mov	r8, r0
 800733e:	2300      	movs	r3, #0
 8007340:	220a      	movs	r2, #10
 8007342:	4620      	mov	r0, r4
 8007344:	f000 f9bc 	bl	80076c0 <__multadd>
 8007348:	4607      	mov	r7, r0
 800734a:	e7f0      	b.n	800732e <_dtoa_r+0xb16>
 800734c:	9b04      	ldr	r3, [sp, #16]
 800734e:	9301      	str	r3, [sp, #4]
 8007350:	9d00      	ldr	r5, [sp, #0]
 8007352:	4631      	mov	r1, r6
 8007354:	4650      	mov	r0, sl
 8007356:	f7ff f9d6 	bl	8006706 <quorem>
 800735a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800735e:	9b00      	ldr	r3, [sp, #0]
 8007360:	f805 9b01 	strb.w	r9, [r5], #1
 8007364:	1aea      	subs	r2, r5, r3
 8007366:	9b01      	ldr	r3, [sp, #4]
 8007368:	4293      	cmp	r3, r2
 800736a:	dd07      	ble.n	800737c <_dtoa_r+0xb64>
 800736c:	4651      	mov	r1, sl
 800736e:	2300      	movs	r3, #0
 8007370:	220a      	movs	r2, #10
 8007372:	4620      	mov	r0, r4
 8007374:	f000 f9a4 	bl	80076c0 <__multadd>
 8007378:	4682      	mov	sl, r0
 800737a:	e7ea      	b.n	8007352 <_dtoa_r+0xb3a>
 800737c:	9b01      	ldr	r3, [sp, #4]
 800737e:	2b00      	cmp	r3, #0
 8007380:	bfc8      	it	gt
 8007382:	461d      	movgt	r5, r3
 8007384:	9b00      	ldr	r3, [sp, #0]
 8007386:	bfd8      	it	le
 8007388:	2501      	movle	r5, #1
 800738a:	441d      	add	r5, r3
 800738c:	f04f 0800 	mov.w	r8, #0
 8007390:	4651      	mov	r1, sl
 8007392:	2201      	movs	r2, #1
 8007394:	4620      	mov	r0, r4
 8007396:	f000 fb41 	bl	8007a1c <__lshift>
 800739a:	4631      	mov	r1, r6
 800739c:	4682      	mov	sl, r0
 800739e:	f000 fba9 	bl	8007af4 <__mcmp>
 80073a2:	2800      	cmp	r0, #0
 80073a4:	dc96      	bgt.n	80072d4 <_dtoa_r+0xabc>
 80073a6:	d102      	bne.n	80073ae <_dtoa_r+0xb96>
 80073a8:	f019 0f01 	tst.w	r9, #1
 80073ac:	d192      	bne.n	80072d4 <_dtoa_r+0xabc>
 80073ae:	462b      	mov	r3, r5
 80073b0:	461d      	mov	r5, r3
 80073b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073b6:	2a30      	cmp	r2, #48	; 0x30
 80073b8:	d0fa      	beq.n	80073b0 <_dtoa_r+0xb98>
 80073ba:	e6dd      	b.n	8007178 <_dtoa_r+0x960>
 80073bc:	9a00      	ldr	r2, [sp, #0]
 80073be:	429a      	cmp	r2, r3
 80073c0:	d189      	bne.n	80072d6 <_dtoa_r+0xabe>
 80073c2:	f10b 0b01 	add.w	fp, fp, #1
 80073c6:	2331      	movs	r3, #49	; 0x31
 80073c8:	e796      	b.n	80072f8 <_dtoa_r+0xae0>
 80073ca:	4b0a      	ldr	r3, [pc, #40]	; (80073f4 <_dtoa_r+0xbdc>)
 80073cc:	f7ff ba99 	b.w	8006902 <_dtoa_r+0xea>
 80073d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	f47f aa6d 	bne.w	80068b2 <_dtoa_r+0x9a>
 80073d8:	4b07      	ldr	r3, [pc, #28]	; (80073f8 <_dtoa_r+0xbe0>)
 80073da:	f7ff ba92 	b.w	8006902 <_dtoa_r+0xea>
 80073de:	9b01      	ldr	r3, [sp, #4]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	dcb5      	bgt.n	8007350 <_dtoa_r+0xb38>
 80073e4:	9b07      	ldr	r3, [sp, #28]
 80073e6:	2b02      	cmp	r3, #2
 80073e8:	f73f aeb1 	bgt.w	800714e <_dtoa_r+0x936>
 80073ec:	e7b0      	b.n	8007350 <_dtoa_r+0xb38>
 80073ee:	bf00      	nop
 80073f0:	08009241 	.word	0x08009241
 80073f4:	080091a1 	.word	0x080091a1
 80073f8:	080091c5 	.word	0x080091c5

080073fc <_free_r>:
 80073fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073fe:	2900      	cmp	r1, #0
 8007400:	d044      	beq.n	800748c <_free_r+0x90>
 8007402:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007406:	9001      	str	r0, [sp, #4]
 8007408:	2b00      	cmp	r3, #0
 800740a:	f1a1 0404 	sub.w	r4, r1, #4
 800740e:	bfb8      	it	lt
 8007410:	18e4      	addlt	r4, r4, r3
 8007412:	f000 f8e7 	bl	80075e4 <__malloc_lock>
 8007416:	4a1e      	ldr	r2, [pc, #120]	; (8007490 <_free_r+0x94>)
 8007418:	9801      	ldr	r0, [sp, #4]
 800741a:	6813      	ldr	r3, [r2, #0]
 800741c:	b933      	cbnz	r3, 800742c <_free_r+0x30>
 800741e:	6063      	str	r3, [r4, #4]
 8007420:	6014      	str	r4, [r2, #0]
 8007422:	b003      	add	sp, #12
 8007424:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007428:	f000 b8e2 	b.w	80075f0 <__malloc_unlock>
 800742c:	42a3      	cmp	r3, r4
 800742e:	d908      	bls.n	8007442 <_free_r+0x46>
 8007430:	6825      	ldr	r5, [r4, #0]
 8007432:	1961      	adds	r1, r4, r5
 8007434:	428b      	cmp	r3, r1
 8007436:	bf01      	itttt	eq
 8007438:	6819      	ldreq	r1, [r3, #0]
 800743a:	685b      	ldreq	r3, [r3, #4]
 800743c:	1949      	addeq	r1, r1, r5
 800743e:	6021      	streq	r1, [r4, #0]
 8007440:	e7ed      	b.n	800741e <_free_r+0x22>
 8007442:	461a      	mov	r2, r3
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	b10b      	cbz	r3, 800744c <_free_r+0x50>
 8007448:	42a3      	cmp	r3, r4
 800744a:	d9fa      	bls.n	8007442 <_free_r+0x46>
 800744c:	6811      	ldr	r1, [r2, #0]
 800744e:	1855      	adds	r5, r2, r1
 8007450:	42a5      	cmp	r5, r4
 8007452:	d10b      	bne.n	800746c <_free_r+0x70>
 8007454:	6824      	ldr	r4, [r4, #0]
 8007456:	4421      	add	r1, r4
 8007458:	1854      	adds	r4, r2, r1
 800745a:	42a3      	cmp	r3, r4
 800745c:	6011      	str	r1, [r2, #0]
 800745e:	d1e0      	bne.n	8007422 <_free_r+0x26>
 8007460:	681c      	ldr	r4, [r3, #0]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	6053      	str	r3, [r2, #4]
 8007466:	440c      	add	r4, r1
 8007468:	6014      	str	r4, [r2, #0]
 800746a:	e7da      	b.n	8007422 <_free_r+0x26>
 800746c:	d902      	bls.n	8007474 <_free_r+0x78>
 800746e:	230c      	movs	r3, #12
 8007470:	6003      	str	r3, [r0, #0]
 8007472:	e7d6      	b.n	8007422 <_free_r+0x26>
 8007474:	6825      	ldr	r5, [r4, #0]
 8007476:	1961      	adds	r1, r4, r5
 8007478:	428b      	cmp	r3, r1
 800747a:	bf04      	itt	eq
 800747c:	6819      	ldreq	r1, [r3, #0]
 800747e:	685b      	ldreq	r3, [r3, #4]
 8007480:	6063      	str	r3, [r4, #4]
 8007482:	bf04      	itt	eq
 8007484:	1949      	addeq	r1, r1, r5
 8007486:	6021      	streq	r1, [r4, #0]
 8007488:	6054      	str	r4, [r2, #4]
 800748a:	e7ca      	b.n	8007422 <_free_r+0x26>
 800748c:	b003      	add	sp, #12
 800748e:	bd30      	pop	{r4, r5, pc}
 8007490:	20000534 	.word	0x20000534

08007494 <malloc>:
 8007494:	4b02      	ldr	r3, [pc, #8]	; (80074a0 <malloc+0xc>)
 8007496:	4601      	mov	r1, r0
 8007498:	6818      	ldr	r0, [r3, #0]
 800749a:	f000 b823 	b.w	80074e4 <_malloc_r>
 800749e:	bf00      	nop
 80074a0:	2000006c 	.word	0x2000006c

080074a4 <sbrk_aligned>:
 80074a4:	b570      	push	{r4, r5, r6, lr}
 80074a6:	4e0e      	ldr	r6, [pc, #56]	; (80074e0 <sbrk_aligned+0x3c>)
 80074a8:	460c      	mov	r4, r1
 80074aa:	6831      	ldr	r1, [r6, #0]
 80074ac:	4605      	mov	r5, r0
 80074ae:	b911      	cbnz	r1, 80074b6 <sbrk_aligned+0x12>
 80074b0:	f000 fe40 	bl	8008134 <_sbrk_r>
 80074b4:	6030      	str	r0, [r6, #0]
 80074b6:	4621      	mov	r1, r4
 80074b8:	4628      	mov	r0, r5
 80074ba:	f000 fe3b 	bl	8008134 <_sbrk_r>
 80074be:	1c43      	adds	r3, r0, #1
 80074c0:	d00a      	beq.n	80074d8 <sbrk_aligned+0x34>
 80074c2:	1cc4      	adds	r4, r0, #3
 80074c4:	f024 0403 	bic.w	r4, r4, #3
 80074c8:	42a0      	cmp	r0, r4
 80074ca:	d007      	beq.n	80074dc <sbrk_aligned+0x38>
 80074cc:	1a21      	subs	r1, r4, r0
 80074ce:	4628      	mov	r0, r5
 80074d0:	f000 fe30 	bl	8008134 <_sbrk_r>
 80074d4:	3001      	adds	r0, #1
 80074d6:	d101      	bne.n	80074dc <sbrk_aligned+0x38>
 80074d8:	f04f 34ff 	mov.w	r4, #4294967295
 80074dc:	4620      	mov	r0, r4
 80074de:	bd70      	pop	{r4, r5, r6, pc}
 80074e0:	20000538 	.word	0x20000538

080074e4 <_malloc_r>:
 80074e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074e8:	1ccd      	adds	r5, r1, #3
 80074ea:	f025 0503 	bic.w	r5, r5, #3
 80074ee:	3508      	adds	r5, #8
 80074f0:	2d0c      	cmp	r5, #12
 80074f2:	bf38      	it	cc
 80074f4:	250c      	movcc	r5, #12
 80074f6:	2d00      	cmp	r5, #0
 80074f8:	4607      	mov	r7, r0
 80074fa:	db01      	blt.n	8007500 <_malloc_r+0x1c>
 80074fc:	42a9      	cmp	r1, r5
 80074fe:	d905      	bls.n	800750c <_malloc_r+0x28>
 8007500:	230c      	movs	r3, #12
 8007502:	603b      	str	r3, [r7, #0]
 8007504:	2600      	movs	r6, #0
 8007506:	4630      	mov	r0, r6
 8007508:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800750c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80075e0 <_malloc_r+0xfc>
 8007510:	f000 f868 	bl	80075e4 <__malloc_lock>
 8007514:	f8d8 3000 	ldr.w	r3, [r8]
 8007518:	461c      	mov	r4, r3
 800751a:	bb5c      	cbnz	r4, 8007574 <_malloc_r+0x90>
 800751c:	4629      	mov	r1, r5
 800751e:	4638      	mov	r0, r7
 8007520:	f7ff ffc0 	bl	80074a4 <sbrk_aligned>
 8007524:	1c43      	adds	r3, r0, #1
 8007526:	4604      	mov	r4, r0
 8007528:	d155      	bne.n	80075d6 <_malloc_r+0xf2>
 800752a:	f8d8 4000 	ldr.w	r4, [r8]
 800752e:	4626      	mov	r6, r4
 8007530:	2e00      	cmp	r6, #0
 8007532:	d145      	bne.n	80075c0 <_malloc_r+0xdc>
 8007534:	2c00      	cmp	r4, #0
 8007536:	d048      	beq.n	80075ca <_malloc_r+0xe6>
 8007538:	6823      	ldr	r3, [r4, #0]
 800753a:	4631      	mov	r1, r6
 800753c:	4638      	mov	r0, r7
 800753e:	eb04 0903 	add.w	r9, r4, r3
 8007542:	f000 fdf7 	bl	8008134 <_sbrk_r>
 8007546:	4581      	cmp	r9, r0
 8007548:	d13f      	bne.n	80075ca <_malloc_r+0xe6>
 800754a:	6821      	ldr	r1, [r4, #0]
 800754c:	1a6d      	subs	r5, r5, r1
 800754e:	4629      	mov	r1, r5
 8007550:	4638      	mov	r0, r7
 8007552:	f7ff ffa7 	bl	80074a4 <sbrk_aligned>
 8007556:	3001      	adds	r0, #1
 8007558:	d037      	beq.n	80075ca <_malloc_r+0xe6>
 800755a:	6823      	ldr	r3, [r4, #0]
 800755c:	442b      	add	r3, r5
 800755e:	6023      	str	r3, [r4, #0]
 8007560:	f8d8 3000 	ldr.w	r3, [r8]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d038      	beq.n	80075da <_malloc_r+0xf6>
 8007568:	685a      	ldr	r2, [r3, #4]
 800756a:	42a2      	cmp	r2, r4
 800756c:	d12b      	bne.n	80075c6 <_malloc_r+0xe2>
 800756e:	2200      	movs	r2, #0
 8007570:	605a      	str	r2, [r3, #4]
 8007572:	e00f      	b.n	8007594 <_malloc_r+0xb0>
 8007574:	6822      	ldr	r2, [r4, #0]
 8007576:	1b52      	subs	r2, r2, r5
 8007578:	d41f      	bmi.n	80075ba <_malloc_r+0xd6>
 800757a:	2a0b      	cmp	r2, #11
 800757c:	d917      	bls.n	80075ae <_malloc_r+0xca>
 800757e:	1961      	adds	r1, r4, r5
 8007580:	42a3      	cmp	r3, r4
 8007582:	6025      	str	r5, [r4, #0]
 8007584:	bf18      	it	ne
 8007586:	6059      	strne	r1, [r3, #4]
 8007588:	6863      	ldr	r3, [r4, #4]
 800758a:	bf08      	it	eq
 800758c:	f8c8 1000 	streq.w	r1, [r8]
 8007590:	5162      	str	r2, [r4, r5]
 8007592:	604b      	str	r3, [r1, #4]
 8007594:	4638      	mov	r0, r7
 8007596:	f104 060b 	add.w	r6, r4, #11
 800759a:	f000 f829 	bl	80075f0 <__malloc_unlock>
 800759e:	f026 0607 	bic.w	r6, r6, #7
 80075a2:	1d23      	adds	r3, r4, #4
 80075a4:	1af2      	subs	r2, r6, r3
 80075a6:	d0ae      	beq.n	8007506 <_malloc_r+0x22>
 80075a8:	1b9b      	subs	r3, r3, r6
 80075aa:	50a3      	str	r3, [r4, r2]
 80075ac:	e7ab      	b.n	8007506 <_malloc_r+0x22>
 80075ae:	42a3      	cmp	r3, r4
 80075b0:	6862      	ldr	r2, [r4, #4]
 80075b2:	d1dd      	bne.n	8007570 <_malloc_r+0x8c>
 80075b4:	f8c8 2000 	str.w	r2, [r8]
 80075b8:	e7ec      	b.n	8007594 <_malloc_r+0xb0>
 80075ba:	4623      	mov	r3, r4
 80075bc:	6864      	ldr	r4, [r4, #4]
 80075be:	e7ac      	b.n	800751a <_malloc_r+0x36>
 80075c0:	4634      	mov	r4, r6
 80075c2:	6876      	ldr	r6, [r6, #4]
 80075c4:	e7b4      	b.n	8007530 <_malloc_r+0x4c>
 80075c6:	4613      	mov	r3, r2
 80075c8:	e7cc      	b.n	8007564 <_malloc_r+0x80>
 80075ca:	230c      	movs	r3, #12
 80075cc:	603b      	str	r3, [r7, #0]
 80075ce:	4638      	mov	r0, r7
 80075d0:	f000 f80e 	bl	80075f0 <__malloc_unlock>
 80075d4:	e797      	b.n	8007506 <_malloc_r+0x22>
 80075d6:	6025      	str	r5, [r4, #0]
 80075d8:	e7dc      	b.n	8007594 <_malloc_r+0xb0>
 80075da:	605b      	str	r3, [r3, #4]
 80075dc:	deff      	udf	#255	; 0xff
 80075de:	bf00      	nop
 80075e0:	20000534 	.word	0x20000534

080075e4 <__malloc_lock>:
 80075e4:	4801      	ldr	r0, [pc, #4]	; (80075ec <__malloc_lock+0x8>)
 80075e6:	f7ff b87e 	b.w	80066e6 <__retarget_lock_acquire_recursive>
 80075ea:	bf00      	nop
 80075ec:	20000530 	.word	0x20000530

080075f0 <__malloc_unlock>:
 80075f0:	4801      	ldr	r0, [pc, #4]	; (80075f8 <__malloc_unlock+0x8>)
 80075f2:	f7ff b879 	b.w	80066e8 <__retarget_lock_release_recursive>
 80075f6:	bf00      	nop
 80075f8:	20000530 	.word	0x20000530

080075fc <_Balloc>:
 80075fc:	b570      	push	{r4, r5, r6, lr}
 80075fe:	69c6      	ldr	r6, [r0, #28]
 8007600:	4604      	mov	r4, r0
 8007602:	460d      	mov	r5, r1
 8007604:	b976      	cbnz	r6, 8007624 <_Balloc+0x28>
 8007606:	2010      	movs	r0, #16
 8007608:	f7ff ff44 	bl	8007494 <malloc>
 800760c:	4602      	mov	r2, r0
 800760e:	61e0      	str	r0, [r4, #28]
 8007610:	b920      	cbnz	r0, 800761c <_Balloc+0x20>
 8007612:	4b18      	ldr	r3, [pc, #96]	; (8007674 <_Balloc+0x78>)
 8007614:	4818      	ldr	r0, [pc, #96]	; (8007678 <_Balloc+0x7c>)
 8007616:	216b      	movs	r1, #107	; 0x6b
 8007618:	f000 fd9c 	bl	8008154 <__assert_func>
 800761c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007620:	6006      	str	r6, [r0, #0]
 8007622:	60c6      	str	r6, [r0, #12]
 8007624:	69e6      	ldr	r6, [r4, #28]
 8007626:	68f3      	ldr	r3, [r6, #12]
 8007628:	b183      	cbz	r3, 800764c <_Balloc+0x50>
 800762a:	69e3      	ldr	r3, [r4, #28]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007632:	b9b8      	cbnz	r0, 8007664 <_Balloc+0x68>
 8007634:	2101      	movs	r1, #1
 8007636:	fa01 f605 	lsl.w	r6, r1, r5
 800763a:	1d72      	adds	r2, r6, #5
 800763c:	0092      	lsls	r2, r2, #2
 800763e:	4620      	mov	r0, r4
 8007640:	f000 fda6 	bl	8008190 <_calloc_r>
 8007644:	b160      	cbz	r0, 8007660 <_Balloc+0x64>
 8007646:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800764a:	e00e      	b.n	800766a <_Balloc+0x6e>
 800764c:	2221      	movs	r2, #33	; 0x21
 800764e:	2104      	movs	r1, #4
 8007650:	4620      	mov	r0, r4
 8007652:	f000 fd9d 	bl	8008190 <_calloc_r>
 8007656:	69e3      	ldr	r3, [r4, #28]
 8007658:	60f0      	str	r0, [r6, #12]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1e4      	bne.n	800762a <_Balloc+0x2e>
 8007660:	2000      	movs	r0, #0
 8007662:	bd70      	pop	{r4, r5, r6, pc}
 8007664:	6802      	ldr	r2, [r0, #0]
 8007666:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800766a:	2300      	movs	r3, #0
 800766c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007670:	e7f7      	b.n	8007662 <_Balloc+0x66>
 8007672:	bf00      	nop
 8007674:	080091d2 	.word	0x080091d2
 8007678:	08009252 	.word	0x08009252

0800767c <_Bfree>:
 800767c:	b570      	push	{r4, r5, r6, lr}
 800767e:	69c6      	ldr	r6, [r0, #28]
 8007680:	4605      	mov	r5, r0
 8007682:	460c      	mov	r4, r1
 8007684:	b976      	cbnz	r6, 80076a4 <_Bfree+0x28>
 8007686:	2010      	movs	r0, #16
 8007688:	f7ff ff04 	bl	8007494 <malloc>
 800768c:	4602      	mov	r2, r0
 800768e:	61e8      	str	r0, [r5, #28]
 8007690:	b920      	cbnz	r0, 800769c <_Bfree+0x20>
 8007692:	4b09      	ldr	r3, [pc, #36]	; (80076b8 <_Bfree+0x3c>)
 8007694:	4809      	ldr	r0, [pc, #36]	; (80076bc <_Bfree+0x40>)
 8007696:	218f      	movs	r1, #143	; 0x8f
 8007698:	f000 fd5c 	bl	8008154 <__assert_func>
 800769c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076a0:	6006      	str	r6, [r0, #0]
 80076a2:	60c6      	str	r6, [r0, #12]
 80076a4:	b13c      	cbz	r4, 80076b6 <_Bfree+0x3a>
 80076a6:	69eb      	ldr	r3, [r5, #28]
 80076a8:	6862      	ldr	r2, [r4, #4]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80076b0:	6021      	str	r1, [r4, #0]
 80076b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80076b6:	bd70      	pop	{r4, r5, r6, pc}
 80076b8:	080091d2 	.word	0x080091d2
 80076bc:	08009252 	.word	0x08009252

080076c0 <__multadd>:
 80076c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076c4:	690d      	ldr	r5, [r1, #16]
 80076c6:	4607      	mov	r7, r0
 80076c8:	460c      	mov	r4, r1
 80076ca:	461e      	mov	r6, r3
 80076cc:	f101 0c14 	add.w	ip, r1, #20
 80076d0:	2000      	movs	r0, #0
 80076d2:	f8dc 3000 	ldr.w	r3, [ip]
 80076d6:	b299      	uxth	r1, r3
 80076d8:	fb02 6101 	mla	r1, r2, r1, r6
 80076dc:	0c1e      	lsrs	r6, r3, #16
 80076de:	0c0b      	lsrs	r3, r1, #16
 80076e0:	fb02 3306 	mla	r3, r2, r6, r3
 80076e4:	b289      	uxth	r1, r1
 80076e6:	3001      	adds	r0, #1
 80076e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80076ec:	4285      	cmp	r5, r0
 80076ee:	f84c 1b04 	str.w	r1, [ip], #4
 80076f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80076f6:	dcec      	bgt.n	80076d2 <__multadd+0x12>
 80076f8:	b30e      	cbz	r6, 800773e <__multadd+0x7e>
 80076fa:	68a3      	ldr	r3, [r4, #8]
 80076fc:	42ab      	cmp	r3, r5
 80076fe:	dc19      	bgt.n	8007734 <__multadd+0x74>
 8007700:	6861      	ldr	r1, [r4, #4]
 8007702:	4638      	mov	r0, r7
 8007704:	3101      	adds	r1, #1
 8007706:	f7ff ff79 	bl	80075fc <_Balloc>
 800770a:	4680      	mov	r8, r0
 800770c:	b928      	cbnz	r0, 800771a <__multadd+0x5a>
 800770e:	4602      	mov	r2, r0
 8007710:	4b0c      	ldr	r3, [pc, #48]	; (8007744 <__multadd+0x84>)
 8007712:	480d      	ldr	r0, [pc, #52]	; (8007748 <__multadd+0x88>)
 8007714:	21ba      	movs	r1, #186	; 0xba
 8007716:	f000 fd1d 	bl	8008154 <__assert_func>
 800771a:	6922      	ldr	r2, [r4, #16]
 800771c:	3202      	adds	r2, #2
 800771e:	f104 010c 	add.w	r1, r4, #12
 8007722:	0092      	lsls	r2, r2, #2
 8007724:	300c      	adds	r0, #12
 8007726:	f7fe ffe0 	bl	80066ea <memcpy>
 800772a:	4621      	mov	r1, r4
 800772c:	4638      	mov	r0, r7
 800772e:	f7ff ffa5 	bl	800767c <_Bfree>
 8007732:	4644      	mov	r4, r8
 8007734:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007738:	3501      	adds	r5, #1
 800773a:	615e      	str	r6, [r3, #20]
 800773c:	6125      	str	r5, [r4, #16]
 800773e:	4620      	mov	r0, r4
 8007740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007744:	08009241 	.word	0x08009241
 8007748:	08009252 	.word	0x08009252

0800774c <__hi0bits>:
 800774c:	0c03      	lsrs	r3, r0, #16
 800774e:	041b      	lsls	r3, r3, #16
 8007750:	b9d3      	cbnz	r3, 8007788 <__hi0bits+0x3c>
 8007752:	0400      	lsls	r0, r0, #16
 8007754:	2310      	movs	r3, #16
 8007756:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800775a:	bf04      	itt	eq
 800775c:	0200      	lsleq	r0, r0, #8
 800775e:	3308      	addeq	r3, #8
 8007760:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007764:	bf04      	itt	eq
 8007766:	0100      	lsleq	r0, r0, #4
 8007768:	3304      	addeq	r3, #4
 800776a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800776e:	bf04      	itt	eq
 8007770:	0080      	lsleq	r0, r0, #2
 8007772:	3302      	addeq	r3, #2
 8007774:	2800      	cmp	r0, #0
 8007776:	db05      	blt.n	8007784 <__hi0bits+0x38>
 8007778:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800777c:	f103 0301 	add.w	r3, r3, #1
 8007780:	bf08      	it	eq
 8007782:	2320      	moveq	r3, #32
 8007784:	4618      	mov	r0, r3
 8007786:	4770      	bx	lr
 8007788:	2300      	movs	r3, #0
 800778a:	e7e4      	b.n	8007756 <__hi0bits+0xa>

0800778c <__lo0bits>:
 800778c:	6803      	ldr	r3, [r0, #0]
 800778e:	f013 0207 	ands.w	r2, r3, #7
 8007792:	d00c      	beq.n	80077ae <__lo0bits+0x22>
 8007794:	07d9      	lsls	r1, r3, #31
 8007796:	d422      	bmi.n	80077de <__lo0bits+0x52>
 8007798:	079a      	lsls	r2, r3, #30
 800779a:	bf49      	itett	mi
 800779c:	085b      	lsrmi	r3, r3, #1
 800779e:	089b      	lsrpl	r3, r3, #2
 80077a0:	6003      	strmi	r3, [r0, #0]
 80077a2:	2201      	movmi	r2, #1
 80077a4:	bf5c      	itt	pl
 80077a6:	6003      	strpl	r3, [r0, #0]
 80077a8:	2202      	movpl	r2, #2
 80077aa:	4610      	mov	r0, r2
 80077ac:	4770      	bx	lr
 80077ae:	b299      	uxth	r1, r3
 80077b0:	b909      	cbnz	r1, 80077b6 <__lo0bits+0x2a>
 80077b2:	0c1b      	lsrs	r3, r3, #16
 80077b4:	2210      	movs	r2, #16
 80077b6:	b2d9      	uxtb	r1, r3
 80077b8:	b909      	cbnz	r1, 80077be <__lo0bits+0x32>
 80077ba:	3208      	adds	r2, #8
 80077bc:	0a1b      	lsrs	r3, r3, #8
 80077be:	0719      	lsls	r1, r3, #28
 80077c0:	bf04      	itt	eq
 80077c2:	091b      	lsreq	r3, r3, #4
 80077c4:	3204      	addeq	r2, #4
 80077c6:	0799      	lsls	r1, r3, #30
 80077c8:	bf04      	itt	eq
 80077ca:	089b      	lsreq	r3, r3, #2
 80077cc:	3202      	addeq	r2, #2
 80077ce:	07d9      	lsls	r1, r3, #31
 80077d0:	d403      	bmi.n	80077da <__lo0bits+0x4e>
 80077d2:	085b      	lsrs	r3, r3, #1
 80077d4:	f102 0201 	add.w	r2, r2, #1
 80077d8:	d003      	beq.n	80077e2 <__lo0bits+0x56>
 80077da:	6003      	str	r3, [r0, #0]
 80077dc:	e7e5      	b.n	80077aa <__lo0bits+0x1e>
 80077de:	2200      	movs	r2, #0
 80077e0:	e7e3      	b.n	80077aa <__lo0bits+0x1e>
 80077e2:	2220      	movs	r2, #32
 80077e4:	e7e1      	b.n	80077aa <__lo0bits+0x1e>
	...

080077e8 <__i2b>:
 80077e8:	b510      	push	{r4, lr}
 80077ea:	460c      	mov	r4, r1
 80077ec:	2101      	movs	r1, #1
 80077ee:	f7ff ff05 	bl	80075fc <_Balloc>
 80077f2:	4602      	mov	r2, r0
 80077f4:	b928      	cbnz	r0, 8007802 <__i2b+0x1a>
 80077f6:	4b05      	ldr	r3, [pc, #20]	; (800780c <__i2b+0x24>)
 80077f8:	4805      	ldr	r0, [pc, #20]	; (8007810 <__i2b+0x28>)
 80077fa:	f240 1145 	movw	r1, #325	; 0x145
 80077fe:	f000 fca9 	bl	8008154 <__assert_func>
 8007802:	2301      	movs	r3, #1
 8007804:	6144      	str	r4, [r0, #20]
 8007806:	6103      	str	r3, [r0, #16]
 8007808:	bd10      	pop	{r4, pc}
 800780a:	bf00      	nop
 800780c:	08009241 	.word	0x08009241
 8007810:	08009252 	.word	0x08009252

08007814 <__multiply>:
 8007814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007818:	4691      	mov	r9, r2
 800781a:	690a      	ldr	r2, [r1, #16]
 800781c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007820:	429a      	cmp	r2, r3
 8007822:	bfb8      	it	lt
 8007824:	460b      	movlt	r3, r1
 8007826:	460c      	mov	r4, r1
 8007828:	bfbc      	itt	lt
 800782a:	464c      	movlt	r4, r9
 800782c:	4699      	movlt	r9, r3
 800782e:	6927      	ldr	r7, [r4, #16]
 8007830:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007834:	68a3      	ldr	r3, [r4, #8]
 8007836:	6861      	ldr	r1, [r4, #4]
 8007838:	eb07 060a 	add.w	r6, r7, sl
 800783c:	42b3      	cmp	r3, r6
 800783e:	b085      	sub	sp, #20
 8007840:	bfb8      	it	lt
 8007842:	3101      	addlt	r1, #1
 8007844:	f7ff feda 	bl	80075fc <_Balloc>
 8007848:	b930      	cbnz	r0, 8007858 <__multiply+0x44>
 800784a:	4602      	mov	r2, r0
 800784c:	4b44      	ldr	r3, [pc, #272]	; (8007960 <__multiply+0x14c>)
 800784e:	4845      	ldr	r0, [pc, #276]	; (8007964 <__multiply+0x150>)
 8007850:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007854:	f000 fc7e 	bl	8008154 <__assert_func>
 8007858:	f100 0514 	add.w	r5, r0, #20
 800785c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007860:	462b      	mov	r3, r5
 8007862:	2200      	movs	r2, #0
 8007864:	4543      	cmp	r3, r8
 8007866:	d321      	bcc.n	80078ac <__multiply+0x98>
 8007868:	f104 0314 	add.w	r3, r4, #20
 800786c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007870:	f109 0314 	add.w	r3, r9, #20
 8007874:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007878:	9202      	str	r2, [sp, #8]
 800787a:	1b3a      	subs	r2, r7, r4
 800787c:	3a15      	subs	r2, #21
 800787e:	f022 0203 	bic.w	r2, r2, #3
 8007882:	3204      	adds	r2, #4
 8007884:	f104 0115 	add.w	r1, r4, #21
 8007888:	428f      	cmp	r7, r1
 800788a:	bf38      	it	cc
 800788c:	2204      	movcc	r2, #4
 800788e:	9201      	str	r2, [sp, #4]
 8007890:	9a02      	ldr	r2, [sp, #8]
 8007892:	9303      	str	r3, [sp, #12]
 8007894:	429a      	cmp	r2, r3
 8007896:	d80c      	bhi.n	80078b2 <__multiply+0x9e>
 8007898:	2e00      	cmp	r6, #0
 800789a:	dd03      	ble.n	80078a4 <__multiply+0x90>
 800789c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d05b      	beq.n	800795c <__multiply+0x148>
 80078a4:	6106      	str	r6, [r0, #16]
 80078a6:	b005      	add	sp, #20
 80078a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ac:	f843 2b04 	str.w	r2, [r3], #4
 80078b0:	e7d8      	b.n	8007864 <__multiply+0x50>
 80078b2:	f8b3 a000 	ldrh.w	sl, [r3]
 80078b6:	f1ba 0f00 	cmp.w	sl, #0
 80078ba:	d024      	beq.n	8007906 <__multiply+0xf2>
 80078bc:	f104 0e14 	add.w	lr, r4, #20
 80078c0:	46a9      	mov	r9, r5
 80078c2:	f04f 0c00 	mov.w	ip, #0
 80078c6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80078ca:	f8d9 1000 	ldr.w	r1, [r9]
 80078ce:	fa1f fb82 	uxth.w	fp, r2
 80078d2:	b289      	uxth	r1, r1
 80078d4:	fb0a 110b 	mla	r1, sl, fp, r1
 80078d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80078dc:	f8d9 2000 	ldr.w	r2, [r9]
 80078e0:	4461      	add	r1, ip
 80078e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80078e6:	fb0a c20b 	mla	r2, sl, fp, ip
 80078ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80078ee:	b289      	uxth	r1, r1
 80078f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80078f4:	4577      	cmp	r7, lr
 80078f6:	f849 1b04 	str.w	r1, [r9], #4
 80078fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80078fe:	d8e2      	bhi.n	80078c6 <__multiply+0xb2>
 8007900:	9a01      	ldr	r2, [sp, #4]
 8007902:	f845 c002 	str.w	ip, [r5, r2]
 8007906:	9a03      	ldr	r2, [sp, #12]
 8007908:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800790c:	3304      	adds	r3, #4
 800790e:	f1b9 0f00 	cmp.w	r9, #0
 8007912:	d021      	beq.n	8007958 <__multiply+0x144>
 8007914:	6829      	ldr	r1, [r5, #0]
 8007916:	f104 0c14 	add.w	ip, r4, #20
 800791a:	46ae      	mov	lr, r5
 800791c:	f04f 0a00 	mov.w	sl, #0
 8007920:	f8bc b000 	ldrh.w	fp, [ip]
 8007924:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007928:	fb09 220b 	mla	r2, r9, fp, r2
 800792c:	4452      	add	r2, sl
 800792e:	b289      	uxth	r1, r1
 8007930:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007934:	f84e 1b04 	str.w	r1, [lr], #4
 8007938:	f85c 1b04 	ldr.w	r1, [ip], #4
 800793c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007940:	f8be 1000 	ldrh.w	r1, [lr]
 8007944:	fb09 110a 	mla	r1, r9, sl, r1
 8007948:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800794c:	4567      	cmp	r7, ip
 800794e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007952:	d8e5      	bhi.n	8007920 <__multiply+0x10c>
 8007954:	9a01      	ldr	r2, [sp, #4]
 8007956:	50a9      	str	r1, [r5, r2]
 8007958:	3504      	adds	r5, #4
 800795a:	e799      	b.n	8007890 <__multiply+0x7c>
 800795c:	3e01      	subs	r6, #1
 800795e:	e79b      	b.n	8007898 <__multiply+0x84>
 8007960:	08009241 	.word	0x08009241
 8007964:	08009252 	.word	0x08009252

08007968 <__pow5mult>:
 8007968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800796c:	4615      	mov	r5, r2
 800796e:	f012 0203 	ands.w	r2, r2, #3
 8007972:	4606      	mov	r6, r0
 8007974:	460f      	mov	r7, r1
 8007976:	d007      	beq.n	8007988 <__pow5mult+0x20>
 8007978:	4c25      	ldr	r4, [pc, #148]	; (8007a10 <__pow5mult+0xa8>)
 800797a:	3a01      	subs	r2, #1
 800797c:	2300      	movs	r3, #0
 800797e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007982:	f7ff fe9d 	bl	80076c0 <__multadd>
 8007986:	4607      	mov	r7, r0
 8007988:	10ad      	asrs	r5, r5, #2
 800798a:	d03d      	beq.n	8007a08 <__pow5mult+0xa0>
 800798c:	69f4      	ldr	r4, [r6, #28]
 800798e:	b97c      	cbnz	r4, 80079b0 <__pow5mult+0x48>
 8007990:	2010      	movs	r0, #16
 8007992:	f7ff fd7f 	bl	8007494 <malloc>
 8007996:	4602      	mov	r2, r0
 8007998:	61f0      	str	r0, [r6, #28]
 800799a:	b928      	cbnz	r0, 80079a8 <__pow5mult+0x40>
 800799c:	4b1d      	ldr	r3, [pc, #116]	; (8007a14 <__pow5mult+0xac>)
 800799e:	481e      	ldr	r0, [pc, #120]	; (8007a18 <__pow5mult+0xb0>)
 80079a0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80079a4:	f000 fbd6 	bl	8008154 <__assert_func>
 80079a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80079ac:	6004      	str	r4, [r0, #0]
 80079ae:	60c4      	str	r4, [r0, #12]
 80079b0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80079b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80079b8:	b94c      	cbnz	r4, 80079ce <__pow5mult+0x66>
 80079ba:	f240 2171 	movw	r1, #625	; 0x271
 80079be:	4630      	mov	r0, r6
 80079c0:	f7ff ff12 	bl	80077e8 <__i2b>
 80079c4:	2300      	movs	r3, #0
 80079c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80079ca:	4604      	mov	r4, r0
 80079cc:	6003      	str	r3, [r0, #0]
 80079ce:	f04f 0900 	mov.w	r9, #0
 80079d2:	07eb      	lsls	r3, r5, #31
 80079d4:	d50a      	bpl.n	80079ec <__pow5mult+0x84>
 80079d6:	4639      	mov	r1, r7
 80079d8:	4622      	mov	r2, r4
 80079da:	4630      	mov	r0, r6
 80079dc:	f7ff ff1a 	bl	8007814 <__multiply>
 80079e0:	4639      	mov	r1, r7
 80079e2:	4680      	mov	r8, r0
 80079e4:	4630      	mov	r0, r6
 80079e6:	f7ff fe49 	bl	800767c <_Bfree>
 80079ea:	4647      	mov	r7, r8
 80079ec:	106d      	asrs	r5, r5, #1
 80079ee:	d00b      	beq.n	8007a08 <__pow5mult+0xa0>
 80079f0:	6820      	ldr	r0, [r4, #0]
 80079f2:	b938      	cbnz	r0, 8007a04 <__pow5mult+0x9c>
 80079f4:	4622      	mov	r2, r4
 80079f6:	4621      	mov	r1, r4
 80079f8:	4630      	mov	r0, r6
 80079fa:	f7ff ff0b 	bl	8007814 <__multiply>
 80079fe:	6020      	str	r0, [r4, #0]
 8007a00:	f8c0 9000 	str.w	r9, [r0]
 8007a04:	4604      	mov	r4, r0
 8007a06:	e7e4      	b.n	80079d2 <__pow5mult+0x6a>
 8007a08:	4638      	mov	r0, r7
 8007a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a0e:	bf00      	nop
 8007a10:	080093a0 	.word	0x080093a0
 8007a14:	080091d2 	.word	0x080091d2
 8007a18:	08009252 	.word	0x08009252

08007a1c <__lshift>:
 8007a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a20:	460c      	mov	r4, r1
 8007a22:	6849      	ldr	r1, [r1, #4]
 8007a24:	6923      	ldr	r3, [r4, #16]
 8007a26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007a2a:	68a3      	ldr	r3, [r4, #8]
 8007a2c:	4607      	mov	r7, r0
 8007a2e:	4691      	mov	r9, r2
 8007a30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007a34:	f108 0601 	add.w	r6, r8, #1
 8007a38:	42b3      	cmp	r3, r6
 8007a3a:	db0b      	blt.n	8007a54 <__lshift+0x38>
 8007a3c:	4638      	mov	r0, r7
 8007a3e:	f7ff fddd 	bl	80075fc <_Balloc>
 8007a42:	4605      	mov	r5, r0
 8007a44:	b948      	cbnz	r0, 8007a5a <__lshift+0x3e>
 8007a46:	4602      	mov	r2, r0
 8007a48:	4b28      	ldr	r3, [pc, #160]	; (8007aec <__lshift+0xd0>)
 8007a4a:	4829      	ldr	r0, [pc, #164]	; (8007af0 <__lshift+0xd4>)
 8007a4c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007a50:	f000 fb80 	bl	8008154 <__assert_func>
 8007a54:	3101      	adds	r1, #1
 8007a56:	005b      	lsls	r3, r3, #1
 8007a58:	e7ee      	b.n	8007a38 <__lshift+0x1c>
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	f100 0114 	add.w	r1, r0, #20
 8007a60:	f100 0210 	add.w	r2, r0, #16
 8007a64:	4618      	mov	r0, r3
 8007a66:	4553      	cmp	r3, sl
 8007a68:	db33      	blt.n	8007ad2 <__lshift+0xb6>
 8007a6a:	6920      	ldr	r0, [r4, #16]
 8007a6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a70:	f104 0314 	add.w	r3, r4, #20
 8007a74:	f019 091f 	ands.w	r9, r9, #31
 8007a78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007a80:	d02b      	beq.n	8007ada <__lshift+0xbe>
 8007a82:	f1c9 0e20 	rsb	lr, r9, #32
 8007a86:	468a      	mov	sl, r1
 8007a88:	2200      	movs	r2, #0
 8007a8a:	6818      	ldr	r0, [r3, #0]
 8007a8c:	fa00 f009 	lsl.w	r0, r0, r9
 8007a90:	4310      	orrs	r0, r2
 8007a92:	f84a 0b04 	str.w	r0, [sl], #4
 8007a96:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a9a:	459c      	cmp	ip, r3
 8007a9c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007aa0:	d8f3      	bhi.n	8007a8a <__lshift+0x6e>
 8007aa2:	ebac 0304 	sub.w	r3, ip, r4
 8007aa6:	3b15      	subs	r3, #21
 8007aa8:	f023 0303 	bic.w	r3, r3, #3
 8007aac:	3304      	adds	r3, #4
 8007aae:	f104 0015 	add.w	r0, r4, #21
 8007ab2:	4584      	cmp	ip, r0
 8007ab4:	bf38      	it	cc
 8007ab6:	2304      	movcc	r3, #4
 8007ab8:	50ca      	str	r2, [r1, r3]
 8007aba:	b10a      	cbz	r2, 8007ac0 <__lshift+0xa4>
 8007abc:	f108 0602 	add.w	r6, r8, #2
 8007ac0:	3e01      	subs	r6, #1
 8007ac2:	4638      	mov	r0, r7
 8007ac4:	612e      	str	r6, [r5, #16]
 8007ac6:	4621      	mov	r1, r4
 8007ac8:	f7ff fdd8 	bl	800767c <_Bfree>
 8007acc:	4628      	mov	r0, r5
 8007ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ad2:	f842 0f04 	str.w	r0, [r2, #4]!
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	e7c5      	b.n	8007a66 <__lshift+0x4a>
 8007ada:	3904      	subs	r1, #4
 8007adc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ae0:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ae4:	459c      	cmp	ip, r3
 8007ae6:	d8f9      	bhi.n	8007adc <__lshift+0xc0>
 8007ae8:	e7ea      	b.n	8007ac0 <__lshift+0xa4>
 8007aea:	bf00      	nop
 8007aec:	08009241 	.word	0x08009241
 8007af0:	08009252 	.word	0x08009252

08007af4 <__mcmp>:
 8007af4:	b530      	push	{r4, r5, lr}
 8007af6:	6902      	ldr	r2, [r0, #16]
 8007af8:	690c      	ldr	r4, [r1, #16]
 8007afa:	1b12      	subs	r2, r2, r4
 8007afc:	d10e      	bne.n	8007b1c <__mcmp+0x28>
 8007afe:	f100 0314 	add.w	r3, r0, #20
 8007b02:	3114      	adds	r1, #20
 8007b04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007b08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007b0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007b10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007b14:	42a5      	cmp	r5, r4
 8007b16:	d003      	beq.n	8007b20 <__mcmp+0x2c>
 8007b18:	d305      	bcc.n	8007b26 <__mcmp+0x32>
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	bd30      	pop	{r4, r5, pc}
 8007b20:	4283      	cmp	r3, r0
 8007b22:	d3f3      	bcc.n	8007b0c <__mcmp+0x18>
 8007b24:	e7fa      	b.n	8007b1c <__mcmp+0x28>
 8007b26:	f04f 32ff 	mov.w	r2, #4294967295
 8007b2a:	e7f7      	b.n	8007b1c <__mcmp+0x28>

08007b2c <__mdiff>:
 8007b2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b30:	460c      	mov	r4, r1
 8007b32:	4606      	mov	r6, r0
 8007b34:	4611      	mov	r1, r2
 8007b36:	4620      	mov	r0, r4
 8007b38:	4690      	mov	r8, r2
 8007b3a:	f7ff ffdb 	bl	8007af4 <__mcmp>
 8007b3e:	1e05      	subs	r5, r0, #0
 8007b40:	d110      	bne.n	8007b64 <__mdiff+0x38>
 8007b42:	4629      	mov	r1, r5
 8007b44:	4630      	mov	r0, r6
 8007b46:	f7ff fd59 	bl	80075fc <_Balloc>
 8007b4a:	b930      	cbnz	r0, 8007b5a <__mdiff+0x2e>
 8007b4c:	4b3a      	ldr	r3, [pc, #232]	; (8007c38 <__mdiff+0x10c>)
 8007b4e:	4602      	mov	r2, r0
 8007b50:	f240 2137 	movw	r1, #567	; 0x237
 8007b54:	4839      	ldr	r0, [pc, #228]	; (8007c3c <__mdiff+0x110>)
 8007b56:	f000 fafd 	bl	8008154 <__assert_func>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007b60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b64:	bfa4      	itt	ge
 8007b66:	4643      	movge	r3, r8
 8007b68:	46a0      	movge	r8, r4
 8007b6a:	4630      	mov	r0, r6
 8007b6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007b70:	bfa6      	itte	ge
 8007b72:	461c      	movge	r4, r3
 8007b74:	2500      	movge	r5, #0
 8007b76:	2501      	movlt	r5, #1
 8007b78:	f7ff fd40 	bl	80075fc <_Balloc>
 8007b7c:	b920      	cbnz	r0, 8007b88 <__mdiff+0x5c>
 8007b7e:	4b2e      	ldr	r3, [pc, #184]	; (8007c38 <__mdiff+0x10c>)
 8007b80:	4602      	mov	r2, r0
 8007b82:	f240 2145 	movw	r1, #581	; 0x245
 8007b86:	e7e5      	b.n	8007b54 <__mdiff+0x28>
 8007b88:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007b8c:	6926      	ldr	r6, [r4, #16]
 8007b8e:	60c5      	str	r5, [r0, #12]
 8007b90:	f104 0914 	add.w	r9, r4, #20
 8007b94:	f108 0514 	add.w	r5, r8, #20
 8007b98:	f100 0e14 	add.w	lr, r0, #20
 8007b9c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007ba0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007ba4:	f108 0210 	add.w	r2, r8, #16
 8007ba8:	46f2      	mov	sl, lr
 8007baa:	2100      	movs	r1, #0
 8007bac:	f859 3b04 	ldr.w	r3, [r9], #4
 8007bb0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007bb4:	fa11 f88b 	uxtah	r8, r1, fp
 8007bb8:	b299      	uxth	r1, r3
 8007bba:	0c1b      	lsrs	r3, r3, #16
 8007bbc:	eba8 0801 	sub.w	r8, r8, r1
 8007bc0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007bc4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007bc8:	fa1f f888 	uxth.w	r8, r8
 8007bcc:	1419      	asrs	r1, r3, #16
 8007bce:	454e      	cmp	r6, r9
 8007bd0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007bd4:	f84a 3b04 	str.w	r3, [sl], #4
 8007bd8:	d8e8      	bhi.n	8007bac <__mdiff+0x80>
 8007bda:	1b33      	subs	r3, r6, r4
 8007bdc:	3b15      	subs	r3, #21
 8007bde:	f023 0303 	bic.w	r3, r3, #3
 8007be2:	3304      	adds	r3, #4
 8007be4:	3415      	adds	r4, #21
 8007be6:	42a6      	cmp	r6, r4
 8007be8:	bf38      	it	cc
 8007bea:	2304      	movcc	r3, #4
 8007bec:	441d      	add	r5, r3
 8007bee:	4473      	add	r3, lr
 8007bf0:	469e      	mov	lr, r3
 8007bf2:	462e      	mov	r6, r5
 8007bf4:	4566      	cmp	r6, ip
 8007bf6:	d30e      	bcc.n	8007c16 <__mdiff+0xea>
 8007bf8:	f10c 0203 	add.w	r2, ip, #3
 8007bfc:	1b52      	subs	r2, r2, r5
 8007bfe:	f022 0203 	bic.w	r2, r2, #3
 8007c02:	3d03      	subs	r5, #3
 8007c04:	45ac      	cmp	ip, r5
 8007c06:	bf38      	it	cc
 8007c08:	2200      	movcc	r2, #0
 8007c0a:	4413      	add	r3, r2
 8007c0c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007c10:	b17a      	cbz	r2, 8007c32 <__mdiff+0x106>
 8007c12:	6107      	str	r7, [r0, #16]
 8007c14:	e7a4      	b.n	8007b60 <__mdiff+0x34>
 8007c16:	f856 8b04 	ldr.w	r8, [r6], #4
 8007c1a:	fa11 f288 	uxtah	r2, r1, r8
 8007c1e:	1414      	asrs	r4, r2, #16
 8007c20:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007c24:	b292      	uxth	r2, r2
 8007c26:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007c2a:	f84e 2b04 	str.w	r2, [lr], #4
 8007c2e:	1421      	asrs	r1, r4, #16
 8007c30:	e7e0      	b.n	8007bf4 <__mdiff+0xc8>
 8007c32:	3f01      	subs	r7, #1
 8007c34:	e7ea      	b.n	8007c0c <__mdiff+0xe0>
 8007c36:	bf00      	nop
 8007c38:	08009241 	.word	0x08009241
 8007c3c:	08009252 	.word	0x08009252

08007c40 <__d2b>:
 8007c40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007c44:	460f      	mov	r7, r1
 8007c46:	2101      	movs	r1, #1
 8007c48:	ec59 8b10 	vmov	r8, r9, d0
 8007c4c:	4616      	mov	r6, r2
 8007c4e:	f7ff fcd5 	bl	80075fc <_Balloc>
 8007c52:	4604      	mov	r4, r0
 8007c54:	b930      	cbnz	r0, 8007c64 <__d2b+0x24>
 8007c56:	4602      	mov	r2, r0
 8007c58:	4b24      	ldr	r3, [pc, #144]	; (8007cec <__d2b+0xac>)
 8007c5a:	4825      	ldr	r0, [pc, #148]	; (8007cf0 <__d2b+0xb0>)
 8007c5c:	f240 310f 	movw	r1, #783	; 0x30f
 8007c60:	f000 fa78 	bl	8008154 <__assert_func>
 8007c64:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007c68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c6c:	bb2d      	cbnz	r5, 8007cba <__d2b+0x7a>
 8007c6e:	9301      	str	r3, [sp, #4]
 8007c70:	f1b8 0300 	subs.w	r3, r8, #0
 8007c74:	d026      	beq.n	8007cc4 <__d2b+0x84>
 8007c76:	4668      	mov	r0, sp
 8007c78:	9300      	str	r3, [sp, #0]
 8007c7a:	f7ff fd87 	bl	800778c <__lo0bits>
 8007c7e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007c82:	b1e8      	cbz	r0, 8007cc0 <__d2b+0x80>
 8007c84:	f1c0 0320 	rsb	r3, r0, #32
 8007c88:	fa02 f303 	lsl.w	r3, r2, r3
 8007c8c:	430b      	orrs	r3, r1
 8007c8e:	40c2      	lsrs	r2, r0
 8007c90:	6163      	str	r3, [r4, #20]
 8007c92:	9201      	str	r2, [sp, #4]
 8007c94:	9b01      	ldr	r3, [sp, #4]
 8007c96:	61a3      	str	r3, [r4, #24]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	bf14      	ite	ne
 8007c9c:	2202      	movne	r2, #2
 8007c9e:	2201      	moveq	r2, #1
 8007ca0:	6122      	str	r2, [r4, #16]
 8007ca2:	b1bd      	cbz	r5, 8007cd4 <__d2b+0x94>
 8007ca4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007ca8:	4405      	add	r5, r0
 8007caa:	603d      	str	r5, [r7, #0]
 8007cac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007cb0:	6030      	str	r0, [r6, #0]
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	b003      	add	sp, #12
 8007cb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007cba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cbe:	e7d6      	b.n	8007c6e <__d2b+0x2e>
 8007cc0:	6161      	str	r1, [r4, #20]
 8007cc2:	e7e7      	b.n	8007c94 <__d2b+0x54>
 8007cc4:	a801      	add	r0, sp, #4
 8007cc6:	f7ff fd61 	bl	800778c <__lo0bits>
 8007cca:	9b01      	ldr	r3, [sp, #4]
 8007ccc:	6163      	str	r3, [r4, #20]
 8007cce:	3020      	adds	r0, #32
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	e7e5      	b.n	8007ca0 <__d2b+0x60>
 8007cd4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007cd8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007cdc:	6038      	str	r0, [r7, #0]
 8007cde:	6918      	ldr	r0, [r3, #16]
 8007ce0:	f7ff fd34 	bl	800774c <__hi0bits>
 8007ce4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007ce8:	e7e2      	b.n	8007cb0 <__d2b+0x70>
 8007cea:	bf00      	nop
 8007cec:	08009241 	.word	0x08009241
 8007cf0:	08009252 	.word	0x08009252

08007cf4 <__ssputs_r>:
 8007cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cf8:	688e      	ldr	r6, [r1, #8]
 8007cfa:	461f      	mov	r7, r3
 8007cfc:	42be      	cmp	r6, r7
 8007cfe:	680b      	ldr	r3, [r1, #0]
 8007d00:	4682      	mov	sl, r0
 8007d02:	460c      	mov	r4, r1
 8007d04:	4690      	mov	r8, r2
 8007d06:	d82c      	bhi.n	8007d62 <__ssputs_r+0x6e>
 8007d08:	898a      	ldrh	r2, [r1, #12]
 8007d0a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d0e:	d026      	beq.n	8007d5e <__ssputs_r+0x6a>
 8007d10:	6965      	ldr	r5, [r4, #20]
 8007d12:	6909      	ldr	r1, [r1, #16]
 8007d14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d18:	eba3 0901 	sub.w	r9, r3, r1
 8007d1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d20:	1c7b      	adds	r3, r7, #1
 8007d22:	444b      	add	r3, r9
 8007d24:	106d      	asrs	r5, r5, #1
 8007d26:	429d      	cmp	r5, r3
 8007d28:	bf38      	it	cc
 8007d2a:	461d      	movcc	r5, r3
 8007d2c:	0553      	lsls	r3, r2, #21
 8007d2e:	d527      	bpl.n	8007d80 <__ssputs_r+0x8c>
 8007d30:	4629      	mov	r1, r5
 8007d32:	f7ff fbd7 	bl	80074e4 <_malloc_r>
 8007d36:	4606      	mov	r6, r0
 8007d38:	b360      	cbz	r0, 8007d94 <__ssputs_r+0xa0>
 8007d3a:	6921      	ldr	r1, [r4, #16]
 8007d3c:	464a      	mov	r2, r9
 8007d3e:	f7fe fcd4 	bl	80066ea <memcpy>
 8007d42:	89a3      	ldrh	r3, [r4, #12]
 8007d44:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d4c:	81a3      	strh	r3, [r4, #12]
 8007d4e:	6126      	str	r6, [r4, #16]
 8007d50:	6165      	str	r5, [r4, #20]
 8007d52:	444e      	add	r6, r9
 8007d54:	eba5 0509 	sub.w	r5, r5, r9
 8007d58:	6026      	str	r6, [r4, #0]
 8007d5a:	60a5      	str	r5, [r4, #8]
 8007d5c:	463e      	mov	r6, r7
 8007d5e:	42be      	cmp	r6, r7
 8007d60:	d900      	bls.n	8007d64 <__ssputs_r+0x70>
 8007d62:	463e      	mov	r6, r7
 8007d64:	6820      	ldr	r0, [r4, #0]
 8007d66:	4632      	mov	r2, r6
 8007d68:	4641      	mov	r1, r8
 8007d6a:	f000 f9c9 	bl	8008100 <memmove>
 8007d6e:	68a3      	ldr	r3, [r4, #8]
 8007d70:	1b9b      	subs	r3, r3, r6
 8007d72:	60a3      	str	r3, [r4, #8]
 8007d74:	6823      	ldr	r3, [r4, #0]
 8007d76:	4433      	add	r3, r6
 8007d78:	6023      	str	r3, [r4, #0]
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d80:	462a      	mov	r2, r5
 8007d82:	f000 fa2d 	bl	80081e0 <_realloc_r>
 8007d86:	4606      	mov	r6, r0
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	d1e0      	bne.n	8007d4e <__ssputs_r+0x5a>
 8007d8c:	6921      	ldr	r1, [r4, #16]
 8007d8e:	4650      	mov	r0, sl
 8007d90:	f7ff fb34 	bl	80073fc <_free_r>
 8007d94:	230c      	movs	r3, #12
 8007d96:	f8ca 3000 	str.w	r3, [sl]
 8007d9a:	89a3      	ldrh	r3, [r4, #12]
 8007d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007da0:	81a3      	strh	r3, [r4, #12]
 8007da2:	f04f 30ff 	mov.w	r0, #4294967295
 8007da6:	e7e9      	b.n	8007d7c <__ssputs_r+0x88>

08007da8 <_svfiprintf_r>:
 8007da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dac:	4698      	mov	r8, r3
 8007dae:	898b      	ldrh	r3, [r1, #12]
 8007db0:	061b      	lsls	r3, r3, #24
 8007db2:	b09d      	sub	sp, #116	; 0x74
 8007db4:	4607      	mov	r7, r0
 8007db6:	460d      	mov	r5, r1
 8007db8:	4614      	mov	r4, r2
 8007dba:	d50e      	bpl.n	8007dda <_svfiprintf_r+0x32>
 8007dbc:	690b      	ldr	r3, [r1, #16]
 8007dbe:	b963      	cbnz	r3, 8007dda <_svfiprintf_r+0x32>
 8007dc0:	2140      	movs	r1, #64	; 0x40
 8007dc2:	f7ff fb8f 	bl	80074e4 <_malloc_r>
 8007dc6:	6028      	str	r0, [r5, #0]
 8007dc8:	6128      	str	r0, [r5, #16]
 8007dca:	b920      	cbnz	r0, 8007dd6 <_svfiprintf_r+0x2e>
 8007dcc:	230c      	movs	r3, #12
 8007dce:	603b      	str	r3, [r7, #0]
 8007dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd4:	e0d0      	b.n	8007f78 <_svfiprintf_r+0x1d0>
 8007dd6:	2340      	movs	r3, #64	; 0x40
 8007dd8:	616b      	str	r3, [r5, #20]
 8007dda:	2300      	movs	r3, #0
 8007ddc:	9309      	str	r3, [sp, #36]	; 0x24
 8007dde:	2320      	movs	r3, #32
 8007de0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007de4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007de8:	2330      	movs	r3, #48	; 0x30
 8007dea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007f90 <_svfiprintf_r+0x1e8>
 8007dee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007df2:	f04f 0901 	mov.w	r9, #1
 8007df6:	4623      	mov	r3, r4
 8007df8:	469a      	mov	sl, r3
 8007dfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dfe:	b10a      	cbz	r2, 8007e04 <_svfiprintf_r+0x5c>
 8007e00:	2a25      	cmp	r2, #37	; 0x25
 8007e02:	d1f9      	bne.n	8007df8 <_svfiprintf_r+0x50>
 8007e04:	ebba 0b04 	subs.w	fp, sl, r4
 8007e08:	d00b      	beq.n	8007e22 <_svfiprintf_r+0x7a>
 8007e0a:	465b      	mov	r3, fp
 8007e0c:	4622      	mov	r2, r4
 8007e0e:	4629      	mov	r1, r5
 8007e10:	4638      	mov	r0, r7
 8007e12:	f7ff ff6f 	bl	8007cf4 <__ssputs_r>
 8007e16:	3001      	adds	r0, #1
 8007e18:	f000 80a9 	beq.w	8007f6e <_svfiprintf_r+0x1c6>
 8007e1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e1e:	445a      	add	r2, fp
 8007e20:	9209      	str	r2, [sp, #36]	; 0x24
 8007e22:	f89a 3000 	ldrb.w	r3, [sl]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f000 80a1 	beq.w	8007f6e <_svfiprintf_r+0x1c6>
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e36:	f10a 0a01 	add.w	sl, sl, #1
 8007e3a:	9304      	str	r3, [sp, #16]
 8007e3c:	9307      	str	r3, [sp, #28]
 8007e3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e42:	931a      	str	r3, [sp, #104]	; 0x68
 8007e44:	4654      	mov	r4, sl
 8007e46:	2205      	movs	r2, #5
 8007e48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e4c:	4850      	ldr	r0, [pc, #320]	; (8007f90 <_svfiprintf_r+0x1e8>)
 8007e4e:	f7f8 f9c7 	bl	80001e0 <memchr>
 8007e52:	9a04      	ldr	r2, [sp, #16]
 8007e54:	b9d8      	cbnz	r0, 8007e8e <_svfiprintf_r+0xe6>
 8007e56:	06d0      	lsls	r0, r2, #27
 8007e58:	bf44      	itt	mi
 8007e5a:	2320      	movmi	r3, #32
 8007e5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e60:	0711      	lsls	r1, r2, #28
 8007e62:	bf44      	itt	mi
 8007e64:	232b      	movmi	r3, #43	; 0x2b
 8007e66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e6a:	f89a 3000 	ldrb.w	r3, [sl]
 8007e6e:	2b2a      	cmp	r3, #42	; 0x2a
 8007e70:	d015      	beq.n	8007e9e <_svfiprintf_r+0xf6>
 8007e72:	9a07      	ldr	r2, [sp, #28]
 8007e74:	4654      	mov	r4, sl
 8007e76:	2000      	movs	r0, #0
 8007e78:	f04f 0c0a 	mov.w	ip, #10
 8007e7c:	4621      	mov	r1, r4
 8007e7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e82:	3b30      	subs	r3, #48	; 0x30
 8007e84:	2b09      	cmp	r3, #9
 8007e86:	d94d      	bls.n	8007f24 <_svfiprintf_r+0x17c>
 8007e88:	b1b0      	cbz	r0, 8007eb8 <_svfiprintf_r+0x110>
 8007e8a:	9207      	str	r2, [sp, #28]
 8007e8c:	e014      	b.n	8007eb8 <_svfiprintf_r+0x110>
 8007e8e:	eba0 0308 	sub.w	r3, r0, r8
 8007e92:	fa09 f303 	lsl.w	r3, r9, r3
 8007e96:	4313      	orrs	r3, r2
 8007e98:	9304      	str	r3, [sp, #16]
 8007e9a:	46a2      	mov	sl, r4
 8007e9c:	e7d2      	b.n	8007e44 <_svfiprintf_r+0x9c>
 8007e9e:	9b03      	ldr	r3, [sp, #12]
 8007ea0:	1d19      	adds	r1, r3, #4
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	9103      	str	r1, [sp, #12]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	bfbb      	ittet	lt
 8007eaa:	425b      	neglt	r3, r3
 8007eac:	f042 0202 	orrlt.w	r2, r2, #2
 8007eb0:	9307      	strge	r3, [sp, #28]
 8007eb2:	9307      	strlt	r3, [sp, #28]
 8007eb4:	bfb8      	it	lt
 8007eb6:	9204      	strlt	r2, [sp, #16]
 8007eb8:	7823      	ldrb	r3, [r4, #0]
 8007eba:	2b2e      	cmp	r3, #46	; 0x2e
 8007ebc:	d10c      	bne.n	8007ed8 <_svfiprintf_r+0x130>
 8007ebe:	7863      	ldrb	r3, [r4, #1]
 8007ec0:	2b2a      	cmp	r3, #42	; 0x2a
 8007ec2:	d134      	bne.n	8007f2e <_svfiprintf_r+0x186>
 8007ec4:	9b03      	ldr	r3, [sp, #12]
 8007ec6:	1d1a      	adds	r2, r3, #4
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	9203      	str	r2, [sp, #12]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	bfb8      	it	lt
 8007ed0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ed4:	3402      	adds	r4, #2
 8007ed6:	9305      	str	r3, [sp, #20]
 8007ed8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007fa0 <_svfiprintf_r+0x1f8>
 8007edc:	7821      	ldrb	r1, [r4, #0]
 8007ede:	2203      	movs	r2, #3
 8007ee0:	4650      	mov	r0, sl
 8007ee2:	f7f8 f97d 	bl	80001e0 <memchr>
 8007ee6:	b138      	cbz	r0, 8007ef8 <_svfiprintf_r+0x150>
 8007ee8:	9b04      	ldr	r3, [sp, #16]
 8007eea:	eba0 000a 	sub.w	r0, r0, sl
 8007eee:	2240      	movs	r2, #64	; 0x40
 8007ef0:	4082      	lsls	r2, r0
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	3401      	adds	r4, #1
 8007ef6:	9304      	str	r3, [sp, #16]
 8007ef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007efc:	4825      	ldr	r0, [pc, #148]	; (8007f94 <_svfiprintf_r+0x1ec>)
 8007efe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f02:	2206      	movs	r2, #6
 8007f04:	f7f8 f96c 	bl	80001e0 <memchr>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	d038      	beq.n	8007f7e <_svfiprintf_r+0x1d6>
 8007f0c:	4b22      	ldr	r3, [pc, #136]	; (8007f98 <_svfiprintf_r+0x1f0>)
 8007f0e:	bb1b      	cbnz	r3, 8007f58 <_svfiprintf_r+0x1b0>
 8007f10:	9b03      	ldr	r3, [sp, #12]
 8007f12:	3307      	adds	r3, #7
 8007f14:	f023 0307 	bic.w	r3, r3, #7
 8007f18:	3308      	adds	r3, #8
 8007f1a:	9303      	str	r3, [sp, #12]
 8007f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f1e:	4433      	add	r3, r6
 8007f20:	9309      	str	r3, [sp, #36]	; 0x24
 8007f22:	e768      	b.n	8007df6 <_svfiprintf_r+0x4e>
 8007f24:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f28:	460c      	mov	r4, r1
 8007f2a:	2001      	movs	r0, #1
 8007f2c:	e7a6      	b.n	8007e7c <_svfiprintf_r+0xd4>
 8007f2e:	2300      	movs	r3, #0
 8007f30:	3401      	adds	r4, #1
 8007f32:	9305      	str	r3, [sp, #20]
 8007f34:	4619      	mov	r1, r3
 8007f36:	f04f 0c0a 	mov.w	ip, #10
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f40:	3a30      	subs	r2, #48	; 0x30
 8007f42:	2a09      	cmp	r2, #9
 8007f44:	d903      	bls.n	8007f4e <_svfiprintf_r+0x1a6>
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d0c6      	beq.n	8007ed8 <_svfiprintf_r+0x130>
 8007f4a:	9105      	str	r1, [sp, #20]
 8007f4c:	e7c4      	b.n	8007ed8 <_svfiprintf_r+0x130>
 8007f4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f52:	4604      	mov	r4, r0
 8007f54:	2301      	movs	r3, #1
 8007f56:	e7f0      	b.n	8007f3a <_svfiprintf_r+0x192>
 8007f58:	ab03      	add	r3, sp, #12
 8007f5a:	9300      	str	r3, [sp, #0]
 8007f5c:	462a      	mov	r2, r5
 8007f5e:	4b0f      	ldr	r3, [pc, #60]	; (8007f9c <_svfiprintf_r+0x1f4>)
 8007f60:	a904      	add	r1, sp, #16
 8007f62:	4638      	mov	r0, r7
 8007f64:	f7fd fe56 	bl	8005c14 <_printf_float>
 8007f68:	1c42      	adds	r2, r0, #1
 8007f6a:	4606      	mov	r6, r0
 8007f6c:	d1d6      	bne.n	8007f1c <_svfiprintf_r+0x174>
 8007f6e:	89ab      	ldrh	r3, [r5, #12]
 8007f70:	065b      	lsls	r3, r3, #25
 8007f72:	f53f af2d 	bmi.w	8007dd0 <_svfiprintf_r+0x28>
 8007f76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f78:	b01d      	add	sp, #116	; 0x74
 8007f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f7e:	ab03      	add	r3, sp, #12
 8007f80:	9300      	str	r3, [sp, #0]
 8007f82:	462a      	mov	r2, r5
 8007f84:	4b05      	ldr	r3, [pc, #20]	; (8007f9c <_svfiprintf_r+0x1f4>)
 8007f86:	a904      	add	r1, sp, #16
 8007f88:	4638      	mov	r0, r7
 8007f8a:	f7fe f8e7 	bl	800615c <_printf_i>
 8007f8e:	e7eb      	b.n	8007f68 <_svfiprintf_r+0x1c0>
 8007f90:	080093ac 	.word	0x080093ac
 8007f94:	080093b6 	.word	0x080093b6
 8007f98:	08005c15 	.word	0x08005c15
 8007f9c:	08007cf5 	.word	0x08007cf5
 8007fa0:	080093b2 	.word	0x080093b2

08007fa4 <__sflush_r>:
 8007fa4:	898a      	ldrh	r2, [r1, #12]
 8007fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007faa:	4605      	mov	r5, r0
 8007fac:	0710      	lsls	r0, r2, #28
 8007fae:	460c      	mov	r4, r1
 8007fb0:	d458      	bmi.n	8008064 <__sflush_r+0xc0>
 8007fb2:	684b      	ldr	r3, [r1, #4]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	dc05      	bgt.n	8007fc4 <__sflush_r+0x20>
 8007fb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	dc02      	bgt.n	8007fc4 <__sflush_r+0x20>
 8007fbe:	2000      	movs	r0, #0
 8007fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fc6:	2e00      	cmp	r6, #0
 8007fc8:	d0f9      	beq.n	8007fbe <__sflush_r+0x1a>
 8007fca:	2300      	movs	r3, #0
 8007fcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007fd0:	682f      	ldr	r7, [r5, #0]
 8007fd2:	6a21      	ldr	r1, [r4, #32]
 8007fd4:	602b      	str	r3, [r5, #0]
 8007fd6:	d032      	beq.n	800803e <__sflush_r+0x9a>
 8007fd8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007fda:	89a3      	ldrh	r3, [r4, #12]
 8007fdc:	075a      	lsls	r2, r3, #29
 8007fde:	d505      	bpl.n	8007fec <__sflush_r+0x48>
 8007fe0:	6863      	ldr	r3, [r4, #4]
 8007fe2:	1ac0      	subs	r0, r0, r3
 8007fe4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007fe6:	b10b      	cbz	r3, 8007fec <__sflush_r+0x48>
 8007fe8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007fea:	1ac0      	subs	r0, r0, r3
 8007fec:	2300      	movs	r3, #0
 8007fee:	4602      	mov	r2, r0
 8007ff0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ff2:	6a21      	ldr	r1, [r4, #32]
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	47b0      	blx	r6
 8007ff8:	1c43      	adds	r3, r0, #1
 8007ffa:	89a3      	ldrh	r3, [r4, #12]
 8007ffc:	d106      	bne.n	800800c <__sflush_r+0x68>
 8007ffe:	6829      	ldr	r1, [r5, #0]
 8008000:	291d      	cmp	r1, #29
 8008002:	d82b      	bhi.n	800805c <__sflush_r+0xb8>
 8008004:	4a29      	ldr	r2, [pc, #164]	; (80080ac <__sflush_r+0x108>)
 8008006:	410a      	asrs	r2, r1
 8008008:	07d6      	lsls	r6, r2, #31
 800800a:	d427      	bmi.n	800805c <__sflush_r+0xb8>
 800800c:	2200      	movs	r2, #0
 800800e:	6062      	str	r2, [r4, #4]
 8008010:	04d9      	lsls	r1, r3, #19
 8008012:	6922      	ldr	r2, [r4, #16]
 8008014:	6022      	str	r2, [r4, #0]
 8008016:	d504      	bpl.n	8008022 <__sflush_r+0x7e>
 8008018:	1c42      	adds	r2, r0, #1
 800801a:	d101      	bne.n	8008020 <__sflush_r+0x7c>
 800801c:	682b      	ldr	r3, [r5, #0]
 800801e:	b903      	cbnz	r3, 8008022 <__sflush_r+0x7e>
 8008020:	6560      	str	r0, [r4, #84]	; 0x54
 8008022:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008024:	602f      	str	r7, [r5, #0]
 8008026:	2900      	cmp	r1, #0
 8008028:	d0c9      	beq.n	8007fbe <__sflush_r+0x1a>
 800802a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800802e:	4299      	cmp	r1, r3
 8008030:	d002      	beq.n	8008038 <__sflush_r+0x94>
 8008032:	4628      	mov	r0, r5
 8008034:	f7ff f9e2 	bl	80073fc <_free_r>
 8008038:	2000      	movs	r0, #0
 800803a:	6360      	str	r0, [r4, #52]	; 0x34
 800803c:	e7c0      	b.n	8007fc0 <__sflush_r+0x1c>
 800803e:	2301      	movs	r3, #1
 8008040:	4628      	mov	r0, r5
 8008042:	47b0      	blx	r6
 8008044:	1c41      	adds	r1, r0, #1
 8008046:	d1c8      	bne.n	8007fda <__sflush_r+0x36>
 8008048:	682b      	ldr	r3, [r5, #0]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d0c5      	beq.n	8007fda <__sflush_r+0x36>
 800804e:	2b1d      	cmp	r3, #29
 8008050:	d001      	beq.n	8008056 <__sflush_r+0xb2>
 8008052:	2b16      	cmp	r3, #22
 8008054:	d101      	bne.n	800805a <__sflush_r+0xb6>
 8008056:	602f      	str	r7, [r5, #0]
 8008058:	e7b1      	b.n	8007fbe <__sflush_r+0x1a>
 800805a:	89a3      	ldrh	r3, [r4, #12]
 800805c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008060:	81a3      	strh	r3, [r4, #12]
 8008062:	e7ad      	b.n	8007fc0 <__sflush_r+0x1c>
 8008064:	690f      	ldr	r7, [r1, #16]
 8008066:	2f00      	cmp	r7, #0
 8008068:	d0a9      	beq.n	8007fbe <__sflush_r+0x1a>
 800806a:	0793      	lsls	r3, r2, #30
 800806c:	680e      	ldr	r6, [r1, #0]
 800806e:	bf08      	it	eq
 8008070:	694b      	ldreq	r3, [r1, #20]
 8008072:	600f      	str	r7, [r1, #0]
 8008074:	bf18      	it	ne
 8008076:	2300      	movne	r3, #0
 8008078:	eba6 0807 	sub.w	r8, r6, r7
 800807c:	608b      	str	r3, [r1, #8]
 800807e:	f1b8 0f00 	cmp.w	r8, #0
 8008082:	dd9c      	ble.n	8007fbe <__sflush_r+0x1a>
 8008084:	6a21      	ldr	r1, [r4, #32]
 8008086:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008088:	4643      	mov	r3, r8
 800808a:	463a      	mov	r2, r7
 800808c:	4628      	mov	r0, r5
 800808e:	47b0      	blx	r6
 8008090:	2800      	cmp	r0, #0
 8008092:	dc06      	bgt.n	80080a2 <__sflush_r+0xfe>
 8008094:	89a3      	ldrh	r3, [r4, #12]
 8008096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800809a:	81a3      	strh	r3, [r4, #12]
 800809c:	f04f 30ff 	mov.w	r0, #4294967295
 80080a0:	e78e      	b.n	8007fc0 <__sflush_r+0x1c>
 80080a2:	4407      	add	r7, r0
 80080a4:	eba8 0800 	sub.w	r8, r8, r0
 80080a8:	e7e9      	b.n	800807e <__sflush_r+0xda>
 80080aa:	bf00      	nop
 80080ac:	dfbffffe 	.word	0xdfbffffe

080080b0 <_fflush_r>:
 80080b0:	b538      	push	{r3, r4, r5, lr}
 80080b2:	690b      	ldr	r3, [r1, #16]
 80080b4:	4605      	mov	r5, r0
 80080b6:	460c      	mov	r4, r1
 80080b8:	b913      	cbnz	r3, 80080c0 <_fflush_r+0x10>
 80080ba:	2500      	movs	r5, #0
 80080bc:	4628      	mov	r0, r5
 80080be:	bd38      	pop	{r3, r4, r5, pc}
 80080c0:	b118      	cbz	r0, 80080ca <_fflush_r+0x1a>
 80080c2:	6a03      	ldr	r3, [r0, #32]
 80080c4:	b90b      	cbnz	r3, 80080ca <_fflush_r+0x1a>
 80080c6:	f7fe f9f7 	bl	80064b8 <__sinit>
 80080ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d0f3      	beq.n	80080ba <_fflush_r+0xa>
 80080d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80080d4:	07d0      	lsls	r0, r2, #31
 80080d6:	d404      	bmi.n	80080e2 <_fflush_r+0x32>
 80080d8:	0599      	lsls	r1, r3, #22
 80080da:	d402      	bmi.n	80080e2 <_fflush_r+0x32>
 80080dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080de:	f7fe fb02 	bl	80066e6 <__retarget_lock_acquire_recursive>
 80080e2:	4628      	mov	r0, r5
 80080e4:	4621      	mov	r1, r4
 80080e6:	f7ff ff5d 	bl	8007fa4 <__sflush_r>
 80080ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080ec:	07da      	lsls	r2, r3, #31
 80080ee:	4605      	mov	r5, r0
 80080f0:	d4e4      	bmi.n	80080bc <_fflush_r+0xc>
 80080f2:	89a3      	ldrh	r3, [r4, #12]
 80080f4:	059b      	lsls	r3, r3, #22
 80080f6:	d4e1      	bmi.n	80080bc <_fflush_r+0xc>
 80080f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080fa:	f7fe faf5 	bl	80066e8 <__retarget_lock_release_recursive>
 80080fe:	e7dd      	b.n	80080bc <_fflush_r+0xc>

08008100 <memmove>:
 8008100:	4288      	cmp	r0, r1
 8008102:	b510      	push	{r4, lr}
 8008104:	eb01 0402 	add.w	r4, r1, r2
 8008108:	d902      	bls.n	8008110 <memmove+0x10>
 800810a:	4284      	cmp	r4, r0
 800810c:	4623      	mov	r3, r4
 800810e:	d807      	bhi.n	8008120 <memmove+0x20>
 8008110:	1e43      	subs	r3, r0, #1
 8008112:	42a1      	cmp	r1, r4
 8008114:	d008      	beq.n	8008128 <memmove+0x28>
 8008116:	f811 2b01 	ldrb.w	r2, [r1], #1
 800811a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800811e:	e7f8      	b.n	8008112 <memmove+0x12>
 8008120:	4402      	add	r2, r0
 8008122:	4601      	mov	r1, r0
 8008124:	428a      	cmp	r2, r1
 8008126:	d100      	bne.n	800812a <memmove+0x2a>
 8008128:	bd10      	pop	{r4, pc}
 800812a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800812e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008132:	e7f7      	b.n	8008124 <memmove+0x24>

08008134 <_sbrk_r>:
 8008134:	b538      	push	{r3, r4, r5, lr}
 8008136:	4d06      	ldr	r5, [pc, #24]	; (8008150 <_sbrk_r+0x1c>)
 8008138:	2300      	movs	r3, #0
 800813a:	4604      	mov	r4, r0
 800813c:	4608      	mov	r0, r1
 800813e:	602b      	str	r3, [r5, #0]
 8008140:	f7f9 fa2c 	bl	800159c <_sbrk>
 8008144:	1c43      	adds	r3, r0, #1
 8008146:	d102      	bne.n	800814e <_sbrk_r+0x1a>
 8008148:	682b      	ldr	r3, [r5, #0]
 800814a:	b103      	cbz	r3, 800814e <_sbrk_r+0x1a>
 800814c:	6023      	str	r3, [r4, #0]
 800814e:	bd38      	pop	{r3, r4, r5, pc}
 8008150:	2000052c 	.word	0x2000052c

08008154 <__assert_func>:
 8008154:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008156:	4614      	mov	r4, r2
 8008158:	461a      	mov	r2, r3
 800815a:	4b09      	ldr	r3, [pc, #36]	; (8008180 <__assert_func+0x2c>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4605      	mov	r5, r0
 8008160:	68d8      	ldr	r0, [r3, #12]
 8008162:	b14c      	cbz	r4, 8008178 <__assert_func+0x24>
 8008164:	4b07      	ldr	r3, [pc, #28]	; (8008184 <__assert_func+0x30>)
 8008166:	9100      	str	r1, [sp, #0]
 8008168:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800816c:	4906      	ldr	r1, [pc, #24]	; (8008188 <__assert_func+0x34>)
 800816e:	462b      	mov	r3, r5
 8008170:	f000 f872 	bl	8008258 <fiprintf>
 8008174:	f000 f882 	bl	800827c <abort>
 8008178:	4b04      	ldr	r3, [pc, #16]	; (800818c <__assert_func+0x38>)
 800817a:	461c      	mov	r4, r3
 800817c:	e7f3      	b.n	8008166 <__assert_func+0x12>
 800817e:	bf00      	nop
 8008180:	2000006c 	.word	0x2000006c
 8008184:	080093c7 	.word	0x080093c7
 8008188:	080093d4 	.word	0x080093d4
 800818c:	08009402 	.word	0x08009402

08008190 <_calloc_r>:
 8008190:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008192:	fba1 2402 	umull	r2, r4, r1, r2
 8008196:	b94c      	cbnz	r4, 80081ac <_calloc_r+0x1c>
 8008198:	4611      	mov	r1, r2
 800819a:	9201      	str	r2, [sp, #4]
 800819c:	f7ff f9a2 	bl	80074e4 <_malloc_r>
 80081a0:	9a01      	ldr	r2, [sp, #4]
 80081a2:	4605      	mov	r5, r0
 80081a4:	b930      	cbnz	r0, 80081b4 <_calloc_r+0x24>
 80081a6:	4628      	mov	r0, r5
 80081a8:	b003      	add	sp, #12
 80081aa:	bd30      	pop	{r4, r5, pc}
 80081ac:	220c      	movs	r2, #12
 80081ae:	6002      	str	r2, [r0, #0]
 80081b0:	2500      	movs	r5, #0
 80081b2:	e7f8      	b.n	80081a6 <_calloc_r+0x16>
 80081b4:	4621      	mov	r1, r4
 80081b6:	f7fe fa18 	bl	80065ea <memset>
 80081ba:	e7f4      	b.n	80081a6 <_calloc_r+0x16>

080081bc <__ascii_mbtowc>:
 80081bc:	b082      	sub	sp, #8
 80081be:	b901      	cbnz	r1, 80081c2 <__ascii_mbtowc+0x6>
 80081c0:	a901      	add	r1, sp, #4
 80081c2:	b142      	cbz	r2, 80081d6 <__ascii_mbtowc+0x1a>
 80081c4:	b14b      	cbz	r3, 80081da <__ascii_mbtowc+0x1e>
 80081c6:	7813      	ldrb	r3, [r2, #0]
 80081c8:	600b      	str	r3, [r1, #0]
 80081ca:	7812      	ldrb	r2, [r2, #0]
 80081cc:	1e10      	subs	r0, r2, #0
 80081ce:	bf18      	it	ne
 80081d0:	2001      	movne	r0, #1
 80081d2:	b002      	add	sp, #8
 80081d4:	4770      	bx	lr
 80081d6:	4610      	mov	r0, r2
 80081d8:	e7fb      	b.n	80081d2 <__ascii_mbtowc+0x16>
 80081da:	f06f 0001 	mvn.w	r0, #1
 80081de:	e7f8      	b.n	80081d2 <__ascii_mbtowc+0x16>

080081e0 <_realloc_r>:
 80081e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081e4:	4680      	mov	r8, r0
 80081e6:	4614      	mov	r4, r2
 80081e8:	460e      	mov	r6, r1
 80081ea:	b921      	cbnz	r1, 80081f6 <_realloc_r+0x16>
 80081ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081f0:	4611      	mov	r1, r2
 80081f2:	f7ff b977 	b.w	80074e4 <_malloc_r>
 80081f6:	b92a      	cbnz	r2, 8008204 <_realloc_r+0x24>
 80081f8:	f7ff f900 	bl	80073fc <_free_r>
 80081fc:	4625      	mov	r5, r4
 80081fe:	4628      	mov	r0, r5
 8008200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008204:	f000 f841 	bl	800828a <_malloc_usable_size_r>
 8008208:	4284      	cmp	r4, r0
 800820a:	4607      	mov	r7, r0
 800820c:	d802      	bhi.n	8008214 <_realloc_r+0x34>
 800820e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008212:	d812      	bhi.n	800823a <_realloc_r+0x5a>
 8008214:	4621      	mov	r1, r4
 8008216:	4640      	mov	r0, r8
 8008218:	f7ff f964 	bl	80074e4 <_malloc_r>
 800821c:	4605      	mov	r5, r0
 800821e:	2800      	cmp	r0, #0
 8008220:	d0ed      	beq.n	80081fe <_realloc_r+0x1e>
 8008222:	42bc      	cmp	r4, r7
 8008224:	4622      	mov	r2, r4
 8008226:	4631      	mov	r1, r6
 8008228:	bf28      	it	cs
 800822a:	463a      	movcs	r2, r7
 800822c:	f7fe fa5d 	bl	80066ea <memcpy>
 8008230:	4631      	mov	r1, r6
 8008232:	4640      	mov	r0, r8
 8008234:	f7ff f8e2 	bl	80073fc <_free_r>
 8008238:	e7e1      	b.n	80081fe <_realloc_r+0x1e>
 800823a:	4635      	mov	r5, r6
 800823c:	e7df      	b.n	80081fe <_realloc_r+0x1e>

0800823e <__ascii_wctomb>:
 800823e:	b149      	cbz	r1, 8008254 <__ascii_wctomb+0x16>
 8008240:	2aff      	cmp	r2, #255	; 0xff
 8008242:	bf85      	ittet	hi
 8008244:	238a      	movhi	r3, #138	; 0x8a
 8008246:	6003      	strhi	r3, [r0, #0]
 8008248:	700a      	strbls	r2, [r1, #0]
 800824a:	f04f 30ff 	movhi.w	r0, #4294967295
 800824e:	bf98      	it	ls
 8008250:	2001      	movls	r0, #1
 8008252:	4770      	bx	lr
 8008254:	4608      	mov	r0, r1
 8008256:	4770      	bx	lr

08008258 <fiprintf>:
 8008258:	b40e      	push	{r1, r2, r3}
 800825a:	b503      	push	{r0, r1, lr}
 800825c:	4601      	mov	r1, r0
 800825e:	ab03      	add	r3, sp, #12
 8008260:	4805      	ldr	r0, [pc, #20]	; (8008278 <fiprintf+0x20>)
 8008262:	f853 2b04 	ldr.w	r2, [r3], #4
 8008266:	6800      	ldr	r0, [r0, #0]
 8008268:	9301      	str	r3, [sp, #4]
 800826a:	f000 f83f 	bl	80082ec <_vfiprintf_r>
 800826e:	b002      	add	sp, #8
 8008270:	f85d eb04 	ldr.w	lr, [sp], #4
 8008274:	b003      	add	sp, #12
 8008276:	4770      	bx	lr
 8008278:	2000006c 	.word	0x2000006c

0800827c <abort>:
 800827c:	b508      	push	{r3, lr}
 800827e:	2006      	movs	r0, #6
 8008280:	f000 fa0c 	bl	800869c <raise>
 8008284:	2001      	movs	r0, #1
 8008286:	f7f9 f911 	bl	80014ac <_exit>

0800828a <_malloc_usable_size_r>:
 800828a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800828e:	1f18      	subs	r0, r3, #4
 8008290:	2b00      	cmp	r3, #0
 8008292:	bfbc      	itt	lt
 8008294:	580b      	ldrlt	r3, [r1, r0]
 8008296:	18c0      	addlt	r0, r0, r3
 8008298:	4770      	bx	lr

0800829a <__sfputc_r>:
 800829a:	6893      	ldr	r3, [r2, #8]
 800829c:	3b01      	subs	r3, #1
 800829e:	2b00      	cmp	r3, #0
 80082a0:	b410      	push	{r4}
 80082a2:	6093      	str	r3, [r2, #8]
 80082a4:	da08      	bge.n	80082b8 <__sfputc_r+0x1e>
 80082a6:	6994      	ldr	r4, [r2, #24]
 80082a8:	42a3      	cmp	r3, r4
 80082aa:	db01      	blt.n	80082b0 <__sfputc_r+0x16>
 80082ac:	290a      	cmp	r1, #10
 80082ae:	d103      	bne.n	80082b8 <__sfputc_r+0x1e>
 80082b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082b4:	f000 b934 	b.w	8008520 <__swbuf_r>
 80082b8:	6813      	ldr	r3, [r2, #0]
 80082ba:	1c58      	adds	r0, r3, #1
 80082bc:	6010      	str	r0, [r2, #0]
 80082be:	7019      	strb	r1, [r3, #0]
 80082c0:	4608      	mov	r0, r1
 80082c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <__sfputs_r>:
 80082c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ca:	4606      	mov	r6, r0
 80082cc:	460f      	mov	r7, r1
 80082ce:	4614      	mov	r4, r2
 80082d0:	18d5      	adds	r5, r2, r3
 80082d2:	42ac      	cmp	r4, r5
 80082d4:	d101      	bne.n	80082da <__sfputs_r+0x12>
 80082d6:	2000      	movs	r0, #0
 80082d8:	e007      	b.n	80082ea <__sfputs_r+0x22>
 80082da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082de:	463a      	mov	r2, r7
 80082e0:	4630      	mov	r0, r6
 80082e2:	f7ff ffda 	bl	800829a <__sfputc_r>
 80082e6:	1c43      	adds	r3, r0, #1
 80082e8:	d1f3      	bne.n	80082d2 <__sfputs_r+0xa>
 80082ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080082ec <_vfiprintf_r>:
 80082ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f0:	460d      	mov	r5, r1
 80082f2:	b09d      	sub	sp, #116	; 0x74
 80082f4:	4614      	mov	r4, r2
 80082f6:	4698      	mov	r8, r3
 80082f8:	4606      	mov	r6, r0
 80082fa:	b118      	cbz	r0, 8008304 <_vfiprintf_r+0x18>
 80082fc:	6a03      	ldr	r3, [r0, #32]
 80082fe:	b90b      	cbnz	r3, 8008304 <_vfiprintf_r+0x18>
 8008300:	f7fe f8da 	bl	80064b8 <__sinit>
 8008304:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008306:	07d9      	lsls	r1, r3, #31
 8008308:	d405      	bmi.n	8008316 <_vfiprintf_r+0x2a>
 800830a:	89ab      	ldrh	r3, [r5, #12]
 800830c:	059a      	lsls	r2, r3, #22
 800830e:	d402      	bmi.n	8008316 <_vfiprintf_r+0x2a>
 8008310:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008312:	f7fe f9e8 	bl	80066e6 <__retarget_lock_acquire_recursive>
 8008316:	89ab      	ldrh	r3, [r5, #12]
 8008318:	071b      	lsls	r3, r3, #28
 800831a:	d501      	bpl.n	8008320 <_vfiprintf_r+0x34>
 800831c:	692b      	ldr	r3, [r5, #16]
 800831e:	b99b      	cbnz	r3, 8008348 <_vfiprintf_r+0x5c>
 8008320:	4629      	mov	r1, r5
 8008322:	4630      	mov	r0, r6
 8008324:	f000 f93a 	bl	800859c <__swsetup_r>
 8008328:	b170      	cbz	r0, 8008348 <_vfiprintf_r+0x5c>
 800832a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800832c:	07dc      	lsls	r4, r3, #31
 800832e:	d504      	bpl.n	800833a <_vfiprintf_r+0x4e>
 8008330:	f04f 30ff 	mov.w	r0, #4294967295
 8008334:	b01d      	add	sp, #116	; 0x74
 8008336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800833a:	89ab      	ldrh	r3, [r5, #12]
 800833c:	0598      	lsls	r0, r3, #22
 800833e:	d4f7      	bmi.n	8008330 <_vfiprintf_r+0x44>
 8008340:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008342:	f7fe f9d1 	bl	80066e8 <__retarget_lock_release_recursive>
 8008346:	e7f3      	b.n	8008330 <_vfiprintf_r+0x44>
 8008348:	2300      	movs	r3, #0
 800834a:	9309      	str	r3, [sp, #36]	; 0x24
 800834c:	2320      	movs	r3, #32
 800834e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008352:	f8cd 800c 	str.w	r8, [sp, #12]
 8008356:	2330      	movs	r3, #48	; 0x30
 8008358:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800850c <_vfiprintf_r+0x220>
 800835c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008360:	f04f 0901 	mov.w	r9, #1
 8008364:	4623      	mov	r3, r4
 8008366:	469a      	mov	sl, r3
 8008368:	f813 2b01 	ldrb.w	r2, [r3], #1
 800836c:	b10a      	cbz	r2, 8008372 <_vfiprintf_r+0x86>
 800836e:	2a25      	cmp	r2, #37	; 0x25
 8008370:	d1f9      	bne.n	8008366 <_vfiprintf_r+0x7a>
 8008372:	ebba 0b04 	subs.w	fp, sl, r4
 8008376:	d00b      	beq.n	8008390 <_vfiprintf_r+0xa4>
 8008378:	465b      	mov	r3, fp
 800837a:	4622      	mov	r2, r4
 800837c:	4629      	mov	r1, r5
 800837e:	4630      	mov	r0, r6
 8008380:	f7ff ffa2 	bl	80082c8 <__sfputs_r>
 8008384:	3001      	adds	r0, #1
 8008386:	f000 80a9 	beq.w	80084dc <_vfiprintf_r+0x1f0>
 800838a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800838c:	445a      	add	r2, fp
 800838e:	9209      	str	r2, [sp, #36]	; 0x24
 8008390:	f89a 3000 	ldrb.w	r3, [sl]
 8008394:	2b00      	cmp	r3, #0
 8008396:	f000 80a1 	beq.w	80084dc <_vfiprintf_r+0x1f0>
 800839a:	2300      	movs	r3, #0
 800839c:	f04f 32ff 	mov.w	r2, #4294967295
 80083a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083a4:	f10a 0a01 	add.w	sl, sl, #1
 80083a8:	9304      	str	r3, [sp, #16]
 80083aa:	9307      	str	r3, [sp, #28]
 80083ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083b0:	931a      	str	r3, [sp, #104]	; 0x68
 80083b2:	4654      	mov	r4, sl
 80083b4:	2205      	movs	r2, #5
 80083b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083ba:	4854      	ldr	r0, [pc, #336]	; (800850c <_vfiprintf_r+0x220>)
 80083bc:	f7f7 ff10 	bl	80001e0 <memchr>
 80083c0:	9a04      	ldr	r2, [sp, #16]
 80083c2:	b9d8      	cbnz	r0, 80083fc <_vfiprintf_r+0x110>
 80083c4:	06d1      	lsls	r1, r2, #27
 80083c6:	bf44      	itt	mi
 80083c8:	2320      	movmi	r3, #32
 80083ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083ce:	0713      	lsls	r3, r2, #28
 80083d0:	bf44      	itt	mi
 80083d2:	232b      	movmi	r3, #43	; 0x2b
 80083d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083d8:	f89a 3000 	ldrb.w	r3, [sl]
 80083dc:	2b2a      	cmp	r3, #42	; 0x2a
 80083de:	d015      	beq.n	800840c <_vfiprintf_r+0x120>
 80083e0:	9a07      	ldr	r2, [sp, #28]
 80083e2:	4654      	mov	r4, sl
 80083e4:	2000      	movs	r0, #0
 80083e6:	f04f 0c0a 	mov.w	ip, #10
 80083ea:	4621      	mov	r1, r4
 80083ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083f0:	3b30      	subs	r3, #48	; 0x30
 80083f2:	2b09      	cmp	r3, #9
 80083f4:	d94d      	bls.n	8008492 <_vfiprintf_r+0x1a6>
 80083f6:	b1b0      	cbz	r0, 8008426 <_vfiprintf_r+0x13a>
 80083f8:	9207      	str	r2, [sp, #28]
 80083fa:	e014      	b.n	8008426 <_vfiprintf_r+0x13a>
 80083fc:	eba0 0308 	sub.w	r3, r0, r8
 8008400:	fa09 f303 	lsl.w	r3, r9, r3
 8008404:	4313      	orrs	r3, r2
 8008406:	9304      	str	r3, [sp, #16]
 8008408:	46a2      	mov	sl, r4
 800840a:	e7d2      	b.n	80083b2 <_vfiprintf_r+0xc6>
 800840c:	9b03      	ldr	r3, [sp, #12]
 800840e:	1d19      	adds	r1, r3, #4
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	9103      	str	r1, [sp, #12]
 8008414:	2b00      	cmp	r3, #0
 8008416:	bfbb      	ittet	lt
 8008418:	425b      	neglt	r3, r3
 800841a:	f042 0202 	orrlt.w	r2, r2, #2
 800841e:	9307      	strge	r3, [sp, #28]
 8008420:	9307      	strlt	r3, [sp, #28]
 8008422:	bfb8      	it	lt
 8008424:	9204      	strlt	r2, [sp, #16]
 8008426:	7823      	ldrb	r3, [r4, #0]
 8008428:	2b2e      	cmp	r3, #46	; 0x2e
 800842a:	d10c      	bne.n	8008446 <_vfiprintf_r+0x15a>
 800842c:	7863      	ldrb	r3, [r4, #1]
 800842e:	2b2a      	cmp	r3, #42	; 0x2a
 8008430:	d134      	bne.n	800849c <_vfiprintf_r+0x1b0>
 8008432:	9b03      	ldr	r3, [sp, #12]
 8008434:	1d1a      	adds	r2, r3, #4
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	9203      	str	r2, [sp, #12]
 800843a:	2b00      	cmp	r3, #0
 800843c:	bfb8      	it	lt
 800843e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008442:	3402      	adds	r4, #2
 8008444:	9305      	str	r3, [sp, #20]
 8008446:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800851c <_vfiprintf_r+0x230>
 800844a:	7821      	ldrb	r1, [r4, #0]
 800844c:	2203      	movs	r2, #3
 800844e:	4650      	mov	r0, sl
 8008450:	f7f7 fec6 	bl	80001e0 <memchr>
 8008454:	b138      	cbz	r0, 8008466 <_vfiprintf_r+0x17a>
 8008456:	9b04      	ldr	r3, [sp, #16]
 8008458:	eba0 000a 	sub.w	r0, r0, sl
 800845c:	2240      	movs	r2, #64	; 0x40
 800845e:	4082      	lsls	r2, r0
 8008460:	4313      	orrs	r3, r2
 8008462:	3401      	adds	r4, #1
 8008464:	9304      	str	r3, [sp, #16]
 8008466:	f814 1b01 	ldrb.w	r1, [r4], #1
 800846a:	4829      	ldr	r0, [pc, #164]	; (8008510 <_vfiprintf_r+0x224>)
 800846c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008470:	2206      	movs	r2, #6
 8008472:	f7f7 feb5 	bl	80001e0 <memchr>
 8008476:	2800      	cmp	r0, #0
 8008478:	d03f      	beq.n	80084fa <_vfiprintf_r+0x20e>
 800847a:	4b26      	ldr	r3, [pc, #152]	; (8008514 <_vfiprintf_r+0x228>)
 800847c:	bb1b      	cbnz	r3, 80084c6 <_vfiprintf_r+0x1da>
 800847e:	9b03      	ldr	r3, [sp, #12]
 8008480:	3307      	adds	r3, #7
 8008482:	f023 0307 	bic.w	r3, r3, #7
 8008486:	3308      	adds	r3, #8
 8008488:	9303      	str	r3, [sp, #12]
 800848a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800848c:	443b      	add	r3, r7
 800848e:	9309      	str	r3, [sp, #36]	; 0x24
 8008490:	e768      	b.n	8008364 <_vfiprintf_r+0x78>
 8008492:	fb0c 3202 	mla	r2, ip, r2, r3
 8008496:	460c      	mov	r4, r1
 8008498:	2001      	movs	r0, #1
 800849a:	e7a6      	b.n	80083ea <_vfiprintf_r+0xfe>
 800849c:	2300      	movs	r3, #0
 800849e:	3401      	adds	r4, #1
 80084a0:	9305      	str	r3, [sp, #20]
 80084a2:	4619      	mov	r1, r3
 80084a4:	f04f 0c0a 	mov.w	ip, #10
 80084a8:	4620      	mov	r0, r4
 80084aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084ae:	3a30      	subs	r2, #48	; 0x30
 80084b0:	2a09      	cmp	r2, #9
 80084b2:	d903      	bls.n	80084bc <_vfiprintf_r+0x1d0>
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d0c6      	beq.n	8008446 <_vfiprintf_r+0x15a>
 80084b8:	9105      	str	r1, [sp, #20]
 80084ba:	e7c4      	b.n	8008446 <_vfiprintf_r+0x15a>
 80084bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80084c0:	4604      	mov	r4, r0
 80084c2:	2301      	movs	r3, #1
 80084c4:	e7f0      	b.n	80084a8 <_vfiprintf_r+0x1bc>
 80084c6:	ab03      	add	r3, sp, #12
 80084c8:	9300      	str	r3, [sp, #0]
 80084ca:	462a      	mov	r2, r5
 80084cc:	4b12      	ldr	r3, [pc, #72]	; (8008518 <_vfiprintf_r+0x22c>)
 80084ce:	a904      	add	r1, sp, #16
 80084d0:	4630      	mov	r0, r6
 80084d2:	f7fd fb9f 	bl	8005c14 <_printf_float>
 80084d6:	4607      	mov	r7, r0
 80084d8:	1c78      	adds	r0, r7, #1
 80084da:	d1d6      	bne.n	800848a <_vfiprintf_r+0x19e>
 80084dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084de:	07d9      	lsls	r1, r3, #31
 80084e0:	d405      	bmi.n	80084ee <_vfiprintf_r+0x202>
 80084e2:	89ab      	ldrh	r3, [r5, #12]
 80084e4:	059a      	lsls	r2, r3, #22
 80084e6:	d402      	bmi.n	80084ee <_vfiprintf_r+0x202>
 80084e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084ea:	f7fe f8fd 	bl	80066e8 <__retarget_lock_release_recursive>
 80084ee:	89ab      	ldrh	r3, [r5, #12]
 80084f0:	065b      	lsls	r3, r3, #25
 80084f2:	f53f af1d 	bmi.w	8008330 <_vfiprintf_r+0x44>
 80084f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084f8:	e71c      	b.n	8008334 <_vfiprintf_r+0x48>
 80084fa:	ab03      	add	r3, sp, #12
 80084fc:	9300      	str	r3, [sp, #0]
 80084fe:	462a      	mov	r2, r5
 8008500:	4b05      	ldr	r3, [pc, #20]	; (8008518 <_vfiprintf_r+0x22c>)
 8008502:	a904      	add	r1, sp, #16
 8008504:	4630      	mov	r0, r6
 8008506:	f7fd fe29 	bl	800615c <_printf_i>
 800850a:	e7e4      	b.n	80084d6 <_vfiprintf_r+0x1ea>
 800850c:	080093ac 	.word	0x080093ac
 8008510:	080093b6 	.word	0x080093b6
 8008514:	08005c15 	.word	0x08005c15
 8008518:	080082c9 	.word	0x080082c9
 800851c:	080093b2 	.word	0x080093b2

08008520 <__swbuf_r>:
 8008520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008522:	460e      	mov	r6, r1
 8008524:	4614      	mov	r4, r2
 8008526:	4605      	mov	r5, r0
 8008528:	b118      	cbz	r0, 8008532 <__swbuf_r+0x12>
 800852a:	6a03      	ldr	r3, [r0, #32]
 800852c:	b90b      	cbnz	r3, 8008532 <__swbuf_r+0x12>
 800852e:	f7fd ffc3 	bl	80064b8 <__sinit>
 8008532:	69a3      	ldr	r3, [r4, #24]
 8008534:	60a3      	str	r3, [r4, #8]
 8008536:	89a3      	ldrh	r3, [r4, #12]
 8008538:	071a      	lsls	r2, r3, #28
 800853a:	d525      	bpl.n	8008588 <__swbuf_r+0x68>
 800853c:	6923      	ldr	r3, [r4, #16]
 800853e:	b31b      	cbz	r3, 8008588 <__swbuf_r+0x68>
 8008540:	6823      	ldr	r3, [r4, #0]
 8008542:	6922      	ldr	r2, [r4, #16]
 8008544:	1a98      	subs	r0, r3, r2
 8008546:	6963      	ldr	r3, [r4, #20]
 8008548:	b2f6      	uxtb	r6, r6
 800854a:	4283      	cmp	r3, r0
 800854c:	4637      	mov	r7, r6
 800854e:	dc04      	bgt.n	800855a <__swbuf_r+0x3a>
 8008550:	4621      	mov	r1, r4
 8008552:	4628      	mov	r0, r5
 8008554:	f7ff fdac 	bl	80080b0 <_fflush_r>
 8008558:	b9e0      	cbnz	r0, 8008594 <__swbuf_r+0x74>
 800855a:	68a3      	ldr	r3, [r4, #8]
 800855c:	3b01      	subs	r3, #1
 800855e:	60a3      	str	r3, [r4, #8]
 8008560:	6823      	ldr	r3, [r4, #0]
 8008562:	1c5a      	adds	r2, r3, #1
 8008564:	6022      	str	r2, [r4, #0]
 8008566:	701e      	strb	r6, [r3, #0]
 8008568:	6962      	ldr	r2, [r4, #20]
 800856a:	1c43      	adds	r3, r0, #1
 800856c:	429a      	cmp	r2, r3
 800856e:	d004      	beq.n	800857a <__swbuf_r+0x5a>
 8008570:	89a3      	ldrh	r3, [r4, #12]
 8008572:	07db      	lsls	r3, r3, #31
 8008574:	d506      	bpl.n	8008584 <__swbuf_r+0x64>
 8008576:	2e0a      	cmp	r6, #10
 8008578:	d104      	bne.n	8008584 <__swbuf_r+0x64>
 800857a:	4621      	mov	r1, r4
 800857c:	4628      	mov	r0, r5
 800857e:	f7ff fd97 	bl	80080b0 <_fflush_r>
 8008582:	b938      	cbnz	r0, 8008594 <__swbuf_r+0x74>
 8008584:	4638      	mov	r0, r7
 8008586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008588:	4621      	mov	r1, r4
 800858a:	4628      	mov	r0, r5
 800858c:	f000 f806 	bl	800859c <__swsetup_r>
 8008590:	2800      	cmp	r0, #0
 8008592:	d0d5      	beq.n	8008540 <__swbuf_r+0x20>
 8008594:	f04f 37ff 	mov.w	r7, #4294967295
 8008598:	e7f4      	b.n	8008584 <__swbuf_r+0x64>
	...

0800859c <__swsetup_r>:
 800859c:	b538      	push	{r3, r4, r5, lr}
 800859e:	4b2a      	ldr	r3, [pc, #168]	; (8008648 <__swsetup_r+0xac>)
 80085a0:	4605      	mov	r5, r0
 80085a2:	6818      	ldr	r0, [r3, #0]
 80085a4:	460c      	mov	r4, r1
 80085a6:	b118      	cbz	r0, 80085b0 <__swsetup_r+0x14>
 80085a8:	6a03      	ldr	r3, [r0, #32]
 80085aa:	b90b      	cbnz	r3, 80085b0 <__swsetup_r+0x14>
 80085ac:	f7fd ff84 	bl	80064b8 <__sinit>
 80085b0:	89a3      	ldrh	r3, [r4, #12]
 80085b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80085b6:	0718      	lsls	r0, r3, #28
 80085b8:	d422      	bmi.n	8008600 <__swsetup_r+0x64>
 80085ba:	06d9      	lsls	r1, r3, #27
 80085bc:	d407      	bmi.n	80085ce <__swsetup_r+0x32>
 80085be:	2309      	movs	r3, #9
 80085c0:	602b      	str	r3, [r5, #0]
 80085c2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80085c6:	81a3      	strh	r3, [r4, #12]
 80085c8:	f04f 30ff 	mov.w	r0, #4294967295
 80085cc:	e034      	b.n	8008638 <__swsetup_r+0x9c>
 80085ce:	0758      	lsls	r0, r3, #29
 80085d0:	d512      	bpl.n	80085f8 <__swsetup_r+0x5c>
 80085d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085d4:	b141      	cbz	r1, 80085e8 <__swsetup_r+0x4c>
 80085d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085da:	4299      	cmp	r1, r3
 80085dc:	d002      	beq.n	80085e4 <__swsetup_r+0x48>
 80085de:	4628      	mov	r0, r5
 80085e0:	f7fe ff0c 	bl	80073fc <_free_r>
 80085e4:	2300      	movs	r3, #0
 80085e6:	6363      	str	r3, [r4, #52]	; 0x34
 80085e8:	89a3      	ldrh	r3, [r4, #12]
 80085ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80085ee:	81a3      	strh	r3, [r4, #12]
 80085f0:	2300      	movs	r3, #0
 80085f2:	6063      	str	r3, [r4, #4]
 80085f4:	6923      	ldr	r3, [r4, #16]
 80085f6:	6023      	str	r3, [r4, #0]
 80085f8:	89a3      	ldrh	r3, [r4, #12]
 80085fa:	f043 0308 	orr.w	r3, r3, #8
 80085fe:	81a3      	strh	r3, [r4, #12]
 8008600:	6923      	ldr	r3, [r4, #16]
 8008602:	b94b      	cbnz	r3, 8008618 <__swsetup_r+0x7c>
 8008604:	89a3      	ldrh	r3, [r4, #12]
 8008606:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800860a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800860e:	d003      	beq.n	8008618 <__swsetup_r+0x7c>
 8008610:	4621      	mov	r1, r4
 8008612:	4628      	mov	r0, r5
 8008614:	f000 f884 	bl	8008720 <__smakebuf_r>
 8008618:	89a0      	ldrh	r0, [r4, #12]
 800861a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800861e:	f010 0301 	ands.w	r3, r0, #1
 8008622:	d00a      	beq.n	800863a <__swsetup_r+0x9e>
 8008624:	2300      	movs	r3, #0
 8008626:	60a3      	str	r3, [r4, #8]
 8008628:	6963      	ldr	r3, [r4, #20]
 800862a:	425b      	negs	r3, r3
 800862c:	61a3      	str	r3, [r4, #24]
 800862e:	6923      	ldr	r3, [r4, #16]
 8008630:	b943      	cbnz	r3, 8008644 <__swsetup_r+0xa8>
 8008632:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008636:	d1c4      	bne.n	80085c2 <__swsetup_r+0x26>
 8008638:	bd38      	pop	{r3, r4, r5, pc}
 800863a:	0781      	lsls	r1, r0, #30
 800863c:	bf58      	it	pl
 800863e:	6963      	ldrpl	r3, [r4, #20]
 8008640:	60a3      	str	r3, [r4, #8]
 8008642:	e7f4      	b.n	800862e <__swsetup_r+0x92>
 8008644:	2000      	movs	r0, #0
 8008646:	e7f7      	b.n	8008638 <__swsetup_r+0x9c>
 8008648:	2000006c 	.word	0x2000006c

0800864c <_raise_r>:
 800864c:	291f      	cmp	r1, #31
 800864e:	b538      	push	{r3, r4, r5, lr}
 8008650:	4604      	mov	r4, r0
 8008652:	460d      	mov	r5, r1
 8008654:	d904      	bls.n	8008660 <_raise_r+0x14>
 8008656:	2316      	movs	r3, #22
 8008658:	6003      	str	r3, [r0, #0]
 800865a:	f04f 30ff 	mov.w	r0, #4294967295
 800865e:	bd38      	pop	{r3, r4, r5, pc}
 8008660:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008662:	b112      	cbz	r2, 800866a <_raise_r+0x1e>
 8008664:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008668:	b94b      	cbnz	r3, 800867e <_raise_r+0x32>
 800866a:	4620      	mov	r0, r4
 800866c:	f000 f830 	bl	80086d0 <_getpid_r>
 8008670:	462a      	mov	r2, r5
 8008672:	4601      	mov	r1, r0
 8008674:	4620      	mov	r0, r4
 8008676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800867a:	f000 b817 	b.w	80086ac <_kill_r>
 800867e:	2b01      	cmp	r3, #1
 8008680:	d00a      	beq.n	8008698 <_raise_r+0x4c>
 8008682:	1c59      	adds	r1, r3, #1
 8008684:	d103      	bne.n	800868e <_raise_r+0x42>
 8008686:	2316      	movs	r3, #22
 8008688:	6003      	str	r3, [r0, #0]
 800868a:	2001      	movs	r0, #1
 800868c:	e7e7      	b.n	800865e <_raise_r+0x12>
 800868e:	2400      	movs	r4, #0
 8008690:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008694:	4628      	mov	r0, r5
 8008696:	4798      	blx	r3
 8008698:	2000      	movs	r0, #0
 800869a:	e7e0      	b.n	800865e <_raise_r+0x12>

0800869c <raise>:
 800869c:	4b02      	ldr	r3, [pc, #8]	; (80086a8 <raise+0xc>)
 800869e:	4601      	mov	r1, r0
 80086a0:	6818      	ldr	r0, [r3, #0]
 80086a2:	f7ff bfd3 	b.w	800864c <_raise_r>
 80086a6:	bf00      	nop
 80086a8:	2000006c 	.word	0x2000006c

080086ac <_kill_r>:
 80086ac:	b538      	push	{r3, r4, r5, lr}
 80086ae:	4d07      	ldr	r5, [pc, #28]	; (80086cc <_kill_r+0x20>)
 80086b0:	2300      	movs	r3, #0
 80086b2:	4604      	mov	r4, r0
 80086b4:	4608      	mov	r0, r1
 80086b6:	4611      	mov	r1, r2
 80086b8:	602b      	str	r3, [r5, #0]
 80086ba:	f7f8 fee7 	bl	800148c <_kill>
 80086be:	1c43      	adds	r3, r0, #1
 80086c0:	d102      	bne.n	80086c8 <_kill_r+0x1c>
 80086c2:	682b      	ldr	r3, [r5, #0]
 80086c4:	b103      	cbz	r3, 80086c8 <_kill_r+0x1c>
 80086c6:	6023      	str	r3, [r4, #0]
 80086c8:	bd38      	pop	{r3, r4, r5, pc}
 80086ca:	bf00      	nop
 80086cc:	2000052c 	.word	0x2000052c

080086d0 <_getpid_r>:
 80086d0:	f7f8 bed4 	b.w	800147c <_getpid>

080086d4 <__swhatbuf_r>:
 80086d4:	b570      	push	{r4, r5, r6, lr}
 80086d6:	460c      	mov	r4, r1
 80086d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086dc:	2900      	cmp	r1, #0
 80086de:	b096      	sub	sp, #88	; 0x58
 80086e0:	4615      	mov	r5, r2
 80086e2:	461e      	mov	r6, r3
 80086e4:	da0d      	bge.n	8008702 <__swhatbuf_r+0x2e>
 80086e6:	89a3      	ldrh	r3, [r4, #12]
 80086e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80086ec:	f04f 0100 	mov.w	r1, #0
 80086f0:	bf0c      	ite	eq
 80086f2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80086f6:	2340      	movne	r3, #64	; 0x40
 80086f8:	2000      	movs	r0, #0
 80086fa:	6031      	str	r1, [r6, #0]
 80086fc:	602b      	str	r3, [r5, #0]
 80086fe:	b016      	add	sp, #88	; 0x58
 8008700:	bd70      	pop	{r4, r5, r6, pc}
 8008702:	466a      	mov	r2, sp
 8008704:	f000 f848 	bl	8008798 <_fstat_r>
 8008708:	2800      	cmp	r0, #0
 800870a:	dbec      	blt.n	80086e6 <__swhatbuf_r+0x12>
 800870c:	9901      	ldr	r1, [sp, #4]
 800870e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008712:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008716:	4259      	negs	r1, r3
 8008718:	4159      	adcs	r1, r3
 800871a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800871e:	e7eb      	b.n	80086f8 <__swhatbuf_r+0x24>

08008720 <__smakebuf_r>:
 8008720:	898b      	ldrh	r3, [r1, #12]
 8008722:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008724:	079d      	lsls	r5, r3, #30
 8008726:	4606      	mov	r6, r0
 8008728:	460c      	mov	r4, r1
 800872a:	d507      	bpl.n	800873c <__smakebuf_r+0x1c>
 800872c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008730:	6023      	str	r3, [r4, #0]
 8008732:	6123      	str	r3, [r4, #16]
 8008734:	2301      	movs	r3, #1
 8008736:	6163      	str	r3, [r4, #20]
 8008738:	b002      	add	sp, #8
 800873a:	bd70      	pop	{r4, r5, r6, pc}
 800873c:	ab01      	add	r3, sp, #4
 800873e:	466a      	mov	r2, sp
 8008740:	f7ff ffc8 	bl	80086d4 <__swhatbuf_r>
 8008744:	9900      	ldr	r1, [sp, #0]
 8008746:	4605      	mov	r5, r0
 8008748:	4630      	mov	r0, r6
 800874a:	f7fe fecb 	bl	80074e4 <_malloc_r>
 800874e:	b948      	cbnz	r0, 8008764 <__smakebuf_r+0x44>
 8008750:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008754:	059a      	lsls	r2, r3, #22
 8008756:	d4ef      	bmi.n	8008738 <__smakebuf_r+0x18>
 8008758:	f023 0303 	bic.w	r3, r3, #3
 800875c:	f043 0302 	orr.w	r3, r3, #2
 8008760:	81a3      	strh	r3, [r4, #12]
 8008762:	e7e3      	b.n	800872c <__smakebuf_r+0xc>
 8008764:	89a3      	ldrh	r3, [r4, #12]
 8008766:	6020      	str	r0, [r4, #0]
 8008768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800876c:	81a3      	strh	r3, [r4, #12]
 800876e:	9b00      	ldr	r3, [sp, #0]
 8008770:	6163      	str	r3, [r4, #20]
 8008772:	9b01      	ldr	r3, [sp, #4]
 8008774:	6120      	str	r0, [r4, #16]
 8008776:	b15b      	cbz	r3, 8008790 <__smakebuf_r+0x70>
 8008778:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800877c:	4630      	mov	r0, r6
 800877e:	f000 f81d 	bl	80087bc <_isatty_r>
 8008782:	b128      	cbz	r0, 8008790 <__smakebuf_r+0x70>
 8008784:	89a3      	ldrh	r3, [r4, #12]
 8008786:	f023 0303 	bic.w	r3, r3, #3
 800878a:	f043 0301 	orr.w	r3, r3, #1
 800878e:	81a3      	strh	r3, [r4, #12]
 8008790:	89a3      	ldrh	r3, [r4, #12]
 8008792:	431d      	orrs	r5, r3
 8008794:	81a5      	strh	r5, [r4, #12]
 8008796:	e7cf      	b.n	8008738 <__smakebuf_r+0x18>

08008798 <_fstat_r>:
 8008798:	b538      	push	{r3, r4, r5, lr}
 800879a:	4d07      	ldr	r5, [pc, #28]	; (80087b8 <_fstat_r+0x20>)
 800879c:	2300      	movs	r3, #0
 800879e:	4604      	mov	r4, r0
 80087a0:	4608      	mov	r0, r1
 80087a2:	4611      	mov	r1, r2
 80087a4:	602b      	str	r3, [r5, #0]
 80087a6:	f7f8 fed0 	bl	800154a <_fstat>
 80087aa:	1c43      	adds	r3, r0, #1
 80087ac:	d102      	bne.n	80087b4 <_fstat_r+0x1c>
 80087ae:	682b      	ldr	r3, [r5, #0]
 80087b0:	b103      	cbz	r3, 80087b4 <_fstat_r+0x1c>
 80087b2:	6023      	str	r3, [r4, #0]
 80087b4:	bd38      	pop	{r3, r4, r5, pc}
 80087b6:	bf00      	nop
 80087b8:	2000052c 	.word	0x2000052c

080087bc <_isatty_r>:
 80087bc:	b538      	push	{r3, r4, r5, lr}
 80087be:	4d06      	ldr	r5, [pc, #24]	; (80087d8 <_isatty_r+0x1c>)
 80087c0:	2300      	movs	r3, #0
 80087c2:	4604      	mov	r4, r0
 80087c4:	4608      	mov	r0, r1
 80087c6:	602b      	str	r3, [r5, #0]
 80087c8:	f7f8 fecf 	bl	800156a <_isatty>
 80087cc:	1c43      	adds	r3, r0, #1
 80087ce:	d102      	bne.n	80087d6 <_isatty_r+0x1a>
 80087d0:	682b      	ldr	r3, [r5, #0]
 80087d2:	b103      	cbz	r3, 80087d6 <_isatty_r+0x1a>
 80087d4:	6023      	str	r3, [r4, #0]
 80087d6:	bd38      	pop	{r3, r4, r5, pc}
 80087d8:	2000052c 	.word	0x2000052c
 80087dc:	00000000 	.word	0x00000000

080087e0 <exp>:
 80087e0:	b538      	push	{r3, r4, r5, lr}
 80087e2:	ed2d 8b02 	vpush	{d8}
 80087e6:	ec55 4b10 	vmov	r4, r5, d0
 80087ea:	f000 f895 	bl	8008918 <__ieee754_exp>
 80087ee:	eeb0 8a40 	vmov.f32	s16, s0
 80087f2:	eef0 8a60 	vmov.f32	s17, s1
 80087f6:	ec45 4b10 	vmov	d0, r4, r5
 80087fa:	f000 f877 	bl	80088ec <finite>
 80087fe:	b168      	cbz	r0, 800881c <exp+0x3c>
 8008800:	a317      	add	r3, pc, #92	; (adr r3, 8008860 <exp+0x80>)
 8008802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008806:	4620      	mov	r0, r4
 8008808:	4629      	mov	r1, r5
 800880a:	f7f8 f98d 	bl	8000b28 <__aeabi_dcmpgt>
 800880e:	b160      	cbz	r0, 800882a <exp+0x4a>
 8008810:	f7fd ff3e 	bl	8006690 <__errno>
 8008814:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8008850 <exp+0x70>
 8008818:	2322      	movs	r3, #34	; 0x22
 800881a:	6003      	str	r3, [r0, #0]
 800881c:	eeb0 0a48 	vmov.f32	s0, s16
 8008820:	eef0 0a68 	vmov.f32	s1, s17
 8008824:	ecbd 8b02 	vpop	{d8}
 8008828:	bd38      	pop	{r3, r4, r5, pc}
 800882a:	a30f      	add	r3, pc, #60	; (adr r3, 8008868 <exp+0x88>)
 800882c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008830:	4620      	mov	r0, r4
 8008832:	4629      	mov	r1, r5
 8008834:	f7f8 f95a 	bl	8000aec <__aeabi_dcmplt>
 8008838:	2800      	cmp	r0, #0
 800883a:	d0ef      	beq.n	800881c <exp+0x3c>
 800883c:	f7fd ff28 	bl	8006690 <__errno>
 8008840:	2322      	movs	r3, #34	; 0x22
 8008842:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8008858 <exp+0x78>
 8008846:	6003      	str	r3, [r0, #0]
 8008848:	e7e8      	b.n	800881c <exp+0x3c>
 800884a:	bf00      	nop
 800884c:	f3af 8000 	nop.w
 8008850:	00000000 	.word	0x00000000
 8008854:	7ff00000 	.word	0x7ff00000
	...
 8008860:	fefa39ef 	.word	0xfefa39ef
 8008864:	40862e42 	.word	0x40862e42
 8008868:	d52d3051 	.word	0xd52d3051
 800886c:	c0874910 	.word	0xc0874910

08008870 <log>:
 8008870:	b538      	push	{r3, r4, r5, lr}
 8008872:	ed2d 8b02 	vpush	{d8}
 8008876:	ec55 4b10 	vmov	r4, r5, d0
 800887a:	f000 f9d1 	bl	8008c20 <__ieee754_log>
 800887e:	4622      	mov	r2, r4
 8008880:	462b      	mov	r3, r5
 8008882:	4620      	mov	r0, r4
 8008884:	4629      	mov	r1, r5
 8008886:	eeb0 8a40 	vmov.f32	s16, s0
 800888a:	eef0 8a60 	vmov.f32	s17, s1
 800888e:	f7f8 f955 	bl	8000b3c <__aeabi_dcmpun>
 8008892:	b998      	cbnz	r0, 80088bc <log+0x4c>
 8008894:	2200      	movs	r2, #0
 8008896:	2300      	movs	r3, #0
 8008898:	4620      	mov	r0, r4
 800889a:	4629      	mov	r1, r5
 800889c:	f7f8 f944 	bl	8000b28 <__aeabi_dcmpgt>
 80088a0:	b960      	cbnz	r0, 80088bc <log+0x4c>
 80088a2:	2200      	movs	r2, #0
 80088a4:	2300      	movs	r3, #0
 80088a6:	4620      	mov	r0, r4
 80088a8:	4629      	mov	r1, r5
 80088aa:	f7f8 f915 	bl	8000ad8 <__aeabi_dcmpeq>
 80088ae:	b160      	cbz	r0, 80088ca <log+0x5a>
 80088b0:	f7fd feee 	bl	8006690 <__errno>
 80088b4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 80088e0 <log+0x70>
 80088b8:	2322      	movs	r3, #34	; 0x22
 80088ba:	6003      	str	r3, [r0, #0]
 80088bc:	eeb0 0a48 	vmov.f32	s0, s16
 80088c0:	eef0 0a68 	vmov.f32	s1, s17
 80088c4:	ecbd 8b02 	vpop	{d8}
 80088c8:	bd38      	pop	{r3, r4, r5, pc}
 80088ca:	f7fd fee1 	bl	8006690 <__errno>
 80088ce:	ecbd 8b02 	vpop	{d8}
 80088d2:	2321      	movs	r3, #33	; 0x21
 80088d4:	6003      	str	r3, [r0, #0]
 80088d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088da:	4803      	ldr	r0, [pc, #12]	; (80088e8 <log+0x78>)
 80088dc:	f000 b814 	b.w	8008908 <nan>
 80088e0:	00000000 	.word	0x00000000
 80088e4:	fff00000 	.word	0xfff00000
 80088e8:	08009402 	.word	0x08009402

080088ec <finite>:
 80088ec:	b082      	sub	sp, #8
 80088ee:	ed8d 0b00 	vstr	d0, [sp]
 80088f2:	9801      	ldr	r0, [sp, #4]
 80088f4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80088f8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80088fc:	0fc0      	lsrs	r0, r0, #31
 80088fe:	b002      	add	sp, #8
 8008900:	4770      	bx	lr
 8008902:	0000      	movs	r0, r0
 8008904:	0000      	movs	r0, r0
	...

08008908 <nan>:
 8008908:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008910 <nan+0x8>
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop
 8008910:	00000000 	.word	0x00000000
 8008914:	7ff80000 	.word	0x7ff80000

08008918 <__ieee754_exp>:
 8008918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800891c:	ec55 4b10 	vmov	r4, r5, d0
 8008920:	49b5      	ldr	r1, [pc, #724]	; (8008bf8 <__ieee754_exp+0x2e0>)
 8008922:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8008926:	428a      	cmp	r2, r1
 8008928:	ed2d 8b04 	vpush	{d8-d9}
 800892c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8008930:	d93b      	bls.n	80089aa <__ieee754_exp+0x92>
 8008932:	49b2      	ldr	r1, [pc, #712]	; (8008bfc <__ieee754_exp+0x2e4>)
 8008934:	428a      	cmp	r2, r1
 8008936:	d916      	bls.n	8008966 <__ieee754_exp+0x4e>
 8008938:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800893c:	4323      	orrs	r3, r4
 800893e:	ee10 2a10 	vmov	r2, s0
 8008942:	d007      	beq.n	8008954 <__ieee754_exp+0x3c>
 8008944:	462b      	mov	r3, r5
 8008946:	4620      	mov	r0, r4
 8008948:	4629      	mov	r1, r5
 800894a:	f7f7 fca7 	bl	800029c <__adddf3>
 800894e:	4604      	mov	r4, r0
 8008950:	460d      	mov	r5, r1
 8008952:	e002      	b.n	800895a <__ieee754_exp+0x42>
 8008954:	b10e      	cbz	r6, 800895a <__ieee754_exp+0x42>
 8008956:	2400      	movs	r4, #0
 8008958:	2500      	movs	r5, #0
 800895a:	ecbd 8b04 	vpop	{d8-d9}
 800895e:	ec45 4b10 	vmov	d0, r4, r5
 8008962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008966:	a38e      	add	r3, pc, #568	; (adr r3, 8008ba0 <__ieee754_exp+0x288>)
 8008968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896c:	ee10 0a10 	vmov	r0, s0
 8008970:	4629      	mov	r1, r5
 8008972:	f7f8 f8d9 	bl	8000b28 <__aeabi_dcmpgt>
 8008976:	4607      	mov	r7, r0
 8008978:	b130      	cbz	r0, 8008988 <__ieee754_exp+0x70>
 800897a:	ecbd 8b04 	vpop	{d8-d9}
 800897e:	2000      	movs	r0, #0
 8008980:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008984:	f000 bb2d 	b.w	8008fe2 <__math_oflow>
 8008988:	a387      	add	r3, pc, #540	; (adr r3, 8008ba8 <__ieee754_exp+0x290>)
 800898a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898e:	4620      	mov	r0, r4
 8008990:	4629      	mov	r1, r5
 8008992:	f7f8 f8ab 	bl	8000aec <__aeabi_dcmplt>
 8008996:	2800      	cmp	r0, #0
 8008998:	f000 808b 	beq.w	8008ab2 <__ieee754_exp+0x19a>
 800899c:	ecbd 8b04 	vpop	{d8-d9}
 80089a0:	4638      	mov	r0, r7
 80089a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089a6:	f000 bb13 	b.w	8008fd0 <__math_uflow>
 80089aa:	4b95      	ldr	r3, [pc, #596]	; (8008c00 <__ieee754_exp+0x2e8>)
 80089ac:	429a      	cmp	r2, r3
 80089ae:	f240 80ac 	bls.w	8008b0a <__ieee754_exp+0x1f2>
 80089b2:	4b94      	ldr	r3, [pc, #592]	; (8008c04 <__ieee754_exp+0x2ec>)
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d87c      	bhi.n	8008ab2 <__ieee754_exp+0x19a>
 80089b8:	4b93      	ldr	r3, [pc, #588]	; (8008c08 <__ieee754_exp+0x2f0>)
 80089ba:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80089be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c2:	ee10 0a10 	vmov	r0, s0
 80089c6:	4629      	mov	r1, r5
 80089c8:	f7f7 fc66 	bl	8000298 <__aeabi_dsub>
 80089cc:	4b8f      	ldr	r3, [pc, #572]	; (8008c0c <__ieee754_exp+0x2f4>)
 80089ce:	00f7      	lsls	r7, r6, #3
 80089d0:	443b      	add	r3, r7
 80089d2:	ed93 7b00 	vldr	d7, [r3]
 80089d6:	f1c6 0a01 	rsb	sl, r6, #1
 80089da:	4680      	mov	r8, r0
 80089dc:	4689      	mov	r9, r1
 80089de:	ebaa 0a06 	sub.w	sl, sl, r6
 80089e2:	eeb0 8a47 	vmov.f32	s16, s14
 80089e6:	eef0 8a67 	vmov.f32	s17, s15
 80089ea:	ec53 2b18 	vmov	r2, r3, d8
 80089ee:	4640      	mov	r0, r8
 80089f0:	4649      	mov	r1, r9
 80089f2:	f7f7 fc51 	bl	8000298 <__aeabi_dsub>
 80089f6:	4604      	mov	r4, r0
 80089f8:	460d      	mov	r5, r1
 80089fa:	4622      	mov	r2, r4
 80089fc:	462b      	mov	r3, r5
 80089fe:	4620      	mov	r0, r4
 8008a00:	4629      	mov	r1, r5
 8008a02:	f7f7 fe01 	bl	8000608 <__aeabi_dmul>
 8008a06:	a36a      	add	r3, pc, #424	; (adr r3, 8008bb0 <__ieee754_exp+0x298>)
 8008a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0c:	4606      	mov	r6, r0
 8008a0e:	460f      	mov	r7, r1
 8008a10:	f7f7 fdfa 	bl	8000608 <__aeabi_dmul>
 8008a14:	a368      	add	r3, pc, #416	; (adr r3, 8008bb8 <__ieee754_exp+0x2a0>)
 8008a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1a:	f7f7 fc3d 	bl	8000298 <__aeabi_dsub>
 8008a1e:	4632      	mov	r2, r6
 8008a20:	463b      	mov	r3, r7
 8008a22:	f7f7 fdf1 	bl	8000608 <__aeabi_dmul>
 8008a26:	a366      	add	r3, pc, #408	; (adr r3, 8008bc0 <__ieee754_exp+0x2a8>)
 8008a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2c:	f7f7 fc36 	bl	800029c <__adddf3>
 8008a30:	4632      	mov	r2, r6
 8008a32:	463b      	mov	r3, r7
 8008a34:	f7f7 fde8 	bl	8000608 <__aeabi_dmul>
 8008a38:	a363      	add	r3, pc, #396	; (adr r3, 8008bc8 <__ieee754_exp+0x2b0>)
 8008a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3e:	f7f7 fc2b 	bl	8000298 <__aeabi_dsub>
 8008a42:	4632      	mov	r2, r6
 8008a44:	463b      	mov	r3, r7
 8008a46:	f7f7 fddf 	bl	8000608 <__aeabi_dmul>
 8008a4a:	a361      	add	r3, pc, #388	; (adr r3, 8008bd0 <__ieee754_exp+0x2b8>)
 8008a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a50:	f7f7 fc24 	bl	800029c <__adddf3>
 8008a54:	4632      	mov	r2, r6
 8008a56:	463b      	mov	r3, r7
 8008a58:	f7f7 fdd6 	bl	8000608 <__aeabi_dmul>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	460b      	mov	r3, r1
 8008a60:	4620      	mov	r0, r4
 8008a62:	4629      	mov	r1, r5
 8008a64:	f7f7 fc18 	bl	8000298 <__aeabi_dsub>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	4606      	mov	r6, r0
 8008a6e:	460f      	mov	r7, r1
 8008a70:	4620      	mov	r0, r4
 8008a72:	4629      	mov	r1, r5
 8008a74:	f7f7 fdc8 	bl	8000608 <__aeabi_dmul>
 8008a78:	ec41 0b19 	vmov	d9, r0, r1
 8008a7c:	f1ba 0f00 	cmp.w	sl, #0
 8008a80:	d15d      	bne.n	8008b3e <__ieee754_exp+0x226>
 8008a82:	2200      	movs	r2, #0
 8008a84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008a88:	4630      	mov	r0, r6
 8008a8a:	4639      	mov	r1, r7
 8008a8c:	f7f7 fc04 	bl	8000298 <__aeabi_dsub>
 8008a90:	4602      	mov	r2, r0
 8008a92:	460b      	mov	r3, r1
 8008a94:	ec51 0b19 	vmov	r0, r1, d9
 8008a98:	f7f7 fee0 	bl	800085c <__aeabi_ddiv>
 8008a9c:	4622      	mov	r2, r4
 8008a9e:	462b      	mov	r3, r5
 8008aa0:	f7f7 fbfa 	bl	8000298 <__aeabi_dsub>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	2000      	movs	r0, #0
 8008aaa:	4959      	ldr	r1, [pc, #356]	; (8008c10 <__ieee754_exp+0x2f8>)
 8008aac:	f7f7 fbf4 	bl	8000298 <__aeabi_dsub>
 8008ab0:	e74d      	b.n	800894e <__ieee754_exp+0x36>
 8008ab2:	4b58      	ldr	r3, [pc, #352]	; (8008c14 <__ieee754_exp+0x2fc>)
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008aba:	4629      	mov	r1, r5
 8008abc:	a346      	add	r3, pc, #280	; (adr r3, 8008bd8 <__ieee754_exp+0x2c0>)
 8008abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac2:	f7f7 fda1 	bl	8000608 <__aeabi_dmul>
 8008ac6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008aca:	f7f7 fbe7 	bl	800029c <__adddf3>
 8008ace:	f7f8 f84b 	bl	8000b68 <__aeabi_d2iz>
 8008ad2:	4682      	mov	sl, r0
 8008ad4:	f7f7 fd2e 	bl	8000534 <__aeabi_i2d>
 8008ad8:	a341      	add	r3, pc, #260	; (adr r3, 8008be0 <__ieee754_exp+0x2c8>)
 8008ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ade:	4606      	mov	r6, r0
 8008ae0:	460f      	mov	r7, r1
 8008ae2:	f7f7 fd91 	bl	8000608 <__aeabi_dmul>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	460b      	mov	r3, r1
 8008aea:	4620      	mov	r0, r4
 8008aec:	4629      	mov	r1, r5
 8008aee:	f7f7 fbd3 	bl	8000298 <__aeabi_dsub>
 8008af2:	a33d      	add	r3, pc, #244	; (adr r3, 8008be8 <__ieee754_exp+0x2d0>)
 8008af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af8:	4680      	mov	r8, r0
 8008afa:	4689      	mov	r9, r1
 8008afc:	4630      	mov	r0, r6
 8008afe:	4639      	mov	r1, r7
 8008b00:	f7f7 fd82 	bl	8000608 <__aeabi_dmul>
 8008b04:	ec41 0b18 	vmov	d8, r0, r1
 8008b08:	e76f      	b.n	80089ea <__ieee754_exp+0xd2>
 8008b0a:	4b43      	ldr	r3, [pc, #268]	; (8008c18 <__ieee754_exp+0x300>)
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d811      	bhi.n	8008b34 <__ieee754_exp+0x21c>
 8008b10:	a337      	add	r3, pc, #220	; (adr r3, 8008bf0 <__ieee754_exp+0x2d8>)
 8008b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b16:	ee10 0a10 	vmov	r0, s0
 8008b1a:	4629      	mov	r1, r5
 8008b1c:	f7f7 fbbe 	bl	800029c <__adddf3>
 8008b20:	4b3b      	ldr	r3, [pc, #236]	; (8008c10 <__ieee754_exp+0x2f8>)
 8008b22:	2200      	movs	r2, #0
 8008b24:	f7f8 f800 	bl	8000b28 <__aeabi_dcmpgt>
 8008b28:	b138      	cbz	r0, 8008b3a <__ieee754_exp+0x222>
 8008b2a:	4b39      	ldr	r3, [pc, #228]	; (8008c10 <__ieee754_exp+0x2f8>)
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	4620      	mov	r0, r4
 8008b30:	4629      	mov	r1, r5
 8008b32:	e70a      	b.n	800894a <__ieee754_exp+0x32>
 8008b34:	f04f 0a00 	mov.w	sl, #0
 8008b38:	e75f      	b.n	80089fa <__ieee754_exp+0xe2>
 8008b3a:	4682      	mov	sl, r0
 8008b3c:	e75d      	b.n	80089fa <__ieee754_exp+0xe2>
 8008b3e:	4632      	mov	r2, r6
 8008b40:	463b      	mov	r3, r7
 8008b42:	2000      	movs	r0, #0
 8008b44:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008b48:	f7f7 fba6 	bl	8000298 <__aeabi_dsub>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	460b      	mov	r3, r1
 8008b50:	ec51 0b19 	vmov	r0, r1, d9
 8008b54:	f7f7 fe82 	bl	800085c <__aeabi_ddiv>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	460b      	mov	r3, r1
 8008b5c:	ec51 0b18 	vmov	r0, r1, d8
 8008b60:	f7f7 fb9a 	bl	8000298 <__aeabi_dsub>
 8008b64:	4642      	mov	r2, r8
 8008b66:	464b      	mov	r3, r9
 8008b68:	f7f7 fb96 	bl	8000298 <__aeabi_dsub>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	460b      	mov	r3, r1
 8008b70:	2000      	movs	r0, #0
 8008b72:	4927      	ldr	r1, [pc, #156]	; (8008c10 <__ieee754_exp+0x2f8>)
 8008b74:	f7f7 fb90 	bl	8000298 <__aeabi_dsub>
 8008b78:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8008b7c:	4592      	cmp	sl, r2
 8008b7e:	db02      	blt.n	8008b86 <__ieee754_exp+0x26e>
 8008b80:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8008b84:	e6e3      	b.n	800894e <__ieee754_exp+0x36>
 8008b86:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8008b8a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8008b94:	f7f7 fd38 	bl	8000608 <__aeabi_dmul>
 8008b98:	e6d9      	b.n	800894e <__ieee754_exp+0x36>
 8008b9a:	bf00      	nop
 8008b9c:	f3af 8000 	nop.w
 8008ba0:	fefa39ef 	.word	0xfefa39ef
 8008ba4:	40862e42 	.word	0x40862e42
 8008ba8:	d52d3051 	.word	0xd52d3051
 8008bac:	c0874910 	.word	0xc0874910
 8008bb0:	72bea4d0 	.word	0x72bea4d0
 8008bb4:	3e663769 	.word	0x3e663769
 8008bb8:	c5d26bf1 	.word	0xc5d26bf1
 8008bbc:	3ebbbd41 	.word	0x3ebbbd41
 8008bc0:	af25de2c 	.word	0xaf25de2c
 8008bc4:	3f11566a 	.word	0x3f11566a
 8008bc8:	16bebd93 	.word	0x16bebd93
 8008bcc:	3f66c16c 	.word	0x3f66c16c
 8008bd0:	5555553e 	.word	0x5555553e
 8008bd4:	3fc55555 	.word	0x3fc55555
 8008bd8:	652b82fe 	.word	0x652b82fe
 8008bdc:	3ff71547 	.word	0x3ff71547
 8008be0:	fee00000 	.word	0xfee00000
 8008be4:	3fe62e42 	.word	0x3fe62e42
 8008be8:	35793c76 	.word	0x35793c76
 8008bec:	3dea39ef 	.word	0x3dea39ef
 8008bf0:	8800759c 	.word	0x8800759c
 8008bf4:	7e37e43c 	.word	0x7e37e43c
 8008bf8:	40862e41 	.word	0x40862e41
 8008bfc:	7fefffff 	.word	0x7fefffff
 8008c00:	3fd62e42 	.word	0x3fd62e42
 8008c04:	3ff0a2b1 	.word	0x3ff0a2b1
 8008c08:	08009418 	.word	0x08009418
 8008c0c:	08009428 	.word	0x08009428
 8008c10:	3ff00000 	.word	0x3ff00000
 8008c14:	08009408 	.word	0x08009408
 8008c18:	3defffff 	.word	0x3defffff
 8008c1c:	00000000 	.word	0x00000000

08008c20 <__ieee754_log>:
 8008c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c24:	ec51 0b10 	vmov	r0, r1, d0
 8008c28:	ed2d 8b04 	vpush	{d8-d9}
 8008c2c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008c30:	b083      	sub	sp, #12
 8008c32:	460d      	mov	r5, r1
 8008c34:	da29      	bge.n	8008c8a <__ieee754_log+0x6a>
 8008c36:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008c3a:	4303      	orrs	r3, r0
 8008c3c:	ee10 2a10 	vmov	r2, s0
 8008c40:	d10c      	bne.n	8008c5c <__ieee754_log+0x3c>
 8008c42:	49cf      	ldr	r1, [pc, #828]	; (8008f80 <__ieee754_log+0x360>)
 8008c44:	2200      	movs	r2, #0
 8008c46:	2300      	movs	r3, #0
 8008c48:	2000      	movs	r0, #0
 8008c4a:	f7f7 fe07 	bl	800085c <__aeabi_ddiv>
 8008c4e:	ec41 0b10 	vmov	d0, r0, r1
 8008c52:	b003      	add	sp, #12
 8008c54:	ecbd 8b04 	vpop	{d8-d9}
 8008c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c5c:	2900      	cmp	r1, #0
 8008c5e:	da05      	bge.n	8008c6c <__ieee754_log+0x4c>
 8008c60:	460b      	mov	r3, r1
 8008c62:	f7f7 fb19 	bl	8000298 <__aeabi_dsub>
 8008c66:	2200      	movs	r2, #0
 8008c68:	2300      	movs	r3, #0
 8008c6a:	e7ee      	b.n	8008c4a <__ieee754_log+0x2a>
 8008c6c:	4bc5      	ldr	r3, [pc, #788]	; (8008f84 <__ieee754_log+0x364>)
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f7f7 fcca 	bl	8000608 <__aeabi_dmul>
 8008c74:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8008c78:	460d      	mov	r5, r1
 8008c7a:	4ac3      	ldr	r2, [pc, #780]	; (8008f88 <__ieee754_log+0x368>)
 8008c7c:	4295      	cmp	r5, r2
 8008c7e:	dd06      	ble.n	8008c8e <__ieee754_log+0x6e>
 8008c80:	4602      	mov	r2, r0
 8008c82:	460b      	mov	r3, r1
 8008c84:	f7f7 fb0a 	bl	800029c <__adddf3>
 8008c88:	e7e1      	b.n	8008c4e <__ieee754_log+0x2e>
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	e7f5      	b.n	8008c7a <__ieee754_log+0x5a>
 8008c8e:	152c      	asrs	r4, r5, #20
 8008c90:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008c94:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8008c98:	441c      	add	r4, r3
 8008c9a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8008c9e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8008ca2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ca6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8008caa:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8008cae:	ea42 0105 	orr.w	r1, r2, r5
 8008cb2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	4bb4      	ldr	r3, [pc, #720]	; (8008f8c <__ieee754_log+0x36c>)
 8008cba:	f7f7 faed 	bl	8000298 <__aeabi_dsub>
 8008cbe:	1cab      	adds	r3, r5, #2
 8008cc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cc4:	2b02      	cmp	r3, #2
 8008cc6:	4682      	mov	sl, r0
 8008cc8:	468b      	mov	fp, r1
 8008cca:	f04f 0200 	mov.w	r2, #0
 8008cce:	dc53      	bgt.n	8008d78 <__ieee754_log+0x158>
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	f7f7 ff01 	bl	8000ad8 <__aeabi_dcmpeq>
 8008cd6:	b1d0      	cbz	r0, 8008d0e <__ieee754_log+0xee>
 8008cd8:	2c00      	cmp	r4, #0
 8008cda:	f000 8122 	beq.w	8008f22 <__ieee754_log+0x302>
 8008cde:	4620      	mov	r0, r4
 8008ce0:	f7f7 fc28 	bl	8000534 <__aeabi_i2d>
 8008ce4:	a390      	add	r3, pc, #576	; (adr r3, 8008f28 <__ieee754_log+0x308>)
 8008ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cea:	4606      	mov	r6, r0
 8008cec:	460f      	mov	r7, r1
 8008cee:	f7f7 fc8b 	bl	8000608 <__aeabi_dmul>
 8008cf2:	a38f      	add	r3, pc, #572	; (adr r3, 8008f30 <__ieee754_log+0x310>)
 8008cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf8:	4604      	mov	r4, r0
 8008cfa:	460d      	mov	r5, r1
 8008cfc:	4630      	mov	r0, r6
 8008cfe:	4639      	mov	r1, r7
 8008d00:	f7f7 fc82 	bl	8000608 <__aeabi_dmul>
 8008d04:	4602      	mov	r2, r0
 8008d06:	460b      	mov	r3, r1
 8008d08:	4620      	mov	r0, r4
 8008d0a:	4629      	mov	r1, r5
 8008d0c:	e7ba      	b.n	8008c84 <__ieee754_log+0x64>
 8008d0e:	a38a      	add	r3, pc, #552	; (adr r3, 8008f38 <__ieee754_log+0x318>)
 8008d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d14:	4650      	mov	r0, sl
 8008d16:	4659      	mov	r1, fp
 8008d18:	f7f7 fc76 	bl	8000608 <__aeabi_dmul>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	460b      	mov	r3, r1
 8008d20:	2000      	movs	r0, #0
 8008d22:	499b      	ldr	r1, [pc, #620]	; (8008f90 <__ieee754_log+0x370>)
 8008d24:	f7f7 fab8 	bl	8000298 <__aeabi_dsub>
 8008d28:	4652      	mov	r2, sl
 8008d2a:	4606      	mov	r6, r0
 8008d2c:	460f      	mov	r7, r1
 8008d2e:	465b      	mov	r3, fp
 8008d30:	4650      	mov	r0, sl
 8008d32:	4659      	mov	r1, fp
 8008d34:	f7f7 fc68 	bl	8000608 <__aeabi_dmul>
 8008d38:	4602      	mov	r2, r0
 8008d3a:	460b      	mov	r3, r1
 8008d3c:	4630      	mov	r0, r6
 8008d3e:	4639      	mov	r1, r7
 8008d40:	f7f7 fc62 	bl	8000608 <__aeabi_dmul>
 8008d44:	4606      	mov	r6, r0
 8008d46:	460f      	mov	r7, r1
 8008d48:	b914      	cbnz	r4, 8008d50 <__ieee754_log+0x130>
 8008d4a:	4632      	mov	r2, r6
 8008d4c:	463b      	mov	r3, r7
 8008d4e:	e0a2      	b.n	8008e96 <__ieee754_log+0x276>
 8008d50:	4620      	mov	r0, r4
 8008d52:	f7f7 fbef 	bl	8000534 <__aeabi_i2d>
 8008d56:	a374      	add	r3, pc, #464	; (adr r3, 8008f28 <__ieee754_log+0x308>)
 8008d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5c:	4680      	mov	r8, r0
 8008d5e:	4689      	mov	r9, r1
 8008d60:	f7f7 fc52 	bl	8000608 <__aeabi_dmul>
 8008d64:	a372      	add	r3, pc, #456	; (adr r3, 8008f30 <__ieee754_log+0x310>)
 8008d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6a:	4604      	mov	r4, r0
 8008d6c:	460d      	mov	r5, r1
 8008d6e:	4640      	mov	r0, r8
 8008d70:	4649      	mov	r1, r9
 8008d72:	f7f7 fc49 	bl	8000608 <__aeabi_dmul>
 8008d76:	e0a7      	b.n	8008ec8 <__ieee754_log+0x2a8>
 8008d78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008d7c:	f7f7 fa8e 	bl	800029c <__adddf3>
 8008d80:	4602      	mov	r2, r0
 8008d82:	460b      	mov	r3, r1
 8008d84:	4650      	mov	r0, sl
 8008d86:	4659      	mov	r1, fp
 8008d88:	f7f7 fd68 	bl	800085c <__aeabi_ddiv>
 8008d8c:	ec41 0b18 	vmov	d8, r0, r1
 8008d90:	4620      	mov	r0, r4
 8008d92:	f7f7 fbcf 	bl	8000534 <__aeabi_i2d>
 8008d96:	ec53 2b18 	vmov	r2, r3, d8
 8008d9a:	ec41 0b19 	vmov	d9, r0, r1
 8008d9e:	ec51 0b18 	vmov	r0, r1, d8
 8008da2:	f7f7 fc31 	bl	8000608 <__aeabi_dmul>
 8008da6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8008daa:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8008dae:	9301      	str	r3, [sp, #4]
 8008db0:	4602      	mov	r2, r0
 8008db2:	460b      	mov	r3, r1
 8008db4:	4680      	mov	r8, r0
 8008db6:	4689      	mov	r9, r1
 8008db8:	f7f7 fc26 	bl	8000608 <__aeabi_dmul>
 8008dbc:	a360      	add	r3, pc, #384	; (adr r3, 8008f40 <__ieee754_log+0x320>)
 8008dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc2:	4606      	mov	r6, r0
 8008dc4:	460f      	mov	r7, r1
 8008dc6:	f7f7 fc1f 	bl	8000608 <__aeabi_dmul>
 8008dca:	a35f      	add	r3, pc, #380	; (adr r3, 8008f48 <__ieee754_log+0x328>)
 8008dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd0:	f7f7 fa64 	bl	800029c <__adddf3>
 8008dd4:	4632      	mov	r2, r6
 8008dd6:	463b      	mov	r3, r7
 8008dd8:	f7f7 fc16 	bl	8000608 <__aeabi_dmul>
 8008ddc:	a35c      	add	r3, pc, #368	; (adr r3, 8008f50 <__ieee754_log+0x330>)
 8008dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de2:	f7f7 fa5b 	bl	800029c <__adddf3>
 8008de6:	4632      	mov	r2, r6
 8008de8:	463b      	mov	r3, r7
 8008dea:	f7f7 fc0d 	bl	8000608 <__aeabi_dmul>
 8008dee:	a35a      	add	r3, pc, #360	; (adr r3, 8008f58 <__ieee754_log+0x338>)
 8008df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df4:	f7f7 fa52 	bl	800029c <__adddf3>
 8008df8:	4642      	mov	r2, r8
 8008dfa:	464b      	mov	r3, r9
 8008dfc:	f7f7 fc04 	bl	8000608 <__aeabi_dmul>
 8008e00:	a357      	add	r3, pc, #348	; (adr r3, 8008f60 <__ieee754_log+0x340>)
 8008e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e06:	4680      	mov	r8, r0
 8008e08:	4689      	mov	r9, r1
 8008e0a:	4630      	mov	r0, r6
 8008e0c:	4639      	mov	r1, r7
 8008e0e:	f7f7 fbfb 	bl	8000608 <__aeabi_dmul>
 8008e12:	a355      	add	r3, pc, #340	; (adr r3, 8008f68 <__ieee754_log+0x348>)
 8008e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e18:	f7f7 fa40 	bl	800029c <__adddf3>
 8008e1c:	4632      	mov	r2, r6
 8008e1e:	463b      	mov	r3, r7
 8008e20:	f7f7 fbf2 	bl	8000608 <__aeabi_dmul>
 8008e24:	a352      	add	r3, pc, #328	; (adr r3, 8008f70 <__ieee754_log+0x350>)
 8008e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2a:	f7f7 fa37 	bl	800029c <__adddf3>
 8008e2e:	4632      	mov	r2, r6
 8008e30:	463b      	mov	r3, r7
 8008e32:	f7f7 fbe9 	bl	8000608 <__aeabi_dmul>
 8008e36:	460b      	mov	r3, r1
 8008e38:	4602      	mov	r2, r0
 8008e3a:	4649      	mov	r1, r9
 8008e3c:	4640      	mov	r0, r8
 8008e3e:	f7f7 fa2d 	bl	800029c <__adddf3>
 8008e42:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8008e46:	9b01      	ldr	r3, [sp, #4]
 8008e48:	3551      	adds	r5, #81	; 0x51
 8008e4a:	431d      	orrs	r5, r3
 8008e4c:	2d00      	cmp	r5, #0
 8008e4e:	4680      	mov	r8, r0
 8008e50:	4689      	mov	r9, r1
 8008e52:	dd48      	ble.n	8008ee6 <__ieee754_log+0x2c6>
 8008e54:	4b4e      	ldr	r3, [pc, #312]	; (8008f90 <__ieee754_log+0x370>)
 8008e56:	2200      	movs	r2, #0
 8008e58:	4650      	mov	r0, sl
 8008e5a:	4659      	mov	r1, fp
 8008e5c:	f7f7 fbd4 	bl	8000608 <__aeabi_dmul>
 8008e60:	4652      	mov	r2, sl
 8008e62:	465b      	mov	r3, fp
 8008e64:	f7f7 fbd0 	bl	8000608 <__aeabi_dmul>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	4606      	mov	r6, r0
 8008e6e:	460f      	mov	r7, r1
 8008e70:	4640      	mov	r0, r8
 8008e72:	4649      	mov	r1, r9
 8008e74:	f7f7 fa12 	bl	800029c <__adddf3>
 8008e78:	ec53 2b18 	vmov	r2, r3, d8
 8008e7c:	f7f7 fbc4 	bl	8000608 <__aeabi_dmul>
 8008e80:	4680      	mov	r8, r0
 8008e82:	4689      	mov	r9, r1
 8008e84:	b964      	cbnz	r4, 8008ea0 <__ieee754_log+0x280>
 8008e86:	4602      	mov	r2, r0
 8008e88:	460b      	mov	r3, r1
 8008e8a:	4630      	mov	r0, r6
 8008e8c:	4639      	mov	r1, r7
 8008e8e:	f7f7 fa03 	bl	8000298 <__aeabi_dsub>
 8008e92:	4602      	mov	r2, r0
 8008e94:	460b      	mov	r3, r1
 8008e96:	4650      	mov	r0, sl
 8008e98:	4659      	mov	r1, fp
 8008e9a:	f7f7 f9fd 	bl	8000298 <__aeabi_dsub>
 8008e9e:	e6d6      	b.n	8008c4e <__ieee754_log+0x2e>
 8008ea0:	a321      	add	r3, pc, #132	; (adr r3, 8008f28 <__ieee754_log+0x308>)
 8008ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea6:	ec51 0b19 	vmov	r0, r1, d9
 8008eaa:	f7f7 fbad 	bl	8000608 <__aeabi_dmul>
 8008eae:	a320      	add	r3, pc, #128	; (adr r3, 8008f30 <__ieee754_log+0x310>)
 8008eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb4:	4604      	mov	r4, r0
 8008eb6:	460d      	mov	r5, r1
 8008eb8:	ec51 0b19 	vmov	r0, r1, d9
 8008ebc:	f7f7 fba4 	bl	8000608 <__aeabi_dmul>
 8008ec0:	4642      	mov	r2, r8
 8008ec2:	464b      	mov	r3, r9
 8008ec4:	f7f7 f9ea 	bl	800029c <__adddf3>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	460b      	mov	r3, r1
 8008ecc:	4630      	mov	r0, r6
 8008ece:	4639      	mov	r1, r7
 8008ed0:	f7f7 f9e2 	bl	8000298 <__aeabi_dsub>
 8008ed4:	4652      	mov	r2, sl
 8008ed6:	465b      	mov	r3, fp
 8008ed8:	f7f7 f9de 	bl	8000298 <__aeabi_dsub>
 8008edc:	4602      	mov	r2, r0
 8008ede:	460b      	mov	r3, r1
 8008ee0:	4620      	mov	r0, r4
 8008ee2:	4629      	mov	r1, r5
 8008ee4:	e7d9      	b.n	8008e9a <__ieee754_log+0x27a>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	460b      	mov	r3, r1
 8008eea:	4650      	mov	r0, sl
 8008eec:	4659      	mov	r1, fp
 8008eee:	f7f7 f9d3 	bl	8000298 <__aeabi_dsub>
 8008ef2:	ec53 2b18 	vmov	r2, r3, d8
 8008ef6:	f7f7 fb87 	bl	8000608 <__aeabi_dmul>
 8008efa:	4606      	mov	r6, r0
 8008efc:	460f      	mov	r7, r1
 8008efe:	2c00      	cmp	r4, #0
 8008f00:	f43f af23 	beq.w	8008d4a <__ieee754_log+0x12a>
 8008f04:	a308      	add	r3, pc, #32	; (adr r3, 8008f28 <__ieee754_log+0x308>)
 8008f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0a:	ec51 0b19 	vmov	r0, r1, d9
 8008f0e:	f7f7 fb7b 	bl	8000608 <__aeabi_dmul>
 8008f12:	a307      	add	r3, pc, #28	; (adr r3, 8008f30 <__ieee754_log+0x310>)
 8008f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f18:	4604      	mov	r4, r0
 8008f1a:	460d      	mov	r5, r1
 8008f1c:	ec51 0b19 	vmov	r0, r1, d9
 8008f20:	e727      	b.n	8008d72 <__ieee754_log+0x152>
 8008f22:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8008f78 <__ieee754_log+0x358>
 8008f26:	e694      	b.n	8008c52 <__ieee754_log+0x32>
 8008f28:	fee00000 	.word	0xfee00000
 8008f2c:	3fe62e42 	.word	0x3fe62e42
 8008f30:	35793c76 	.word	0x35793c76
 8008f34:	3dea39ef 	.word	0x3dea39ef
 8008f38:	55555555 	.word	0x55555555
 8008f3c:	3fd55555 	.word	0x3fd55555
 8008f40:	df3e5244 	.word	0xdf3e5244
 8008f44:	3fc2f112 	.word	0x3fc2f112
 8008f48:	96cb03de 	.word	0x96cb03de
 8008f4c:	3fc74664 	.word	0x3fc74664
 8008f50:	94229359 	.word	0x94229359
 8008f54:	3fd24924 	.word	0x3fd24924
 8008f58:	55555593 	.word	0x55555593
 8008f5c:	3fe55555 	.word	0x3fe55555
 8008f60:	d078c69f 	.word	0xd078c69f
 8008f64:	3fc39a09 	.word	0x3fc39a09
 8008f68:	1d8e78af 	.word	0x1d8e78af
 8008f6c:	3fcc71c5 	.word	0x3fcc71c5
 8008f70:	9997fa04 	.word	0x9997fa04
 8008f74:	3fd99999 	.word	0x3fd99999
	...
 8008f80:	c3500000 	.word	0xc3500000
 8008f84:	43500000 	.word	0x43500000
 8008f88:	7fefffff 	.word	0x7fefffff
 8008f8c:	3ff00000 	.word	0x3ff00000
 8008f90:	3fe00000 	.word	0x3fe00000

08008f94 <with_errno>:
 8008f94:	b570      	push	{r4, r5, r6, lr}
 8008f96:	4604      	mov	r4, r0
 8008f98:	460d      	mov	r5, r1
 8008f9a:	4616      	mov	r6, r2
 8008f9c:	f7fd fb78 	bl	8006690 <__errno>
 8008fa0:	4629      	mov	r1, r5
 8008fa2:	6006      	str	r6, [r0, #0]
 8008fa4:	4620      	mov	r0, r4
 8008fa6:	bd70      	pop	{r4, r5, r6, pc}

08008fa8 <xflow>:
 8008fa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008faa:	4614      	mov	r4, r2
 8008fac:	461d      	mov	r5, r3
 8008fae:	b108      	cbz	r0, 8008fb4 <xflow+0xc>
 8008fb0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008fb4:	e9cd 2300 	strd	r2, r3, [sp]
 8008fb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	4629      	mov	r1, r5
 8008fc0:	f7f7 fb22 	bl	8000608 <__aeabi_dmul>
 8008fc4:	2222      	movs	r2, #34	; 0x22
 8008fc6:	b003      	add	sp, #12
 8008fc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fcc:	f7ff bfe2 	b.w	8008f94 <with_errno>

08008fd0 <__math_uflow>:
 8008fd0:	b508      	push	{r3, lr}
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008fd8:	f7ff ffe6 	bl	8008fa8 <xflow>
 8008fdc:	ec41 0b10 	vmov	d0, r0, r1
 8008fe0:	bd08      	pop	{r3, pc}

08008fe2 <__math_oflow>:
 8008fe2:	b508      	push	{r3, lr}
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008fea:	f7ff ffdd 	bl	8008fa8 <xflow>
 8008fee:	ec41 0b10 	vmov	d0, r0, r1
 8008ff2:	bd08      	pop	{r3, pc}

08008ff4 <_init>:
 8008ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ff6:	bf00      	nop
 8008ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ffa:	bc08      	pop	{r3}
 8008ffc:	469e      	mov	lr, r3
 8008ffe:	4770      	bx	lr

08009000 <_fini>:
 8009000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009002:	bf00      	nop
 8009004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009006:	bc08      	pop	{r3}
 8009008:	469e      	mov	lr, r3
 800900a:	4770      	bx	lr
