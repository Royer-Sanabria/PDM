
TP_FINAL_ALTURA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009074  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08009218  08009218  00019218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009640  08009640  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009640  08009640  00019640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009648  08009648  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009648  08009648  00019648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800964c  0800964c  0001964c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009650  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  200001e4  08009834  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000560  08009834  00020560  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e2b1  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026b7  00000000  00000000  0002e508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bb0  00000000  00000000  00030bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000090f  00000000  00000000  00031770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017c66  00000000  00000000  0003207f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000113aa  00000000  00000000  00049ce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a265  00000000  00000000  0005b08f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000043fc  00000000  00000000  000e52f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000e96f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080091fc 	.word	0x080091fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	080091fc 	.word	0x080091fc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295
 8000c76:	f000 b9bb 	b.w	8000ff0 <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f84d 	bl	8000d28 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f840 	bl	8000d28 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f82f 	bl	8000d28 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f821 	bl	8000d28 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b970 	b.w	8000ff0 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9e08      	ldr	r6, [sp, #32]
 8000d2e:	460d      	mov	r5, r1
 8000d30:	4604      	mov	r4, r0
 8000d32:	460f      	mov	r7, r1
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d14a      	bne.n	8000dce <__udivmoddi4+0xa6>
 8000d38:	428a      	cmp	r2, r1
 8000d3a:	4694      	mov	ip, r2
 8000d3c:	d965      	bls.n	8000e0a <__udivmoddi4+0xe2>
 8000d3e:	fab2 f382 	clz	r3, r2
 8000d42:	b143      	cbz	r3, 8000d56 <__udivmoddi4+0x2e>
 8000d44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d48:	f1c3 0220 	rsb	r2, r3, #32
 8000d4c:	409f      	lsls	r7, r3
 8000d4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d52:	4317      	orrs	r7, r2
 8000d54:	409c      	lsls	r4, r3
 8000d56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d5a:	fa1f f58c 	uxth.w	r5, ip
 8000d5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d62:	0c22      	lsrs	r2, r4, #16
 8000d64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d6c:	fb01 f005 	mul.w	r0, r1, r5
 8000d70:	4290      	cmp	r0, r2
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x62>
 8000d74:	eb1c 0202 	adds.w	r2, ip, r2
 8000d78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d7c:	f080 811c 	bcs.w	8000fb8 <__udivmoddi4+0x290>
 8000d80:	4290      	cmp	r0, r2
 8000d82:	f240 8119 	bls.w	8000fb8 <__udivmoddi4+0x290>
 8000d86:	3902      	subs	r1, #2
 8000d88:	4462      	add	r2, ip
 8000d8a:	1a12      	subs	r2, r2, r0
 8000d8c:	b2a4      	uxth	r4, r4
 8000d8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d9a:	fb00 f505 	mul.w	r5, r0, r5
 8000d9e:	42a5      	cmp	r5, r4
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x90>
 8000da2:	eb1c 0404 	adds.w	r4, ip, r4
 8000da6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000daa:	f080 8107 	bcs.w	8000fbc <__udivmoddi4+0x294>
 8000dae:	42a5      	cmp	r5, r4
 8000db0:	f240 8104 	bls.w	8000fbc <__udivmoddi4+0x294>
 8000db4:	4464      	add	r4, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dbc:	1b64      	subs	r4, r4, r5
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11e      	cbz	r6, 8000dca <__udivmoddi4+0xa2>
 8000dc2:	40dc      	lsrs	r4, r3
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0xbc>
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	f000 80ed 	beq.w	8000fb2 <__udivmoddi4+0x28a>
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e9c6 0500 	strd	r0, r5, [r6]
 8000dde:	4608      	mov	r0, r1
 8000de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de4:	fab3 f183 	clz	r1, r3
 8000de8:	2900      	cmp	r1, #0
 8000dea:	d149      	bne.n	8000e80 <__udivmoddi4+0x158>
 8000dec:	42ab      	cmp	r3, r5
 8000dee:	d302      	bcc.n	8000df6 <__udivmoddi4+0xce>
 8000df0:	4282      	cmp	r2, r0
 8000df2:	f200 80f8 	bhi.w	8000fe6 <__udivmoddi4+0x2be>
 8000df6:	1a84      	subs	r4, r0, r2
 8000df8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	4617      	mov	r7, r2
 8000e00:	2e00      	cmp	r6, #0
 8000e02:	d0e2      	beq.n	8000dca <__udivmoddi4+0xa2>
 8000e04:	e9c6 4700 	strd	r4, r7, [r6]
 8000e08:	e7df      	b.n	8000dca <__udivmoddi4+0xa2>
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xe6>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f382 	clz	r3, r2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x210>
 8000e18:	1a8a      	subs	r2, r1, r2
 8000e1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1e:	fa1f fe8c 	uxth.w	lr, ip
 8000e22:	2101      	movs	r1, #1
 8000e24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e28:	fb07 2015 	mls	r0, r7, r5, r2
 8000e2c:	0c22      	lsrs	r2, r4, #16
 8000e2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e32:	fb0e f005 	mul.w	r0, lr, r5
 8000e36:	4290      	cmp	r0, r2
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x124>
 8000e3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e42:	d202      	bcs.n	8000e4a <__udivmoddi4+0x122>
 8000e44:	4290      	cmp	r0, r2
 8000e46:	f200 80cb 	bhi.w	8000fe0 <__udivmoddi4+0x2b8>
 8000e4a:	4645      	mov	r5, r8
 8000e4c:	1a12      	subs	r2, r2, r0
 8000e4e:	b2a4      	uxth	r4, r4
 8000e50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e54:	fb07 2210 	mls	r2, r7, r0, r2
 8000e58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e60:	45a6      	cmp	lr, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x14e>
 8000e64:	eb1c 0404 	adds.w	r4, ip, r4
 8000e68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e6c:	d202      	bcs.n	8000e74 <__udivmoddi4+0x14c>
 8000e6e:	45a6      	cmp	lr, r4
 8000e70:	f200 80bb 	bhi.w	8000fea <__udivmoddi4+0x2c2>
 8000e74:	4610      	mov	r0, r2
 8000e76:	eba4 040e 	sub.w	r4, r4, lr
 8000e7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7e:	e79f      	b.n	8000dc0 <__udivmoddi4+0x98>
 8000e80:	f1c1 0720 	rsb	r7, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e92:	fa20 f307 	lsr.w	r3, r0, r7
 8000e96:	40fd      	lsrs	r5, r7
 8000e98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ea2:	fa1f fe8c 	uxth.w	lr, ip
 8000ea6:	fb09 5518 	mls	r5, r9, r8, r5
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eb0:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb4:	42a5      	cmp	r5, r4
 8000eb6:	fa02 f201 	lsl.w	r2, r2, r1
 8000eba:	fa00 f001 	lsl.w	r0, r0, r1
 8000ebe:	d90b      	bls.n	8000ed8 <__udivmoddi4+0x1b0>
 8000ec0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec8:	f080 8088 	bcs.w	8000fdc <__udivmoddi4+0x2b4>
 8000ecc:	42a5      	cmp	r5, r4
 8000ece:	f240 8085 	bls.w	8000fdc <__udivmoddi4+0x2b4>
 8000ed2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed6:	4464      	add	r4, ip
 8000ed8:	1b64      	subs	r4, r4, r5
 8000eda:	b29d      	uxth	r5, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000eec:	45a6      	cmp	lr, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1da>
 8000ef0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef8:	d26c      	bcs.n	8000fd4 <__udivmoddi4+0x2ac>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	d96a      	bls.n	8000fd4 <__udivmoddi4+0x2ac>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	4464      	add	r4, ip
 8000f02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f06:	fba3 9502 	umull	r9, r5, r3, r2
 8000f0a:	eba4 040e 	sub.w	r4, r4, lr
 8000f0e:	42ac      	cmp	r4, r5
 8000f10:	46c8      	mov	r8, r9
 8000f12:	46ae      	mov	lr, r5
 8000f14:	d356      	bcc.n	8000fc4 <__udivmoddi4+0x29c>
 8000f16:	d053      	beq.n	8000fc0 <__udivmoddi4+0x298>
 8000f18:	b156      	cbz	r6, 8000f30 <__udivmoddi4+0x208>
 8000f1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f22:	fa04 f707 	lsl.w	r7, r4, r7
 8000f26:	40ca      	lsrs	r2, r1
 8000f28:	40cc      	lsrs	r4, r1
 8000f2a:	4317      	orrs	r7, r2
 8000f2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f30:	4618      	mov	r0, r3
 8000f32:	2100      	movs	r1, #0
 8000f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f38:	f1c3 0120 	rsb	r1, r3, #32
 8000f3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f40:	fa20 f201 	lsr.w	r2, r0, r1
 8000f44:	fa25 f101 	lsr.w	r1, r5, r1
 8000f48:	409d      	lsls	r5, r3
 8000f4a:	432a      	orrs	r2, r5
 8000f4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f50:	fa1f fe8c 	uxth.w	lr, ip
 8000f54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f58:	fb07 1510 	mls	r5, r7, r0, r1
 8000f5c:	0c11      	lsrs	r1, r2, #16
 8000f5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f62:	fb00 f50e 	mul.w	r5, r0, lr
 8000f66:	428d      	cmp	r5, r1
 8000f68:	fa04 f403 	lsl.w	r4, r4, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x258>
 8000f6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f76:	d22f      	bcs.n	8000fd8 <__udivmoddi4+0x2b0>
 8000f78:	428d      	cmp	r5, r1
 8000f7a:	d92d      	bls.n	8000fd8 <__udivmoddi4+0x2b0>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4461      	add	r1, ip
 8000f80:	1b49      	subs	r1, r1, r5
 8000f82:	b292      	uxth	r2, r2
 8000f84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f88:	fb07 1115 	mls	r1, r7, r5, r1
 8000f8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f90:	fb05 f10e 	mul.w	r1, r5, lr
 8000f94:	4291      	cmp	r1, r2
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x282>
 8000f98:	eb1c 0202 	adds.w	r2, ip, r2
 8000f9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fa0:	d216      	bcs.n	8000fd0 <__udivmoddi4+0x2a8>
 8000fa2:	4291      	cmp	r1, r2
 8000fa4:	d914      	bls.n	8000fd0 <__udivmoddi4+0x2a8>
 8000fa6:	3d02      	subs	r5, #2
 8000fa8:	4462      	add	r2, ip
 8000faa:	1a52      	subs	r2, r2, r1
 8000fac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fb0:	e738      	b.n	8000e24 <__udivmoddi4+0xfc>
 8000fb2:	4631      	mov	r1, r6
 8000fb4:	4630      	mov	r0, r6
 8000fb6:	e708      	b.n	8000dca <__udivmoddi4+0xa2>
 8000fb8:	4639      	mov	r1, r7
 8000fba:	e6e6      	b.n	8000d8a <__udivmoddi4+0x62>
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	e6fb      	b.n	8000db8 <__udivmoddi4+0x90>
 8000fc0:	4548      	cmp	r0, r9
 8000fc2:	d2a9      	bcs.n	8000f18 <__udivmoddi4+0x1f0>
 8000fc4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	e7a3      	b.n	8000f18 <__udivmoddi4+0x1f0>
 8000fd0:	4645      	mov	r5, r8
 8000fd2:	e7ea      	b.n	8000faa <__udivmoddi4+0x282>
 8000fd4:	462b      	mov	r3, r5
 8000fd6:	e794      	b.n	8000f02 <__udivmoddi4+0x1da>
 8000fd8:	4640      	mov	r0, r8
 8000fda:	e7d1      	b.n	8000f80 <__udivmoddi4+0x258>
 8000fdc:	46d0      	mov	r8, sl
 8000fde:	e77b      	b.n	8000ed8 <__udivmoddi4+0x1b0>
 8000fe0:	3d02      	subs	r5, #2
 8000fe2:	4462      	add	r2, ip
 8000fe4:	e732      	b.n	8000e4c <__udivmoddi4+0x124>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e70a      	b.n	8000e00 <__udivmoddi4+0xd8>
 8000fea:	4464      	add	r4, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e742      	b.n	8000e76 <__udivmoddi4+0x14e>

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff8:	f001 fd46 	bl	8002a88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ffc:	f000 f818 	bl	8001030 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001000:	f000 f8d8 	bl	80011b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001004:	f000 f87e 	bl	8001104 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001008:	f000 f8aa 	bl	8001160 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  BMP_280_Init2();
 800100c:	f000 fcd2 	bl	80019b4 <BMP_280_Init2>
 UART_Init2();
 8001010:	f000 fbd4 	bl	80017bc <UART_Init2>
 debounceFSM_init();
 8001014:	f000 fc3a 	bl	800188c <debounceFSM_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
if(readKey()){
 8001018:	f000 fcba 	bl	8001990 <readKey>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d002      	beq.n	8001028 <main+0x34>
	MEF_Init();
 8001022:	f000 fef1 	bl	8001e08 <MEF_Init>
 8001026:	e7f7      	b.n	8001018 <main+0x24>
}
else {
MEF();
 8001028:	f000 fdcc 	bl	8001bc4 <MEF>
if(readKey()){
 800102c:	e7f4      	b.n	8001018 <main+0x24>
	...

08001030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b094      	sub	sp, #80	; 0x50
 8001034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001036:	f107 0320 	add.w	r3, r7, #32
 800103a:	2230      	movs	r2, #48	; 0x30
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f005 fbd7 	bl	80067f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001054:	2300      	movs	r3, #0
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	4b28      	ldr	r3, [pc, #160]	; (80010fc <SystemClock_Config+0xcc>)
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	4a27      	ldr	r2, [pc, #156]	; (80010fc <SystemClock_Config+0xcc>)
 800105e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001062:	6413      	str	r3, [r2, #64]	; 0x40
 8001064:	4b25      	ldr	r3, [pc, #148]	; (80010fc <SystemClock_Config+0xcc>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001070:	2300      	movs	r3, #0
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	4b22      	ldr	r3, [pc, #136]	; (8001100 <SystemClock_Config+0xd0>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800107c:	4a20      	ldr	r2, [pc, #128]	; (8001100 <SystemClock_Config+0xd0>)
 800107e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <SystemClock_Config+0xd0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001090:	2302      	movs	r3, #2
 8001092:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001094:	2301      	movs	r3, #1
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001098:	2310      	movs	r3, #16
 800109a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109c:	2302      	movs	r3, #2
 800109e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010a0:	2300      	movs	r3, #0
 80010a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010a4:	2308      	movs	r3, #8
 80010a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80010a8:	2354      	movs	r3, #84	; 0x54
 80010aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ac:	2302      	movs	r3, #2
 80010ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010b0:	2304      	movs	r3, #4
 80010b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b4:	f107 0320 	add.w	r3, r7, #32
 80010b8:	4618      	mov	r0, r3
 80010ba:	f003 f8af 	bl	800421c <HAL_RCC_OscConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010c4:	f000 f8e4 	bl	8001290 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c8:	230f      	movs	r3, #15
 80010ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010cc:	2302      	movs	r3, #2
 80010ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	2102      	movs	r1, #2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f003 fb11 	bl	800470c <HAL_RCC_ClockConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010f0:	f000 f8ce 	bl	8001290 <Error_Handler>
  }
}
 80010f4:	bf00      	nop
 80010f6:	3750      	adds	r7, #80	; 0x50
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40023800 	.word	0x40023800
 8001100:	40007000 	.word	0x40007000

08001104 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <MX_I2C1_Init+0x50>)
 800110a:	4a13      	ldr	r2, [pc, #76]	; (8001158 <MX_I2C1_Init+0x54>)
 800110c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <MX_I2C1_Init+0x50>)
 8001110:	4a12      	ldr	r2, [pc, #72]	; (800115c <MX_I2C1_Init+0x58>)
 8001112:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <MX_I2C1_Init+0x50>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <MX_I2C1_Init+0x50>)
 800111c:	2200      	movs	r2, #0
 800111e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <MX_I2C1_Init+0x50>)
 8001122:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001126:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <MX_I2C1_Init+0x50>)
 800112a:	2200      	movs	r2, #0
 800112c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <MX_I2C1_Init+0x50>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001134:	4b07      	ldr	r3, [pc, #28]	; (8001154 <MX_I2C1_Init+0x50>)
 8001136:	2200      	movs	r2, #0
 8001138:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <MX_I2C1_Init+0x50>)
 800113c:	2200      	movs	r2, #0
 800113e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001140:	4804      	ldr	r0, [pc, #16]	; (8001154 <MX_I2C1_Init+0x50>)
 8001142:	f002 f8ab 	bl	800329c <HAL_I2C_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800114c:	f000 f8a0 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200003a0 	.word	0x200003a0
 8001158:	40005400 	.word	0x40005400
 800115c:	000186a0 	.word	0x000186a0

08001160 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001166:	4a12      	ldr	r2, [pc, #72]	; (80011b0 <MX_USART2_UART_Init+0x50>)
 8001168:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 800116c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001170:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001186:	220c      	movs	r2, #12
 8001188:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001198:	f003 fc98 	bl	8004acc <HAL_UART_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011a2:	f000 f875 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000204 	.word	0x20000204
 80011b0:	40004400 	.word	0x40004400

080011b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	; 0x28
 80011b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	4b2d      	ldr	r3, [pc, #180]	; (8001284 <MX_GPIO_Init+0xd0>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a2c      	ldr	r2, [pc, #176]	; (8001284 <MX_GPIO_Init+0xd0>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b2a      	ldr	r3, [pc, #168]	; (8001284 <MX_GPIO_Init+0xd0>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4b26      	ldr	r3, [pc, #152]	; (8001284 <MX_GPIO_Init+0xd0>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a25      	ldr	r2, [pc, #148]	; (8001284 <MX_GPIO_Init+0xd0>)
 80011f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b23      	ldr	r3, [pc, #140]	; (8001284 <MX_GPIO_Init+0xd0>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <MX_GPIO_Init+0xd0>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a1e      	ldr	r2, [pc, #120]	; (8001284 <MX_GPIO_Init+0xd0>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <MX_GPIO_Init+0xd0>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	4b18      	ldr	r3, [pc, #96]	; (8001284 <MX_GPIO_Init+0xd0>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a17      	ldr	r2, [pc, #92]	; (8001284 <MX_GPIO_Init+0xd0>)
 8001228:	f043 0302 	orr.w	r3, r3, #2
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <MX_GPIO_Init+0xd0>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800123a:	2200      	movs	r2, #0
 800123c:	2120      	movs	r1, #32
 800123e:	4812      	ldr	r0, [pc, #72]	; (8001288 <MX_GPIO_Init+0xd4>)
 8001240:	f001 fff8 	bl	8003234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001244:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124a:	2300      	movs	r3, #0
 800124c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	4619      	mov	r1, r3
 8001258:	480c      	ldr	r0, [pc, #48]	; (800128c <MX_GPIO_Init+0xd8>)
 800125a:	f001 fe4f 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800125e:	2320      	movs	r3, #32
 8001260:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001262:	2301      	movs	r3, #1
 8001264:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126e:	f107 0314 	add.w	r3, r7, #20
 8001272:	4619      	mov	r1, r3
 8001274:	4804      	ldr	r0, [pc, #16]	; (8001288 <MX_GPIO_Init+0xd4>)
 8001276:	f001 fe41 	bl	8002efc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800127a:	bf00      	nop
 800127c:	3728      	adds	r7, #40	; 0x28
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40023800 	.word	0x40023800
 8001288:	40020000 	.word	0x40020000
 800128c:	40020800 	.word	0x40020800

08001290 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001294:	b672      	cpsid	i
}
 8001296:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001298:	e7fe      	b.n	8001298 <Error_Handler+0x8>
	...

0800129c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <HAL_MspInit+0x4c>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	4a0f      	ldr	r2, [pc, #60]	; (80012e8 <HAL_MspInit+0x4c>)
 80012ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b0:	6453      	str	r3, [r2, #68]	; 0x44
 80012b2:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <HAL_MspInit+0x4c>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	603b      	str	r3, [r7, #0]
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <HAL_MspInit+0x4c>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	4a08      	ldr	r2, [pc, #32]	; (80012e8 <HAL_MspInit+0x4c>)
 80012c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012cc:	6413      	str	r3, [r2, #64]	; 0x40
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_MspInit+0x4c>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40023800 	.word	0x40023800

080012ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	; 0x28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a19      	ldr	r2, [pc, #100]	; (8001370 <HAL_I2C_MspInit+0x84>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d12c      	bne.n	8001368 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	4b18      	ldr	r3, [pc, #96]	; (8001374 <HAL_I2C_MspInit+0x88>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a17      	ldr	r2, [pc, #92]	; (8001374 <HAL_I2C_MspInit+0x88>)
 8001318:	f043 0302 	orr.w	r3, r3, #2
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <HAL_I2C_MspInit+0x88>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800132a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800132e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001330:	2312      	movs	r3, #18
 8001332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001338:	2303      	movs	r3, #3
 800133a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800133c:	2304      	movs	r3, #4
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4619      	mov	r1, r3
 8001346:	480c      	ldr	r0, [pc, #48]	; (8001378 <HAL_I2C_MspInit+0x8c>)
 8001348:	f001 fdd8 	bl	8002efc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <HAL_I2C_MspInit+0x88>)
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	4a07      	ldr	r2, [pc, #28]	; (8001374 <HAL_I2C_MspInit+0x88>)
 8001356:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800135a:	6413      	str	r3, [r2, #64]	; 0x40
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <HAL_I2C_MspInit+0x88>)
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001368:	bf00      	nop
 800136a:	3728      	adds	r7, #40	; 0x28
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40005400 	.word	0x40005400
 8001374:	40023800 	.word	0x40023800
 8001378:	40020400 	.word	0x40020400

0800137c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	; 0x28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a1d      	ldr	r2, [pc, #116]	; (8001410 <HAL_UART_MspInit+0x94>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d133      	bne.n	8001406 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <HAL_UART_MspInit+0x98>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	4a1b      	ldr	r2, [pc, #108]	; (8001414 <HAL_UART_MspInit+0x98>)
 80013a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ac:	6413      	str	r3, [r2, #64]	; 0x40
 80013ae:	4b19      	ldr	r3, [pc, #100]	; (8001414 <HAL_UART_MspInit+0x98>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <HAL_UART_MspInit+0x98>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a14      	ldr	r2, [pc, #80]	; (8001414 <HAL_UART_MspInit+0x98>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b12      	ldr	r3, [pc, #72]	; (8001414 <HAL_UART_MspInit+0x98>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013d6:	230c      	movs	r3, #12
 80013d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e2:	2303      	movs	r3, #3
 80013e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013e6:	2307      	movs	r3, #7
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	4619      	mov	r1, r3
 80013f0:	4809      	ldr	r0, [pc, #36]	; (8001418 <HAL_UART_MspInit+0x9c>)
 80013f2:	f001 fd83 	bl	8002efc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	2026      	movs	r0, #38	; 0x26
 80013fc:	f001 fcb5 	bl	8002d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001400:	2026      	movs	r0, #38	; 0x26
 8001402:	f001 fcce 	bl	8002da2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001406:	bf00      	nop
 8001408:	3728      	adds	r7, #40	; 0x28
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40004400 	.word	0x40004400
 8001414:	40023800 	.word	0x40023800
 8001418:	40020000 	.word	0x40020000

0800141c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <NMI_Handler+0x4>

08001422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <HardFault_Handler+0x4>

08001428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800142c:	e7fe      	b.n	800142c <MemManage_Handler+0x4>

0800142e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001432:	e7fe      	b.n	8001432 <BusFault_Handler+0x4>

08001434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <UsageFault_Handler+0x4>

0800143a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001468:	f001 fb60 	bl	8002b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}

08001470 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001474:	4802      	ldr	r0, [pc, #8]	; (8001480 <USART2_IRQHandler+0x10>)
 8001476:	f003 fc39 	bl	8004cec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000204 	.word	0x20000204

08001484 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return 1;
 8001488:	2301      	movs	r3, #1
}
 800148a:	4618      	mov	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <_kill>:

int _kill(int pid, int sig)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800149e:	f005 f9fb 	bl	8006898 <__errno>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2216      	movs	r2, #22
 80014a6:	601a      	str	r2, [r3, #0]
  return -1;
 80014a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <_exit>:

void _exit (int status)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014bc:	f04f 31ff 	mov.w	r1, #4294967295
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ffe7 	bl	8001494 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014c6:	e7fe      	b.n	80014c6 <_exit+0x12>

080014c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	e00a      	b.n	80014f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014da:	f3af 8000 	nop.w
 80014de:	4601      	mov	r1, r0
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	1c5a      	adds	r2, r3, #1
 80014e4:	60ba      	str	r2, [r7, #8]
 80014e6:	b2ca      	uxtb	r2, r1
 80014e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	3301      	adds	r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	dbf0      	blt.n	80014da <_read+0x12>
  }

  return len;
 80014f8:	687b      	ldr	r3, [r7, #4]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b086      	sub	sp, #24
 8001506:	af00      	add	r7, sp, #0
 8001508:	60f8      	str	r0, [r7, #12]
 800150a:	60b9      	str	r1, [r7, #8]
 800150c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	e009      	b.n	8001528 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	1c5a      	adds	r2, r3, #1
 8001518:	60ba      	str	r2, [r7, #8]
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	3301      	adds	r3, #1
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	429a      	cmp	r2, r3
 800152e:	dbf1      	blt.n	8001514 <_write+0x12>
  }
  return len;
 8001530:	687b      	ldr	r3, [r7, #4]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <_close>:

int _close(int file)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001542:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001562:	605a      	str	r2, [r3, #4]
  return 0;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <_isatty>:

int _isatty(int file)
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800157a:	2301      	movs	r3, #1
}
 800157c:	4618      	mov	r0, r3
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
	...

080015a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015ac:	4a14      	ldr	r2, [pc, #80]	; (8001600 <_sbrk+0x5c>)
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <_sbrk+0x60>)
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b8:	4b13      	ldr	r3, [pc, #76]	; (8001608 <_sbrk+0x64>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d102      	bne.n	80015c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c0:	4b11      	ldr	r3, [pc, #68]	; (8001608 <_sbrk+0x64>)
 80015c2:	4a12      	ldr	r2, [pc, #72]	; (800160c <_sbrk+0x68>)
 80015c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <_sbrk+0x64>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d207      	bcs.n	80015e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d4:	f005 f960 	bl	8006898 <__errno>
 80015d8:	4603      	mov	r3, r0
 80015da:	220c      	movs	r2, #12
 80015dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015de:	f04f 33ff 	mov.w	r3, #4294967295
 80015e2:	e009      	b.n	80015f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <_sbrk+0x64>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ea:	4b07      	ldr	r3, [pc, #28]	; (8001608 <_sbrk+0x64>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	4a05      	ldr	r2, [pc, #20]	; (8001608 <_sbrk+0x64>)
 80015f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015f6:	68fb      	ldr	r3, [r7, #12]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20018000 	.word	0x20018000
 8001604:	00000400 	.word	0x00000400
 8001608:	20000200 	.word	0x20000200
 800160c:	20000560 	.word	0x20000560

08001610 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <SystemInit+0x20>)
 8001616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800161a:	4a05      	ldr	r2, [pc, #20]	; (8001630 <SystemInit+0x20>)
 800161c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001620:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001634:	f8df d034 	ldr.w	sp, [pc, #52]	; 800166c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001638:	480d      	ldr	r0, [pc, #52]	; (8001670 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800163a:	490e      	ldr	r1, [pc, #56]	; (8001674 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800163c:	4a0e      	ldr	r2, [pc, #56]	; (8001678 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800163e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001640:	e002      	b.n	8001648 <LoopCopyDataInit>

08001642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001646:	3304      	adds	r3, #4

08001648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800164a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800164c:	d3f9      	bcc.n	8001642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800164e:	4a0b      	ldr	r2, [pc, #44]	; (800167c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001650:	4c0b      	ldr	r4, [pc, #44]	; (8001680 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001654:	e001      	b.n	800165a <LoopFillZerobss>

08001656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001658:	3204      	adds	r2, #4

0800165a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800165a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800165c:	d3fb      	bcc.n	8001656 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800165e:	f7ff ffd7 	bl	8001610 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001662:	f005 f91f 	bl	80068a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001666:	f7ff fcc5 	bl	8000ff4 <main>
  bx  lr    
 800166a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800166c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001674:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001678:	08009650 	.word	0x08009650
  ldr r2, =_sbss
 800167c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001680:	20000560 	.word	0x20000560

08001684 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001684:	e7fe      	b.n	8001684 <ADC_IRQHandler>

08001686 <delayInit>:
 */

#include "API_Delay.h"

void delayInit(delay_t*delay, tick_t duration)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
 800168e:	6039      	str	r1, [r7, #0]
	delay->running = false;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	721a      	strb	r2, [r3, #8]
	delayWrite(delay, duration);
 8001696:	6839      	ldr	r1, [r7, #0]
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f000 f828 	bl	80016ee <delayWrite>

}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <delayRead>:

bool_t delayRead(delay_t*delay)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
	if(delay->running)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	7a1b      	ldrb	r3, [r3, #8]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00e      	beq.n	80016d4 <delayRead+0x2e>
	{
	if((HAL_GetTick()- delay->startTime)>= delay->duration)
 80016b6:	f001 fa4d 	bl	8002b54 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	1ad2      	subs	r2, r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d30c      	bcc.n	80016e4 <delayRead+0x3e>
		{
		delay->running=false;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	721a      	strb	r2, [r3, #8]
		return true;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e008      	b.n	80016e6 <delayRead+0x40>
		}
	}
	else
	{
		delay->startTime=HAL_GetTick();
 80016d4:	f001 fa3e 	bl	8002b54 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	601a      	str	r2, [r3, #0]
		delay->running=true;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	721a      	strb	r2, [r3, #8]
	}
	return false;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <delayWrite>:

void delayWrite(delay_t*delay, tick_t duration)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	6039      	str	r1, [r7, #0]
	delay->duration=duration;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	605a      	str	r2, [r3, #4]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
	...

0800170c <UART_TrasmitSensor>:
static uint8_t rx_buffer[BUFFER_SIZE]; // Buffer que almacena los datos recibidos por la UART por interrupción
static uint16_t UART_Date;
volatile uint8_t rx_data_ready;
static UARTRead_t BUFFER_READ;

void UART_TrasmitSensor(ReadSensor Dato){
 800170c:	b084      	sub	sp, #16
 800170e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af06      	add	r7, sp, #24
 8001716:	f107 0420 	add.w	r4, r7, #32
 800171a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t size;
	sprintf((char *)Data,"Presion: %.2f Pa, Temperatura: %.2f, Altura: %.2f, SetPoint: %.2f \r\n",Dato.Presion, Dato.Temperatura, Dato.altura, Dato.AlturaSet);
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe ff19 	bl	8000558 <__aeabi_f2d>
 8001726:	4682      	mov	sl, r0
 8001728:	468b      	mov	fp, r1
 800172a:	6a3b      	ldr	r3, [r7, #32]
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe ff13 	bl	8000558 <__aeabi_f2d>
 8001732:	4604      	mov	r4, r0
 8001734:	460d      	mov	r5, r1
 8001736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe ff0d 	bl	8000558 <__aeabi_f2d>
 800173e:	4680      	mov	r8, r0
 8001740:	4689      	mov	r9, r1
 8001742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe ff07 	bl	8000558 <__aeabi_f2d>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001752:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001756:	e9cd 4500 	strd	r4, r5, [sp]
 800175a:	4652      	mov	r2, sl
 800175c:	465b      	mov	r3, fp
 800175e:	490a      	ldr	r1, [pc, #40]	; (8001788 <UART_TrasmitSensor+0x7c>)
 8001760:	480a      	ldr	r0, [pc, #40]	; (800178c <UART_TrasmitSensor+0x80>)
 8001762:	f004 ffe3 	bl	800672c <siprintf>
	HAL_UART_Transmit(&huart2,Data, strlen(Data), Delay_Max_UART);
 8001766:	4809      	ldr	r0, [pc, #36]	; (800178c <UART_TrasmitSensor+0x80>)
 8001768:	f7fe fd8a 	bl	8000280 <strlen>
 800176c:	4603      	mov	r3, r0
 800176e:	b29a      	uxth	r2, r3
 8001770:	2364      	movs	r3, #100	; 0x64
 8001772:	4906      	ldr	r1, [pc, #24]	; (800178c <UART_TrasmitSensor+0x80>)
 8001774:	4806      	ldr	r0, [pc, #24]	; (8001790 <UART_TrasmitSensor+0x84>)
 8001776:	f003 f9f6 	bl	8004b66 <HAL_UART_Transmit>
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001782:	b004      	add	sp, #16
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	08009218 	.word	0x08009218
 800178c:	20000248 	.word	0x20000248
 8001790:	20000204 	.word	0x20000204

08001794 <UART_TrasmitMessage>:

void UART_TrasmitMessage(const char *Message){
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)Message, strlen(Message),Delay_Max_UART);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7fe fd6f 	bl	8000280 <strlen>
 80017a2:	4603      	mov	r3, r0
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	2364      	movs	r3, #100	; 0x64
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	4803      	ldr	r0, [pc, #12]	; (80017b8 <UART_TrasmitMessage+0x24>)
 80017ac:	f003 f9db 	bl	8004b66 <HAL_UART_Transmit>
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000204 	.word	0x20000204

080017bc <UART_Init2>:

void UART_Init2 (){
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, (uint8_t *)rx_buffer, BUFFER_SIZE);
 80017c0:	2203      	movs	r2, #3
 80017c2:	4903      	ldr	r1, [pc, #12]	; (80017d0 <UART_Init2+0x14>)
 80017c4:	4803      	ldr	r0, [pc, #12]	; (80017d4 <UART_Init2+0x18>)
 80017c6:	f003 fa60 	bl	8004c8a <HAL_UART_Receive_IT>
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000348 	.word	0x20000348
 80017d4:	20000204 	.word	0x20000204

080017d8 <UART_Read>:


UARTRead_t UART_Read(){
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
	if (rx_data_ready) {
 80017de:	4b13      	ldr	r3, [pc, #76]	; (800182c <UART_Read+0x54>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d010      	beq.n	800180a <UART_Read+0x32>
		rx_data_ready = 0;
 80017e8:	4b10      	ldr	r3, [pc, #64]	; (800182c <UART_Read+0x54>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	701a      	strb	r2, [r3, #0]
		BUFFER_READ.estado = true;
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <UART_Read+0x58>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	701a      	strb	r2, [r3, #0]
		BUFFER_READ.dato=UART_Date;
 80017f4:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <UART_Read+0x5c>)
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <UART_Read+0x58>)
 80017fc:	705a      	strb	r2, [r3, #1]
		HAL_UART_Receive_IT(&huart2, rx_buffer, BUFFER_SIZE);
 80017fe:	2203      	movs	r2, #3
 8001800:	490d      	ldr	r1, [pc, #52]	; (8001838 <UART_Read+0x60>)
 8001802:	480e      	ldr	r0, [pc, #56]	; (800183c <UART_Read+0x64>)
 8001804:	f003 fa41 	bl	8004c8a <HAL_UART_Receive_IT>
 8001808:	e002      	b.n	8001810 <UART_Read+0x38>
	}
	else{
	    BUFFER_READ.estado=false;
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <UART_Read+0x58>)
 800180c:	2200      	movs	r2, #0
 800180e:	701a      	strb	r2, [r3, #0]
	}
return BUFFER_READ;
 8001810:	4b07      	ldr	r3, [pc, #28]	; (8001830 <UART_Read+0x58>)
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	80bb      	strh	r3, [r7, #4]
 8001816:	2300      	movs	r3, #0
 8001818:	793a      	ldrb	r2, [r7, #4]
 800181a:	f362 0307 	bfi	r3, r2, #0, #8
 800181e:	797a      	ldrb	r2, [r7, #5]
 8001820:	f362 230f 	bfi	r3, r2, #8, #8
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	2000034e 	.word	0x2000034e
 8001830:	20000350 	.word	0x20000350
 8001834:	2000034c 	.word	0x2000034c
 8001838:	20000348 	.word	0x20000348
 800183c:	20000204 	.word	0x20000204

08001840 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]

	        // Convertir el buffer a un número entero
	        UART_Date = atoi((char *)rx_buffer);
 8001848:	480c      	ldr	r0, [pc, #48]	; (800187c <HAL_UART_RxCpltCallback+0x3c>)
 800184a:	f004 f9b7 	bl	8005bbc <atoi>
 800184e:	4603      	mov	r3, r0
 8001850:	b29a      	uxth	r2, r3
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <HAL_UART_RxCpltCallback+0x40>)
 8001854:	801a      	strh	r2, [r3, #0]
	        // Reiniciar la recepción
	        HAL_UART_Receive_IT(&huart2, rx_buffer, BUFFER_SIZE);
 8001856:	2203      	movs	r2, #3
 8001858:	4908      	ldr	r1, [pc, #32]	; (800187c <HAL_UART_RxCpltCallback+0x3c>)
 800185a:	480a      	ldr	r0, [pc, #40]	; (8001884 <HAL_UART_RxCpltCallback+0x44>)
 800185c:	f003 fa15 	bl	8004c8a <HAL_UART_Receive_IT>
	        // Transmitir el número recibido (opcional, para depuración)
	        HAL_UART_Transmit(&huart2, (uint8_t *)rx_buffer, sizeof(rx_buffer), Delay_Max_UART);
 8001860:	2364      	movs	r3, #100	; 0x64
 8001862:	2203      	movs	r2, #3
 8001864:	4905      	ldr	r1, [pc, #20]	; (800187c <HAL_UART_RxCpltCallback+0x3c>)
 8001866:	4807      	ldr	r0, [pc, #28]	; (8001884 <HAL_UART_RxCpltCallback+0x44>)
 8001868:	f003 f97d 	bl	8004b66 <HAL_UART_Transmit>
	    	rx_data_ready = 1;
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_UART_RxCpltCallback+0x48>)
 800186e:	2201      	movs	r2, #1
 8001870:	701a      	strb	r2, [r3, #0]
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000348 	.word	0x20000348
 8001880:	2000034c 	.word	0x2000034c
 8001884:	20000204 	.word	0x20000204
 8001888:	2000034e 	.word	0x2000034e

0800188c <debounceFSM_init>:
static bool real_status_button;

/*
 * función de inicio de debounceFSM
 */
void debounceFSM_init(void){
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
	delayInit(&Retardo,delay_control);
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <debounceFSM_init+0x1c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4619      	mov	r1, r3
 8001896:	4805      	ldr	r0, [pc, #20]	; (80018ac <debounceFSM_init+0x20>)
 8001898:	f7ff fef5 	bl	8001686 <delayInit>
	status_mef=buttonUp;
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <debounceFSM_init+0x24>)
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000004 	.word	0x20000004
 80018ac:	20000354 	.word	0x20000354
 80018b0:	20000352 	.word	0x20000352

080018b4 <debounceFSM_update>:

/*
 * Actualizacion de la MEF de estado del botón.
 *
 */
void debounceFSM_update(){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
	switch (status_mef){
 80018b8:	4b31      	ldr	r3, [pc, #196]	; (8001980 <debounceFSM_update+0xcc>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b03      	cmp	r3, #3
 80018be:	d85c      	bhi.n	800197a <debounceFSM_update+0xc6>
 80018c0:	a201      	add	r2, pc, #4	; (adr r2, 80018c8 <debounceFSM_update+0x14>)
 80018c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c6:	bf00      	nop
 80018c8:	080018d9 	.word	0x080018d9
 80018cc:	08001923 	.word	0x08001923
 80018d0:	0800193b 	.word	0x0800193b
 80018d4:	080018f1 	.word	0x080018f1
		case buttonUp:

			if(RESET==HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 80018d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018dc:	4829      	ldr	r0, [pc, #164]	; (8001984 <debounceFSM_update+0xd0>)
 80018de:	f001 fc91 	bl	8003204 <HAL_GPIO_ReadPin>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d141      	bne.n	800196c <debounceFSM_update+0xb8>
				status_mef=buttonFalling;
 80018e8:	4b25      	ldr	r3, [pc, #148]	; (8001980 <debounceFSM_update+0xcc>)
 80018ea:	2203      	movs	r2, #3
 80018ec:	701a      	strb	r2, [r3, #0]
			}
		    break;
 80018ee:	e03d      	b.n	800196c <debounceFSM_update+0xb8>
		case buttonFalling:
			if(delayRead(&Retardo)){
 80018f0:	4825      	ldr	r0, [pc, #148]	; (8001988 <debounceFSM_update+0xd4>)
 80018f2:	f7ff fed8 	bl	80016a6 <delayRead>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d039      	beq.n	8001970 <debounceFSM_update+0xbc>
				if(SET==HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 80018fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001900:	4820      	ldr	r0, [pc, #128]	; (8001984 <debounceFSM_update+0xd0>)
 8001902:	f001 fc7f 	bl	8003204 <HAL_GPIO_ReadPin>
 8001906:	4603      	mov	r3, r0
 8001908:	2b01      	cmp	r3, #1
 800190a:	d106      	bne.n	800191a <debounceFSM_update+0x66>
					status_mef=buttonUp;
 800190c:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <debounceFSM_update+0xcc>)
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
					real_status_button=true;
 8001912:	4b1e      	ldr	r3, [pc, #120]	; (800198c <debounceFSM_update+0xd8>)
 8001914:	2201      	movs	r2, #1
 8001916:	701a      	strb	r2, [r3, #0]
				}
				else {
				status_mef=buttonDown;
				}
			}
			break;
 8001918:	e02a      	b.n	8001970 <debounceFSM_update+0xbc>
				status_mef=buttonDown;
 800191a:	4b19      	ldr	r3, [pc, #100]	; (8001980 <debounceFSM_update+0xcc>)
 800191c:	2201      	movs	r2, #1
 800191e:	701a      	strb	r2, [r3, #0]
			break;
 8001920:	e026      	b.n	8001970 <debounceFSM_update+0xbc>

		case buttonDown:
			if (SET==HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 8001922:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001926:	4817      	ldr	r0, [pc, #92]	; (8001984 <debounceFSM_update+0xd0>)
 8001928:	f001 fc6c 	bl	8003204 <HAL_GPIO_ReadPin>
 800192c:	4603      	mov	r3, r0
 800192e:	2b01      	cmp	r3, #1
 8001930:	d120      	bne.n	8001974 <debounceFSM_update+0xc0>
				status_mef=buttonRising;
 8001932:	4b13      	ldr	r3, [pc, #76]	; (8001980 <debounceFSM_update+0xcc>)
 8001934:	2202      	movs	r2, #2
 8001936:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001938:	e01c      	b.n	8001974 <debounceFSM_update+0xc0>

		case buttonRising:
			if(delayRead(&Retardo)){
 800193a:	4813      	ldr	r0, [pc, #76]	; (8001988 <debounceFSM_update+0xd4>)
 800193c:	f7ff feb3 	bl	80016a6 <delayRead>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d018      	beq.n	8001978 <debounceFSM_update+0xc4>
			if(RESET==HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 8001946:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800194a:	480e      	ldr	r0, [pc, #56]	; (8001984 <debounceFSM_update+0xd0>)
 800194c:	f001 fc5a 	bl	8003204 <HAL_GPIO_ReadPin>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d106      	bne.n	8001964 <debounceFSM_update+0xb0>
				status_mef=buttonUp;
 8001956:	4b0a      	ldr	r3, [pc, #40]	; (8001980 <debounceFSM_update+0xcc>)
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]
				real_status_button=true;
 800195c:	4b0b      	ldr	r3, [pc, #44]	; (800198c <debounceFSM_update+0xd8>)
 800195e:	2201      	movs	r2, #1
 8001960:	701a      	strb	r2, [r3, #0]
			}
			else {
				status_mef=buttonDown;
			}
			}
			break;
 8001962:	e009      	b.n	8001978 <debounceFSM_update+0xc4>
				status_mef=buttonDown;
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <debounceFSM_update+0xcc>)
 8001966:	2201      	movs	r2, #1
 8001968:	701a      	strb	r2, [r3, #0]
			break;
 800196a:	e005      	b.n	8001978 <debounceFSM_update+0xc4>
		    break;
 800196c:	bf00      	nop
 800196e:	e004      	b.n	800197a <debounceFSM_update+0xc6>
			break;
 8001970:	bf00      	nop
 8001972:	e002      	b.n	800197a <debounceFSM_update+0xc6>
			break;
 8001974:	bf00      	nop
 8001976:	e000      	b.n	800197a <debounceFSM_update+0xc6>
			break;
 8001978:	bf00      	nop
		default:

	}
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000352 	.word	0x20000352
 8001984:	40020800 	.word	0x40020800
 8001988:	20000354 	.word	0x20000354
 800198c:	20000360 	.word	0x20000360

08001990 <readKey>:

/*
 * Funcion que devuelve un true en caso que haya se haya presionado el botón
 */
bool_t readKey(){
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
	debounceFSM_update();
 8001994:	f7ff ff8e 	bl	80018b4 <debounceFSM_update>
	if(real_status_button){
 8001998:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <readKey+0x20>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d004      	beq.n	80019aa <readKey+0x1a>
		real_status_button=false;
 80019a0:	4b03      	ldr	r3, [pc, #12]	; (80019b0 <readKey+0x20>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
				return true;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e000      	b.n	80019ac <readKey+0x1c>
	}
	else{
	return false;
 80019aa:	2300      	movs	r3, #0
	}
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000360 	.word	0x20000360

080019b4 <BMP_280_Init2>:
static float PointSet=0;
I2C_HandleTypeDef hi2c1;



void BMP_280_Init2(){
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
	Point0=0;
 80019b8:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <BMP_280_Init2+0x40>)
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
	 bmp280_init_default_params(&bmp280.params);
 80019c0:	480d      	ldr	r0, [pc, #52]	; (80019f8 <BMP_280_Init2+0x44>)
 80019c2:	f000 fa33 	bl	8001e2c <bmp280_init_default_params>
		bmp280.addr = BMP280_I2C_ADDRESS_0;
 80019c6:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <BMP_280_Init2+0x48>)
 80019c8:	2276      	movs	r2, #118	; 0x76
 80019ca:	849a      	strh	r2, [r3, #36]	; 0x24
		bmp280.i2c = &hi2c1;
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <BMP_280_Init2+0x48>)
 80019ce:	4a0c      	ldr	r2, [pc, #48]	; (8001a00 <BMP_280_Init2+0x4c>)
 80019d0:	629a      	str	r2, [r3, #40]	; 0x28
		if (!bmp280_init(&bmp280, &bmp280.params)) {
 80019d2:	4909      	ldr	r1, [pc, #36]	; (80019f8 <BMP_280_Init2+0x44>)
 80019d4:	4809      	ldr	r0, [pc, #36]	; (80019fc <BMP_280_Init2+0x48>)
 80019d6:	f000 fba3 	bl	8002120 <bmp280_init>
 80019da:	4603      	mov	r3, r0
 80019dc:	f083 0301 	eor.w	r3, r3, #1
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <BMP_280_Init2+0x36>
			Error_Handler();
 80019e6:	f7ff fc53 	bl	8001290 <Error_Handler>
			}
		HAL_Delay(150);
 80019ea:	2096      	movs	r0, #150	; 0x96
 80019ec:	f001 f8be 	bl	8002b6c <HAL_Delay>
		}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000398 	.word	0x20000398
 80019f8:	20000390 	.word	0x20000390
 80019fc:	20000364 	.word	0x20000364
 8001a00:	200003a0 	.word	0x200003a0
 8001a04:	00000000 	.word	0x00000000

08001a08 <BMP_280_Read>:

ReadSensor BMP_280_Read(){
 8001a08:	b5b0      	push	{r4, r5, r7, lr}
 8001a0a:	b08c      	sub	sp, #48	; 0x30
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
float pressure, temperature, humidity;
	ReadSensor Dato;
	  	  if (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8001a10:	f107 031c 	add.w	r3, r7, #28
 8001a14:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001a18:	f107 0120 	add.w	r1, r7, #32
 8001a1c:	4850      	ldr	r0, [pc, #320]	; (8001b60 <BMP_280_Read+0x158>)
 8001a1e:	f000 ffe7 	bl	80029f0 <bmp280_read_float>
 8001a22:	4603      	mov	r3, r0
 8001a24:	f083 0301 	eor.w	r3, r3, #1
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <BMP_280_Read+0x2a>
	  	  	  Error_Handler();
 8001a2e:	f7ff fc2f 	bl	8001290 <Error_Handler>
	  	  		}
	  	 float temperatura_kelvin = temperature + 273.15;
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7fe fd8f 	bl	8000558 <__aeabi_f2d>
 8001a3a:	a341      	add	r3, pc, #260	; (adr r3, 8001b40 <BMP_280_Read+0x138>)
 8001a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a40:	f7fe fc2c 	bl	800029c <__adddf3>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4610      	mov	r0, r2
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	f7ff f8b4 	bl	8000bb8 <__aeabi_d2f>
 8001a50:	4603      	mov	r3, r0
 8001a52:	62fb      	str	r3, [r7, #44]	; 0x2c
	  	    // Cálculo de la altitud
	  	    float altitud = (temperatura_kelvin / L) * (1 - exp((R * L) / (g * M) * (log(pressure) - log(P0))));
 8001a54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a56:	f7fe fd7f 	bl	8000558 <__aeabi_f2d>
 8001a5a:	a33b      	add	r3, pc, #236	; (adr r3, 8001b48 <BMP_280_Read+0x140>)
 8001a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a60:	f7fe fefc 	bl	800085c <__aeabi_ddiv>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4614      	mov	r4, r2
 8001a6a:	461d      	mov	r5, r3
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fd72 	bl	8000558 <__aeabi_f2d>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	ec43 2b10 	vmov	d0, r2, r3
 8001a7c:	f006 fffc 	bl	8008a78 <log>
 8001a80:	ec51 0b10 	vmov	r0, r1, d0
 8001a84:	a332      	add	r3, pc, #200	; (adr r3, 8001b50 <BMP_280_Read+0x148>)
 8001a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8a:	f7fe fc05 	bl	8000298 <__aeabi_dsub>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	4610      	mov	r0, r2
 8001a94:	4619      	mov	r1, r3
 8001a96:	a330      	add	r3, pc, #192	; (adr r3, 8001b58 <BMP_280_Read+0x150>)
 8001a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9c:	f7fe fdb4 	bl	8000608 <__aeabi_dmul>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	ec43 2b17 	vmov	d7, r2, r3
 8001aa8:	eeb0 0a47 	vmov.f32	s0, s14
 8001aac:	eef0 0a67 	vmov.f32	s1, s15
 8001ab0:	f006 ff9a 	bl	80089e8 <exp>
 8001ab4:	ec53 2b10 	vmov	r2, r3, d0
 8001ab8:	f04f 0000 	mov.w	r0, #0
 8001abc:	4929      	ldr	r1, [pc, #164]	; (8001b64 <BMP_280_Read+0x15c>)
 8001abe:	f7fe fbeb 	bl	8000298 <__aeabi_dsub>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	4629      	mov	r1, r5
 8001aca:	f7fe fd9d 	bl	8000608 <__aeabi_dmul>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f7ff f86f 	bl	8000bb8 <__aeabi_d2f>
 8001ada:	4603      	mov	r3, r0
 8001adc:	62bb      	str	r3, [r7, #40]	; 0x28
	  	  Dato.Temperatura=temperature;
 8001ade:	6a3b      	ldr	r3, [r7, #32]
 8001ae0:	60bb      	str	r3, [r7, #8]
	  	  Dato.Presion=pressure;
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	60fb      	str	r3, [r7, #12]
	  	  Dato.AlturaSet=PointSet;
 8001ae6:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <BMP_280_Read+0x160>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	61bb      	str	r3, [r7, #24]
	  	  Dato.AlturaSet=PointSet;
 8001aec:	4b1e      	ldr	r3, [pc, #120]	; (8001b68 <BMP_280_Read+0x160>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	61bb      	str	r3, [r7, #24]
	  	  if(altitud-Point0<0){
 8001af2:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <BMP_280_Read+0x164>)
 8001af4:	edd3 7a00 	vldr	s15, [r3]
 8001af8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001afc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b08:	d503      	bpl.n	8001b12 <BMP_280_Read+0x10a>
	  		  altitud=0;
 8001b0a:	f04f 0300 	mov.w	r3, #0
 8001b0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b10:	e008      	b.n	8001b24 <BMP_280_Read+0x11c>
	  	  }
	  	  else {
	  		  Dato.altura=altitud-Point0;
 8001b12:	4b16      	ldr	r3, [pc, #88]	; (8001b6c <BMP_280_Read+0x164>)
 8001b14:	edd3 7a00 	vldr	s15, [r3]
 8001b18:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001b1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b20:	edc7 7a04 	vstr	s15, [r7, #16]
	  	  }

return Dato;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	461d      	mov	r5, r3
 8001b28:	f107 0408 	add.w	r4, r7, #8
 8001b2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b30:	6823      	ldr	r3, [r4, #0]
 8001b32:	602b      	str	r3, [r5, #0]
}
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	3730      	adds	r7, #48	; 0x30
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b3c:	f3af 8000 	nop.w
 8001b40:	66666666 	.word	0x66666666
 8001b44:	40711266 	.word	0x40711266
 8001b48:	76c8b439 	.word	0x76c8b439
 8001b4c:	3f7a9fbe 	.word	0x3f7a9fbe
 8001b50:	772bf62a 	.word	0x772bf62a
 8001b54:	40270d5b 	.word	0x40270d5b
 8001b58:	c35d5e69 	.word	0xc35d5e69
 8001b5c:	3fc85b40 	.word	0x3fc85b40
 8001b60:	20000364 	.word	0x20000364
 8001b64:	3ff00000 	.word	0x3ff00000
 8001b68:	2000039c 	.word	0x2000039c
 8001b6c:	20000398 	.word	0x20000398

08001b70 <BMP_280_SetPoint>:
void BMP_280_SetPoint(uint8_t PointS){
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	71fb      	strb	r3, [r7, #7]
	PointSet=PointS;
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	ee07 3a90 	vmov	s15, r3
 8001b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <BMP_280_SetPoint+0x28>)
 8001b86:	edc3 7a00 	vstr	s15, [r3]
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	2000039c 	.word	0x2000039c

08001b9c <BMP_280_ConfigP0>:

void BMP_280_ConfigP0(){
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
	ReadSensor Dato= BMP_280_Read(&hi2c1);
 8001ba2:	1d3b      	adds	r3, r7, #4
 8001ba4:	4905      	ldr	r1, [pc, #20]	; (8001bbc <BMP_280_ConfigP0+0x20>)
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff ff2e 	bl	8001a08 <BMP_280_Read>
	Point0=Dato.altura;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <BMP_280_ConfigP0+0x24>)
 8001bb0:	6013      	str	r3, [r2, #0]
	}
 8001bb2:	bf00      	nop
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	200003a0 	.word	0x200003a0
 8001bc0:	20000398 	.word	0x20000398

08001bc4 <MEF>:
static float Limites[]={0.85, 1.20};
extern UART_HandleTypeDef huart2;
extern I2C_HandleTypeDef hi2c1;


void MEF(){
 8001bc4:	b5b0      	push	{r4, r5, r7, lr}
 8001bc6:	b0a8      	sub	sp, #160	; 0xa0
 8001bc8:	af12      	add	r7, sp, #72	; 0x48
	if (flagDelay){
 8001bca:	4b68      	ldr	r3, [pc, #416]	; (8001d6c <MEF+0x1a8>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00b      	beq.n	8001bea <MEF+0x26>
		delayInit(&MyDelay[0], 50);//delay de togleo de alerta alta
 8001bd2:	2132      	movs	r1, #50	; 0x32
 8001bd4:	4866      	ldr	r0, [pc, #408]	; (8001d70 <MEF+0x1ac>)
 8001bd6:	f7ff fd56 	bl	8001686 <delayInit>
		delayInit(&MyDelay[1], 500);//delay de togleo de alerta baja
 8001bda:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001bde:	4865      	ldr	r0, [pc, #404]	; (8001d74 <MEF+0x1b0>)
 8001be0:	f7ff fd51 	bl	8001686 <delayInit>
	flagDelay=false;
 8001be4:	4b61      	ldr	r3, [pc, #388]	; (8001d6c <MEF+0x1a8>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
	}

	ReadSensor Dato;
	switch (FlagMEF){
 8001bea:	4b63      	ldr	r3, [pc, #396]	; (8001d78 <MEF+0x1b4>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b05      	cmp	r3, #5
 8001bf0:	f200 80b3 	bhi.w	8001d5a <MEF+0x196>
 8001bf4:	a201      	add	r2, pc, #4	; (adr r2, 8001bfc <MEF+0x38>)
 8001bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bfa:	bf00      	nop
 8001bfc:	08001c15 	.word	0x08001c15
 8001c00:	08001c41 	.word	0x08001c41
 8001c04:	08001ca5 	.word	0x08001ca5
 8001c08:	08001ce5 	.word	0x08001ce5
 8001c0c:	08001d1b 	.word	0x08001d1b
 8001c10:	08001c91 	.word	0x08001c91

	case Inicio:
char mensaje[]="Indique la altura de seteo: \r\n";
 8001c14:	4b59      	ldr	r3, [pc, #356]	; (8001d7c <MEF+0x1b8>)
 8001c16:	f107 0420 	add.w	r4, r7, #32
 8001c1a:	461d      	mov	r5, r3
 8001c1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c20:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001c24:	c407      	stmia	r4!, {r0, r1, r2}
 8001c26:	8023      	strh	r3, [r4, #0]
 8001c28:	3402      	adds	r4, #2
 8001c2a:	0c1b      	lsrs	r3, r3, #16
 8001c2c:	7023      	strb	r3, [r4, #0]
UART_TrasmitMessage(mensaje);
 8001c2e:	f107 0320 	add.w	r3, r7, #32
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff fdae 	bl	8001794 <UART_TrasmitMessage>
FlagMEF=Altura_Seteo;
 8001c38:	4b4f      	ldr	r3, [pc, #316]	; (8001d78 <MEF+0x1b4>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	701a      	strb	r2, [r3, #0]
break;
 8001c3e:	e091      	b.n	8001d64 <MEF+0x1a0>

	case Altura_Seteo:
		UARTRead_t AlturaSeteo=UART_Read();
 8001c40:	f7ff fdca 	bl	80017d8 <UART_Read>
 8001c44:	4603      	mov	r3, r0
 8001c46:	83bb      	strh	r3, [r7, #28]
		if(AlturaSeteo.estado){
 8001c48:	7f3b      	ldrb	r3, [r7, #28]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 8089 	beq.w	8001d62 <MEF+0x19e>
		    BMP_280_ConfigP0(hi2c1);
 8001c50:	4c4b      	ldr	r4, [pc, #300]	; (8001d80 <MEF+0x1bc>)
 8001c52:	4668      	mov	r0, sp
 8001c54:	f104 0310 	add.w	r3, r4, #16
 8001c58:	2244      	movs	r2, #68	; 0x44
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f004 fe49 	bl	80068f2 <memcpy>
 8001c60:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c64:	f7ff ff9a 	bl	8001b9c <BMP_280_ConfigP0>
		    BMP_280_SetPoint(AlturaSeteo.dato);
 8001c68:	7f7b      	ldrb	r3, [r7, #29]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff ff80 	bl	8001b70 <BMP_280_SetPoint>
		     Dato= BMP_280_Read();
 8001c70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff fec7 	bl	8001a08 <BMP_280_Read>
		    UART_TrasmitSensor(Dato);
 8001c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c84:	f7ff fd42 	bl	800170c <UART_TrasmitSensor>
		    FlagMEF=Control_Alerta;
 8001c88:	4b3b      	ldr	r3, [pc, #236]	; (8001d78 <MEF+0x1b4>)
 8001c8a:	2205      	movs	r2, #5
 8001c8c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001c8e:	e068      	b.n	8001d62 <MEF+0x19e>

	case Control_Alerta:
EstadoAlerta_t Data=ControlAlerta();
 8001c90:	f000 f87a 	bl	8001d88 <ControlAlerta>
 8001c94:	4603      	mov	r3, r0
 8001c96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
FlagMEF=Data;
 8001c9a:	4a37      	ldr	r2, [pc, #220]	; (8001d78 <MEF+0x1b4>)
 8001c9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001ca0:	7013      	strb	r3, [r2, #0]
		break;
 8001ca2:	e05f      	b.n	8001d64 <MEF+0x1a0>

	case Alerta_Abajo:

		Dato= BMP_280_Read();
 8001ca4:	463b      	mov	r3, r7
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff feae 	bl	8001a08 <BMP_280_Read>
 8001cac:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001cb0:	463d      	mov	r5, r7
 8001cb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb6:	682b      	ldr	r3, [r5, #0]
 8001cb8:	6023      	str	r3, [r4, #0]
		UART_TrasmitSensor(Dato);
 8001cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cc4:	f7ff fd22 	bl	800170c <UART_TrasmitSensor>
		if(delayRead(&MyDelay[0])) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001cc8:	4829      	ldr	r0, [pc, #164]	; (8001d70 <MEF+0x1ac>)
 8001cca:	f7ff fcec 	bl	80016a6 <delayRead>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <MEF+0x118>
 8001cd4:	2120      	movs	r1, #32
 8001cd6:	482b      	ldr	r0, [pc, #172]	; (8001d84 <MEF+0x1c0>)
 8001cd8:	f001 fac5 	bl	8003266 <HAL_GPIO_TogglePin>

		FlagMEF= Control_Alerta;
 8001cdc:	4b26      	ldr	r3, [pc, #152]	; (8001d78 <MEF+0x1b4>)
 8001cde:	2205      	movs	r2, #5
 8001ce0:	701a      	strb	r2, [r3, #0]
		break;
 8001ce2:	e03f      	b.n	8001d64 <MEF+0x1a0>

	case Altura_Alcanzada:
	     Dato= BMP_280_Read();
 8001ce4:	463b      	mov	r3, r7
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fe8e 	bl	8001a08 <BMP_280_Read>
 8001cec:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001cf0:	463d      	mov	r5, r7
 8001cf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cf6:	682b      	ldr	r3, [r5, #0]
 8001cf8:	6023      	str	r3, [r4, #0]
	 	UART_TrasmitSensor(Dato);
 8001cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d04:	f7ff fd02 	bl	800170c <UART_TrasmitSensor>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8001d08:	2201      	movs	r2, #1
 8001d0a:	2120      	movs	r1, #32
 8001d0c:	481d      	ldr	r0, [pc, #116]	; (8001d84 <MEF+0x1c0>)
 8001d0e:	f001 fa91 	bl	8003234 <HAL_GPIO_WritePin>
		FlagMEF= Control_Alerta;
 8001d12:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <MEF+0x1b4>)
 8001d14:	2205      	movs	r2, #5
 8001d16:	701a      	strb	r2, [r3, #0]
		break;
 8001d18:	e024      	b.n	8001d64 <MEF+0x1a0>

	case Alerta_Arriba:
	     Dato= BMP_280_Read();
 8001d1a:	463b      	mov	r3, r7
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff fe73 	bl	8001a08 <BMP_280_Read>
 8001d22:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001d26:	463d      	mov	r5, r7
 8001d28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d2c:	682b      	ldr	r3, [r5, #0]
 8001d2e:	6023      	str	r3, [r4, #0]
	     UART_TrasmitSensor(Dato);
 8001d30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d3a:	f7ff fce7 	bl	800170c <UART_TrasmitSensor>
	     if(delayRead(&MyDelay[1]))HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001d3e:	480d      	ldr	r0, [pc, #52]	; (8001d74 <MEF+0x1b0>)
 8001d40:	f7ff fcb1 	bl	80016a6 <delayRead>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <MEF+0x18e>
 8001d4a:	2120      	movs	r1, #32
 8001d4c:	480d      	ldr	r0, [pc, #52]	; (8001d84 <MEF+0x1c0>)
 8001d4e:	f001 fa8a 	bl	8003266 <HAL_GPIO_TogglePin>

		FlagMEF= Control_Alerta;
 8001d52:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <MEF+0x1b4>)
 8001d54:	2205      	movs	r2, #5
 8001d56:	701a      	strb	r2, [r3, #0]
		break;
 8001d58:	e004      	b.n	8001d64 <MEF+0x1a0>
	default:
	FlagMEF=Inicio;
 8001d5a:	4b07      	ldr	r3, [pc, #28]	; (8001d78 <MEF+0x1b4>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	701a      	strb	r2, [r3, #0]
	}
}
 8001d60:	e000      	b.n	8001d64 <MEF+0x1a0>
		break;
 8001d62:	bf00      	nop
}
 8001d64:	bf00      	nop
 8001d66:	3758      	adds	r7, #88	; 0x58
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d6c:	20000008 	.word	0x20000008
 8001d70:	200003f8 	.word	0x200003f8
 8001d74:	20000404 	.word	0x20000404
 8001d78:	200003f4 	.word	0x200003f4
 8001d7c:	08009260 	.word	0x08009260
 8001d80:	200003a0 	.word	0x200003a0
 8001d84:	40020000 	.word	0x40020000

08001d88 <ControlAlerta>:

EstadoAlerta_t ControlAlerta(){
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0

	enum EstadoMef Control;
	ReadSensor Dat=BMP_280_Read();
 8001d8e:	463b      	mov	r3, r7
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff fe39 	bl	8001a08 <BMP_280_Read>

if (Dat.altura/Dat.AlturaSet>=Limites[1]){
 8001d96:	edd7 6a02 	vldr	s13, [r7, #8]
 8001d9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001da2:	4b18      	ldr	r3, [pc, #96]	; (8001e04 <ControlAlerta+0x7c>)
 8001da4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001da8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db0:	db02      	blt.n	8001db8 <ControlAlerta+0x30>
	Control=Alerta_Abajo;
 8001db2:	2302      	movs	r3, #2
 8001db4:	75fb      	strb	r3, [r7, #23]
 8001db6:	e020      	b.n	8001dfa <ControlAlerta+0x72>
	}
else if (Dat.altura/Dat.AlturaSet>Limites[0] && Dat.altura/Dat.AlturaSet<=Limites[1]){
 8001db8:	edd7 6a02 	vldr	s13, [r7, #8]
 8001dbc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <ControlAlerta+0x7c>)
 8001dc6:	edd3 7a00 	vldr	s15, [r3]
 8001dca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd2:	dd10      	ble.n	8001df6 <ControlAlerta+0x6e>
 8001dd4:	edd7 6a02 	vldr	s13, [r7, #8]
 8001dd8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ddc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001de0:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <ControlAlerta+0x7c>)
 8001de2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001de6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dee:	d802      	bhi.n	8001df6 <ControlAlerta+0x6e>
	Control=Altura_Alcanzada;
 8001df0:	2303      	movs	r3, #3
 8001df2:	75fb      	strb	r3, [r7, #23]
 8001df4:	e001      	b.n	8001dfa <ControlAlerta+0x72>
}
else {
	Control=Alerta_Arriba;
 8001df6:	2304      	movs	r3, #4
 8001df8:	75fb      	strb	r3, [r7, #23]
}
return Control;
 8001dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	2000000c 	.word	0x2000000c

08001e08 <MEF_Init>:

void MEF_Init(){
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
	flagDelay=true;
 8001e0c:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <MEF_Init+0x1c>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	701a      	strb	r2, [r3, #0]
	FlagMEF=Inicio;
 8001e12:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <MEF_Init+0x20>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]
	}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	20000008 	.word	0x20000008
 8001e28:	200003f4 	.word	0x200003f4

08001e2c <bmp280_init_default_params>:
#define BMP280_RESET_VALUE     0xB6




void bmp280_init_default_params(bmp280_params_t *params) {
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2203      	movs	r2, #3
 8001e38:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2203      	movs	r2, #3
 8001e44:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2203      	movs	r2, #3
 8001e4a:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2203      	movs	r2, #3
 8001e50:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2203      	movs	r2, #3
 8001e56:	715a      	strb	r2, [r3, #5]
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	; 0x28
 8001e68:	af04      	add	r7, sp, #16
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001e7e:	7afb      	ldrb	r3, [r7, #11]
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	8af9      	ldrh	r1, [r7, #22]
 8001e84:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e88:	9302      	str	r3, [sp, #8]
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	9301      	str	r3, [sp, #4]
 8001e8e:	f107 0314 	add.w	r3, r7, #20
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	2301      	movs	r3, #1
 8001e96:	f001 fc3f 	bl	8003718 <HAL_I2C_Mem_Read>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10b      	bne.n	8001eb8 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001ea0:	7d7b      	ldrb	r3, [r7, #21]
 8001ea2:	021b      	lsls	r3, r3, #8
 8001ea4:	b21a      	sxth	r2, r3
 8001ea6:	7d3b      	ldrb	r3, [r7, #20]
 8001ea8:	b21b      	sxth	r3, r3
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	b21b      	sxth	r3, r3
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	801a      	strh	r2, [r3, #0]
		return true;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e000      	b.n	8001eba <read_register16+0x56>
	} else
		return false;
 8001eb8:	2300      	movs	r3, #0

}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001ec2:	b590      	push	{r4, r7, lr}
 8001ec4:	b08b      	sub	sp, #44	; 0x2c
 8001ec6:	af04      	add	r7, sp, #16
 8001ec8:	60f8      	str	r0, [r7, #12]
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	460b      	mov	r3, r1
 8001ed0:	72fb      	strb	r3, [r7, #11]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001ee2:	7afb      	ldrb	r3, [r7, #11]
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	7abb      	ldrb	r3, [r7, #10]
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	8af9      	ldrh	r1, [r7, #22]
 8001eec:	f241 3488 	movw	r4, #5000	; 0x1388
 8001ef0:	9402      	str	r4, [sp, #8]
 8001ef2:	9301      	str	r3, [sp, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	2301      	movs	r3, #1
 8001efa:	f001 fc0d 	bl	8003718 <HAL_I2C_Mem_Read>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <read_data+0x46>
		return 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	e000      	b.n	8001f0a <read_data+0x48>
	else
		return 1;
 8001f08:	2301      	movs	r3, #1

}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	371c      	adds	r7, #28
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd90      	pop	{r4, r7, pc}

08001f12 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	2188      	movs	r1, #136	; 0x88
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff ff9f 	bl	8001e64 <read_register16>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d06f      	beq.n	800200c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3302      	adds	r3, #2
 8001f30:	461a      	mov	r2, r3
 8001f32:	218a      	movs	r1, #138	; 0x8a
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff ff95 	bl	8001e64 <read_register16>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d065      	beq.n	800200c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3304      	adds	r3, #4
 8001f44:	461a      	mov	r2, r3
 8001f46:	218c      	movs	r1, #140	; 0x8c
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff ff8b 	bl	8001e64 <read_register16>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d05b      	beq.n	800200c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3306      	adds	r3, #6
 8001f58:	461a      	mov	r2, r3
 8001f5a:	218e      	movs	r1, #142	; 0x8e
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7ff ff81 	bl	8001e64 <read_register16>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d051      	beq.n	800200c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3308      	adds	r3, #8
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	2190      	movs	r1, #144	; 0x90
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7ff ff77 	bl	8001e64 <read_register16>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d047      	beq.n	800200c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	330a      	adds	r3, #10
 8001f80:	461a      	mov	r2, r3
 8001f82:	2192      	movs	r1, #146	; 0x92
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff ff6d 	bl	8001e64 <read_register16>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d03d      	beq.n	800200c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	330c      	adds	r3, #12
 8001f94:	461a      	mov	r2, r3
 8001f96:	2194      	movs	r1, #148	; 0x94
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff ff63 	bl	8001e64 <read_register16>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d033      	beq.n	800200c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	330e      	adds	r3, #14
 8001fa8:	461a      	mov	r2, r3
 8001faa:	2196      	movs	r1, #150	; 0x96
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff ff59 	bl	8001e64 <read_register16>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d029      	beq.n	800200c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3310      	adds	r3, #16
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	2198      	movs	r1, #152	; 0x98
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff ff4f 	bl	8001e64 <read_register16>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d01f      	beq.n	800200c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3312      	adds	r3, #18
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	219a      	movs	r1, #154	; 0x9a
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff ff45 	bl	8001e64 <read_register16>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d015      	beq.n	800200c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3314      	adds	r3, #20
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	219c      	movs	r1, #156	; 0x9c
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff ff3b 	bl	8001e64 <read_register16>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00b      	beq.n	800200c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	219e      	movs	r1, #158	; 0x9e
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff ff31 	bl	8001e64 <read_register16>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <read_calibration_data+0xfa>

		return true;
 8002008:	2301      	movs	r3, #1
 800200a:	e000      	b.n	800200e <read_calibration_data+0xfc>
	}

	return false;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8002016:	b580      	push	{r7, lr}
 8002018:	b084      	sub	sp, #16
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f103 0218 	add.w	r2, r3, #24
 8002024:	2301      	movs	r3, #1
 8002026:	21a1      	movs	r1, #161	; 0xa1
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff ff4a 	bl	8001ec2 <read_data>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d14b      	bne.n	80020cc <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	331a      	adds	r3, #26
 8002038:	461a      	mov	r2, r3
 800203a:	21e1      	movs	r1, #225	; 0xe1
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff ff11 	bl	8001e64 <read_register16>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d041      	beq.n	80020cc <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f103 021c 	add.w	r2, r3, #28
 800204e:	2301      	movs	r3, #1
 8002050:	21e3      	movs	r1, #227	; 0xe3
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff ff35 	bl	8001ec2 <read_data>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d136      	bne.n	80020cc <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 800205e:	f107 030e 	add.w	r3, r7, #14
 8002062:	461a      	mov	r2, r3
 8002064:	21e4      	movs	r1, #228	; 0xe4
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff fefc 	bl	8001e64 <read_register16>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d02c      	beq.n	80020cc <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8002072:	f107 030c 	add.w	r3, r7, #12
 8002076:	461a      	mov	r2, r3
 8002078:	21e5      	movs	r1, #229	; 0xe5
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7ff fef2 	bl	8001e64 <read_register16>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d022      	beq.n	80020cc <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800208c:	2301      	movs	r3, #1
 800208e:	21e7      	movs	r1, #231	; 0xe7
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff ff16 	bl	8001ec2 <read_data>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d117      	bne.n	80020cc <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 800209c:	89fb      	ldrh	r3, [r7, #14]
 800209e:	011b      	lsls	r3, r3, #4
 80020a0:	b21b      	sxth	r3, r3
 80020a2:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 80020a6:	b21a      	sxth	r2, r3
 80020a8:	89fb      	ldrh	r3, [r7, #14]
 80020aa:	121b      	asrs	r3, r3, #8
 80020ac:	b21b      	sxth	r3, r3
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	b21b      	sxth	r3, r3
 80020b4:	4313      	orrs	r3, r2
 80020b6:	b21a      	sxth	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80020bc:	89bb      	ldrh	r3, [r7, #12]
 80020be:	091b      	lsrs	r3, r3, #4
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	b21a      	sxth	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	841a      	strh	r2, [r3, #32]

		return true;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e000      	b.n	80020ce <read_hum_calibration_data+0xb8>
	}

	return false;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b088      	sub	sp, #32
 80020da:	af04      	add	r7, sp, #16
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	460b      	mov	r3, r1
 80020e0:	70fb      	strb	r3, [r7, #3]
 80020e2:	4613      	mov	r3, r2
 80020e4:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	89f9      	ldrh	r1, [r7, #14]
 80020f8:	f242 7310 	movw	r3, #10000	; 0x2710
 80020fc:	9302      	str	r3, [sp, #8]
 80020fe:	2301      	movs	r3, #1
 8002100:	9301      	str	r3, [sp, #4]
 8002102:	1cbb      	adds	r3, r7, #2
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	2301      	movs	r3, #1
 8002108:	f001 fa0c 	bl	8003524 <HAL_I2C_Mem_Write>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <write_register8+0x40>
		return false;
 8002112:	2300      	movs	r3, #0
 8002114:	e000      	b.n	8002118 <write_register8+0x42>
	else
		return true;
 8002116:	2301      	movs	r3, #1
}
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800212e:	2b76      	cmp	r3, #118	; 0x76
 8002130:	d005      	beq.n	800213e <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002136:	2b77      	cmp	r3, #119	; 0x77
 8002138:	d001      	beq.n	800213e <bmp280_init+0x1e>

		return false;
 800213a:	2300      	movs	r3, #0
 800213c:	e099      	b.n	8002272 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002144:	2301      	movs	r3, #1
 8002146:	21d0      	movs	r1, #208	; 0xd0
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff feba 	bl	8001ec2 <read_data>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <bmp280_init+0x38>
		return false;
 8002154:	2300      	movs	r3, #0
 8002156:	e08c      	b.n	8002272 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800215e:	2b58      	cmp	r3, #88	; 0x58
 8002160:	d006      	beq.n	8002170 <bmp280_init+0x50>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002168:	2b60      	cmp	r3, #96	; 0x60
 800216a:	d001      	beq.n	8002170 <bmp280_init+0x50>

		return false;
 800216c:	2300      	movs	r3, #0
 800216e:	e080      	b.n	8002272 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8002170:	22b6      	movs	r2, #182	; 0xb6
 8002172:	21e0      	movs	r1, #224	; 0xe0
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7ff ffae 	bl	80020d6 <write_register8>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <bmp280_init+0x64>
		return false;
 8002180:	2300      	movs	r3, #0
 8002182:	e076      	b.n	8002272 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8002184:	f107 020c 	add.w	r2, r7, #12
 8002188:	2301      	movs	r3, #1
 800218a:	21f3      	movs	r1, #243	; 0xf3
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff fe98 	bl	8001ec2 <read_data>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1f5      	bne.n	8002184 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8002198:	7b3b      	ldrb	r3, [r7, #12]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f0      	bne.n	8002184 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff feb5 	bl	8001f12 <read_calibration_data>
 80021a8:	4603      	mov	r3, r0
 80021aa:	f083 0301 	eor.w	r3, r3, #1
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d100      	bne.n	80021b6 <bmp280_init+0x96>
 80021b4:	e001      	b.n	80021ba <bmp280_init+0x9a>
		return false;
 80021b6:	2300      	movs	r3, #0
 80021b8:	e05b      	b.n	8002272 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80021c0:	2b60      	cmp	r3, #96	; 0x60
 80021c2:	d10a      	bne.n	80021da <bmp280_init+0xba>
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7ff ff26 	bl	8002016 <read_hum_calibration_data>
 80021ca:	4603      	mov	r3, r0
 80021cc:	f083 0301 	eor.w	r3, r3, #1
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <bmp280_init+0xba>
		return false;
 80021d6:	2300      	movs	r3, #0
 80021d8:	e04b      	b.n	8002272 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	795b      	ldrb	r3, [r3, #5]
 80021de:	015b      	lsls	r3, r3, #5
 80021e0:	b25a      	sxtb	r2, r3
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	785b      	ldrb	r3, [r3, #1]
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	b25b      	sxtb	r3, r3
 80021ea:	4313      	orrs	r3, r2
 80021ec:	b25b      	sxtb	r3, r3
 80021ee:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	461a      	mov	r2, r3
 80021f4:	21f5      	movs	r1, #245	; 0xf5
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff ff6d 	bl	80020d6 <write_register8>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <bmp280_init+0xe6>
		return false;
 8002202:	2300      	movs	r3, #0
 8002204:	e035      	b.n	8002272 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d102      	bne.n	8002214 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	2200      	movs	r2, #0
 8002212:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	78db      	ldrb	r3, [r3, #3]
 8002218:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 800221a:	b25a      	sxtb	r2, r3
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	789b      	ldrb	r3, [r3, #2]
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	b25b      	sxtb	r3, r3
 8002224:	4313      	orrs	r3, r2
 8002226:	b25a      	sxtb	r2, r3
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	b25b      	sxtb	r3, r3
 800222e:	4313      	orrs	r3, r2
 8002230:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8002232:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800223a:	2b60      	cmp	r3, #96	; 0x60
 800223c:	d10d      	bne.n	800225a <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	791b      	ldrb	r3, [r3, #4]
 8002242:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8002244:	7b7b      	ldrb	r3, [r7, #13]
 8002246:	461a      	mov	r2, r3
 8002248:	21f2      	movs	r1, #242	; 0xf2
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7ff ff43 	bl	80020d6 <write_register8>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <bmp280_init+0x13a>
			return false;
 8002256:	2300      	movs	r3, #0
 8002258:	e00b      	b.n	8002272 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 800225a:	7bbb      	ldrb	r3, [r7, #14]
 800225c:	461a      	mov	r2, r3
 800225e:	21f4      	movs	r1, #244	; 0xf4
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff ff38 	bl	80020d6 <write_register8>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <bmp280_init+0x150>
		return false;
 800226c:	2300      	movs	r3, #0
 800226e:	e000      	b.n	8002272 <bmp280_init+0x152>
	}

	return true;
 8002270:	2301      	movs	r3, #1
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 800227a:	b480      	push	{r7}
 800227c:	b087      	sub	sp, #28
 800227e:	af00      	add	r7, sp, #0
 8002280:	60f8      	str	r0, [r7, #12]
 8002282:	60b9      	str	r1, [r7, #8]
 8002284:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	10da      	asrs	r2, r3, #3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8002298:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800229c:	12db      	asrs	r3, r3, #11
 800229e:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	111b      	asrs	r3, r3, #4
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	8812      	ldrh	r2, [r2, #0]
 80022a8:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	1112      	asrs	r2, r2, #4
 80022ae:	68f9      	ldr	r1, [r7, #12]
 80022b0:	8809      	ldrh	r1, [r1, #0]
 80022b2:	1a52      	subs	r2, r2, r1
 80022b4:	fb02 f303 	mul.w	r3, r2, r3
 80022b8:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80022c0:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80022c4:	139b      	asrs	r3, r3, #14
 80022c6:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	441a      	add	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	3380      	adds	r3, #128	; 0x80
 80022de:	121b      	asrs	r3, r3, #8
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	371c      	adds	r7, #28
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 80022ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022f0:	b0cc      	sub	sp, #304	; 0x130
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 80022f8:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 80022fc:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8002300:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002304:	17da      	asrs	r2, r3, #31
 8002306:	461c      	mov	r4, r3
 8002308:	4615      	mov	r5, r2
 800230a:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 800230e:	f145 3bff 	adc.w	fp, r5, #4294967295
 8002312:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8002316:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800231a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800231e:	fb03 f102 	mul.w	r1, r3, r2
 8002322:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8002326:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800232a:	fb02 f303 	mul.w	r3, r2, r3
 800232e:	18ca      	adds	r2, r1, r3
 8002330:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002334:	fba3 8903 	umull	r8, r9, r3, r3
 8002338:	eb02 0309 	add.w	r3, r2, r9
 800233c:	4699      	mov	r9, r3
 800233e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002342:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002346:	b21b      	sxth	r3, r3
 8002348:	17da      	asrs	r2, r3, #31
 800234a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800234e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002352:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002356:	4603      	mov	r3, r0
 8002358:	fb03 f209 	mul.w	r2, r3, r9
 800235c:	460b      	mov	r3, r1
 800235e:	fb08 f303 	mul.w	r3, r8, r3
 8002362:	4413      	add	r3, r2
 8002364:	4602      	mov	r2, r0
 8002366:	fba8 1202 	umull	r1, r2, r8, r2
 800236a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800236e:	460a      	mov	r2, r1
 8002370:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8002374:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002378:	4413      	add	r3, r2
 800237a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800237e:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8002382:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 8002386:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 800238a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800238e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002392:	b21b      	sxth	r3, r3
 8002394:	17da      	asrs	r2, r3, #31
 8002396:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800239a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800239e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80023a2:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80023a6:	462a      	mov	r2, r5
 80023a8:	fb02 f203 	mul.w	r2, r2, r3
 80023ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80023b0:	4621      	mov	r1, r4
 80023b2:	fb01 f303 	mul.w	r3, r1, r3
 80023b6:	441a      	add	r2, r3
 80023b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80023bc:	4621      	mov	r1, r4
 80023be:	fba3 1301 	umull	r1, r3, r3, r1
 80023c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80023c6:	460b      	mov	r3, r1
 80023c8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80023cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80023d0:	18d3      	adds	r3, r2, r3
 80023d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80023d6:	f04f 0000 	mov.w	r0, #0
 80023da:	f04f 0100 	mov.w	r1, #0
 80023de:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80023e2:	462b      	mov	r3, r5
 80023e4:	0459      	lsls	r1, r3, #17
 80023e6:	4623      	mov	r3, r4
 80023e8:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80023ec:	4623      	mov	r3, r4
 80023ee:	0458      	lsls	r0, r3, #17
 80023f0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80023f4:	1814      	adds	r4, r2, r0
 80023f6:	643c      	str	r4, [r7, #64]	; 0x40
 80023f8:	414b      	adcs	r3, r1
 80023fa:	647b      	str	r3, [r7, #68]	; 0x44
 80023fc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002400:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8002404:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002408:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800240c:	b21b      	sxth	r3, r3
 800240e:	17da      	asrs	r2, r3, #31
 8002410:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002414:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002418:	f04f 0000 	mov.w	r0, #0
 800241c:	f04f 0100 	mov.w	r1, #0
 8002420:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002424:	00d9      	lsls	r1, r3, #3
 8002426:	2000      	movs	r0, #0
 8002428:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800242c:	1814      	adds	r4, r2, r0
 800242e:	63bc      	str	r4, [r7, #56]	; 0x38
 8002430:	414b      	adcs	r3, r1
 8002432:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002434:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8002438:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 800243c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8002440:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002444:	fb03 f102 	mul.w	r1, r3, r2
 8002448:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800244c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002450:	fb02 f303 	mul.w	r3, r2, r3
 8002454:	18ca      	adds	r2, r1, r3
 8002456:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800245a:	fba3 1303 	umull	r1, r3, r3, r3
 800245e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002462:	460b      	mov	r3, r1
 8002464:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002468:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800246c:	18d3      	adds	r3, r2, r3
 800246e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002476:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800247a:	b21b      	sxth	r3, r3
 800247c:	17da      	asrs	r2, r3, #31
 800247e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002482:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002486:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800248a:	462b      	mov	r3, r5
 800248c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002490:	4642      	mov	r2, r8
 8002492:	fb02 f203 	mul.w	r2, r2, r3
 8002496:	464b      	mov	r3, r9
 8002498:	4621      	mov	r1, r4
 800249a:	fb01 f303 	mul.w	r3, r1, r3
 800249e:	4413      	add	r3, r2
 80024a0:	4622      	mov	r2, r4
 80024a2:	4641      	mov	r1, r8
 80024a4:	fba2 1201 	umull	r1, r2, r2, r1
 80024a8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80024ac:	460a      	mov	r2, r1
 80024ae:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80024b2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80024b6:	4413      	add	r3, r2
 80024b8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80024bc:	f04f 0000 	mov.w	r0, #0
 80024c0:	f04f 0100 	mov.w	r1, #0
 80024c4:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80024c8:	4623      	mov	r3, r4
 80024ca:	0a18      	lsrs	r0, r3, #8
 80024cc:	462b      	mov	r3, r5
 80024ce:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80024d2:	462b      	mov	r3, r5
 80024d4:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 80024d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80024da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80024de:	b21b      	sxth	r3, r3
 80024e0:	17da      	asrs	r2, r3, #31
 80024e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80024e6:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80024ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80024ee:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 80024f2:	464a      	mov	r2, r9
 80024f4:	fb02 f203 	mul.w	r2, r2, r3
 80024f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80024fc:	4644      	mov	r4, r8
 80024fe:	fb04 f303 	mul.w	r3, r4, r3
 8002502:	441a      	add	r2, r3
 8002504:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002508:	4644      	mov	r4, r8
 800250a:	fba3 4304 	umull	r4, r3, r3, r4
 800250e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002512:	4623      	mov	r3, r4
 8002514:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002518:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800251c:	18d3      	adds	r3, r2, r3
 800251e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002522:	f04f 0200 	mov.w	r2, #0
 8002526:	f04f 0300 	mov.w	r3, #0
 800252a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800252e:	464c      	mov	r4, r9
 8002530:	0323      	lsls	r3, r4, #12
 8002532:	4644      	mov	r4, r8
 8002534:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8002538:	4644      	mov	r4, r8
 800253a:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 800253c:	1884      	adds	r4, r0, r2
 800253e:	633c      	str	r4, [r7, #48]	; 0x30
 8002540:	eb41 0303 	adc.w	r3, r1, r3
 8002544:	637b      	str	r3, [r7, #52]	; 0x34
 8002546:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800254a:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 800254e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8002552:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8002556:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 800255a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800255e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002562:	88db      	ldrh	r3, [r3, #6]
 8002564:	b29b      	uxth	r3, r3
 8002566:	2200      	movs	r2, #0
 8002568:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800256c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002570:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002574:	462b      	mov	r3, r5
 8002576:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800257a:	4642      	mov	r2, r8
 800257c:	fb02 f203 	mul.w	r2, r2, r3
 8002580:	464b      	mov	r3, r9
 8002582:	4621      	mov	r1, r4
 8002584:	fb01 f303 	mul.w	r3, r1, r3
 8002588:	4413      	add	r3, r2
 800258a:	4622      	mov	r2, r4
 800258c:	4641      	mov	r1, r8
 800258e:	fba2 1201 	umull	r1, r2, r2, r1
 8002592:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8002596:	460a      	mov	r2, r1
 8002598:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800259c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80025a0:	4413      	add	r3, r2
 80025a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80025a6:	f04f 0200 	mov.w	r2, #0
 80025aa:	f04f 0300 	mov.w	r3, #0
 80025ae:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80025b2:	4629      	mov	r1, r5
 80025b4:	104a      	asrs	r2, r1, #1
 80025b6:	4629      	mov	r1, r5
 80025b8:	17cb      	asrs	r3, r1, #31
 80025ba:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 80025be:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80025c2:	4313      	orrs	r3, r2
 80025c4:	d101      	bne.n	80025ca <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 80025c6:	2300      	movs	r3, #0
 80025c8:	e148      	b.n	800285c <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 80025ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80025ce:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80025d2:	17da      	asrs	r2, r3, #31
 80025d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80025d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025d8:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80025dc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 80025e0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80025e4:	105b      	asrs	r3, r3, #1
 80025e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80025ea:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80025ee:	07db      	lsls	r3, r3, #31
 80025f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025f4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80025f8:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80025fc:	4621      	mov	r1, r4
 80025fe:	1a89      	subs	r1, r1, r2
 8002600:	67b9      	str	r1, [r7, #120]	; 0x78
 8002602:	4629      	mov	r1, r5
 8002604:	eb61 0303 	sbc.w	r3, r1, r3
 8002608:	67fb      	str	r3, [r7, #124]	; 0x7c
 800260a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800260e:	4622      	mov	r2, r4
 8002610:	462b      	mov	r3, r5
 8002612:	1891      	adds	r1, r2, r2
 8002614:	6239      	str	r1, [r7, #32]
 8002616:	415b      	adcs	r3, r3
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
 800261a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800261e:	4621      	mov	r1, r4
 8002620:	1851      	adds	r1, r2, r1
 8002622:	61b9      	str	r1, [r7, #24]
 8002624:	4629      	mov	r1, r5
 8002626:	414b      	adcs	r3, r1
 8002628:	61fb      	str	r3, [r7, #28]
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	f04f 0300 	mov.w	r3, #0
 8002632:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002636:	4649      	mov	r1, r9
 8002638:	018b      	lsls	r3, r1, #6
 800263a:	4641      	mov	r1, r8
 800263c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002640:	4641      	mov	r1, r8
 8002642:	018a      	lsls	r2, r1, #6
 8002644:	4641      	mov	r1, r8
 8002646:	1889      	adds	r1, r1, r2
 8002648:	6139      	str	r1, [r7, #16]
 800264a:	4649      	mov	r1, r9
 800264c:	eb43 0101 	adc.w	r1, r3, r1
 8002650:	6179      	str	r1, [r7, #20]
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	f04f 0300 	mov.w	r3, #0
 800265a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800265e:	4649      	mov	r1, r9
 8002660:	008b      	lsls	r3, r1, #2
 8002662:	4641      	mov	r1, r8
 8002664:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002668:	4641      	mov	r1, r8
 800266a:	008a      	lsls	r2, r1, #2
 800266c:	4610      	mov	r0, r2
 800266e:	4619      	mov	r1, r3
 8002670:	4603      	mov	r3, r0
 8002672:	4622      	mov	r2, r4
 8002674:	189b      	adds	r3, r3, r2
 8002676:	60bb      	str	r3, [r7, #8]
 8002678:	460b      	mov	r3, r1
 800267a:	462a      	mov	r2, r5
 800267c:	eb42 0303 	adc.w	r3, r2, r3
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	f04f 0300 	mov.w	r3, #0
 800268a:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800268e:	4649      	mov	r1, r9
 8002690:	008b      	lsls	r3, r1, #2
 8002692:	4641      	mov	r1, r8
 8002694:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002698:	4641      	mov	r1, r8
 800269a:	008a      	lsls	r2, r1, #2
 800269c:	4610      	mov	r0, r2
 800269e:	4619      	mov	r1, r3
 80026a0:	4603      	mov	r3, r0
 80026a2:	4622      	mov	r2, r4
 80026a4:	189b      	adds	r3, r3, r2
 80026a6:	673b      	str	r3, [r7, #112]	; 0x70
 80026a8:	462b      	mov	r3, r5
 80026aa:	460a      	mov	r2, r1
 80026ac:	eb42 0303 	adc.w	r3, r2, r3
 80026b0:	677b      	str	r3, [r7, #116]	; 0x74
 80026b2:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80026b6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80026ba:	f7fe facd 	bl	8000c58 <__aeabi_ldivmod>
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 80026c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026ca:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80026ce:	b21b      	sxth	r3, r3
 80026d0:	17da      	asrs	r2, r3, #31
 80026d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80026d4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80026d6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80026da:	f04f 0000 	mov.w	r0, #0
 80026de:	f04f 0100 	mov.w	r1, #0
 80026e2:	0b50      	lsrs	r0, r2, #13
 80026e4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80026e8:	1359      	asrs	r1, r3, #13
 80026ea:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80026ee:	462b      	mov	r3, r5
 80026f0:	fb00 f203 	mul.w	r2, r0, r3
 80026f4:	4623      	mov	r3, r4
 80026f6:	fb03 f301 	mul.w	r3, r3, r1
 80026fa:	4413      	add	r3, r2
 80026fc:	4622      	mov	r2, r4
 80026fe:	fba2 1200 	umull	r1, r2, r2, r0
 8002702:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002706:	460a      	mov	r2, r1
 8002708:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800270c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002710:	4413      	add	r3, r2
 8002712:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002716:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800271a:	f04f 0000 	mov.w	r0, #0
 800271e:	f04f 0100 	mov.w	r1, #0
 8002722:	0b50      	lsrs	r0, r2, #13
 8002724:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8002728:	1359      	asrs	r1, r3, #13
 800272a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800272e:	462b      	mov	r3, r5
 8002730:	fb00 f203 	mul.w	r2, r0, r3
 8002734:	4623      	mov	r3, r4
 8002736:	fb03 f301 	mul.w	r3, r3, r1
 800273a:	4413      	add	r3, r2
 800273c:	4622      	mov	r2, r4
 800273e:	fba2 1200 	umull	r1, r2, r2, r0
 8002742:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002746:	460a      	mov	r2, r1
 8002748:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800274c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002750:	4413      	add	r3, r2
 8002752:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002756:	f04f 0200 	mov.w	r2, #0
 800275a:	f04f 0300 	mov.w	r3, #0
 800275e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002762:	4621      	mov	r1, r4
 8002764:	0e4a      	lsrs	r2, r1, #25
 8002766:	4629      	mov	r1, r5
 8002768:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800276c:	4629      	mov	r1, r5
 800276e:	164b      	asrs	r3, r1, #25
 8002770:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8002774:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002778:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800277c:	b21b      	sxth	r3, r3
 800277e:	17da      	asrs	r2, r3, #31
 8002780:	663b      	str	r3, [r7, #96]	; 0x60
 8002782:	667a      	str	r2, [r7, #100]	; 0x64
 8002784:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002788:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800278c:	462a      	mov	r2, r5
 800278e:	fb02 f203 	mul.w	r2, r2, r3
 8002792:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002796:	4621      	mov	r1, r4
 8002798:	fb01 f303 	mul.w	r3, r1, r3
 800279c:	4413      	add	r3, r2
 800279e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80027a2:	4621      	mov	r1, r4
 80027a4:	fba2 1201 	umull	r1, r2, r2, r1
 80027a8:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80027ac:	460a      	mov	r2, r1
 80027ae:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80027b2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80027b6:	4413      	add	r3, r2
 80027b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80027c8:	4621      	mov	r1, r4
 80027ca:	0cca      	lsrs	r2, r1, #19
 80027cc:	4629      	mov	r1, r5
 80027ce:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80027d2:	4629      	mov	r1, r5
 80027d4:	14cb      	asrs	r3, r1, #19
 80027d6:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 80027da:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 80027de:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80027e2:	1884      	adds	r4, r0, r2
 80027e4:	65bc      	str	r4, [r7, #88]	; 0x58
 80027e6:	eb41 0303 	adc.w	r3, r1, r3
 80027ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027ec:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80027f0:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80027f4:	4621      	mov	r1, r4
 80027f6:	1889      	adds	r1, r1, r2
 80027f8:	6539      	str	r1, [r7, #80]	; 0x50
 80027fa:	4629      	mov	r1, r5
 80027fc:	eb43 0101 	adc.w	r1, r3, r1
 8002800:	6579      	str	r1, [r7, #84]	; 0x54
 8002802:	f04f 0000 	mov.w	r0, #0
 8002806:	f04f 0100 	mov.w	r1, #0
 800280a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800280e:	4623      	mov	r3, r4
 8002810:	0a18      	lsrs	r0, r3, #8
 8002812:	462b      	mov	r3, r5
 8002814:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002818:	462b      	mov	r3, r5
 800281a:	1219      	asrs	r1, r3, #8
 800281c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002820:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002824:	b21b      	sxth	r3, r3
 8002826:	17da      	asrs	r2, r3, #31
 8002828:	64bb      	str	r3, [r7, #72]	; 0x48
 800282a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800282c:	f04f 0200 	mov.w	r2, #0
 8002830:	f04f 0300 	mov.w	r3, #0
 8002834:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8002838:	464c      	mov	r4, r9
 800283a:	0123      	lsls	r3, r4, #4
 800283c:	4644      	mov	r4, r8
 800283e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8002842:	4644      	mov	r4, r8
 8002844:	0122      	lsls	r2, r4, #4
 8002846:	1884      	adds	r4, r0, r2
 8002848:	603c      	str	r4, [r7, #0]
 800284a:	eb41 0303 	adc.w	r3, r1, r3
 800284e:	607b      	str	r3, [r7, #4]
 8002850:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002854:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 8002858:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 800285c:	4618      	mov	r0, r3
 800285e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8002862:	46bd      	mov	sp, r7
 8002864:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002868 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8002868:	b480      	push	{r7}
 800286a:	b087      	sub	sp, #28
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 800287a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	039a      	lsls	r2, r3, #14
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002886:	051b      	lsls	r3, r3, #20
 8002888:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002890:	4619      	mov	r1, r3
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	fb01 f303 	mul.w	r3, r1, r3
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800289e:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 80028a6:	4611      	mov	r1, r2
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	fb01 f202 	mul.w	r2, r1, r2
 80028ae:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80028b0:	68f9      	ldr	r1, [r7, #12]
 80028b2:	7f09      	ldrb	r1, [r1, #28]
 80028b4:	4608      	mov	r0, r1
 80028b6:	6979      	ldr	r1, [r7, #20]
 80028b8:	fb00 f101 	mul.w	r1, r0, r1
 80028bc:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80028be:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80028c2:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80028c6:	1292      	asrs	r2, r2, #10
 80028c8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 80028cc:	68f9      	ldr	r1, [r7, #12]
 80028ce:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 80028d2:	fb01 f202 	mul.w	r2, r1, r2
 80028d6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80028da:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80028dc:	fb02 f303 	mul.w	r3, r2, r3
 80028e0:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	13db      	asrs	r3, r3, #15
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	13d2      	asrs	r2, r2, #15
 80028ea:	fb02 f303 	mul.w	r3, r2, r3
 80028ee:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	7e12      	ldrb	r2, [r2, #24]
 80028f4:	fb02 f303 	mul.w	r3, r2, r3
 80028f8:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002906:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 800290e:	bfa8      	it	ge
 8002910:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8002914:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	131b      	asrs	r3, r3, #12
}
 800291a:	4618      	mov	r0, r3
 800291c:	371c      	adds	r7, #28
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,	uint32_t *humidity) {
 8002926:	b580      	push	{r7, lr}
 8002928:	b08c      	sub	sp, #48	; 0x30
 800292a:	af00      	add	r7, sp, #0
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	607a      	str	r2, [r7, #4]
 8002932:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800293a:	2b60      	cmp	r3, #96	; 0x60
 800293c:	d007      	beq.n	800294e <bmp280_read_fixed+0x28>
		if (humidity)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d002      	beq.n	800294a <bmp280_read_fixed+0x24>
			*humidity = 0;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 800294a:	2300      	movs	r3, #0
 800294c:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <bmp280_read_fixed+0x32>
 8002954:	2308      	movs	r3, #8
 8002956:	e000      	b.n	800295a <bmp280_read_fixed+0x34>
 8002958:	2306      	movs	r3, #6
 800295a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 800295c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295e:	b2db      	uxtb	r3, r3
 8002960:	f107 0218 	add.w	r2, r7, #24
 8002964:	21f7      	movs	r1, #247	; 0xf7
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f7ff faab 	bl	8001ec2 <read_data>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <bmp280_read_fixed+0x50>
		return false;
 8002972:	2300      	movs	r3, #0
 8002974:	e038      	b.n	80029e8 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8002976:	7e3b      	ldrb	r3, [r7, #24]
 8002978:	031a      	lsls	r2, r3, #12
 800297a:	7e7b      	ldrb	r3, [r7, #25]
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	4313      	orrs	r3, r2
 8002980:	7eba      	ldrb	r2, [r7, #26]
 8002982:	0912      	lsrs	r2, r2, #4
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	4313      	orrs	r3, r2
 8002988:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 800298a:	7efb      	ldrb	r3, [r7, #27]
 800298c:	031a      	lsls	r2, r3, #12
 800298e:	7f3b      	ldrb	r3, [r7, #28]
 8002990:	011b      	lsls	r3, r3, #4
 8002992:	4313      	orrs	r3, r2
 8002994:	7f7a      	ldrb	r2, [r7, #29]
 8002996:	0912      	lsrs	r2, r2, #4
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	4313      	orrs	r3, r2
 800299c:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 800299e:	f107 0314 	add.w	r3, r7, #20
 80029a2:	461a      	mov	r2, r3
 80029a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f7ff fc67 	bl	800227a <compensate_temperature>
 80029ac:	4602      	mov	r2, r0
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	461a      	mov	r2, r3
 80029b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f7ff fc97 	bl	80022ec <compensate_pressure>
 80029be:	4602      	mov	r2, r0
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	601a      	str	r2, [r3, #0]

	if (humidity) {
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00d      	beq.n	80029e6 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 80029ca:	7fbb      	ldrb	r3, [r7, #30]
 80029cc:	021b      	lsls	r3, r3, #8
 80029ce:	7ffa      	ldrb	r2, [r7, #31]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	461a      	mov	r2, r3
 80029d8:	6a39      	ldr	r1, [r7, #32]
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f7ff ff44 	bl	8002868 <compensate_humidity>
 80029e0:	4602      	mov	r2, r0
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	601a      	str	r2, [r3, #0]
	}

	return true;
 80029e6:	2301      	movs	r3, #1
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3730      	adds	r7, #48	; 0x30
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b088      	sub	sp, #32
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
 80029fc:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d002      	beq.n	8002a0a <bmp280_read_float+0x1a>
 8002a04:	f107 0314 	add.w	r3, r7, #20
 8002a08:	e000      	b.n	8002a0c <bmp280_read_float+0x1c>
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f107 0218 	add.w	r2, r7, #24
 8002a10:	f107 011c 	add.w	r1, r7, #28
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f7ff ff86 	bl	8002926 <bmp280_read_fixed>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d028      	beq.n	8002a72 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	ee07 3a90 	vmov	s15, r3
 8002a26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a2a:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002a7c <bmp280_read_float+0x8c>
 8002a2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	ee07 3a90 	vmov	s15, r3
 8002a3e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a42:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8002a80 <bmp280_read_float+0x90>
 8002a46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00b      	beq.n	8002a6e <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	ee07 3a90 	vmov	s15, r3
 8002a5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a60:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002a84 <bmp280_read_float+0x94>
 8002a64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <bmp280_read_float+0x84>
	}

	return false;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3720      	adds	r7, #32
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	42c80000 	.word	0x42c80000
 8002a80:	43800000 	.word	0x43800000
 8002a84:	44800000 	.word	0x44800000

08002a88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a8c:	4b0e      	ldr	r3, [pc, #56]	; (8002ac8 <HAL_Init+0x40>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a0d      	ldr	r2, [pc, #52]	; (8002ac8 <HAL_Init+0x40>)
 8002a92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a98:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <HAL_Init+0x40>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a0a      	ldr	r2, [pc, #40]	; (8002ac8 <HAL_Init+0x40>)
 8002a9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002aa4:	4b08      	ldr	r3, [pc, #32]	; (8002ac8 <HAL_Init+0x40>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a07      	ldr	r2, [pc, #28]	; (8002ac8 <HAL_Init+0x40>)
 8002aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ab0:	2003      	movs	r0, #3
 8002ab2:	f000 f94f 	bl	8002d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ab6:	200f      	movs	r0, #15
 8002ab8:	f000 f808 	bl	8002acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002abc:	f7fe fbee 	bl	800129c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40023c00 	.word	0x40023c00

08002acc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ad4:	4b12      	ldr	r3, [pc, #72]	; (8002b20 <HAL_InitTick+0x54>)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	4b12      	ldr	r3, [pc, #72]	; (8002b24 <HAL_InitTick+0x58>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	4619      	mov	r1, r3
 8002ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 f967 	bl	8002dbe <HAL_SYSTICK_Config>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e00e      	b.n	8002b18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b0f      	cmp	r3, #15
 8002afe:	d80a      	bhi.n	8002b16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b00:	2200      	movs	r2, #0
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	f04f 30ff 	mov.w	r0, #4294967295
 8002b08:	f000 f92f 	bl	8002d6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b0c:	4a06      	ldr	r2, [pc, #24]	; (8002b28 <HAL_InitTick+0x5c>)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
 8002b14:	e000      	b.n	8002b18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	20000000 	.word	0x20000000
 8002b24:	20000018 	.word	0x20000018
 8002b28:	20000014 	.word	0x20000014

08002b2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b30:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <HAL_IncTick+0x20>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	461a      	mov	r2, r3
 8002b36:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <HAL_IncTick+0x24>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	4a04      	ldr	r2, [pc, #16]	; (8002b50 <HAL_IncTick+0x24>)
 8002b3e:	6013      	str	r3, [r2, #0]
}
 8002b40:	bf00      	nop
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	20000018 	.word	0x20000018
 8002b50:	20000410 	.word	0x20000410

08002b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  return uwTick;
 8002b58:	4b03      	ldr	r3, [pc, #12]	; (8002b68 <HAL_GetTick+0x14>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	20000410 	.word	0x20000410

08002b6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b74:	f7ff ffee 	bl	8002b54 <HAL_GetTick>
 8002b78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b84:	d005      	beq.n	8002b92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b86:	4b0a      	ldr	r3, [pc, #40]	; (8002bb0 <HAL_Delay+0x44>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4413      	add	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b92:	bf00      	nop
 8002b94:	f7ff ffde 	bl	8002b54 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d8f7      	bhi.n	8002b94 <HAL_Delay+0x28>
  {
  }
}
 8002ba4:	bf00      	nop
 8002ba6:	bf00      	nop
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20000018 	.word	0x20000018

08002bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bc4:	4b0c      	ldr	r3, [pc, #48]	; (8002bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002be6:	4a04      	ldr	r2, [pc, #16]	; (8002bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	60d3      	str	r3, [r2, #12]
}
 8002bec:	bf00      	nop
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	e000ed00 	.word	0xe000ed00

08002bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c00:	4b04      	ldr	r3, [pc, #16]	; (8002c14 <__NVIC_GetPriorityGrouping+0x18>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	0a1b      	lsrs	r3, r3, #8
 8002c06:	f003 0307 	and.w	r3, r3, #7
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	e000ed00 	.word	0xe000ed00

08002c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4603      	mov	r3, r0
 8002c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	db0b      	blt.n	8002c42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c2a:	79fb      	ldrb	r3, [r7, #7]
 8002c2c:	f003 021f 	and.w	r2, r3, #31
 8002c30:	4907      	ldr	r1, [pc, #28]	; (8002c50 <__NVIC_EnableIRQ+0x38>)
 8002c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c36:	095b      	lsrs	r3, r3, #5
 8002c38:	2001      	movs	r0, #1
 8002c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	e000e100 	.word	0xe000e100

08002c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	6039      	str	r1, [r7, #0]
 8002c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	db0a      	blt.n	8002c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	490c      	ldr	r1, [pc, #48]	; (8002ca0 <__NVIC_SetPriority+0x4c>)
 8002c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c72:	0112      	lsls	r2, r2, #4
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	440b      	add	r3, r1
 8002c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c7c:	e00a      	b.n	8002c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	4908      	ldr	r1, [pc, #32]	; (8002ca4 <__NVIC_SetPriority+0x50>)
 8002c84:	79fb      	ldrb	r3, [r7, #7]
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	3b04      	subs	r3, #4
 8002c8c:	0112      	lsls	r2, r2, #4
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	440b      	add	r3, r1
 8002c92:	761a      	strb	r2, [r3, #24]
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	e000e100 	.word	0xe000e100
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b089      	sub	sp, #36	; 0x24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f1c3 0307 	rsb	r3, r3, #7
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	bf28      	it	cs
 8002cc6:	2304      	movcs	r3, #4
 8002cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	3304      	adds	r3, #4
 8002cce:	2b06      	cmp	r3, #6
 8002cd0:	d902      	bls.n	8002cd8 <NVIC_EncodePriority+0x30>
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	3b03      	subs	r3, #3
 8002cd6:	e000      	b.n	8002cda <NVIC_EncodePriority+0x32>
 8002cd8:	2300      	movs	r3, #0
 8002cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43da      	mvns	r2, r3
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	401a      	ands	r2, r3
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfa:	43d9      	mvns	r1, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d00:	4313      	orrs	r3, r2
         );
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3724      	adds	r7, #36	; 0x24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
	...

08002d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d20:	d301      	bcc.n	8002d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d22:	2301      	movs	r3, #1
 8002d24:	e00f      	b.n	8002d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d26:	4a0a      	ldr	r2, [pc, #40]	; (8002d50 <SysTick_Config+0x40>)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d2e:	210f      	movs	r1, #15
 8002d30:	f04f 30ff 	mov.w	r0, #4294967295
 8002d34:	f7ff ff8e 	bl	8002c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d38:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <SysTick_Config+0x40>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d3e:	4b04      	ldr	r3, [pc, #16]	; (8002d50 <SysTick_Config+0x40>)
 8002d40:	2207      	movs	r2, #7
 8002d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	e000e010 	.word	0xe000e010

08002d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7ff ff29 	bl	8002bb4 <__NVIC_SetPriorityGrouping>
}
 8002d62:	bf00      	nop
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b086      	sub	sp, #24
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	4603      	mov	r3, r0
 8002d72:	60b9      	str	r1, [r7, #8]
 8002d74:	607a      	str	r2, [r7, #4]
 8002d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d7c:	f7ff ff3e 	bl	8002bfc <__NVIC_GetPriorityGrouping>
 8002d80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	68b9      	ldr	r1, [r7, #8]
 8002d86:	6978      	ldr	r0, [r7, #20]
 8002d88:	f7ff ff8e 	bl	8002ca8 <NVIC_EncodePriority>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d92:	4611      	mov	r1, r2
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff ff5d 	bl	8002c54 <__NVIC_SetPriority>
}
 8002d9a:	bf00      	nop
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b082      	sub	sp, #8
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	4603      	mov	r3, r0
 8002daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff ff31 	bl	8002c18 <__NVIC_EnableIRQ>
}
 8002db6:	bf00      	nop
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b082      	sub	sp, #8
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7ff ffa2 	bl	8002d10 <SysTick_Config>
 8002dcc:	4603      	mov	r3, r0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b084      	sub	sp, #16
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002de4:	f7ff feb6 	bl	8002b54 <HAL_GetTick>
 8002de8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d008      	beq.n	8002e08 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2280      	movs	r2, #128	; 0x80
 8002dfa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e052      	b.n	8002eae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0216 	bic.w	r2, r2, #22
 8002e16:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	695a      	ldr	r2, [r3, #20]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e26:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d103      	bne.n	8002e38 <HAL_DMA_Abort+0x62>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d007      	beq.n	8002e48 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0208 	bic.w	r2, r2, #8
 8002e46:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0201 	bic.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e58:	e013      	b.n	8002e82 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e5a:	f7ff fe7b 	bl	8002b54 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b05      	cmp	r3, #5
 8002e66:	d90c      	bls.n	8002e82 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2203      	movs	r2, #3
 8002e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e015      	b.n	8002eae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1e4      	bne.n	8002e5a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e94:	223f      	movs	r2, #63	; 0x3f
 8002e96:	409a      	lsls	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d004      	beq.n	8002ed4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2280      	movs	r2, #128	; 0x80
 8002ece:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e00c      	b.n	8002eee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2205      	movs	r2, #5
 8002ed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0201 	bic.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
	...

08002efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b089      	sub	sp, #36	; 0x24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f12:	2300      	movs	r3, #0
 8002f14:	61fb      	str	r3, [r7, #28]
 8002f16:	e159      	b.n	80031cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f18:	2201      	movs	r2, #1
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	f040 8148 	bne.w	80031c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 0303 	and.w	r3, r3, #3
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d005      	beq.n	8002f4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d130      	bne.n	8002fb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	2203      	movs	r2, #3
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4013      	ands	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f84:	2201      	movs	r2, #1
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4013      	ands	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	091b      	lsrs	r3, r3, #4
 8002f9a:	f003 0201 	and.w	r2, r3, #1
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d017      	beq.n	8002fec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	2203      	movs	r2, #3
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f003 0303 	and.w	r3, r3, #3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d123      	bne.n	8003040 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	08da      	lsrs	r2, r3, #3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3208      	adds	r2, #8
 8003000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003004:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	220f      	movs	r2, #15
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	43db      	mvns	r3, r3
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4013      	ands	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	691a      	ldr	r2, [r3, #16]
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4313      	orrs	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	08da      	lsrs	r2, r3, #3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3208      	adds	r2, #8
 800303a:	69b9      	ldr	r1, [r7, #24]
 800303c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	2203      	movs	r2, #3
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4013      	ands	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 0203 	and.w	r2, r3, #3
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4313      	orrs	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 80a2 	beq.w	80031c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	4b57      	ldr	r3, [pc, #348]	; (80031e4 <HAL_GPIO_Init+0x2e8>)
 8003088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308a:	4a56      	ldr	r2, [pc, #344]	; (80031e4 <HAL_GPIO_Init+0x2e8>)
 800308c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003090:	6453      	str	r3, [r2, #68]	; 0x44
 8003092:	4b54      	ldr	r3, [pc, #336]	; (80031e4 <HAL_GPIO_Init+0x2e8>)
 8003094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800309e:	4a52      	ldr	r2, [pc, #328]	; (80031e8 <HAL_GPIO_Init+0x2ec>)
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	089b      	lsrs	r3, r3, #2
 80030a4:	3302      	adds	r3, #2
 80030a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	220f      	movs	r2, #15
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43db      	mvns	r3, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4013      	ands	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a49      	ldr	r2, [pc, #292]	; (80031ec <HAL_GPIO_Init+0x2f0>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d019      	beq.n	80030fe <HAL_GPIO_Init+0x202>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a48      	ldr	r2, [pc, #288]	; (80031f0 <HAL_GPIO_Init+0x2f4>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d013      	beq.n	80030fa <HAL_GPIO_Init+0x1fe>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a47      	ldr	r2, [pc, #284]	; (80031f4 <HAL_GPIO_Init+0x2f8>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d00d      	beq.n	80030f6 <HAL_GPIO_Init+0x1fa>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a46      	ldr	r2, [pc, #280]	; (80031f8 <HAL_GPIO_Init+0x2fc>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d007      	beq.n	80030f2 <HAL_GPIO_Init+0x1f6>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a45      	ldr	r2, [pc, #276]	; (80031fc <HAL_GPIO_Init+0x300>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d101      	bne.n	80030ee <HAL_GPIO_Init+0x1f2>
 80030ea:	2304      	movs	r3, #4
 80030ec:	e008      	b.n	8003100 <HAL_GPIO_Init+0x204>
 80030ee:	2307      	movs	r3, #7
 80030f0:	e006      	b.n	8003100 <HAL_GPIO_Init+0x204>
 80030f2:	2303      	movs	r3, #3
 80030f4:	e004      	b.n	8003100 <HAL_GPIO_Init+0x204>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e002      	b.n	8003100 <HAL_GPIO_Init+0x204>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <HAL_GPIO_Init+0x204>
 80030fe:	2300      	movs	r3, #0
 8003100:	69fa      	ldr	r2, [r7, #28]
 8003102:	f002 0203 	and.w	r2, r2, #3
 8003106:	0092      	lsls	r2, r2, #2
 8003108:	4093      	lsls	r3, r2
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4313      	orrs	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003110:	4935      	ldr	r1, [pc, #212]	; (80031e8 <HAL_GPIO_Init+0x2ec>)
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	089b      	lsrs	r3, r3, #2
 8003116:	3302      	adds	r3, #2
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800311e:	4b38      	ldr	r3, [pc, #224]	; (8003200 <HAL_GPIO_Init+0x304>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	43db      	mvns	r3, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4013      	ands	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003142:	4a2f      	ldr	r2, [pc, #188]	; (8003200 <HAL_GPIO_Init+0x304>)
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003148:	4b2d      	ldr	r3, [pc, #180]	; (8003200 <HAL_GPIO_Init+0x304>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	43db      	mvns	r3, r3
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	4013      	ands	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800316c:	4a24      	ldr	r2, [pc, #144]	; (8003200 <HAL_GPIO_Init+0x304>)
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003172:	4b23      	ldr	r3, [pc, #140]	; (8003200 <HAL_GPIO_Init+0x304>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	43db      	mvns	r3, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4013      	ands	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003196:	4a1a      	ldr	r2, [pc, #104]	; (8003200 <HAL_GPIO_Init+0x304>)
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800319c:	4b18      	ldr	r3, [pc, #96]	; (8003200 <HAL_GPIO_Init+0x304>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	43db      	mvns	r3, r3
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4013      	ands	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031c0:	4a0f      	ldr	r2, [pc, #60]	; (8003200 <HAL_GPIO_Init+0x304>)
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	3301      	adds	r3, #1
 80031ca:	61fb      	str	r3, [r7, #28]
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	2b0f      	cmp	r3, #15
 80031d0:	f67f aea2 	bls.w	8002f18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031d4:	bf00      	nop
 80031d6:	bf00      	nop
 80031d8:	3724      	adds	r7, #36	; 0x24
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	40023800 	.word	0x40023800
 80031e8:	40013800 	.word	0x40013800
 80031ec:	40020000 	.word	0x40020000
 80031f0:	40020400 	.word	0x40020400
 80031f4:	40020800 	.word	0x40020800
 80031f8:	40020c00 	.word	0x40020c00
 80031fc:	40021000 	.word	0x40021000
 8003200:	40013c00 	.word	0x40013c00

08003204 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	460b      	mov	r3, r1
 800320e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	691a      	ldr	r2, [r3, #16]
 8003214:	887b      	ldrh	r3, [r7, #2]
 8003216:	4013      	ands	r3, r2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d002      	beq.n	8003222 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800321c:	2301      	movs	r3, #1
 800321e:	73fb      	strb	r3, [r7, #15]
 8003220:	e001      	b.n	8003226 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003222:	2300      	movs	r3, #0
 8003224:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003226:	7bfb      	ldrb	r3, [r7, #15]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	460b      	mov	r3, r1
 800323e:	807b      	strh	r3, [r7, #2]
 8003240:	4613      	mov	r3, r2
 8003242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003244:	787b      	ldrb	r3, [r7, #1]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800324a:	887a      	ldrh	r2, [r7, #2]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003250:	e003      	b.n	800325a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003252:	887b      	ldrh	r3, [r7, #2]
 8003254:	041a      	lsls	r2, r3, #16
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	619a      	str	r2, [r3, #24]
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003266:	b480      	push	{r7}
 8003268:	b085      	sub	sp, #20
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
 800326e:	460b      	mov	r3, r1
 8003270:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003278:	887a      	ldrh	r2, [r7, #2]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	4013      	ands	r3, r2
 800327e:	041a      	lsls	r2, r3, #16
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	43d9      	mvns	r1, r3
 8003284:	887b      	ldrh	r3, [r7, #2]
 8003286:	400b      	ands	r3, r1
 8003288:	431a      	orrs	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	619a      	str	r2, [r3, #24]
}
 800328e:	bf00      	nop
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
	...

0800329c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e12b      	b.n	8003506 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d106      	bne.n	80032c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7fe f812 	bl	80012ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2224      	movs	r2, #36	; 0x24
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0201 	bic.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003300:	f001 fbbc 	bl	8004a7c <HAL_RCC_GetPCLK1Freq>
 8003304:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	4a81      	ldr	r2, [pc, #516]	; (8003510 <HAL_I2C_Init+0x274>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d807      	bhi.n	8003320 <HAL_I2C_Init+0x84>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4a80      	ldr	r2, [pc, #512]	; (8003514 <HAL_I2C_Init+0x278>)
 8003314:	4293      	cmp	r3, r2
 8003316:	bf94      	ite	ls
 8003318:	2301      	movls	r3, #1
 800331a:	2300      	movhi	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	e006      	b.n	800332e <HAL_I2C_Init+0x92>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4a7d      	ldr	r2, [pc, #500]	; (8003518 <HAL_I2C_Init+0x27c>)
 8003324:	4293      	cmp	r3, r2
 8003326:	bf94      	ite	ls
 8003328:	2301      	movls	r3, #1
 800332a:	2300      	movhi	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e0e7      	b.n	8003506 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4a78      	ldr	r2, [pc, #480]	; (800351c <HAL_I2C_Init+0x280>)
 800333a:	fba2 2303 	umull	r2, r3, r2, r3
 800333e:	0c9b      	lsrs	r3, r3, #18
 8003340:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	430a      	orrs	r2, r1
 8003354:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	4a6a      	ldr	r2, [pc, #424]	; (8003510 <HAL_I2C_Init+0x274>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d802      	bhi.n	8003370 <HAL_I2C_Init+0xd4>
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	3301      	adds	r3, #1
 800336e:	e009      	b.n	8003384 <HAL_I2C_Init+0xe8>
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003376:	fb02 f303 	mul.w	r3, r2, r3
 800337a:	4a69      	ldr	r2, [pc, #420]	; (8003520 <HAL_I2C_Init+0x284>)
 800337c:	fba2 2303 	umull	r2, r3, r2, r3
 8003380:	099b      	lsrs	r3, r3, #6
 8003382:	3301      	adds	r3, #1
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6812      	ldr	r2, [r2, #0]
 8003388:	430b      	orrs	r3, r1
 800338a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003396:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	495c      	ldr	r1, [pc, #368]	; (8003510 <HAL_I2C_Init+0x274>)
 80033a0:	428b      	cmp	r3, r1
 80033a2:	d819      	bhi.n	80033d8 <HAL_I2C_Init+0x13c>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	1e59      	subs	r1, r3, #1
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80033b2:	1c59      	adds	r1, r3, #1
 80033b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033b8:	400b      	ands	r3, r1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00a      	beq.n	80033d4 <HAL_I2C_Init+0x138>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	1e59      	subs	r1, r3, #1
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80033cc:	3301      	adds	r3, #1
 80033ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d2:	e051      	b.n	8003478 <HAL_I2C_Init+0x1dc>
 80033d4:	2304      	movs	r3, #4
 80033d6:	e04f      	b.n	8003478 <HAL_I2C_Init+0x1dc>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d111      	bne.n	8003404 <HAL_I2C_Init+0x168>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1e58      	subs	r0, r3, #1
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6859      	ldr	r1, [r3, #4]
 80033e8:	460b      	mov	r3, r1
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	440b      	add	r3, r1
 80033ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80033f2:	3301      	adds	r3, #1
 80033f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	bf0c      	ite	eq
 80033fc:	2301      	moveq	r3, #1
 80033fe:	2300      	movne	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	e012      	b.n	800342a <HAL_I2C_Init+0x18e>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	1e58      	subs	r0, r3, #1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6859      	ldr	r1, [r3, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	0099      	lsls	r1, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	fbb0 f3f3 	udiv	r3, r0, r3
 800341a:	3301      	adds	r3, #1
 800341c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003420:	2b00      	cmp	r3, #0
 8003422:	bf0c      	ite	eq
 8003424:	2301      	moveq	r3, #1
 8003426:	2300      	movne	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <HAL_I2C_Init+0x196>
 800342e:	2301      	movs	r3, #1
 8003430:	e022      	b.n	8003478 <HAL_I2C_Init+0x1dc>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10e      	bne.n	8003458 <HAL_I2C_Init+0x1bc>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	1e58      	subs	r0, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6859      	ldr	r1, [r3, #4]
 8003442:	460b      	mov	r3, r1
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	440b      	add	r3, r1
 8003448:	fbb0 f3f3 	udiv	r3, r0, r3
 800344c:	3301      	adds	r3, #1
 800344e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003456:	e00f      	b.n	8003478 <HAL_I2C_Init+0x1dc>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	1e58      	subs	r0, r3, #1
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6859      	ldr	r1, [r3, #4]
 8003460:	460b      	mov	r3, r1
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	0099      	lsls	r1, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	fbb0 f3f3 	udiv	r3, r0, r3
 800346e:	3301      	adds	r3, #1
 8003470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003474:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	6809      	ldr	r1, [r1, #0]
 800347c:	4313      	orrs	r3, r2
 800347e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69da      	ldr	r2, [r3, #28]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6911      	ldr	r1, [r2, #16]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	68d2      	ldr	r2, [r2, #12]
 80034b2:	4311      	orrs	r1, r2
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6812      	ldr	r2, [r2, #0]
 80034b8:	430b      	orrs	r3, r1
 80034ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	695a      	ldr	r2, [r3, #20]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0201 	orr.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2220      	movs	r2, #32
 80034f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	000186a0 	.word	0x000186a0
 8003514:	001e847f 	.word	0x001e847f
 8003518:	003d08ff 	.word	0x003d08ff
 800351c:	431bde83 	.word	0x431bde83
 8003520:	10624dd3 	.word	0x10624dd3

08003524 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af02      	add	r7, sp, #8
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	4608      	mov	r0, r1
 800352e:	4611      	mov	r1, r2
 8003530:	461a      	mov	r2, r3
 8003532:	4603      	mov	r3, r0
 8003534:	817b      	strh	r3, [r7, #10]
 8003536:	460b      	mov	r3, r1
 8003538:	813b      	strh	r3, [r7, #8]
 800353a:	4613      	mov	r3, r2
 800353c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800353e:	f7ff fb09 	bl	8002b54 <HAL_GetTick>
 8003542:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b20      	cmp	r3, #32
 800354e:	f040 80d9 	bne.w	8003704 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	2319      	movs	r3, #25
 8003558:	2201      	movs	r2, #1
 800355a:	496d      	ldr	r1, [pc, #436]	; (8003710 <HAL_I2C_Mem_Write+0x1ec>)
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 fc7f 	bl	8003e60 <I2C_WaitOnFlagUntilTimeout>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003568:	2302      	movs	r3, #2
 800356a:	e0cc      	b.n	8003706 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_I2C_Mem_Write+0x56>
 8003576:	2302      	movs	r3, #2
 8003578:	e0c5      	b.n	8003706 <HAL_I2C_Mem_Write+0x1e2>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b01      	cmp	r3, #1
 800358e:	d007      	beq.n	80035a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0201 	orr.w	r2, r2, #1
 800359e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2221      	movs	r2, #33	; 0x21
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2240      	movs	r2, #64	; 0x40
 80035bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a3a      	ldr	r2, [r7, #32]
 80035ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4a4d      	ldr	r2, [pc, #308]	; (8003714 <HAL_I2C_Mem_Write+0x1f0>)
 80035e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035e2:	88f8      	ldrh	r0, [r7, #6]
 80035e4:	893a      	ldrh	r2, [r7, #8]
 80035e6:	8979      	ldrh	r1, [r7, #10]
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	9301      	str	r3, [sp, #4]
 80035ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	4603      	mov	r3, r0
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 fab6 	bl	8003b64 <I2C_RequestMemoryWrite>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d052      	beq.n	80036a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e081      	b.n	8003706 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f000 fd00 	bl	800400c <I2C_WaitOnTXEFlagUntilTimeout>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00d      	beq.n	800362e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	2b04      	cmp	r3, #4
 8003618:	d107      	bne.n	800362a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003628:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e06b      	b.n	8003706 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	781a      	ldrb	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003654:	b29b      	uxth	r3, r3
 8003656:	3b01      	subs	r3, #1
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b04      	cmp	r3, #4
 800366a:	d11b      	bne.n	80036a4 <HAL_I2C_Mem_Write+0x180>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003670:	2b00      	cmp	r3, #0
 8003672:	d017      	beq.n	80036a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	781a      	ldrb	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	1c5a      	adds	r2, r3, #1
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368e:	3b01      	subs	r3, #1
 8003690:	b29a      	uxth	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369a:	b29b      	uxth	r3, r3
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1aa      	bne.n	8003602 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f000 fcec 	bl	800408e <I2C_WaitOnBTFFlagUntilTimeout>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00d      	beq.n	80036d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d107      	bne.n	80036d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e016      	b.n	8003706 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003700:	2300      	movs	r3, #0
 8003702:	e000      	b.n	8003706 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003704:	2302      	movs	r3, #2
  }
}
 8003706:	4618      	mov	r0, r3
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	00100002 	.word	0x00100002
 8003714:	ffff0000 	.word	0xffff0000

08003718 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b08c      	sub	sp, #48	; 0x30
 800371c:	af02      	add	r7, sp, #8
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	4608      	mov	r0, r1
 8003722:	4611      	mov	r1, r2
 8003724:	461a      	mov	r2, r3
 8003726:	4603      	mov	r3, r0
 8003728:	817b      	strh	r3, [r7, #10]
 800372a:	460b      	mov	r3, r1
 800372c:	813b      	strh	r3, [r7, #8]
 800372e:	4613      	mov	r3, r2
 8003730:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003732:	f7ff fa0f 	bl	8002b54 <HAL_GetTick>
 8003736:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b20      	cmp	r3, #32
 8003742:	f040 8208 	bne.w	8003b56 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	2319      	movs	r3, #25
 800374c:	2201      	movs	r2, #1
 800374e:	497b      	ldr	r1, [pc, #492]	; (800393c <HAL_I2C_Mem_Read+0x224>)
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 fb85 	bl	8003e60 <I2C_WaitOnFlagUntilTimeout>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800375c:	2302      	movs	r3, #2
 800375e:	e1fb      	b.n	8003b58 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003766:	2b01      	cmp	r3, #1
 8003768:	d101      	bne.n	800376e <HAL_I2C_Mem_Read+0x56>
 800376a:	2302      	movs	r3, #2
 800376c:	e1f4      	b.n	8003b58 <HAL_I2C_Mem_Read+0x440>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b01      	cmp	r3, #1
 8003782:	d007      	beq.n	8003794 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0201 	orr.w	r2, r2, #1
 8003792:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2222      	movs	r2, #34	; 0x22
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2240      	movs	r2, #64	; 0x40
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80037c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4a5b      	ldr	r2, [pc, #364]	; (8003940 <HAL_I2C_Mem_Read+0x228>)
 80037d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037d6:	88f8      	ldrh	r0, [r7, #6]
 80037d8:	893a      	ldrh	r2, [r7, #8]
 80037da:	8979      	ldrh	r1, [r7, #10]
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	9301      	str	r3, [sp, #4]
 80037e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	4603      	mov	r3, r0
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 fa52 	bl	8003c90 <I2C_RequestMemoryRead>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e1b0      	b.n	8003b58 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d113      	bne.n	8003826 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037fe:	2300      	movs	r3, #0
 8003800:	623b      	str	r3, [r7, #32]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	623b      	str	r3, [r7, #32]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	623b      	str	r3, [r7, #32]
 8003812:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	e184      	b.n	8003b30 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800382a:	2b01      	cmp	r3, #1
 800382c:	d11b      	bne.n	8003866 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800383c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800383e:	2300      	movs	r3, #0
 8003840:	61fb      	str	r3, [r7, #28]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	61fb      	str	r3, [r7, #28]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	61fb      	str	r3, [r7, #28]
 8003852:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	e164      	b.n	8003b30 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386a:	2b02      	cmp	r3, #2
 800386c:	d11b      	bne.n	80038a6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800387c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800388c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800388e:	2300      	movs	r3, #0
 8003890:	61bb      	str	r3, [r7, #24]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	61bb      	str	r3, [r7, #24]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	61bb      	str	r3, [r7, #24]
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	e144      	b.n	8003b30 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a6:	2300      	movs	r3, #0
 80038a8:	617b      	str	r3, [r7, #20]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	617b      	str	r3, [r7, #20]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	617b      	str	r3, [r7, #20]
 80038ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80038bc:	e138      	b.n	8003b30 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c2:	2b03      	cmp	r3, #3
 80038c4:	f200 80f1 	bhi.w	8003aaa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d123      	bne.n	8003918 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 fc1b 	bl	8004110 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e139      	b.n	8003b58 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	691a      	ldr	r2, [r3, #16]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f6:	1c5a      	adds	r2, r3, #1
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003900:	3b01      	subs	r3, #1
 8003902:	b29a      	uxth	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390c:	b29b      	uxth	r3, r3
 800390e:	3b01      	subs	r3, #1
 8003910:	b29a      	uxth	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003916:	e10b      	b.n	8003b30 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391c:	2b02      	cmp	r3, #2
 800391e:	d14e      	bne.n	80039be <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003926:	2200      	movs	r2, #0
 8003928:	4906      	ldr	r1, [pc, #24]	; (8003944 <HAL_I2C_Mem_Read+0x22c>)
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 fa98 	bl	8003e60 <I2C_WaitOnFlagUntilTimeout>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d008      	beq.n	8003948 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e10e      	b.n	8003b58 <HAL_I2C_Mem_Read+0x440>
 800393a:	bf00      	nop
 800393c:	00100002 	.word	0x00100002
 8003940:	ffff0000 	.word	0xffff0000
 8003944:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003956:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	691a      	ldr	r2, [r3, #16]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	b2d2      	uxtb	r2, r2
 8003964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003974:	3b01      	subs	r3, #1
 8003976:	b29a      	uxth	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003980:	b29b      	uxth	r3, r3
 8003982:	3b01      	subs	r3, #1
 8003984:	b29a      	uxth	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039bc:	e0b8      	b.n	8003b30 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c4:	2200      	movs	r2, #0
 80039c6:	4966      	ldr	r1, [pc, #408]	; (8003b60 <HAL_I2C_Mem_Read+0x448>)
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 fa49 	bl	8003e60 <I2C_WaitOnFlagUntilTimeout>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e0bf      	b.n	8003b58 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	691a      	ldr	r2, [r3, #16]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	1c5a      	adds	r2, r3, #1
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	3b01      	subs	r3, #1
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a20:	2200      	movs	r2, #0
 8003a22:	494f      	ldr	r1, [pc, #316]	; (8003b60 <HAL_I2C_Mem_Read+0x448>)
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 fa1b 	bl	8003e60 <I2C_WaitOnFlagUntilTimeout>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e091      	b.n	8003b58 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	691a      	ldr	r2, [r3, #16]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	691a      	ldr	r2, [r3, #16]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	b2d2      	uxtb	r2, r2
 8003a82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	1c5a      	adds	r2, r3, #1
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003aa8:	e042      	b.n	8003b30 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 fb2e 	bl	8004110 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e04c      	b.n	8003b58 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	691a      	ldr	r2, [r3, #16]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	b2d2      	uxtb	r2, r2
 8003aca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	1c5a      	adds	r2, r3, #1
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ada:	3b01      	subs	r3, #1
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d118      	bne.n	8003b30 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	b2d2      	uxtb	r2, r2
 8003b0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	1c5a      	adds	r2, r3, #1
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f47f aec2 	bne.w	80038be <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	e000      	b.n	8003b58 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003b56:	2302      	movs	r3, #2
  }
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3728      	adds	r7, #40	; 0x28
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	00010004 	.word	0x00010004

08003b64 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b088      	sub	sp, #32
 8003b68:	af02      	add	r7, sp, #8
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	4608      	mov	r0, r1
 8003b6e:	4611      	mov	r1, r2
 8003b70:	461a      	mov	r2, r3
 8003b72:	4603      	mov	r3, r0
 8003b74:	817b      	strh	r3, [r7, #10]
 8003b76:	460b      	mov	r3, r1
 8003b78:	813b      	strh	r3, [r7, #8]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f000 f960 	bl	8003e60 <I2C_WaitOnFlagUntilTimeout>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00d      	beq.n	8003bc2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bb4:	d103      	bne.n	8003bbe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bbc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e05f      	b.n	8003c82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bc2:	897b      	ldrh	r3, [r7, #10]
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bd0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd4:	6a3a      	ldr	r2, [r7, #32]
 8003bd6:	492d      	ldr	r1, [pc, #180]	; (8003c8c <I2C_RequestMemoryWrite+0x128>)
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f000 f998 	bl	8003f0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e04c      	b.n	8003c82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003be8:	2300      	movs	r3, #0
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	617b      	str	r3, [r7, #20]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	617b      	str	r3, [r7, #20]
 8003bfc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c00:	6a39      	ldr	r1, [r7, #32]
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 fa02 	bl	800400c <I2C_WaitOnTXEFlagUntilTimeout>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00d      	beq.n	8003c2a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d107      	bne.n	8003c26 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e02b      	b.n	8003c82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c2a:	88fb      	ldrh	r3, [r7, #6]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d105      	bne.n	8003c3c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c30:	893b      	ldrh	r3, [r7, #8]
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	611a      	str	r2, [r3, #16]
 8003c3a:	e021      	b.n	8003c80 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c3c:	893b      	ldrh	r3, [r7, #8]
 8003c3e:	0a1b      	lsrs	r3, r3, #8
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c4c:	6a39      	ldr	r1, [r7, #32]
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 f9dc 	bl	800400c <I2C_WaitOnTXEFlagUntilTimeout>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00d      	beq.n	8003c76 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d107      	bne.n	8003c72 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e005      	b.n	8003c82 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c76:	893b      	ldrh	r3, [r7, #8]
 8003c78:	b2da      	uxtb	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3718      	adds	r7, #24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	00010002 	.word	0x00010002

08003c90 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b088      	sub	sp, #32
 8003c94:	af02      	add	r7, sp, #8
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	4608      	mov	r0, r1
 8003c9a:	4611      	mov	r1, r2
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	817b      	strh	r3, [r7, #10]
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	813b      	strh	r3, [r7, #8]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cb8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cc8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f000 f8c2 	bl	8003e60 <I2C_WaitOnFlagUntilTimeout>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00d      	beq.n	8003cfe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cf0:	d103      	bne.n	8003cfa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cf8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e0aa      	b.n	8003e54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cfe:	897b      	ldrh	r3, [r7, #10]
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	461a      	mov	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d10:	6a3a      	ldr	r2, [r7, #32]
 8003d12:	4952      	ldr	r1, [pc, #328]	; (8003e5c <I2C_RequestMemoryRead+0x1cc>)
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 f8fa 	bl	8003f0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e097      	b.n	8003e54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d24:	2300      	movs	r3, #0
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3c:	6a39      	ldr	r1, [r7, #32]
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 f964 	bl	800400c <I2C_WaitOnTXEFlagUntilTimeout>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00d      	beq.n	8003d66 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d107      	bne.n	8003d62 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e076      	b.n	8003e54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d66:	88fb      	ldrh	r3, [r7, #6]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d105      	bne.n	8003d78 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d6c:	893b      	ldrh	r3, [r7, #8]
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	611a      	str	r2, [r3, #16]
 8003d76:	e021      	b.n	8003dbc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d78:	893b      	ldrh	r3, [r7, #8]
 8003d7a:	0a1b      	lsrs	r3, r3, #8
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	b2da      	uxtb	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d88:	6a39      	ldr	r1, [r7, #32]
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 f93e 	bl	800400c <I2C_WaitOnTXEFlagUntilTimeout>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00d      	beq.n	8003db2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	d107      	bne.n	8003dae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e050      	b.n	8003e54 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003db2:	893b      	ldrh	r3, [r7, #8]
 8003db4:	b2da      	uxtb	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dbe:	6a39      	ldr	r1, [r7, #32]
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 f923 	bl	800400c <I2C_WaitOnTXEFlagUntilTimeout>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00d      	beq.n	8003de8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd0:	2b04      	cmp	r3, #4
 8003dd2:	d107      	bne.n	8003de4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e035      	b.n	8003e54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003df6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f000 f82b 	bl	8003e60 <I2C_WaitOnFlagUntilTimeout>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00d      	beq.n	8003e2c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e1e:	d103      	bne.n	8003e28 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e013      	b.n	8003e54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e2c:	897b      	ldrh	r3, [r7, #10]
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	6a3a      	ldr	r2, [r7, #32]
 8003e40:	4906      	ldr	r1, [pc, #24]	; (8003e5c <I2C_RequestMemoryRead+0x1cc>)
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f000 f863 	bl	8003f0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e000      	b.n	8003e54 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3718      	adds	r7, #24
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	00010002 	.word	0x00010002

08003e60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	603b      	str	r3, [r7, #0]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e70:	e025      	b.n	8003ebe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e78:	d021      	beq.n	8003ebe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e7a:	f7fe fe6b 	bl	8002b54 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d302      	bcc.n	8003e90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d116      	bne.n	8003ebe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	f043 0220 	orr.w	r2, r3, #32
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e023      	b.n	8003f06 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	0c1b      	lsrs	r3, r3, #16
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d10d      	bne.n	8003ee4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	43da      	mvns	r2, r3
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	bf0c      	ite	eq
 8003eda:	2301      	moveq	r3, #1
 8003edc:	2300      	movne	r3, #0
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	e00c      	b.n	8003efe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	43da      	mvns	r2, r3
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	bf0c      	ite	eq
 8003ef6:	2301      	moveq	r3, #1
 8003ef8:	2300      	movne	r3, #0
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	461a      	mov	r2, r3
 8003efe:	79fb      	ldrb	r3, [r7, #7]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d0b6      	beq.n	8003e72 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b084      	sub	sp, #16
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	60f8      	str	r0, [r7, #12]
 8003f16:	60b9      	str	r1, [r7, #8]
 8003f18:	607a      	str	r2, [r7, #4]
 8003f1a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f1c:	e051      	b.n	8003fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f2c:	d123      	bne.n	8003f76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f3c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f46:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2220      	movs	r2, #32
 8003f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	f043 0204 	orr.w	r2, r3, #4
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e046      	b.n	8004004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7c:	d021      	beq.n	8003fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f7e:	f7fe fde9 	bl	8002b54 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d302      	bcc.n	8003f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d116      	bne.n	8003fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	f043 0220 	orr.w	r2, r3, #32
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e020      	b.n	8004004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	0c1b      	lsrs	r3, r3, #16
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d10c      	bne.n	8003fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	43da      	mvns	r2, r3
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	bf14      	ite	ne
 8003fde:	2301      	movne	r3, #1
 8003fe0:	2300      	moveq	r3, #0
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	e00b      	b.n	8003ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	43da      	mvns	r2, r3
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	bf14      	ite	ne
 8003ff8:	2301      	movne	r3, #1
 8003ffa:	2300      	moveq	r3, #0
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d18d      	bne.n	8003f1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004018:	e02d      	b.n	8004076 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 f8ce 	bl	80041bc <I2C_IsAcknowledgeFailed>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e02d      	b.n	8004086 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004030:	d021      	beq.n	8004076 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004032:	f7fe fd8f 	bl	8002b54 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	429a      	cmp	r2, r3
 8004040:	d302      	bcc.n	8004048 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d116      	bne.n	8004076 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2220      	movs	r2, #32
 8004052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	f043 0220 	orr.w	r2, r3, #32
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e007      	b.n	8004086 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004080:	2b80      	cmp	r3, #128	; 0x80
 8004082:	d1ca      	bne.n	800401a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b084      	sub	sp, #16
 8004092:	af00      	add	r7, sp, #0
 8004094:	60f8      	str	r0, [r7, #12]
 8004096:	60b9      	str	r1, [r7, #8]
 8004098:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800409a:	e02d      	b.n	80040f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 f88d 	bl	80041bc <I2C_IsAcknowledgeFailed>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e02d      	b.n	8004108 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b2:	d021      	beq.n	80040f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040b4:	f7fe fd4e 	bl	8002b54 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d302      	bcc.n	80040ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d116      	bne.n	80040f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2220      	movs	r2, #32
 80040d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e4:	f043 0220 	orr.w	r2, r3, #32
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e007      	b.n	8004108 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	f003 0304 	and.w	r3, r3, #4
 8004102:	2b04      	cmp	r3, #4
 8004104:	d1ca      	bne.n	800409c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800411c:	e042      	b.n	80041a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	f003 0310 	and.w	r3, r3, #16
 8004128:	2b10      	cmp	r3, #16
 800412a:	d119      	bne.n	8004160 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f06f 0210 	mvn.w	r2, #16
 8004134:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2220      	movs	r2, #32
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e029      	b.n	80041b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004160:	f7fe fcf8 	bl	8002b54 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	429a      	cmp	r2, r3
 800416e:	d302      	bcc.n	8004176 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d116      	bne.n	80041a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2220      	movs	r2, #32
 8004180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004190:	f043 0220 	orr.w	r2, r3, #32
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e007      	b.n	80041b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ae:	2b40      	cmp	r3, #64	; 0x40
 80041b0:	d1b5      	bne.n	800411e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d2:	d11b      	bne.n	800420c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	f043 0204 	orr.w	r2, r3, #4
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e000      	b.n	800420e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
	...

0800421c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e267      	b.n	80046fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b00      	cmp	r3, #0
 8004238:	d075      	beq.n	8004326 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800423a:	4b88      	ldr	r3, [pc, #544]	; (800445c <HAL_RCC_OscConfig+0x240>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 030c 	and.w	r3, r3, #12
 8004242:	2b04      	cmp	r3, #4
 8004244:	d00c      	beq.n	8004260 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004246:	4b85      	ldr	r3, [pc, #532]	; (800445c <HAL_RCC_OscConfig+0x240>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800424e:	2b08      	cmp	r3, #8
 8004250:	d112      	bne.n	8004278 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004252:	4b82      	ldr	r3, [pc, #520]	; (800445c <HAL_RCC_OscConfig+0x240>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800425a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800425e:	d10b      	bne.n	8004278 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004260:	4b7e      	ldr	r3, [pc, #504]	; (800445c <HAL_RCC_OscConfig+0x240>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d05b      	beq.n	8004324 <HAL_RCC_OscConfig+0x108>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d157      	bne.n	8004324 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e242      	b.n	80046fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004280:	d106      	bne.n	8004290 <HAL_RCC_OscConfig+0x74>
 8004282:	4b76      	ldr	r3, [pc, #472]	; (800445c <HAL_RCC_OscConfig+0x240>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a75      	ldr	r2, [pc, #468]	; (800445c <HAL_RCC_OscConfig+0x240>)
 8004288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800428c:	6013      	str	r3, [r2, #0]
 800428e:	e01d      	b.n	80042cc <HAL_RCC_OscConfig+0xb0>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004298:	d10c      	bne.n	80042b4 <HAL_RCC_OscConfig+0x98>
 800429a:	4b70      	ldr	r3, [pc, #448]	; (800445c <HAL_RCC_OscConfig+0x240>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a6f      	ldr	r2, [pc, #444]	; (800445c <HAL_RCC_OscConfig+0x240>)
 80042a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	4b6d      	ldr	r3, [pc, #436]	; (800445c <HAL_RCC_OscConfig+0x240>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a6c      	ldr	r2, [pc, #432]	; (800445c <HAL_RCC_OscConfig+0x240>)
 80042ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b0:	6013      	str	r3, [r2, #0]
 80042b2:	e00b      	b.n	80042cc <HAL_RCC_OscConfig+0xb0>
 80042b4:	4b69      	ldr	r3, [pc, #420]	; (800445c <HAL_RCC_OscConfig+0x240>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a68      	ldr	r2, [pc, #416]	; (800445c <HAL_RCC_OscConfig+0x240>)
 80042ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042be:	6013      	str	r3, [r2, #0]
 80042c0:	4b66      	ldr	r3, [pc, #408]	; (800445c <HAL_RCC_OscConfig+0x240>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a65      	ldr	r2, [pc, #404]	; (800445c <HAL_RCC_OscConfig+0x240>)
 80042c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d013      	beq.n	80042fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d4:	f7fe fc3e 	bl	8002b54 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042dc:	f7fe fc3a 	bl	8002b54 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b64      	cmp	r3, #100	; 0x64
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e207      	b.n	80046fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ee:	4b5b      	ldr	r3, [pc, #364]	; (800445c <HAL_RCC_OscConfig+0x240>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0f0      	beq.n	80042dc <HAL_RCC_OscConfig+0xc0>
 80042fa:	e014      	b.n	8004326 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042fc:	f7fe fc2a 	bl	8002b54 <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004304:	f7fe fc26 	bl	8002b54 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b64      	cmp	r3, #100	; 0x64
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e1f3      	b.n	80046fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004316:	4b51      	ldr	r3, [pc, #324]	; (800445c <HAL_RCC_OscConfig+0x240>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1f0      	bne.n	8004304 <HAL_RCC_OscConfig+0xe8>
 8004322:	e000      	b.n	8004326 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d063      	beq.n	80043fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004332:	4b4a      	ldr	r3, [pc, #296]	; (800445c <HAL_RCC_OscConfig+0x240>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f003 030c 	and.w	r3, r3, #12
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00b      	beq.n	8004356 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800433e:	4b47      	ldr	r3, [pc, #284]	; (800445c <HAL_RCC_OscConfig+0x240>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004346:	2b08      	cmp	r3, #8
 8004348:	d11c      	bne.n	8004384 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800434a:	4b44      	ldr	r3, [pc, #272]	; (800445c <HAL_RCC_OscConfig+0x240>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d116      	bne.n	8004384 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004356:	4b41      	ldr	r3, [pc, #260]	; (800445c <HAL_RCC_OscConfig+0x240>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d005      	beq.n	800436e <HAL_RCC_OscConfig+0x152>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d001      	beq.n	800436e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e1c7      	b.n	80046fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800436e:	4b3b      	ldr	r3, [pc, #236]	; (800445c <HAL_RCC_OscConfig+0x240>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	4937      	ldr	r1, [pc, #220]	; (800445c <HAL_RCC_OscConfig+0x240>)
 800437e:	4313      	orrs	r3, r2
 8004380:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004382:	e03a      	b.n	80043fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d020      	beq.n	80043ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800438c:	4b34      	ldr	r3, [pc, #208]	; (8004460 <HAL_RCC_OscConfig+0x244>)
 800438e:	2201      	movs	r2, #1
 8004390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004392:	f7fe fbdf 	bl	8002b54 <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004398:	e008      	b.n	80043ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800439a:	f7fe fbdb 	bl	8002b54 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e1a8      	b.n	80046fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ac:	4b2b      	ldr	r3, [pc, #172]	; (800445c <HAL_RCC_OscConfig+0x240>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0f0      	beq.n	800439a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b8:	4b28      	ldr	r3, [pc, #160]	; (800445c <HAL_RCC_OscConfig+0x240>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	00db      	lsls	r3, r3, #3
 80043c6:	4925      	ldr	r1, [pc, #148]	; (800445c <HAL_RCC_OscConfig+0x240>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	600b      	str	r3, [r1, #0]
 80043cc:	e015      	b.n	80043fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ce:	4b24      	ldr	r3, [pc, #144]	; (8004460 <HAL_RCC_OscConfig+0x244>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d4:	f7fe fbbe 	bl	8002b54 <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043dc:	f7fe fbba 	bl	8002b54 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e187      	b.n	80046fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ee:	4b1b      	ldr	r3, [pc, #108]	; (800445c <HAL_RCC_OscConfig+0x240>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1f0      	bne.n	80043dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0308 	and.w	r3, r3, #8
 8004402:	2b00      	cmp	r3, #0
 8004404:	d036      	beq.n	8004474 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d016      	beq.n	800443c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800440e:	4b15      	ldr	r3, [pc, #84]	; (8004464 <HAL_RCC_OscConfig+0x248>)
 8004410:	2201      	movs	r2, #1
 8004412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004414:	f7fe fb9e 	bl	8002b54 <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800441c:	f7fe fb9a 	bl	8002b54 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e167      	b.n	80046fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800442e:	4b0b      	ldr	r3, [pc, #44]	; (800445c <HAL_RCC_OscConfig+0x240>)
 8004430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d0f0      	beq.n	800441c <HAL_RCC_OscConfig+0x200>
 800443a:	e01b      	b.n	8004474 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800443c:	4b09      	ldr	r3, [pc, #36]	; (8004464 <HAL_RCC_OscConfig+0x248>)
 800443e:	2200      	movs	r2, #0
 8004440:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004442:	f7fe fb87 	bl	8002b54 <HAL_GetTick>
 8004446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004448:	e00e      	b.n	8004468 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800444a:	f7fe fb83 	bl	8002b54 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d907      	bls.n	8004468 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e150      	b.n	80046fe <HAL_RCC_OscConfig+0x4e2>
 800445c:	40023800 	.word	0x40023800
 8004460:	42470000 	.word	0x42470000
 8004464:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004468:	4b88      	ldr	r3, [pc, #544]	; (800468c <HAL_RCC_OscConfig+0x470>)
 800446a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1ea      	bne.n	800444a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0304 	and.w	r3, r3, #4
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 8097 	beq.w	80045b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004482:	2300      	movs	r3, #0
 8004484:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004486:	4b81      	ldr	r3, [pc, #516]	; (800468c <HAL_RCC_OscConfig+0x470>)
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10f      	bne.n	80044b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004492:	2300      	movs	r3, #0
 8004494:	60bb      	str	r3, [r7, #8]
 8004496:	4b7d      	ldr	r3, [pc, #500]	; (800468c <HAL_RCC_OscConfig+0x470>)
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	4a7c      	ldr	r2, [pc, #496]	; (800468c <HAL_RCC_OscConfig+0x470>)
 800449c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a0:	6413      	str	r3, [r2, #64]	; 0x40
 80044a2:	4b7a      	ldr	r3, [pc, #488]	; (800468c <HAL_RCC_OscConfig+0x470>)
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044aa:	60bb      	str	r3, [r7, #8]
 80044ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044ae:	2301      	movs	r3, #1
 80044b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b2:	4b77      	ldr	r3, [pc, #476]	; (8004690 <HAL_RCC_OscConfig+0x474>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d118      	bne.n	80044f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044be:	4b74      	ldr	r3, [pc, #464]	; (8004690 <HAL_RCC_OscConfig+0x474>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a73      	ldr	r2, [pc, #460]	; (8004690 <HAL_RCC_OscConfig+0x474>)
 80044c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ca:	f7fe fb43 	bl	8002b54 <HAL_GetTick>
 80044ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d0:	e008      	b.n	80044e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044d2:	f7fe fb3f 	bl	8002b54 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d901      	bls.n	80044e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e10c      	b.n	80046fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e4:	4b6a      	ldr	r3, [pc, #424]	; (8004690 <HAL_RCC_OscConfig+0x474>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d0f0      	beq.n	80044d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d106      	bne.n	8004506 <HAL_RCC_OscConfig+0x2ea>
 80044f8:	4b64      	ldr	r3, [pc, #400]	; (800468c <HAL_RCC_OscConfig+0x470>)
 80044fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fc:	4a63      	ldr	r2, [pc, #396]	; (800468c <HAL_RCC_OscConfig+0x470>)
 80044fe:	f043 0301 	orr.w	r3, r3, #1
 8004502:	6713      	str	r3, [r2, #112]	; 0x70
 8004504:	e01c      	b.n	8004540 <HAL_RCC_OscConfig+0x324>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	2b05      	cmp	r3, #5
 800450c:	d10c      	bne.n	8004528 <HAL_RCC_OscConfig+0x30c>
 800450e:	4b5f      	ldr	r3, [pc, #380]	; (800468c <HAL_RCC_OscConfig+0x470>)
 8004510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004512:	4a5e      	ldr	r2, [pc, #376]	; (800468c <HAL_RCC_OscConfig+0x470>)
 8004514:	f043 0304 	orr.w	r3, r3, #4
 8004518:	6713      	str	r3, [r2, #112]	; 0x70
 800451a:	4b5c      	ldr	r3, [pc, #368]	; (800468c <HAL_RCC_OscConfig+0x470>)
 800451c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451e:	4a5b      	ldr	r2, [pc, #364]	; (800468c <HAL_RCC_OscConfig+0x470>)
 8004520:	f043 0301 	orr.w	r3, r3, #1
 8004524:	6713      	str	r3, [r2, #112]	; 0x70
 8004526:	e00b      	b.n	8004540 <HAL_RCC_OscConfig+0x324>
 8004528:	4b58      	ldr	r3, [pc, #352]	; (800468c <HAL_RCC_OscConfig+0x470>)
 800452a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452c:	4a57      	ldr	r2, [pc, #348]	; (800468c <HAL_RCC_OscConfig+0x470>)
 800452e:	f023 0301 	bic.w	r3, r3, #1
 8004532:	6713      	str	r3, [r2, #112]	; 0x70
 8004534:	4b55      	ldr	r3, [pc, #340]	; (800468c <HAL_RCC_OscConfig+0x470>)
 8004536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004538:	4a54      	ldr	r2, [pc, #336]	; (800468c <HAL_RCC_OscConfig+0x470>)
 800453a:	f023 0304 	bic.w	r3, r3, #4
 800453e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d015      	beq.n	8004574 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004548:	f7fe fb04 	bl	8002b54 <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800454e:	e00a      	b.n	8004566 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004550:	f7fe fb00 	bl	8002b54 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	f241 3288 	movw	r2, #5000	; 0x1388
 800455e:	4293      	cmp	r3, r2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e0cb      	b.n	80046fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004566:	4b49      	ldr	r3, [pc, #292]	; (800468c <HAL_RCC_OscConfig+0x470>)
 8004568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d0ee      	beq.n	8004550 <HAL_RCC_OscConfig+0x334>
 8004572:	e014      	b.n	800459e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004574:	f7fe faee 	bl	8002b54 <HAL_GetTick>
 8004578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800457a:	e00a      	b.n	8004592 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800457c:	f7fe faea 	bl	8002b54 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	f241 3288 	movw	r2, #5000	; 0x1388
 800458a:	4293      	cmp	r3, r2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e0b5      	b.n	80046fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004592:	4b3e      	ldr	r3, [pc, #248]	; (800468c <HAL_RCC_OscConfig+0x470>)
 8004594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1ee      	bne.n	800457c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800459e:	7dfb      	ldrb	r3, [r7, #23]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d105      	bne.n	80045b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045a4:	4b39      	ldr	r3, [pc, #228]	; (800468c <HAL_RCC_OscConfig+0x470>)
 80045a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a8:	4a38      	ldr	r2, [pc, #224]	; (800468c <HAL_RCC_OscConfig+0x470>)
 80045aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 80a1 	beq.w	80046fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045ba:	4b34      	ldr	r3, [pc, #208]	; (800468c <HAL_RCC_OscConfig+0x470>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f003 030c 	and.w	r3, r3, #12
 80045c2:	2b08      	cmp	r3, #8
 80045c4:	d05c      	beq.n	8004680 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d141      	bne.n	8004652 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ce:	4b31      	ldr	r3, [pc, #196]	; (8004694 <HAL_RCC_OscConfig+0x478>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d4:	f7fe fabe 	bl	8002b54 <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045da:	e008      	b.n	80045ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045dc:	f7fe faba 	bl	8002b54 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e087      	b.n	80046fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ee:	4b27      	ldr	r3, [pc, #156]	; (800468c <HAL_RCC_OscConfig+0x470>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1f0      	bne.n	80045dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	69da      	ldr	r2, [r3, #28]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004608:	019b      	lsls	r3, r3, #6
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004610:	085b      	lsrs	r3, r3, #1
 8004612:	3b01      	subs	r3, #1
 8004614:	041b      	lsls	r3, r3, #16
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461c:	061b      	lsls	r3, r3, #24
 800461e:	491b      	ldr	r1, [pc, #108]	; (800468c <HAL_RCC_OscConfig+0x470>)
 8004620:	4313      	orrs	r3, r2
 8004622:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004624:	4b1b      	ldr	r3, [pc, #108]	; (8004694 <HAL_RCC_OscConfig+0x478>)
 8004626:	2201      	movs	r2, #1
 8004628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462a:	f7fe fa93 	bl	8002b54 <HAL_GetTick>
 800462e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004630:	e008      	b.n	8004644 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004632:	f7fe fa8f 	bl	8002b54 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b02      	cmp	r3, #2
 800463e:	d901      	bls.n	8004644 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e05c      	b.n	80046fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004644:	4b11      	ldr	r3, [pc, #68]	; (800468c <HAL_RCC_OscConfig+0x470>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d0f0      	beq.n	8004632 <HAL_RCC_OscConfig+0x416>
 8004650:	e054      	b.n	80046fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004652:	4b10      	ldr	r3, [pc, #64]	; (8004694 <HAL_RCC_OscConfig+0x478>)
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004658:	f7fe fa7c 	bl	8002b54 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004660:	f7fe fa78 	bl	8002b54 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e045      	b.n	80046fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004672:	4b06      	ldr	r3, [pc, #24]	; (800468c <HAL_RCC_OscConfig+0x470>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1f0      	bne.n	8004660 <HAL_RCC_OscConfig+0x444>
 800467e:	e03d      	b.n	80046fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d107      	bne.n	8004698 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e038      	b.n	80046fe <HAL_RCC_OscConfig+0x4e2>
 800468c:	40023800 	.word	0x40023800
 8004690:	40007000 	.word	0x40007000
 8004694:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004698:	4b1b      	ldr	r3, [pc, #108]	; (8004708 <HAL_RCC_OscConfig+0x4ec>)
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d028      	beq.n	80046f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d121      	bne.n	80046f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046be:	429a      	cmp	r2, r3
 80046c0:	d11a      	bne.n	80046f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046c8:	4013      	ands	r3, r2
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d111      	bne.n	80046f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046de:	085b      	lsrs	r3, r3, #1
 80046e0:	3b01      	subs	r3, #1
 80046e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d107      	bne.n	80046f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d001      	beq.n	80046fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e000      	b.n	80046fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3718      	adds	r7, #24
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	40023800 	.word	0x40023800

0800470c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e0cc      	b.n	80048ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004720:	4b68      	ldr	r3, [pc, #416]	; (80048c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0307 	and.w	r3, r3, #7
 8004728:	683a      	ldr	r2, [r7, #0]
 800472a:	429a      	cmp	r2, r3
 800472c:	d90c      	bls.n	8004748 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800472e:	4b65      	ldr	r3, [pc, #404]	; (80048c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	b2d2      	uxtb	r2, r2
 8004734:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004736:	4b63      	ldr	r3, [pc, #396]	; (80048c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0307 	and.w	r3, r3, #7
 800473e:	683a      	ldr	r2, [r7, #0]
 8004740:	429a      	cmp	r2, r3
 8004742:	d001      	beq.n	8004748 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e0b8      	b.n	80048ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d020      	beq.n	8004796 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	2b00      	cmp	r3, #0
 800475e:	d005      	beq.n	800476c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004760:	4b59      	ldr	r3, [pc, #356]	; (80048c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	4a58      	ldr	r2, [pc, #352]	; (80048c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004766:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800476a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0308 	and.w	r3, r3, #8
 8004774:	2b00      	cmp	r3, #0
 8004776:	d005      	beq.n	8004784 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004778:	4b53      	ldr	r3, [pc, #332]	; (80048c8 <HAL_RCC_ClockConfig+0x1bc>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	4a52      	ldr	r2, [pc, #328]	; (80048c8 <HAL_RCC_ClockConfig+0x1bc>)
 800477e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004782:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004784:	4b50      	ldr	r3, [pc, #320]	; (80048c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	494d      	ldr	r1, [pc, #308]	; (80048c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004792:	4313      	orrs	r3, r2
 8004794:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d044      	beq.n	800482c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d107      	bne.n	80047ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047aa:	4b47      	ldr	r3, [pc, #284]	; (80048c8 <HAL_RCC_ClockConfig+0x1bc>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d119      	bne.n	80047ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e07f      	b.n	80048ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d003      	beq.n	80047ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047c6:	2b03      	cmp	r3, #3
 80047c8:	d107      	bne.n	80047da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ca:	4b3f      	ldr	r3, [pc, #252]	; (80048c8 <HAL_RCC_ClockConfig+0x1bc>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d109      	bne.n	80047ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e06f      	b.n	80048ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047da:	4b3b      	ldr	r3, [pc, #236]	; (80048c8 <HAL_RCC_ClockConfig+0x1bc>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e067      	b.n	80048ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047ea:	4b37      	ldr	r3, [pc, #220]	; (80048c8 <HAL_RCC_ClockConfig+0x1bc>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f023 0203 	bic.w	r2, r3, #3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	4934      	ldr	r1, [pc, #208]	; (80048c8 <HAL_RCC_ClockConfig+0x1bc>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047fc:	f7fe f9aa 	bl	8002b54 <HAL_GetTick>
 8004800:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004802:	e00a      	b.n	800481a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004804:	f7fe f9a6 	bl	8002b54 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004812:	4293      	cmp	r3, r2
 8004814:	d901      	bls.n	800481a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e04f      	b.n	80048ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800481a:	4b2b      	ldr	r3, [pc, #172]	; (80048c8 <HAL_RCC_ClockConfig+0x1bc>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 020c 	and.w	r2, r3, #12
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	429a      	cmp	r2, r3
 800482a:	d1eb      	bne.n	8004804 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800482c:	4b25      	ldr	r3, [pc, #148]	; (80048c4 <HAL_RCC_ClockConfig+0x1b8>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	429a      	cmp	r2, r3
 8004838:	d20c      	bcs.n	8004854 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800483a:	4b22      	ldr	r3, [pc, #136]	; (80048c4 <HAL_RCC_ClockConfig+0x1b8>)
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	b2d2      	uxtb	r2, r2
 8004840:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004842:	4b20      	ldr	r3, [pc, #128]	; (80048c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0307 	and.w	r3, r3, #7
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	429a      	cmp	r2, r3
 800484e:	d001      	beq.n	8004854 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e032      	b.n	80048ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b00      	cmp	r3, #0
 800485e:	d008      	beq.n	8004872 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004860:	4b19      	ldr	r3, [pc, #100]	; (80048c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	4916      	ldr	r1, [pc, #88]	; (80048c8 <HAL_RCC_ClockConfig+0x1bc>)
 800486e:	4313      	orrs	r3, r2
 8004870:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	2b00      	cmp	r3, #0
 800487c:	d009      	beq.n	8004892 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800487e:	4b12      	ldr	r3, [pc, #72]	; (80048c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	490e      	ldr	r1, [pc, #56]	; (80048c8 <HAL_RCC_ClockConfig+0x1bc>)
 800488e:	4313      	orrs	r3, r2
 8004890:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004892:	f000 f821 	bl	80048d8 <HAL_RCC_GetSysClockFreq>
 8004896:	4602      	mov	r2, r0
 8004898:	4b0b      	ldr	r3, [pc, #44]	; (80048c8 <HAL_RCC_ClockConfig+0x1bc>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	091b      	lsrs	r3, r3, #4
 800489e:	f003 030f 	and.w	r3, r3, #15
 80048a2:	490a      	ldr	r1, [pc, #40]	; (80048cc <HAL_RCC_ClockConfig+0x1c0>)
 80048a4:	5ccb      	ldrb	r3, [r1, r3]
 80048a6:	fa22 f303 	lsr.w	r3, r2, r3
 80048aa:	4a09      	ldr	r2, [pc, #36]	; (80048d0 <HAL_RCC_ClockConfig+0x1c4>)
 80048ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048ae:	4b09      	ldr	r3, [pc, #36]	; (80048d4 <HAL_RCC_ClockConfig+0x1c8>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fe f90a 	bl	8002acc <HAL_InitTick>

  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	40023c00 	.word	0x40023c00
 80048c8:	40023800 	.word	0x40023800
 80048cc:	08009280 	.word	0x08009280
 80048d0:	20000000 	.word	0x20000000
 80048d4:	20000014 	.word	0x20000014

080048d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048dc:	b090      	sub	sp, #64	; 0x40
 80048de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048e0:	2300      	movs	r3, #0
 80048e2:	637b      	str	r3, [r7, #52]	; 0x34
 80048e4:	2300      	movs	r3, #0
 80048e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048e8:	2300      	movs	r3, #0
 80048ea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80048ec:	2300      	movs	r3, #0
 80048ee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048f0:	4b59      	ldr	r3, [pc, #356]	; (8004a58 <HAL_RCC_GetSysClockFreq+0x180>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f003 030c 	and.w	r3, r3, #12
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	d00d      	beq.n	8004918 <HAL_RCC_GetSysClockFreq+0x40>
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	f200 80a1 	bhi.w	8004a44 <HAL_RCC_GetSysClockFreq+0x16c>
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <HAL_RCC_GetSysClockFreq+0x34>
 8004906:	2b04      	cmp	r3, #4
 8004908:	d003      	beq.n	8004912 <HAL_RCC_GetSysClockFreq+0x3a>
 800490a:	e09b      	b.n	8004a44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800490c:	4b53      	ldr	r3, [pc, #332]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x184>)
 800490e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004910:	e09b      	b.n	8004a4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004912:	4b53      	ldr	r3, [pc, #332]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x188>)
 8004914:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004916:	e098      	b.n	8004a4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004918:	4b4f      	ldr	r3, [pc, #316]	; (8004a58 <HAL_RCC_GetSysClockFreq+0x180>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004920:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004922:	4b4d      	ldr	r3, [pc, #308]	; (8004a58 <HAL_RCC_GetSysClockFreq+0x180>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d028      	beq.n	8004980 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800492e:	4b4a      	ldr	r3, [pc, #296]	; (8004a58 <HAL_RCC_GetSysClockFreq+0x180>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	099b      	lsrs	r3, r3, #6
 8004934:	2200      	movs	r2, #0
 8004936:	623b      	str	r3, [r7, #32]
 8004938:	627a      	str	r2, [r7, #36]	; 0x24
 800493a:	6a3b      	ldr	r3, [r7, #32]
 800493c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004940:	2100      	movs	r1, #0
 8004942:	4b47      	ldr	r3, [pc, #284]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x188>)
 8004944:	fb03 f201 	mul.w	r2, r3, r1
 8004948:	2300      	movs	r3, #0
 800494a:	fb00 f303 	mul.w	r3, r0, r3
 800494e:	4413      	add	r3, r2
 8004950:	4a43      	ldr	r2, [pc, #268]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x188>)
 8004952:	fba0 1202 	umull	r1, r2, r0, r2
 8004956:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004958:	460a      	mov	r2, r1
 800495a:	62ba      	str	r2, [r7, #40]	; 0x28
 800495c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800495e:	4413      	add	r3, r2
 8004960:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004964:	2200      	movs	r2, #0
 8004966:	61bb      	str	r3, [r7, #24]
 8004968:	61fa      	str	r2, [r7, #28]
 800496a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800496e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004972:	f7fc f9c1 	bl	8000cf8 <__aeabi_uldivmod>
 8004976:	4602      	mov	r2, r0
 8004978:	460b      	mov	r3, r1
 800497a:	4613      	mov	r3, r2
 800497c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800497e:	e053      	b.n	8004a28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004980:	4b35      	ldr	r3, [pc, #212]	; (8004a58 <HAL_RCC_GetSysClockFreq+0x180>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	099b      	lsrs	r3, r3, #6
 8004986:	2200      	movs	r2, #0
 8004988:	613b      	str	r3, [r7, #16]
 800498a:	617a      	str	r2, [r7, #20]
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004992:	f04f 0b00 	mov.w	fp, #0
 8004996:	4652      	mov	r2, sl
 8004998:	465b      	mov	r3, fp
 800499a:	f04f 0000 	mov.w	r0, #0
 800499e:	f04f 0100 	mov.w	r1, #0
 80049a2:	0159      	lsls	r1, r3, #5
 80049a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049a8:	0150      	lsls	r0, r2, #5
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	ebb2 080a 	subs.w	r8, r2, sl
 80049b2:	eb63 090b 	sbc.w	r9, r3, fp
 80049b6:	f04f 0200 	mov.w	r2, #0
 80049ba:	f04f 0300 	mov.w	r3, #0
 80049be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80049c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80049c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80049ca:	ebb2 0408 	subs.w	r4, r2, r8
 80049ce:	eb63 0509 	sbc.w	r5, r3, r9
 80049d2:	f04f 0200 	mov.w	r2, #0
 80049d6:	f04f 0300 	mov.w	r3, #0
 80049da:	00eb      	lsls	r3, r5, #3
 80049dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049e0:	00e2      	lsls	r2, r4, #3
 80049e2:	4614      	mov	r4, r2
 80049e4:	461d      	mov	r5, r3
 80049e6:	eb14 030a 	adds.w	r3, r4, sl
 80049ea:	603b      	str	r3, [r7, #0]
 80049ec:	eb45 030b 	adc.w	r3, r5, fp
 80049f0:	607b      	str	r3, [r7, #4]
 80049f2:	f04f 0200 	mov.w	r2, #0
 80049f6:	f04f 0300 	mov.w	r3, #0
 80049fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049fe:	4629      	mov	r1, r5
 8004a00:	028b      	lsls	r3, r1, #10
 8004a02:	4621      	mov	r1, r4
 8004a04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a08:	4621      	mov	r1, r4
 8004a0a:	028a      	lsls	r2, r1, #10
 8004a0c:	4610      	mov	r0, r2
 8004a0e:	4619      	mov	r1, r3
 8004a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a12:	2200      	movs	r2, #0
 8004a14:	60bb      	str	r3, [r7, #8]
 8004a16:	60fa      	str	r2, [r7, #12]
 8004a18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a1c:	f7fc f96c 	bl	8000cf8 <__aeabi_uldivmod>
 8004a20:	4602      	mov	r2, r0
 8004a22:	460b      	mov	r3, r1
 8004a24:	4613      	mov	r3, r2
 8004a26:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a28:	4b0b      	ldr	r3, [pc, #44]	; (8004a58 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	0c1b      	lsrs	r3, r3, #16
 8004a2e:	f003 0303 	and.w	r3, r3, #3
 8004a32:	3301      	adds	r3, #1
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004a38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a40:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a42:	e002      	b.n	8004a4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a44:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x184>)
 8004a46:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3740      	adds	r7, #64	; 0x40
 8004a50:	46bd      	mov	sp, r7
 8004a52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a56:	bf00      	nop
 8004a58:	40023800 	.word	0x40023800
 8004a5c:	00f42400 	.word	0x00f42400
 8004a60:	017d7840 	.word	0x017d7840

08004a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a68:	4b03      	ldr	r3, [pc, #12]	; (8004a78 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	20000000 	.word	0x20000000

08004a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a80:	f7ff fff0 	bl	8004a64 <HAL_RCC_GetHCLKFreq>
 8004a84:	4602      	mov	r2, r0
 8004a86:	4b05      	ldr	r3, [pc, #20]	; (8004a9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	0a9b      	lsrs	r3, r3, #10
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	4903      	ldr	r1, [pc, #12]	; (8004aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a92:	5ccb      	ldrb	r3, [r1, r3]
 8004a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	40023800 	.word	0x40023800
 8004aa0:	08009290 	.word	0x08009290

08004aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004aa8:	f7ff ffdc 	bl	8004a64 <HAL_RCC_GetHCLKFreq>
 8004aac:	4602      	mov	r2, r0
 8004aae:	4b05      	ldr	r3, [pc, #20]	; (8004ac4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	0b5b      	lsrs	r3, r3, #13
 8004ab4:	f003 0307 	and.w	r3, r3, #7
 8004ab8:	4903      	ldr	r1, [pc, #12]	; (8004ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004aba:	5ccb      	ldrb	r3, [r1, r3]
 8004abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	40023800 	.word	0x40023800
 8004ac8:	08009290 	.word	0x08009290

08004acc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e03f      	b.n	8004b5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d106      	bne.n	8004af8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7fc fc42 	bl	800137c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2224      	movs	r2, #36	; 0x24
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68da      	ldr	r2, [r3, #12]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 fddf 	bl	80056d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	691a      	ldr	r2, [r3, #16]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	695a      	ldr	r2, [r3, #20]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68da      	ldr	r2, [r3, #12]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2220      	movs	r2, #32
 8004b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b08a      	sub	sp, #40	; 0x28
 8004b6a:	af02      	add	r7, sp, #8
 8004b6c:	60f8      	str	r0, [r7, #12]
 8004b6e:	60b9      	str	r1, [r7, #8]
 8004b70:	603b      	str	r3, [r7, #0]
 8004b72:	4613      	mov	r3, r2
 8004b74:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b20      	cmp	r3, #32
 8004b84:	d17c      	bne.n	8004c80 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d002      	beq.n	8004b92 <HAL_UART_Transmit+0x2c>
 8004b8c:	88fb      	ldrh	r3, [r7, #6]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e075      	b.n	8004c82 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d101      	bne.n	8004ba4 <HAL_UART_Transmit+0x3e>
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	e06e      	b.n	8004c82 <HAL_UART_Transmit+0x11c>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2221      	movs	r2, #33	; 0x21
 8004bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bba:	f7fd ffcb 	bl	8002b54 <HAL_GetTick>
 8004bbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	88fa      	ldrh	r2, [r7, #6]
 8004bc4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	88fa      	ldrh	r2, [r7, #6]
 8004bca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd4:	d108      	bne.n	8004be8 <HAL_UART_Transmit+0x82>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d104      	bne.n	8004be8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004bde:	2300      	movs	r3, #0
 8004be0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	61bb      	str	r3, [r7, #24]
 8004be6:	e003      	b.n	8004bf0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bec:	2300      	movs	r3, #0
 8004bee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004bf8:	e02a      	b.n	8004c50 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2200      	movs	r2, #0
 8004c02:	2180      	movs	r1, #128	; 0x80
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 fb1f 	bl	8005248 <UART_WaitOnFlagUntilTimeout>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d001      	beq.n	8004c14 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e036      	b.n	8004c82 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10b      	bne.n	8004c32 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	881b      	ldrh	r3, [r3, #0]
 8004c1e:	461a      	mov	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	3302      	adds	r3, #2
 8004c2e:	61bb      	str	r3, [r7, #24]
 8004c30:	e007      	b.n	8004c42 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	781a      	ldrb	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1cf      	bne.n	8004bfa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	2200      	movs	r2, #0
 8004c62:	2140      	movs	r1, #64	; 0x40
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 faef 	bl	8005248 <UART_WaitOnFlagUntilTimeout>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e006      	b.n	8004c82 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2220      	movs	r2, #32
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	e000      	b.n	8004c82 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004c80:	2302      	movs	r3, #2
  }
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3720      	adds	r7, #32
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b084      	sub	sp, #16
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	60f8      	str	r0, [r7, #12]
 8004c92:	60b9      	str	r1, [r7, #8]
 8004c94:	4613      	mov	r3, r2
 8004c96:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b20      	cmp	r3, #32
 8004ca2:	d11d      	bne.n	8004ce0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d002      	beq.n	8004cb0 <HAL_UART_Receive_IT+0x26>
 8004caa:	88fb      	ldrh	r3, [r7, #6]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d101      	bne.n	8004cb4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e016      	b.n	8004ce2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d101      	bne.n	8004cc2 <HAL_UART_Receive_IT+0x38>
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	e00f      	b.n	8004ce2 <HAL_UART_Receive_IT+0x58>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004cd0:	88fb      	ldrh	r3, [r7, #6]
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	68b9      	ldr	r1, [r7, #8]
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f000 fb24 	bl	8005324 <UART_Start_Receive_IT>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	e000      	b.n	8004ce2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004ce0:	2302      	movs	r3, #2
  }
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
	...

08004cec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b0ba      	sub	sp, #232	; 0xe8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d22:	f003 030f 	and.w	r3, r3, #15
 8004d26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004d2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10f      	bne.n	8004d52 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d36:	f003 0320 	and.w	r3, r3, #32
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d009      	beq.n	8004d52 <HAL_UART_IRQHandler+0x66>
 8004d3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d42:	f003 0320 	and.w	r3, r3, #32
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 fc07 	bl	800555e <UART_Receive_IT>
      return;
 8004d50:	e256      	b.n	8005200 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004d52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 80de 	beq.w	8004f18 <HAL_UART_IRQHandler+0x22c>
 8004d5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d106      	bne.n	8004d76 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d6c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 80d1 	beq.w	8004f18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00b      	beq.n	8004d9a <HAL_UART_IRQHandler+0xae>
 8004d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d005      	beq.n	8004d9a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	f043 0201 	orr.w	r2, r3, #1
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d9e:	f003 0304 	and.w	r3, r3, #4
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00b      	beq.n	8004dbe <HAL_UART_IRQHandler+0xd2>
 8004da6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d005      	beq.n	8004dbe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db6:	f043 0202 	orr.w	r2, r3, #2
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00b      	beq.n	8004de2 <HAL_UART_IRQHandler+0xf6>
 8004dca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d005      	beq.n	8004de2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	f043 0204 	orr.w	r2, r3, #4
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004de6:	f003 0308 	and.w	r3, r3, #8
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d011      	beq.n	8004e12 <HAL_UART_IRQHandler+0x126>
 8004dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004df2:	f003 0320 	and.w	r3, r3, #32
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d105      	bne.n	8004e06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004dfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d005      	beq.n	8004e12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0a:	f043 0208 	orr.w	r2, r3, #8
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 81ed 	beq.w	80051f6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e20:	f003 0320 	and.w	r3, r3, #32
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d008      	beq.n	8004e3a <HAL_UART_IRQHandler+0x14e>
 8004e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e2c:	f003 0320 	and.w	r3, r3, #32
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d002      	beq.n	8004e3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 fb92 	bl	800555e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e44:	2b40      	cmp	r3, #64	; 0x40
 8004e46:	bf0c      	ite	eq
 8004e48:	2301      	moveq	r3, #1
 8004e4a:	2300      	movne	r3, #0
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	f003 0308 	and.w	r3, r3, #8
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d103      	bne.n	8004e66 <HAL_UART_IRQHandler+0x17a>
 8004e5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d04f      	beq.n	8004f06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 fa9a 	bl	80053a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e76:	2b40      	cmp	r3, #64	; 0x40
 8004e78:	d141      	bne.n	8004efe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	3314      	adds	r3, #20
 8004e80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e88:	e853 3f00 	ldrex	r3, [r3]
 8004e8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004e90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	3314      	adds	r3, #20
 8004ea2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004ea6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004eaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004eb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004eb6:	e841 2300 	strex	r3, r2, [r1]
 8004eba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ebe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1d9      	bne.n	8004e7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d013      	beq.n	8004ef6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed2:	4a7d      	ldr	r2, [pc, #500]	; (80050c8 <HAL_UART_IRQHandler+0x3dc>)
 8004ed4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fd ffeb 	bl	8002eb6 <HAL_DMA_Abort_IT>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d016      	beq.n	8004f14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ef0:	4610      	mov	r0, r2
 8004ef2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ef4:	e00e      	b.n	8004f14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f990 	bl	800521c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004efc:	e00a      	b.n	8004f14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f98c 	bl	800521c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f04:	e006      	b.n	8004f14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f988 	bl	800521c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004f12:	e170      	b.n	80051f6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f14:	bf00      	nop
    return;
 8004f16:	e16e      	b.n	80051f6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	f040 814a 	bne.w	80051b6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f26:	f003 0310 	and.w	r3, r3, #16
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 8143 	beq.w	80051b6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f34:	f003 0310 	and.w	r3, r3, #16
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 813c 	beq.w	80051b6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f3e:	2300      	movs	r3, #0
 8004f40:	60bb      	str	r3, [r7, #8]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	60bb      	str	r3, [r7, #8]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	60bb      	str	r3, [r7, #8]
 8004f52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f5e:	2b40      	cmp	r3, #64	; 0x40
 8004f60:	f040 80b4 	bne.w	80050cc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 8140 	beq.w	80051fa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f82:	429a      	cmp	r2, r3
 8004f84:	f080 8139 	bcs.w	80051fa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f8e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f9a:	f000 8088 	beq.w	80050ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	330c      	adds	r3, #12
 8004fa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004fac:	e853 3f00 	ldrex	r3, [r3]
 8004fb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004fb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004fb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	330c      	adds	r3, #12
 8004fc6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004fca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004fce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004fd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004fda:	e841 2300 	strex	r3, r2, [r1]
 8004fde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004fe2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1d9      	bne.n	8004f9e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	3314      	adds	r3, #20
 8004ff0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ff4:	e853 3f00 	ldrex	r3, [r3]
 8004ff8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004ffa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ffc:	f023 0301 	bic.w	r3, r3, #1
 8005000:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	3314      	adds	r3, #20
 800500a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800500e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005012:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005014:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005016:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800501a:	e841 2300 	strex	r3, r2, [r1]
 800501e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005020:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1e1      	bne.n	8004fea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	3314      	adds	r3, #20
 800502c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005030:	e853 3f00 	ldrex	r3, [r3]
 8005034:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005036:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005038:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800503c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3314      	adds	r3, #20
 8005046:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800504a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800504c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005050:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005052:	e841 2300 	strex	r3, r2, [r1]
 8005056:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005058:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1e3      	bne.n	8005026 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2220      	movs	r2, #32
 8005062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	330c      	adds	r3, #12
 8005072:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005076:	e853 3f00 	ldrex	r3, [r3]
 800507a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800507c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800507e:	f023 0310 	bic.w	r3, r3, #16
 8005082:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	330c      	adds	r3, #12
 800508c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005090:	65ba      	str	r2, [r7, #88]	; 0x58
 8005092:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005094:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005096:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005098:	e841 2300 	strex	r3, r2, [r1]
 800509c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800509e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1e3      	bne.n	800506c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7fd fe94 	bl	8002dd6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	4619      	mov	r1, r3
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f8b6 	bl	8005230 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050c4:	e099      	b.n	80051fa <HAL_UART_IRQHandler+0x50e>
 80050c6:	bf00      	nop
 80050c8:	08005467 	.word	0x08005467
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	f000 808b 	beq.w	80051fe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80050e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 8086 	beq.w	80051fe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	330c      	adds	r3, #12
 80050f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fc:	e853 3f00 	ldrex	r3, [r3]
 8005100:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005104:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005108:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	330c      	adds	r3, #12
 8005112:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005116:	647a      	str	r2, [r7, #68]	; 0x44
 8005118:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800511c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800511e:	e841 2300 	strex	r3, r2, [r1]
 8005122:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1e3      	bne.n	80050f2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	3314      	adds	r3, #20
 8005130:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	e853 3f00 	ldrex	r3, [r3]
 8005138:	623b      	str	r3, [r7, #32]
   return(result);
 800513a:	6a3b      	ldr	r3, [r7, #32]
 800513c:	f023 0301 	bic.w	r3, r3, #1
 8005140:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	3314      	adds	r3, #20
 800514a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800514e:	633a      	str	r2, [r7, #48]	; 0x30
 8005150:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005152:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005156:	e841 2300 	strex	r3, r2, [r1]
 800515a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800515c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1e3      	bne.n	800512a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2220      	movs	r2, #32
 8005166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	330c      	adds	r3, #12
 8005176:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	e853 3f00 	ldrex	r3, [r3]
 800517e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f023 0310 	bic.w	r3, r3, #16
 8005186:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	330c      	adds	r3, #12
 8005190:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005194:	61fa      	str	r2, [r7, #28]
 8005196:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005198:	69b9      	ldr	r1, [r7, #24]
 800519a:	69fa      	ldr	r2, [r7, #28]
 800519c:	e841 2300 	strex	r3, r2, [r1]
 80051a0:	617b      	str	r3, [r7, #20]
   return(result);
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1e3      	bne.n	8005170 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80051ac:	4619      	mov	r1, r3
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f83e 	bl	8005230 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80051b4:	e023      	b.n	80051fe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80051b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d009      	beq.n	80051d6 <HAL_UART_IRQHandler+0x4ea>
 80051c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f95d 	bl	800548e <UART_Transmit_IT>
    return;
 80051d4:	e014      	b.n	8005200 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80051d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00e      	beq.n	8005200 <HAL_UART_IRQHandler+0x514>
 80051e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d008      	beq.n	8005200 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f99d 	bl	800552e <UART_EndTransmit_IT>
    return;
 80051f4:	e004      	b.n	8005200 <HAL_UART_IRQHandler+0x514>
    return;
 80051f6:	bf00      	nop
 80051f8:	e002      	b.n	8005200 <HAL_UART_IRQHandler+0x514>
      return;
 80051fa:	bf00      	nop
 80051fc:	e000      	b.n	8005200 <HAL_UART_IRQHandler+0x514>
      return;
 80051fe:	bf00      	nop
  }
}
 8005200:	37e8      	adds	r7, #232	; 0xe8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop

08005208 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	460b      	mov	r3, r1
 800523a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b090      	sub	sp, #64	; 0x40
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	603b      	str	r3, [r7, #0]
 8005254:	4613      	mov	r3, r2
 8005256:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005258:	e050      	b.n	80052fc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800525a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800525c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005260:	d04c      	beq.n	80052fc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005264:	2b00      	cmp	r3, #0
 8005266:	d007      	beq.n	8005278 <UART_WaitOnFlagUntilTimeout+0x30>
 8005268:	f7fd fc74 	bl	8002b54 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005274:	429a      	cmp	r2, r3
 8005276:	d241      	bcs.n	80052fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	330c      	adds	r3, #12
 800527e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005282:	e853 3f00 	ldrex	r3, [r3]
 8005286:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800528e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	330c      	adds	r3, #12
 8005296:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005298:	637a      	str	r2, [r7, #52]	; 0x34
 800529a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800529e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052a0:	e841 2300 	strex	r3, r2, [r1]
 80052a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1e5      	bne.n	8005278 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	3314      	adds	r3, #20
 80052b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	e853 3f00 	ldrex	r3, [r3]
 80052ba:	613b      	str	r3, [r7, #16]
   return(result);
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	f023 0301 	bic.w	r3, r3, #1
 80052c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	3314      	adds	r3, #20
 80052ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052cc:	623a      	str	r2, [r7, #32]
 80052ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d0:	69f9      	ldr	r1, [r7, #28]
 80052d2:	6a3a      	ldr	r2, [r7, #32]
 80052d4:	e841 2300 	strex	r3, r2, [r1]
 80052d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d1e5      	bne.n	80052ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2220      	movs	r2, #32
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2220      	movs	r2, #32
 80052ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e00f      	b.n	800531c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	4013      	ands	r3, r2
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	429a      	cmp	r2, r3
 800530a:	bf0c      	ite	eq
 800530c:	2301      	moveq	r3, #1
 800530e:	2300      	movne	r3, #0
 8005310:	b2db      	uxtb	r3, r3
 8005312:	461a      	mov	r2, r3
 8005314:	79fb      	ldrb	r3, [r7, #7]
 8005316:	429a      	cmp	r2, r3
 8005318:	d09f      	beq.n	800525a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3740      	adds	r7, #64	; 0x40
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	4613      	mov	r3, r2
 8005330:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	88fa      	ldrh	r2, [r7, #6]
 800533c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	88fa      	ldrh	r2, [r7, #6]
 8005342:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2222      	movs	r2, #34	; 0x22
 800534e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d007      	beq.n	8005372 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68da      	ldr	r2, [r3, #12]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005370:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	695a      	ldr	r2, [r3, #20]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f042 0201 	orr.w	r2, r2, #1
 8005380:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68da      	ldr	r2, [r3, #12]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f042 0220 	orr.w	r2, r2, #32
 8005390:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3714      	adds	r7, #20
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b095      	sub	sp, #84	; 0x54
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	330c      	adds	r3, #12
 80053ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b2:	e853 3f00 	ldrex	r3, [r3]
 80053b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	330c      	adds	r3, #12
 80053c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053c8:	643a      	str	r2, [r7, #64]	; 0x40
 80053ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053d0:	e841 2300 	strex	r3, r2, [r1]
 80053d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1e5      	bne.n	80053a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	3314      	adds	r3, #20
 80053e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e4:	6a3b      	ldr	r3, [r7, #32]
 80053e6:	e853 3f00 	ldrex	r3, [r3]
 80053ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	f023 0301 	bic.w	r3, r3, #1
 80053f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	3314      	adds	r3, #20
 80053fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005400:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005402:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005404:	e841 2300 	strex	r3, r2, [r1]
 8005408:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1e5      	bne.n	80053dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005414:	2b01      	cmp	r3, #1
 8005416:	d119      	bne.n	800544c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	330c      	adds	r3, #12
 800541e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	e853 3f00 	ldrex	r3, [r3]
 8005426:	60bb      	str	r3, [r7, #8]
   return(result);
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	f023 0310 	bic.w	r3, r3, #16
 800542e:	647b      	str	r3, [r7, #68]	; 0x44
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	330c      	adds	r3, #12
 8005436:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005438:	61ba      	str	r2, [r7, #24]
 800543a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543c:	6979      	ldr	r1, [r7, #20]
 800543e:	69ba      	ldr	r2, [r7, #24]
 8005440:	e841 2300 	strex	r3, r2, [r1]
 8005444:	613b      	str	r3, [r7, #16]
   return(result);
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1e5      	bne.n	8005418 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2220      	movs	r2, #32
 8005450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	631a      	str	r2, [r3, #48]	; 0x30
}
 800545a:	bf00      	nop
 800545c:	3754      	adds	r7, #84	; 0x54
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b084      	sub	sp, #16
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005472:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f7ff fecb 	bl	800521c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005486:	bf00      	nop
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800548e:	b480      	push	{r7}
 8005490:	b085      	sub	sp, #20
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b21      	cmp	r3, #33	; 0x21
 80054a0:	d13e      	bne.n	8005520 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054aa:	d114      	bne.n	80054d6 <UART_Transmit_IT+0x48>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d110      	bne.n	80054d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	461a      	mov	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	1c9a      	adds	r2, r3, #2
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	621a      	str	r2, [r3, #32]
 80054d4:	e008      	b.n	80054e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	1c59      	adds	r1, r3, #1
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	6211      	str	r1, [r2, #32]
 80054e0:	781a      	ldrb	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	3b01      	subs	r3, #1
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	4619      	mov	r1, r3
 80054f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10f      	bne.n	800551c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68da      	ldr	r2, [r3, #12]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800550a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68da      	ldr	r2, [r3, #12]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800551a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800551c:	2300      	movs	r3, #0
 800551e:	e000      	b.n	8005522 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005520:	2302      	movs	r3, #2
  }
}
 8005522:	4618      	mov	r0, r3
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b082      	sub	sp, #8
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68da      	ldr	r2, [r3, #12]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005544:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2220      	movs	r2, #32
 800554a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7ff fe5a 	bl	8005208 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3708      	adds	r7, #8
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b08c      	sub	sp, #48	; 0x30
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b22      	cmp	r3, #34	; 0x22
 8005570:	f040 80ab 	bne.w	80056ca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800557c:	d117      	bne.n	80055ae <UART_Receive_IT+0x50>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d113      	bne.n	80055ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005586:	2300      	movs	r3, #0
 8005588:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	b29b      	uxth	r3, r3
 8005598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800559c:	b29a      	uxth	r2, r3
 800559e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a6:	1c9a      	adds	r2, r3, #2
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	629a      	str	r2, [r3, #40]	; 0x28
 80055ac:	e026      	b.n	80055fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80055b4:	2300      	movs	r3, #0
 80055b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055c0:	d007      	beq.n	80055d2 <UART_Receive_IT+0x74>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10a      	bne.n	80055e0 <UART_Receive_IT+0x82>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d106      	bne.n	80055e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	b2da      	uxtb	r2, r3
 80055da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055dc:	701a      	strb	r2, [r3, #0]
 80055de:	e008      	b.n	80055f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055ec:	b2da      	uxtb	r2, r3
 80055ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f6:	1c5a      	adds	r2, r3, #1
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005600:	b29b      	uxth	r3, r3
 8005602:	3b01      	subs	r3, #1
 8005604:	b29b      	uxth	r3, r3
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	4619      	mov	r1, r3
 800560a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800560c:	2b00      	cmp	r3, #0
 800560e:	d15a      	bne.n	80056c6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68da      	ldr	r2, [r3, #12]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f022 0220 	bic.w	r2, r2, #32
 800561e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68da      	ldr	r2, [r3, #12]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800562e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	695a      	ldr	r2, [r3, #20]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f022 0201 	bic.w	r2, r2, #1
 800563e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2220      	movs	r2, #32
 8005644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564c:	2b01      	cmp	r3, #1
 800564e:	d135      	bne.n	80056bc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	330c      	adds	r3, #12
 800565c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	e853 3f00 	ldrex	r3, [r3]
 8005664:	613b      	str	r3, [r7, #16]
   return(result);
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	f023 0310 	bic.w	r3, r3, #16
 800566c:	627b      	str	r3, [r7, #36]	; 0x24
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	330c      	adds	r3, #12
 8005674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005676:	623a      	str	r2, [r7, #32]
 8005678:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567a:	69f9      	ldr	r1, [r7, #28]
 800567c:	6a3a      	ldr	r2, [r7, #32]
 800567e:	e841 2300 	strex	r3, r2, [r1]
 8005682:	61bb      	str	r3, [r7, #24]
   return(result);
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1e5      	bne.n	8005656 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0310 	and.w	r3, r3, #16
 8005694:	2b10      	cmp	r3, #16
 8005696:	d10a      	bne.n	80056ae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005698:	2300      	movs	r3, #0
 800569a:	60fb      	str	r3, [r7, #12]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	60fb      	str	r3, [r7, #12]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	60fb      	str	r3, [r7, #12]
 80056ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056b2:	4619      	mov	r1, r3
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f7ff fdbb 	bl	8005230 <HAL_UARTEx_RxEventCallback>
 80056ba:	e002      	b.n	80056c2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7fc f8bf 	bl	8001840 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80056c2:	2300      	movs	r3, #0
 80056c4:	e002      	b.n	80056cc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80056c6:	2300      	movs	r3, #0
 80056c8:	e000      	b.n	80056cc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80056ca:	2302      	movs	r3, #2
  }
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3730      	adds	r7, #48	; 0x30
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056d8:	b0c0      	sub	sp, #256	; 0x100
 80056da:	af00      	add	r7, sp, #0
 80056dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80056ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f0:	68d9      	ldr	r1, [r3, #12]
 80056f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	ea40 0301 	orr.w	r3, r0, r1
 80056fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	431a      	orrs	r2, r3
 800570c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	431a      	orrs	r2, r3
 8005714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	4313      	orrs	r3, r2
 800571c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800572c:	f021 010c 	bic.w	r1, r1, #12
 8005730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800573a:	430b      	orrs	r3, r1
 800573c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800573e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800574a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800574e:	6999      	ldr	r1, [r3, #24]
 8005750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	ea40 0301 	orr.w	r3, r0, r1
 800575a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800575c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	4b8f      	ldr	r3, [pc, #572]	; (80059a0 <UART_SetConfig+0x2cc>)
 8005764:	429a      	cmp	r2, r3
 8005766:	d005      	beq.n	8005774 <UART_SetConfig+0xa0>
 8005768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	4b8d      	ldr	r3, [pc, #564]	; (80059a4 <UART_SetConfig+0x2d0>)
 8005770:	429a      	cmp	r2, r3
 8005772:	d104      	bne.n	800577e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005774:	f7ff f996 	bl	8004aa4 <HAL_RCC_GetPCLK2Freq>
 8005778:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800577c:	e003      	b.n	8005786 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800577e:	f7ff f97d 	bl	8004a7c <HAL_RCC_GetPCLK1Freq>
 8005782:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800578a:	69db      	ldr	r3, [r3, #28]
 800578c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005790:	f040 810c 	bne.w	80059ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005794:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005798:	2200      	movs	r2, #0
 800579a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800579e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80057a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80057a6:	4622      	mov	r2, r4
 80057a8:	462b      	mov	r3, r5
 80057aa:	1891      	adds	r1, r2, r2
 80057ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80057ae:	415b      	adcs	r3, r3
 80057b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80057b6:	4621      	mov	r1, r4
 80057b8:	eb12 0801 	adds.w	r8, r2, r1
 80057bc:	4629      	mov	r1, r5
 80057be:	eb43 0901 	adc.w	r9, r3, r1
 80057c2:	f04f 0200 	mov.w	r2, #0
 80057c6:	f04f 0300 	mov.w	r3, #0
 80057ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057d6:	4690      	mov	r8, r2
 80057d8:	4699      	mov	r9, r3
 80057da:	4623      	mov	r3, r4
 80057dc:	eb18 0303 	adds.w	r3, r8, r3
 80057e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80057e4:	462b      	mov	r3, r5
 80057e6:	eb49 0303 	adc.w	r3, r9, r3
 80057ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80057ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80057fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80057fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005802:	460b      	mov	r3, r1
 8005804:	18db      	adds	r3, r3, r3
 8005806:	653b      	str	r3, [r7, #80]	; 0x50
 8005808:	4613      	mov	r3, r2
 800580a:	eb42 0303 	adc.w	r3, r2, r3
 800580e:	657b      	str	r3, [r7, #84]	; 0x54
 8005810:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005814:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005818:	f7fb fa6e 	bl	8000cf8 <__aeabi_uldivmod>
 800581c:	4602      	mov	r2, r0
 800581e:	460b      	mov	r3, r1
 8005820:	4b61      	ldr	r3, [pc, #388]	; (80059a8 <UART_SetConfig+0x2d4>)
 8005822:	fba3 2302 	umull	r2, r3, r3, r2
 8005826:	095b      	lsrs	r3, r3, #5
 8005828:	011c      	lsls	r4, r3, #4
 800582a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800582e:	2200      	movs	r2, #0
 8005830:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005834:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005838:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800583c:	4642      	mov	r2, r8
 800583e:	464b      	mov	r3, r9
 8005840:	1891      	adds	r1, r2, r2
 8005842:	64b9      	str	r1, [r7, #72]	; 0x48
 8005844:	415b      	adcs	r3, r3
 8005846:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005848:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800584c:	4641      	mov	r1, r8
 800584e:	eb12 0a01 	adds.w	sl, r2, r1
 8005852:	4649      	mov	r1, r9
 8005854:	eb43 0b01 	adc.w	fp, r3, r1
 8005858:	f04f 0200 	mov.w	r2, #0
 800585c:	f04f 0300 	mov.w	r3, #0
 8005860:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005864:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005868:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800586c:	4692      	mov	sl, r2
 800586e:	469b      	mov	fp, r3
 8005870:	4643      	mov	r3, r8
 8005872:	eb1a 0303 	adds.w	r3, sl, r3
 8005876:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800587a:	464b      	mov	r3, r9
 800587c:	eb4b 0303 	adc.w	r3, fp, r3
 8005880:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005890:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005894:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005898:	460b      	mov	r3, r1
 800589a:	18db      	adds	r3, r3, r3
 800589c:	643b      	str	r3, [r7, #64]	; 0x40
 800589e:	4613      	mov	r3, r2
 80058a0:	eb42 0303 	adc.w	r3, r2, r3
 80058a4:	647b      	str	r3, [r7, #68]	; 0x44
 80058a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80058aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80058ae:	f7fb fa23 	bl	8000cf8 <__aeabi_uldivmod>
 80058b2:	4602      	mov	r2, r0
 80058b4:	460b      	mov	r3, r1
 80058b6:	4611      	mov	r1, r2
 80058b8:	4b3b      	ldr	r3, [pc, #236]	; (80059a8 <UART_SetConfig+0x2d4>)
 80058ba:	fba3 2301 	umull	r2, r3, r3, r1
 80058be:	095b      	lsrs	r3, r3, #5
 80058c0:	2264      	movs	r2, #100	; 0x64
 80058c2:	fb02 f303 	mul.w	r3, r2, r3
 80058c6:	1acb      	subs	r3, r1, r3
 80058c8:	00db      	lsls	r3, r3, #3
 80058ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80058ce:	4b36      	ldr	r3, [pc, #216]	; (80059a8 <UART_SetConfig+0x2d4>)
 80058d0:	fba3 2302 	umull	r2, r3, r3, r2
 80058d4:	095b      	lsrs	r3, r3, #5
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80058dc:	441c      	add	r4, r3
 80058de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058e2:	2200      	movs	r2, #0
 80058e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80058ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80058f0:	4642      	mov	r2, r8
 80058f2:	464b      	mov	r3, r9
 80058f4:	1891      	adds	r1, r2, r2
 80058f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80058f8:	415b      	adcs	r3, r3
 80058fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005900:	4641      	mov	r1, r8
 8005902:	1851      	adds	r1, r2, r1
 8005904:	6339      	str	r1, [r7, #48]	; 0x30
 8005906:	4649      	mov	r1, r9
 8005908:	414b      	adcs	r3, r1
 800590a:	637b      	str	r3, [r7, #52]	; 0x34
 800590c:	f04f 0200 	mov.w	r2, #0
 8005910:	f04f 0300 	mov.w	r3, #0
 8005914:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005918:	4659      	mov	r1, fp
 800591a:	00cb      	lsls	r3, r1, #3
 800591c:	4651      	mov	r1, sl
 800591e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005922:	4651      	mov	r1, sl
 8005924:	00ca      	lsls	r2, r1, #3
 8005926:	4610      	mov	r0, r2
 8005928:	4619      	mov	r1, r3
 800592a:	4603      	mov	r3, r0
 800592c:	4642      	mov	r2, r8
 800592e:	189b      	adds	r3, r3, r2
 8005930:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005934:	464b      	mov	r3, r9
 8005936:	460a      	mov	r2, r1
 8005938:	eb42 0303 	adc.w	r3, r2, r3
 800593c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800594c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005950:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005954:	460b      	mov	r3, r1
 8005956:	18db      	adds	r3, r3, r3
 8005958:	62bb      	str	r3, [r7, #40]	; 0x28
 800595a:	4613      	mov	r3, r2
 800595c:	eb42 0303 	adc.w	r3, r2, r3
 8005960:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005962:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005966:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800596a:	f7fb f9c5 	bl	8000cf8 <__aeabi_uldivmod>
 800596e:	4602      	mov	r2, r0
 8005970:	460b      	mov	r3, r1
 8005972:	4b0d      	ldr	r3, [pc, #52]	; (80059a8 <UART_SetConfig+0x2d4>)
 8005974:	fba3 1302 	umull	r1, r3, r3, r2
 8005978:	095b      	lsrs	r3, r3, #5
 800597a:	2164      	movs	r1, #100	; 0x64
 800597c:	fb01 f303 	mul.w	r3, r1, r3
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	3332      	adds	r3, #50	; 0x32
 8005986:	4a08      	ldr	r2, [pc, #32]	; (80059a8 <UART_SetConfig+0x2d4>)
 8005988:	fba2 2303 	umull	r2, r3, r2, r3
 800598c:	095b      	lsrs	r3, r3, #5
 800598e:	f003 0207 	and.w	r2, r3, #7
 8005992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4422      	add	r2, r4
 800599a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800599c:	e106      	b.n	8005bac <UART_SetConfig+0x4d8>
 800599e:	bf00      	nop
 80059a0:	40011000 	.word	0x40011000
 80059a4:	40011400 	.word	0x40011400
 80059a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059b0:	2200      	movs	r2, #0
 80059b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80059b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80059ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80059be:	4642      	mov	r2, r8
 80059c0:	464b      	mov	r3, r9
 80059c2:	1891      	adds	r1, r2, r2
 80059c4:	6239      	str	r1, [r7, #32]
 80059c6:	415b      	adcs	r3, r3
 80059c8:	627b      	str	r3, [r7, #36]	; 0x24
 80059ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059ce:	4641      	mov	r1, r8
 80059d0:	1854      	adds	r4, r2, r1
 80059d2:	4649      	mov	r1, r9
 80059d4:	eb43 0501 	adc.w	r5, r3, r1
 80059d8:	f04f 0200 	mov.w	r2, #0
 80059dc:	f04f 0300 	mov.w	r3, #0
 80059e0:	00eb      	lsls	r3, r5, #3
 80059e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059e6:	00e2      	lsls	r2, r4, #3
 80059e8:	4614      	mov	r4, r2
 80059ea:	461d      	mov	r5, r3
 80059ec:	4643      	mov	r3, r8
 80059ee:	18e3      	adds	r3, r4, r3
 80059f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80059f4:	464b      	mov	r3, r9
 80059f6:	eb45 0303 	adc.w	r3, r5, r3
 80059fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80059fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a0e:	f04f 0200 	mov.w	r2, #0
 8005a12:	f04f 0300 	mov.w	r3, #0
 8005a16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005a1a:	4629      	mov	r1, r5
 8005a1c:	008b      	lsls	r3, r1, #2
 8005a1e:	4621      	mov	r1, r4
 8005a20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a24:	4621      	mov	r1, r4
 8005a26:	008a      	lsls	r2, r1, #2
 8005a28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005a2c:	f7fb f964 	bl	8000cf8 <__aeabi_uldivmod>
 8005a30:	4602      	mov	r2, r0
 8005a32:	460b      	mov	r3, r1
 8005a34:	4b60      	ldr	r3, [pc, #384]	; (8005bb8 <UART_SetConfig+0x4e4>)
 8005a36:	fba3 2302 	umull	r2, r3, r3, r2
 8005a3a:	095b      	lsrs	r3, r3, #5
 8005a3c:	011c      	lsls	r4, r3, #4
 8005a3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a42:	2200      	movs	r2, #0
 8005a44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005a4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005a50:	4642      	mov	r2, r8
 8005a52:	464b      	mov	r3, r9
 8005a54:	1891      	adds	r1, r2, r2
 8005a56:	61b9      	str	r1, [r7, #24]
 8005a58:	415b      	adcs	r3, r3
 8005a5a:	61fb      	str	r3, [r7, #28]
 8005a5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a60:	4641      	mov	r1, r8
 8005a62:	1851      	adds	r1, r2, r1
 8005a64:	6139      	str	r1, [r7, #16]
 8005a66:	4649      	mov	r1, r9
 8005a68:	414b      	adcs	r3, r1
 8005a6a:	617b      	str	r3, [r7, #20]
 8005a6c:	f04f 0200 	mov.w	r2, #0
 8005a70:	f04f 0300 	mov.w	r3, #0
 8005a74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a78:	4659      	mov	r1, fp
 8005a7a:	00cb      	lsls	r3, r1, #3
 8005a7c:	4651      	mov	r1, sl
 8005a7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a82:	4651      	mov	r1, sl
 8005a84:	00ca      	lsls	r2, r1, #3
 8005a86:	4610      	mov	r0, r2
 8005a88:	4619      	mov	r1, r3
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	4642      	mov	r2, r8
 8005a8e:	189b      	adds	r3, r3, r2
 8005a90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a94:	464b      	mov	r3, r9
 8005a96:	460a      	mov	r2, r1
 8005a98:	eb42 0303 	adc.w	r3, r2, r3
 8005a9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	67bb      	str	r3, [r7, #120]	; 0x78
 8005aaa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005aac:	f04f 0200 	mov.w	r2, #0
 8005ab0:	f04f 0300 	mov.w	r3, #0
 8005ab4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005ab8:	4649      	mov	r1, r9
 8005aba:	008b      	lsls	r3, r1, #2
 8005abc:	4641      	mov	r1, r8
 8005abe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ac2:	4641      	mov	r1, r8
 8005ac4:	008a      	lsls	r2, r1, #2
 8005ac6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005aca:	f7fb f915 	bl	8000cf8 <__aeabi_uldivmod>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	4611      	mov	r1, r2
 8005ad4:	4b38      	ldr	r3, [pc, #224]	; (8005bb8 <UART_SetConfig+0x4e4>)
 8005ad6:	fba3 2301 	umull	r2, r3, r3, r1
 8005ada:	095b      	lsrs	r3, r3, #5
 8005adc:	2264      	movs	r2, #100	; 0x64
 8005ade:	fb02 f303 	mul.w	r3, r2, r3
 8005ae2:	1acb      	subs	r3, r1, r3
 8005ae4:	011b      	lsls	r3, r3, #4
 8005ae6:	3332      	adds	r3, #50	; 0x32
 8005ae8:	4a33      	ldr	r2, [pc, #204]	; (8005bb8 <UART_SetConfig+0x4e4>)
 8005aea:	fba2 2303 	umull	r2, r3, r2, r3
 8005aee:	095b      	lsrs	r3, r3, #5
 8005af0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005af4:	441c      	add	r4, r3
 8005af6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005afa:	2200      	movs	r2, #0
 8005afc:	673b      	str	r3, [r7, #112]	; 0x70
 8005afe:	677a      	str	r2, [r7, #116]	; 0x74
 8005b00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005b04:	4642      	mov	r2, r8
 8005b06:	464b      	mov	r3, r9
 8005b08:	1891      	adds	r1, r2, r2
 8005b0a:	60b9      	str	r1, [r7, #8]
 8005b0c:	415b      	adcs	r3, r3
 8005b0e:	60fb      	str	r3, [r7, #12]
 8005b10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b14:	4641      	mov	r1, r8
 8005b16:	1851      	adds	r1, r2, r1
 8005b18:	6039      	str	r1, [r7, #0]
 8005b1a:	4649      	mov	r1, r9
 8005b1c:	414b      	adcs	r3, r1
 8005b1e:	607b      	str	r3, [r7, #4]
 8005b20:	f04f 0200 	mov.w	r2, #0
 8005b24:	f04f 0300 	mov.w	r3, #0
 8005b28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b2c:	4659      	mov	r1, fp
 8005b2e:	00cb      	lsls	r3, r1, #3
 8005b30:	4651      	mov	r1, sl
 8005b32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b36:	4651      	mov	r1, sl
 8005b38:	00ca      	lsls	r2, r1, #3
 8005b3a:	4610      	mov	r0, r2
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	4603      	mov	r3, r0
 8005b40:	4642      	mov	r2, r8
 8005b42:	189b      	adds	r3, r3, r2
 8005b44:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b46:	464b      	mov	r3, r9
 8005b48:	460a      	mov	r2, r1
 8005b4a:	eb42 0303 	adc.w	r3, r2, r3
 8005b4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	663b      	str	r3, [r7, #96]	; 0x60
 8005b5a:	667a      	str	r2, [r7, #100]	; 0x64
 8005b5c:	f04f 0200 	mov.w	r2, #0
 8005b60:	f04f 0300 	mov.w	r3, #0
 8005b64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005b68:	4649      	mov	r1, r9
 8005b6a:	008b      	lsls	r3, r1, #2
 8005b6c:	4641      	mov	r1, r8
 8005b6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b72:	4641      	mov	r1, r8
 8005b74:	008a      	lsls	r2, r1, #2
 8005b76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005b7a:	f7fb f8bd 	bl	8000cf8 <__aeabi_uldivmod>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	460b      	mov	r3, r1
 8005b82:	4b0d      	ldr	r3, [pc, #52]	; (8005bb8 <UART_SetConfig+0x4e4>)
 8005b84:	fba3 1302 	umull	r1, r3, r3, r2
 8005b88:	095b      	lsrs	r3, r3, #5
 8005b8a:	2164      	movs	r1, #100	; 0x64
 8005b8c:	fb01 f303 	mul.w	r3, r1, r3
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	011b      	lsls	r3, r3, #4
 8005b94:	3332      	adds	r3, #50	; 0x32
 8005b96:	4a08      	ldr	r2, [pc, #32]	; (8005bb8 <UART_SetConfig+0x4e4>)
 8005b98:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9c:	095b      	lsrs	r3, r3, #5
 8005b9e:	f003 020f 	and.w	r2, r3, #15
 8005ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4422      	add	r2, r4
 8005baa:	609a      	str	r2, [r3, #8]
}
 8005bac:	bf00      	nop
 8005bae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bb8:	51eb851f 	.word	0x51eb851f

08005bbc <atoi>:
 8005bbc:	220a      	movs	r2, #10
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	f000 b882 	b.w	8005cc8 <strtol>

08005bc4 <_strtol_l.constprop.0>:
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bca:	d001      	beq.n	8005bd0 <_strtol_l.constprop.0+0xc>
 8005bcc:	2b24      	cmp	r3, #36	; 0x24
 8005bce:	d906      	bls.n	8005bde <_strtol_l.constprop.0+0x1a>
 8005bd0:	f000 fe62 	bl	8006898 <__errno>
 8005bd4:	2316      	movs	r3, #22
 8005bd6:	6003      	str	r3, [r0, #0]
 8005bd8:	2000      	movs	r0, #0
 8005bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bde:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005cc4 <_strtol_l.constprop.0+0x100>
 8005be2:	460d      	mov	r5, r1
 8005be4:	462e      	mov	r6, r5
 8005be6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005bea:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8005bee:	f017 0708 	ands.w	r7, r7, #8
 8005bf2:	d1f7      	bne.n	8005be4 <_strtol_l.constprop.0+0x20>
 8005bf4:	2c2d      	cmp	r4, #45	; 0x2d
 8005bf6:	d132      	bne.n	8005c5e <_strtol_l.constprop.0+0x9a>
 8005bf8:	782c      	ldrb	r4, [r5, #0]
 8005bfa:	2701      	movs	r7, #1
 8005bfc:	1cb5      	adds	r5, r6, #2
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d05b      	beq.n	8005cba <_strtol_l.constprop.0+0xf6>
 8005c02:	2b10      	cmp	r3, #16
 8005c04:	d109      	bne.n	8005c1a <_strtol_l.constprop.0+0x56>
 8005c06:	2c30      	cmp	r4, #48	; 0x30
 8005c08:	d107      	bne.n	8005c1a <_strtol_l.constprop.0+0x56>
 8005c0a:	782c      	ldrb	r4, [r5, #0]
 8005c0c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005c10:	2c58      	cmp	r4, #88	; 0x58
 8005c12:	d14d      	bne.n	8005cb0 <_strtol_l.constprop.0+0xec>
 8005c14:	786c      	ldrb	r4, [r5, #1]
 8005c16:	2310      	movs	r3, #16
 8005c18:	3502      	adds	r5, #2
 8005c1a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005c1e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005c22:	f04f 0e00 	mov.w	lr, #0
 8005c26:	fbb8 f9f3 	udiv	r9, r8, r3
 8005c2a:	4676      	mov	r6, lr
 8005c2c:	fb03 8a19 	mls	sl, r3, r9, r8
 8005c30:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005c34:	f1bc 0f09 	cmp.w	ip, #9
 8005c38:	d816      	bhi.n	8005c68 <_strtol_l.constprop.0+0xa4>
 8005c3a:	4664      	mov	r4, ip
 8005c3c:	42a3      	cmp	r3, r4
 8005c3e:	dd24      	ble.n	8005c8a <_strtol_l.constprop.0+0xc6>
 8005c40:	f1be 3fff 	cmp.w	lr, #4294967295
 8005c44:	d008      	beq.n	8005c58 <_strtol_l.constprop.0+0x94>
 8005c46:	45b1      	cmp	r9, r6
 8005c48:	d31c      	bcc.n	8005c84 <_strtol_l.constprop.0+0xc0>
 8005c4a:	d101      	bne.n	8005c50 <_strtol_l.constprop.0+0x8c>
 8005c4c:	45a2      	cmp	sl, r4
 8005c4e:	db19      	blt.n	8005c84 <_strtol_l.constprop.0+0xc0>
 8005c50:	fb06 4603 	mla	r6, r6, r3, r4
 8005c54:	f04f 0e01 	mov.w	lr, #1
 8005c58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c5c:	e7e8      	b.n	8005c30 <_strtol_l.constprop.0+0x6c>
 8005c5e:	2c2b      	cmp	r4, #43	; 0x2b
 8005c60:	bf04      	itt	eq
 8005c62:	782c      	ldrbeq	r4, [r5, #0]
 8005c64:	1cb5      	addeq	r5, r6, #2
 8005c66:	e7ca      	b.n	8005bfe <_strtol_l.constprop.0+0x3a>
 8005c68:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005c6c:	f1bc 0f19 	cmp.w	ip, #25
 8005c70:	d801      	bhi.n	8005c76 <_strtol_l.constprop.0+0xb2>
 8005c72:	3c37      	subs	r4, #55	; 0x37
 8005c74:	e7e2      	b.n	8005c3c <_strtol_l.constprop.0+0x78>
 8005c76:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005c7a:	f1bc 0f19 	cmp.w	ip, #25
 8005c7e:	d804      	bhi.n	8005c8a <_strtol_l.constprop.0+0xc6>
 8005c80:	3c57      	subs	r4, #87	; 0x57
 8005c82:	e7db      	b.n	8005c3c <_strtol_l.constprop.0+0x78>
 8005c84:	f04f 3eff 	mov.w	lr, #4294967295
 8005c88:	e7e6      	b.n	8005c58 <_strtol_l.constprop.0+0x94>
 8005c8a:	f1be 3fff 	cmp.w	lr, #4294967295
 8005c8e:	d105      	bne.n	8005c9c <_strtol_l.constprop.0+0xd8>
 8005c90:	2322      	movs	r3, #34	; 0x22
 8005c92:	6003      	str	r3, [r0, #0]
 8005c94:	4646      	mov	r6, r8
 8005c96:	b942      	cbnz	r2, 8005caa <_strtol_l.constprop.0+0xe6>
 8005c98:	4630      	mov	r0, r6
 8005c9a:	e79e      	b.n	8005bda <_strtol_l.constprop.0+0x16>
 8005c9c:	b107      	cbz	r7, 8005ca0 <_strtol_l.constprop.0+0xdc>
 8005c9e:	4276      	negs	r6, r6
 8005ca0:	2a00      	cmp	r2, #0
 8005ca2:	d0f9      	beq.n	8005c98 <_strtol_l.constprop.0+0xd4>
 8005ca4:	f1be 0f00 	cmp.w	lr, #0
 8005ca8:	d000      	beq.n	8005cac <_strtol_l.constprop.0+0xe8>
 8005caa:	1e69      	subs	r1, r5, #1
 8005cac:	6011      	str	r1, [r2, #0]
 8005cae:	e7f3      	b.n	8005c98 <_strtol_l.constprop.0+0xd4>
 8005cb0:	2430      	movs	r4, #48	; 0x30
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1b1      	bne.n	8005c1a <_strtol_l.constprop.0+0x56>
 8005cb6:	2308      	movs	r3, #8
 8005cb8:	e7af      	b.n	8005c1a <_strtol_l.constprop.0+0x56>
 8005cba:	2c30      	cmp	r4, #48	; 0x30
 8005cbc:	d0a5      	beq.n	8005c0a <_strtol_l.constprop.0+0x46>
 8005cbe:	230a      	movs	r3, #10
 8005cc0:	e7ab      	b.n	8005c1a <_strtol_l.constprop.0+0x56>
 8005cc2:	bf00      	nop
 8005cc4:	08009299 	.word	0x08009299

08005cc8 <strtol>:
 8005cc8:	4613      	mov	r3, r2
 8005cca:	460a      	mov	r2, r1
 8005ccc:	4601      	mov	r1, r0
 8005cce:	4802      	ldr	r0, [pc, #8]	; (8005cd8 <strtol+0x10>)
 8005cd0:	6800      	ldr	r0, [r0, #0]
 8005cd2:	f7ff bf77 	b.w	8005bc4 <_strtol_l.constprop.0>
 8005cd6:	bf00      	nop
 8005cd8:	20000074 	.word	0x20000074

08005cdc <__cvt>:
 8005cdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ce0:	ec55 4b10 	vmov	r4, r5, d0
 8005ce4:	2d00      	cmp	r5, #0
 8005ce6:	460e      	mov	r6, r1
 8005ce8:	4619      	mov	r1, r3
 8005cea:	462b      	mov	r3, r5
 8005cec:	bfbb      	ittet	lt
 8005cee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005cf2:	461d      	movlt	r5, r3
 8005cf4:	2300      	movge	r3, #0
 8005cf6:	232d      	movlt	r3, #45	; 0x2d
 8005cf8:	700b      	strb	r3, [r1, #0]
 8005cfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cfc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005d00:	4691      	mov	r9, r2
 8005d02:	f023 0820 	bic.w	r8, r3, #32
 8005d06:	bfbc      	itt	lt
 8005d08:	4622      	movlt	r2, r4
 8005d0a:	4614      	movlt	r4, r2
 8005d0c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d10:	d005      	beq.n	8005d1e <__cvt+0x42>
 8005d12:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005d16:	d100      	bne.n	8005d1a <__cvt+0x3e>
 8005d18:	3601      	adds	r6, #1
 8005d1a:	2102      	movs	r1, #2
 8005d1c:	e000      	b.n	8005d20 <__cvt+0x44>
 8005d1e:	2103      	movs	r1, #3
 8005d20:	ab03      	add	r3, sp, #12
 8005d22:	9301      	str	r3, [sp, #4]
 8005d24:	ab02      	add	r3, sp, #8
 8005d26:	9300      	str	r3, [sp, #0]
 8005d28:	ec45 4b10 	vmov	d0, r4, r5
 8005d2c:	4653      	mov	r3, sl
 8005d2e:	4632      	mov	r2, r6
 8005d30:	f000 fe76 	bl	8006a20 <_dtoa_r>
 8005d34:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005d38:	4607      	mov	r7, r0
 8005d3a:	d102      	bne.n	8005d42 <__cvt+0x66>
 8005d3c:	f019 0f01 	tst.w	r9, #1
 8005d40:	d022      	beq.n	8005d88 <__cvt+0xac>
 8005d42:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d46:	eb07 0906 	add.w	r9, r7, r6
 8005d4a:	d110      	bne.n	8005d6e <__cvt+0x92>
 8005d4c:	783b      	ldrb	r3, [r7, #0]
 8005d4e:	2b30      	cmp	r3, #48	; 0x30
 8005d50:	d10a      	bne.n	8005d68 <__cvt+0x8c>
 8005d52:	2200      	movs	r2, #0
 8005d54:	2300      	movs	r3, #0
 8005d56:	4620      	mov	r0, r4
 8005d58:	4629      	mov	r1, r5
 8005d5a:	f7fa febd 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d5e:	b918      	cbnz	r0, 8005d68 <__cvt+0x8c>
 8005d60:	f1c6 0601 	rsb	r6, r6, #1
 8005d64:	f8ca 6000 	str.w	r6, [sl]
 8005d68:	f8da 3000 	ldr.w	r3, [sl]
 8005d6c:	4499      	add	r9, r3
 8005d6e:	2200      	movs	r2, #0
 8005d70:	2300      	movs	r3, #0
 8005d72:	4620      	mov	r0, r4
 8005d74:	4629      	mov	r1, r5
 8005d76:	f7fa feaf 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d7a:	b108      	cbz	r0, 8005d80 <__cvt+0xa4>
 8005d7c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005d80:	2230      	movs	r2, #48	; 0x30
 8005d82:	9b03      	ldr	r3, [sp, #12]
 8005d84:	454b      	cmp	r3, r9
 8005d86:	d307      	bcc.n	8005d98 <__cvt+0xbc>
 8005d88:	9b03      	ldr	r3, [sp, #12]
 8005d8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d8c:	1bdb      	subs	r3, r3, r7
 8005d8e:	4638      	mov	r0, r7
 8005d90:	6013      	str	r3, [r2, #0]
 8005d92:	b004      	add	sp, #16
 8005d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d98:	1c59      	adds	r1, r3, #1
 8005d9a:	9103      	str	r1, [sp, #12]
 8005d9c:	701a      	strb	r2, [r3, #0]
 8005d9e:	e7f0      	b.n	8005d82 <__cvt+0xa6>

08005da0 <__exponent>:
 8005da0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005da2:	4603      	mov	r3, r0
 8005da4:	2900      	cmp	r1, #0
 8005da6:	bfb8      	it	lt
 8005da8:	4249      	neglt	r1, r1
 8005daa:	f803 2b02 	strb.w	r2, [r3], #2
 8005dae:	bfb4      	ite	lt
 8005db0:	222d      	movlt	r2, #45	; 0x2d
 8005db2:	222b      	movge	r2, #43	; 0x2b
 8005db4:	2909      	cmp	r1, #9
 8005db6:	7042      	strb	r2, [r0, #1]
 8005db8:	dd2a      	ble.n	8005e10 <__exponent+0x70>
 8005dba:	f10d 0207 	add.w	r2, sp, #7
 8005dbe:	4617      	mov	r7, r2
 8005dc0:	260a      	movs	r6, #10
 8005dc2:	4694      	mov	ip, r2
 8005dc4:	fb91 f5f6 	sdiv	r5, r1, r6
 8005dc8:	fb06 1415 	mls	r4, r6, r5, r1
 8005dcc:	3430      	adds	r4, #48	; 0x30
 8005dce:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005dd2:	460c      	mov	r4, r1
 8005dd4:	2c63      	cmp	r4, #99	; 0x63
 8005dd6:	f102 32ff 	add.w	r2, r2, #4294967295
 8005dda:	4629      	mov	r1, r5
 8005ddc:	dcf1      	bgt.n	8005dc2 <__exponent+0x22>
 8005dde:	3130      	adds	r1, #48	; 0x30
 8005de0:	f1ac 0402 	sub.w	r4, ip, #2
 8005de4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005de8:	1c41      	adds	r1, r0, #1
 8005dea:	4622      	mov	r2, r4
 8005dec:	42ba      	cmp	r2, r7
 8005dee:	d30a      	bcc.n	8005e06 <__exponent+0x66>
 8005df0:	f10d 0209 	add.w	r2, sp, #9
 8005df4:	eba2 020c 	sub.w	r2, r2, ip
 8005df8:	42bc      	cmp	r4, r7
 8005dfa:	bf88      	it	hi
 8005dfc:	2200      	movhi	r2, #0
 8005dfe:	4413      	add	r3, r2
 8005e00:	1a18      	subs	r0, r3, r0
 8005e02:	b003      	add	sp, #12
 8005e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e06:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005e0a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005e0e:	e7ed      	b.n	8005dec <__exponent+0x4c>
 8005e10:	2330      	movs	r3, #48	; 0x30
 8005e12:	3130      	adds	r1, #48	; 0x30
 8005e14:	7083      	strb	r3, [r0, #2]
 8005e16:	70c1      	strb	r1, [r0, #3]
 8005e18:	1d03      	adds	r3, r0, #4
 8005e1a:	e7f1      	b.n	8005e00 <__exponent+0x60>

08005e1c <_printf_float>:
 8005e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e20:	ed2d 8b02 	vpush	{d8}
 8005e24:	b08d      	sub	sp, #52	; 0x34
 8005e26:	460c      	mov	r4, r1
 8005e28:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005e2c:	4616      	mov	r6, r2
 8005e2e:	461f      	mov	r7, r3
 8005e30:	4605      	mov	r5, r0
 8005e32:	f000 fce7 	bl	8006804 <_localeconv_r>
 8005e36:	f8d0 a000 	ldr.w	sl, [r0]
 8005e3a:	4650      	mov	r0, sl
 8005e3c:	f7fa fa20 	bl	8000280 <strlen>
 8005e40:	2300      	movs	r3, #0
 8005e42:	930a      	str	r3, [sp, #40]	; 0x28
 8005e44:	6823      	ldr	r3, [r4, #0]
 8005e46:	9305      	str	r3, [sp, #20]
 8005e48:	f8d8 3000 	ldr.w	r3, [r8]
 8005e4c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005e50:	3307      	adds	r3, #7
 8005e52:	f023 0307 	bic.w	r3, r3, #7
 8005e56:	f103 0208 	add.w	r2, r3, #8
 8005e5a:	f8c8 2000 	str.w	r2, [r8]
 8005e5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005e66:	9307      	str	r3, [sp, #28]
 8005e68:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e6c:	ee08 0a10 	vmov	s16, r0
 8005e70:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005e74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e78:	4b9e      	ldr	r3, [pc, #632]	; (80060f4 <_printf_float+0x2d8>)
 8005e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e7e:	f7fa fe5d 	bl	8000b3c <__aeabi_dcmpun>
 8005e82:	bb88      	cbnz	r0, 8005ee8 <_printf_float+0xcc>
 8005e84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e88:	4b9a      	ldr	r3, [pc, #616]	; (80060f4 <_printf_float+0x2d8>)
 8005e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e8e:	f7fa fe37 	bl	8000b00 <__aeabi_dcmple>
 8005e92:	bb48      	cbnz	r0, 8005ee8 <_printf_float+0xcc>
 8005e94:	2200      	movs	r2, #0
 8005e96:	2300      	movs	r3, #0
 8005e98:	4640      	mov	r0, r8
 8005e9a:	4649      	mov	r1, r9
 8005e9c:	f7fa fe26 	bl	8000aec <__aeabi_dcmplt>
 8005ea0:	b110      	cbz	r0, 8005ea8 <_printf_float+0x8c>
 8005ea2:	232d      	movs	r3, #45	; 0x2d
 8005ea4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ea8:	4a93      	ldr	r2, [pc, #588]	; (80060f8 <_printf_float+0x2dc>)
 8005eaa:	4b94      	ldr	r3, [pc, #592]	; (80060fc <_printf_float+0x2e0>)
 8005eac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005eb0:	bf94      	ite	ls
 8005eb2:	4690      	movls	r8, r2
 8005eb4:	4698      	movhi	r8, r3
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	6123      	str	r3, [r4, #16]
 8005eba:	9b05      	ldr	r3, [sp, #20]
 8005ebc:	f023 0304 	bic.w	r3, r3, #4
 8005ec0:	6023      	str	r3, [r4, #0]
 8005ec2:	f04f 0900 	mov.w	r9, #0
 8005ec6:	9700      	str	r7, [sp, #0]
 8005ec8:	4633      	mov	r3, r6
 8005eca:	aa0b      	add	r2, sp, #44	; 0x2c
 8005ecc:	4621      	mov	r1, r4
 8005ece:	4628      	mov	r0, r5
 8005ed0:	f000 f9da 	bl	8006288 <_printf_common>
 8005ed4:	3001      	adds	r0, #1
 8005ed6:	f040 8090 	bne.w	8005ffa <_printf_float+0x1de>
 8005eda:	f04f 30ff 	mov.w	r0, #4294967295
 8005ede:	b00d      	add	sp, #52	; 0x34
 8005ee0:	ecbd 8b02 	vpop	{d8}
 8005ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ee8:	4642      	mov	r2, r8
 8005eea:	464b      	mov	r3, r9
 8005eec:	4640      	mov	r0, r8
 8005eee:	4649      	mov	r1, r9
 8005ef0:	f7fa fe24 	bl	8000b3c <__aeabi_dcmpun>
 8005ef4:	b140      	cbz	r0, 8005f08 <_printf_float+0xec>
 8005ef6:	464b      	mov	r3, r9
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	bfbc      	itt	lt
 8005efc:	232d      	movlt	r3, #45	; 0x2d
 8005efe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005f02:	4a7f      	ldr	r2, [pc, #508]	; (8006100 <_printf_float+0x2e4>)
 8005f04:	4b7f      	ldr	r3, [pc, #508]	; (8006104 <_printf_float+0x2e8>)
 8005f06:	e7d1      	b.n	8005eac <_printf_float+0x90>
 8005f08:	6863      	ldr	r3, [r4, #4]
 8005f0a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005f0e:	9206      	str	r2, [sp, #24]
 8005f10:	1c5a      	adds	r2, r3, #1
 8005f12:	d13f      	bne.n	8005f94 <_printf_float+0x178>
 8005f14:	2306      	movs	r3, #6
 8005f16:	6063      	str	r3, [r4, #4]
 8005f18:	9b05      	ldr	r3, [sp, #20]
 8005f1a:	6861      	ldr	r1, [r4, #4]
 8005f1c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005f20:	2300      	movs	r3, #0
 8005f22:	9303      	str	r3, [sp, #12]
 8005f24:	ab0a      	add	r3, sp, #40	; 0x28
 8005f26:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005f2a:	ab09      	add	r3, sp, #36	; 0x24
 8005f2c:	ec49 8b10 	vmov	d0, r8, r9
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	6022      	str	r2, [r4, #0]
 8005f34:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005f38:	4628      	mov	r0, r5
 8005f3a:	f7ff fecf 	bl	8005cdc <__cvt>
 8005f3e:	9b06      	ldr	r3, [sp, #24]
 8005f40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f42:	2b47      	cmp	r3, #71	; 0x47
 8005f44:	4680      	mov	r8, r0
 8005f46:	d108      	bne.n	8005f5a <_printf_float+0x13e>
 8005f48:	1cc8      	adds	r0, r1, #3
 8005f4a:	db02      	blt.n	8005f52 <_printf_float+0x136>
 8005f4c:	6863      	ldr	r3, [r4, #4]
 8005f4e:	4299      	cmp	r1, r3
 8005f50:	dd41      	ble.n	8005fd6 <_printf_float+0x1ba>
 8005f52:	f1ab 0302 	sub.w	r3, fp, #2
 8005f56:	fa5f fb83 	uxtb.w	fp, r3
 8005f5a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f5e:	d820      	bhi.n	8005fa2 <_printf_float+0x186>
 8005f60:	3901      	subs	r1, #1
 8005f62:	465a      	mov	r2, fp
 8005f64:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005f68:	9109      	str	r1, [sp, #36]	; 0x24
 8005f6a:	f7ff ff19 	bl	8005da0 <__exponent>
 8005f6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f70:	1813      	adds	r3, r2, r0
 8005f72:	2a01      	cmp	r2, #1
 8005f74:	4681      	mov	r9, r0
 8005f76:	6123      	str	r3, [r4, #16]
 8005f78:	dc02      	bgt.n	8005f80 <_printf_float+0x164>
 8005f7a:	6822      	ldr	r2, [r4, #0]
 8005f7c:	07d2      	lsls	r2, r2, #31
 8005f7e:	d501      	bpl.n	8005f84 <_printf_float+0x168>
 8005f80:	3301      	adds	r3, #1
 8005f82:	6123      	str	r3, [r4, #16]
 8005f84:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d09c      	beq.n	8005ec6 <_printf_float+0xaa>
 8005f8c:	232d      	movs	r3, #45	; 0x2d
 8005f8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f92:	e798      	b.n	8005ec6 <_printf_float+0xaa>
 8005f94:	9a06      	ldr	r2, [sp, #24]
 8005f96:	2a47      	cmp	r2, #71	; 0x47
 8005f98:	d1be      	bne.n	8005f18 <_printf_float+0xfc>
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1bc      	bne.n	8005f18 <_printf_float+0xfc>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e7b9      	b.n	8005f16 <_printf_float+0xfa>
 8005fa2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005fa6:	d118      	bne.n	8005fda <_printf_float+0x1be>
 8005fa8:	2900      	cmp	r1, #0
 8005faa:	6863      	ldr	r3, [r4, #4]
 8005fac:	dd0b      	ble.n	8005fc6 <_printf_float+0x1aa>
 8005fae:	6121      	str	r1, [r4, #16]
 8005fb0:	b913      	cbnz	r3, 8005fb8 <_printf_float+0x19c>
 8005fb2:	6822      	ldr	r2, [r4, #0]
 8005fb4:	07d0      	lsls	r0, r2, #31
 8005fb6:	d502      	bpl.n	8005fbe <_printf_float+0x1a2>
 8005fb8:	3301      	adds	r3, #1
 8005fba:	440b      	add	r3, r1
 8005fbc:	6123      	str	r3, [r4, #16]
 8005fbe:	65a1      	str	r1, [r4, #88]	; 0x58
 8005fc0:	f04f 0900 	mov.w	r9, #0
 8005fc4:	e7de      	b.n	8005f84 <_printf_float+0x168>
 8005fc6:	b913      	cbnz	r3, 8005fce <_printf_float+0x1b2>
 8005fc8:	6822      	ldr	r2, [r4, #0]
 8005fca:	07d2      	lsls	r2, r2, #31
 8005fcc:	d501      	bpl.n	8005fd2 <_printf_float+0x1b6>
 8005fce:	3302      	adds	r3, #2
 8005fd0:	e7f4      	b.n	8005fbc <_printf_float+0x1a0>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e7f2      	b.n	8005fbc <_printf_float+0x1a0>
 8005fd6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005fda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fdc:	4299      	cmp	r1, r3
 8005fde:	db05      	blt.n	8005fec <_printf_float+0x1d0>
 8005fe0:	6823      	ldr	r3, [r4, #0]
 8005fe2:	6121      	str	r1, [r4, #16]
 8005fe4:	07d8      	lsls	r0, r3, #31
 8005fe6:	d5ea      	bpl.n	8005fbe <_printf_float+0x1a2>
 8005fe8:	1c4b      	adds	r3, r1, #1
 8005fea:	e7e7      	b.n	8005fbc <_printf_float+0x1a0>
 8005fec:	2900      	cmp	r1, #0
 8005fee:	bfd4      	ite	le
 8005ff0:	f1c1 0202 	rsble	r2, r1, #2
 8005ff4:	2201      	movgt	r2, #1
 8005ff6:	4413      	add	r3, r2
 8005ff8:	e7e0      	b.n	8005fbc <_printf_float+0x1a0>
 8005ffa:	6823      	ldr	r3, [r4, #0]
 8005ffc:	055a      	lsls	r2, r3, #21
 8005ffe:	d407      	bmi.n	8006010 <_printf_float+0x1f4>
 8006000:	6923      	ldr	r3, [r4, #16]
 8006002:	4642      	mov	r2, r8
 8006004:	4631      	mov	r1, r6
 8006006:	4628      	mov	r0, r5
 8006008:	47b8      	blx	r7
 800600a:	3001      	adds	r0, #1
 800600c:	d12c      	bne.n	8006068 <_printf_float+0x24c>
 800600e:	e764      	b.n	8005eda <_printf_float+0xbe>
 8006010:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006014:	f240 80e0 	bls.w	80061d8 <_printf_float+0x3bc>
 8006018:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800601c:	2200      	movs	r2, #0
 800601e:	2300      	movs	r3, #0
 8006020:	f7fa fd5a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006024:	2800      	cmp	r0, #0
 8006026:	d034      	beq.n	8006092 <_printf_float+0x276>
 8006028:	4a37      	ldr	r2, [pc, #220]	; (8006108 <_printf_float+0x2ec>)
 800602a:	2301      	movs	r3, #1
 800602c:	4631      	mov	r1, r6
 800602e:	4628      	mov	r0, r5
 8006030:	47b8      	blx	r7
 8006032:	3001      	adds	r0, #1
 8006034:	f43f af51 	beq.w	8005eda <_printf_float+0xbe>
 8006038:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800603c:	429a      	cmp	r2, r3
 800603e:	db02      	blt.n	8006046 <_printf_float+0x22a>
 8006040:	6823      	ldr	r3, [r4, #0]
 8006042:	07d8      	lsls	r0, r3, #31
 8006044:	d510      	bpl.n	8006068 <_printf_float+0x24c>
 8006046:	ee18 3a10 	vmov	r3, s16
 800604a:	4652      	mov	r2, sl
 800604c:	4631      	mov	r1, r6
 800604e:	4628      	mov	r0, r5
 8006050:	47b8      	blx	r7
 8006052:	3001      	adds	r0, #1
 8006054:	f43f af41 	beq.w	8005eda <_printf_float+0xbe>
 8006058:	f04f 0800 	mov.w	r8, #0
 800605c:	f104 091a 	add.w	r9, r4, #26
 8006060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006062:	3b01      	subs	r3, #1
 8006064:	4543      	cmp	r3, r8
 8006066:	dc09      	bgt.n	800607c <_printf_float+0x260>
 8006068:	6823      	ldr	r3, [r4, #0]
 800606a:	079b      	lsls	r3, r3, #30
 800606c:	f100 8107 	bmi.w	800627e <_printf_float+0x462>
 8006070:	68e0      	ldr	r0, [r4, #12]
 8006072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006074:	4298      	cmp	r0, r3
 8006076:	bfb8      	it	lt
 8006078:	4618      	movlt	r0, r3
 800607a:	e730      	b.n	8005ede <_printf_float+0xc2>
 800607c:	2301      	movs	r3, #1
 800607e:	464a      	mov	r2, r9
 8006080:	4631      	mov	r1, r6
 8006082:	4628      	mov	r0, r5
 8006084:	47b8      	blx	r7
 8006086:	3001      	adds	r0, #1
 8006088:	f43f af27 	beq.w	8005eda <_printf_float+0xbe>
 800608c:	f108 0801 	add.w	r8, r8, #1
 8006090:	e7e6      	b.n	8006060 <_printf_float+0x244>
 8006092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006094:	2b00      	cmp	r3, #0
 8006096:	dc39      	bgt.n	800610c <_printf_float+0x2f0>
 8006098:	4a1b      	ldr	r2, [pc, #108]	; (8006108 <_printf_float+0x2ec>)
 800609a:	2301      	movs	r3, #1
 800609c:	4631      	mov	r1, r6
 800609e:	4628      	mov	r0, r5
 80060a0:	47b8      	blx	r7
 80060a2:	3001      	adds	r0, #1
 80060a4:	f43f af19 	beq.w	8005eda <_printf_float+0xbe>
 80060a8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80060ac:	4313      	orrs	r3, r2
 80060ae:	d102      	bne.n	80060b6 <_printf_float+0x29a>
 80060b0:	6823      	ldr	r3, [r4, #0]
 80060b2:	07d9      	lsls	r1, r3, #31
 80060b4:	d5d8      	bpl.n	8006068 <_printf_float+0x24c>
 80060b6:	ee18 3a10 	vmov	r3, s16
 80060ba:	4652      	mov	r2, sl
 80060bc:	4631      	mov	r1, r6
 80060be:	4628      	mov	r0, r5
 80060c0:	47b8      	blx	r7
 80060c2:	3001      	adds	r0, #1
 80060c4:	f43f af09 	beq.w	8005eda <_printf_float+0xbe>
 80060c8:	f04f 0900 	mov.w	r9, #0
 80060cc:	f104 0a1a 	add.w	sl, r4, #26
 80060d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060d2:	425b      	negs	r3, r3
 80060d4:	454b      	cmp	r3, r9
 80060d6:	dc01      	bgt.n	80060dc <_printf_float+0x2c0>
 80060d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060da:	e792      	b.n	8006002 <_printf_float+0x1e6>
 80060dc:	2301      	movs	r3, #1
 80060de:	4652      	mov	r2, sl
 80060e0:	4631      	mov	r1, r6
 80060e2:	4628      	mov	r0, r5
 80060e4:	47b8      	blx	r7
 80060e6:	3001      	adds	r0, #1
 80060e8:	f43f aef7 	beq.w	8005eda <_printf_float+0xbe>
 80060ec:	f109 0901 	add.w	r9, r9, #1
 80060f0:	e7ee      	b.n	80060d0 <_printf_float+0x2b4>
 80060f2:	bf00      	nop
 80060f4:	7fefffff 	.word	0x7fefffff
 80060f8:	08009399 	.word	0x08009399
 80060fc:	0800939d 	.word	0x0800939d
 8006100:	080093a1 	.word	0x080093a1
 8006104:	080093a5 	.word	0x080093a5
 8006108:	080093a9 	.word	0x080093a9
 800610c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800610e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006110:	429a      	cmp	r2, r3
 8006112:	bfa8      	it	ge
 8006114:	461a      	movge	r2, r3
 8006116:	2a00      	cmp	r2, #0
 8006118:	4691      	mov	r9, r2
 800611a:	dc37      	bgt.n	800618c <_printf_float+0x370>
 800611c:	f04f 0b00 	mov.w	fp, #0
 8006120:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006124:	f104 021a 	add.w	r2, r4, #26
 8006128:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800612a:	9305      	str	r3, [sp, #20]
 800612c:	eba3 0309 	sub.w	r3, r3, r9
 8006130:	455b      	cmp	r3, fp
 8006132:	dc33      	bgt.n	800619c <_printf_float+0x380>
 8006134:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006138:	429a      	cmp	r2, r3
 800613a:	db3b      	blt.n	80061b4 <_printf_float+0x398>
 800613c:	6823      	ldr	r3, [r4, #0]
 800613e:	07da      	lsls	r2, r3, #31
 8006140:	d438      	bmi.n	80061b4 <_printf_float+0x398>
 8006142:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006146:	eba2 0903 	sub.w	r9, r2, r3
 800614a:	9b05      	ldr	r3, [sp, #20]
 800614c:	1ad2      	subs	r2, r2, r3
 800614e:	4591      	cmp	r9, r2
 8006150:	bfa8      	it	ge
 8006152:	4691      	movge	r9, r2
 8006154:	f1b9 0f00 	cmp.w	r9, #0
 8006158:	dc35      	bgt.n	80061c6 <_printf_float+0x3aa>
 800615a:	f04f 0800 	mov.w	r8, #0
 800615e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006162:	f104 0a1a 	add.w	sl, r4, #26
 8006166:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800616a:	1a9b      	subs	r3, r3, r2
 800616c:	eba3 0309 	sub.w	r3, r3, r9
 8006170:	4543      	cmp	r3, r8
 8006172:	f77f af79 	ble.w	8006068 <_printf_float+0x24c>
 8006176:	2301      	movs	r3, #1
 8006178:	4652      	mov	r2, sl
 800617a:	4631      	mov	r1, r6
 800617c:	4628      	mov	r0, r5
 800617e:	47b8      	blx	r7
 8006180:	3001      	adds	r0, #1
 8006182:	f43f aeaa 	beq.w	8005eda <_printf_float+0xbe>
 8006186:	f108 0801 	add.w	r8, r8, #1
 800618a:	e7ec      	b.n	8006166 <_printf_float+0x34a>
 800618c:	4613      	mov	r3, r2
 800618e:	4631      	mov	r1, r6
 8006190:	4642      	mov	r2, r8
 8006192:	4628      	mov	r0, r5
 8006194:	47b8      	blx	r7
 8006196:	3001      	adds	r0, #1
 8006198:	d1c0      	bne.n	800611c <_printf_float+0x300>
 800619a:	e69e      	b.n	8005eda <_printf_float+0xbe>
 800619c:	2301      	movs	r3, #1
 800619e:	4631      	mov	r1, r6
 80061a0:	4628      	mov	r0, r5
 80061a2:	9205      	str	r2, [sp, #20]
 80061a4:	47b8      	blx	r7
 80061a6:	3001      	adds	r0, #1
 80061a8:	f43f ae97 	beq.w	8005eda <_printf_float+0xbe>
 80061ac:	9a05      	ldr	r2, [sp, #20]
 80061ae:	f10b 0b01 	add.w	fp, fp, #1
 80061b2:	e7b9      	b.n	8006128 <_printf_float+0x30c>
 80061b4:	ee18 3a10 	vmov	r3, s16
 80061b8:	4652      	mov	r2, sl
 80061ba:	4631      	mov	r1, r6
 80061bc:	4628      	mov	r0, r5
 80061be:	47b8      	blx	r7
 80061c0:	3001      	adds	r0, #1
 80061c2:	d1be      	bne.n	8006142 <_printf_float+0x326>
 80061c4:	e689      	b.n	8005eda <_printf_float+0xbe>
 80061c6:	9a05      	ldr	r2, [sp, #20]
 80061c8:	464b      	mov	r3, r9
 80061ca:	4442      	add	r2, r8
 80061cc:	4631      	mov	r1, r6
 80061ce:	4628      	mov	r0, r5
 80061d0:	47b8      	blx	r7
 80061d2:	3001      	adds	r0, #1
 80061d4:	d1c1      	bne.n	800615a <_printf_float+0x33e>
 80061d6:	e680      	b.n	8005eda <_printf_float+0xbe>
 80061d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061da:	2a01      	cmp	r2, #1
 80061dc:	dc01      	bgt.n	80061e2 <_printf_float+0x3c6>
 80061de:	07db      	lsls	r3, r3, #31
 80061e0:	d53a      	bpl.n	8006258 <_printf_float+0x43c>
 80061e2:	2301      	movs	r3, #1
 80061e4:	4642      	mov	r2, r8
 80061e6:	4631      	mov	r1, r6
 80061e8:	4628      	mov	r0, r5
 80061ea:	47b8      	blx	r7
 80061ec:	3001      	adds	r0, #1
 80061ee:	f43f ae74 	beq.w	8005eda <_printf_float+0xbe>
 80061f2:	ee18 3a10 	vmov	r3, s16
 80061f6:	4652      	mov	r2, sl
 80061f8:	4631      	mov	r1, r6
 80061fa:	4628      	mov	r0, r5
 80061fc:	47b8      	blx	r7
 80061fe:	3001      	adds	r0, #1
 8006200:	f43f ae6b 	beq.w	8005eda <_printf_float+0xbe>
 8006204:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006208:	2200      	movs	r2, #0
 800620a:	2300      	movs	r3, #0
 800620c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006210:	f7fa fc62 	bl	8000ad8 <__aeabi_dcmpeq>
 8006214:	b9d8      	cbnz	r0, 800624e <_printf_float+0x432>
 8006216:	f10a 33ff 	add.w	r3, sl, #4294967295
 800621a:	f108 0201 	add.w	r2, r8, #1
 800621e:	4631      	mov	r1, r6
 8006220:	4628      	mov	r0, r5
 8006222:	47b8      	blx	r7
 8006224:	3001      	adds	r0, #1
 8006226:	d10e      	bne.n	8006246 <_printf_float+0x42a>
 8006228:	e657      	b.n	8005eda <_printf_float+0xbe>
 800622a:	2301      	movs	r3, #1
 800622c:	4652      	mov	r2, sl
 800622e:	4631      	mov	r1, r6
 8006230:	4628      	mov	r0, r5
 8006232:	47b8      	blx	r7
 8006234:	3001      	adds	r0, #1
 8006236:	f43f ae50 	beq.w	8005eda <_printf_float+0xbe>
 800623a:	f108 0801 	add.w	r8, r8, #1
 800623e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006240:	3b01      	subs	r3, #1
 8006242:	4543      	cmp	r3, r8
 8006244:	dcf1      	bgt.n	800622a <_printf_float+0x40e>
 8006246:	464b      	mov	r3, r9
 8006248:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800624c:	e6da      	b.n	8006004 <_printf_float+0x1e8>
 800624e:	f04f 0800 	mov.w	r8, #0
 8006252:	f104 0a1a 	add.w	sl, r4, #26
 8006256:	e7f2      	b.n	800623e <_printf_float+0x422>
 8006258:	2301      	movs	r3, #1
 800625a:	4642      	mov	r2, r8
 800625c:	e7df      	b.n	800621e <_printf_float+0x402>
 800625e:	2301      	movs	r3, #1
 8006260:	464a      	mov	r2, r9
 8006262:	4631      	mov	r1, r6
 8006264:	4628      	mov	r0, r5
 8006266:	47b8      	blx	r7
 8006268:	3001      	adds	r0, #1
 800626a:	f43f ae36 	beq.w	8005eda <_printf_float+0xbe>
 800626e:	f108 0801 	add.w	r8, r8, #1
 8006272:	68e3      	ldr	r3, [r4, #12]
 8006274:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006276:	1a5b      	subs	r3, r3, r1
 8006278:	4543      	cmp	r3, r8
 800627a:	dcf0      	bgt.n	800625e <_printf_float+0x442>
 800627c:	e6f8      	b.n	8006070 <_printf_float+0x254>
 800627e:	f04f 0800 	mov.w	r8, #0
 8006282:	f104 0919 	add.w	r9, r4, #25
 8006286:	e7f4      	b.n	8006272 <_printf_float+0x456>

08006288 <_printf_common>:
 8006288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800628c:	4616      	mov	r6, r2
 800628e:	4699      	mov	r9, r3
 8006290:	688a      	ldr	r2, [r1, #8]
 8006292:	690b      	ldr	r3, [r1, #16]
 8006294:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006298:	4293      	cmp	r3, r2
 800629a:	bfb8      	it	lt
 800629c:	4613      	movlt	r3, r2
 800629e:	6033      	str	r3, [r6, #0]
 80062a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062a4:	4607      	mov	r7, r0
 80062a6:	460c      	mov	r4, r1
 80062a8:	b10a      	cbz	r2, 80062ae <_printf_common+0x26>
 80062aa:	3301      	adds	r3, #1
 80062ac:	6033      	str	r3, [r6, #0]
 80062ae:	6823      	ldr	r3, [r4, #0]
 80062b0:	0699      	lsls	r1, r3, #26
 80062b2:	bf42      	ittt	mi
 80062b4:	6833      	ldrmi	r3, [r6, #0]
 80062b6:	3302      	addmi	r3, #2
 80062b8:	6033      	strmi	r3, [r6, #0]
 80062ba:	6825      	ldr	r5, [r4, #0]
 80062bc:	f015 0506 	ands.w	r5, r5, #6
 80062c0:	d106      	bne.n	80062d0 <_printf_common+0x48>
 80062c2:	f104 0a19 	add.w	sl, r4, #25
 80062c6:	68e3      	ldr	r3, [r4, #12]
 80062c8:	6832      	ldr	r2, [r6, #0]
 80062ca:	1a9b      	subs	r3, r3, r2
 80062cc:	42ab      	cmp	r3, r5
 80062ce:	dc26      	bgt.n	800631e <_printf_common+0x96>
 80062d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062d4:	1e13      	subs	r3, r2, #0
 80062d6:	6822      	ldr	r2, [r4, #0]
 80062d8:	bf18      	it	ne
 80062da:	2301      	movne	r3, #1
 80062dc:	0692      	lsls	r2, r2, #26
 80062de:	d42b      	bmi.n	8006338 <_printf_common+0xb0>
 80062e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062e4:	4649      	mov	r1, r9
 80062e6:	4638      	mov	r0, r7
 80062e8:	47c0      	blx	r8
 80062ea:	3001      	adds	r0, #1
 80062ec:	d01e      	beq.n	800632c <_printf_common+0xa4>
 80062ee:	6823      	ldr	r3, [r4, #0]
 80062f0:	6922      	ldr	r2, [r4, #16]
 80062f2:	f003 0306 	and.w	r3, r3, #6
 80062f6:	2b04      	cmp	r3, #4
 80062f8:	bf02      	ittt	eq
 80062fa:	68e5      	ldreq	r5, [r4, #12]
 80062fc:	6833      	ldreq	r3, [r6, #0]
 80062fe:	1aed      	subeq	r5, r5, r3
 8006300:	68a3      	ldr	r3, [r4, #8]
 8006302:	bf0c      	ite	eq
 8006304:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006308:	2500      	movne	r5, #0
 800630a:	4293      	cmp	r3, r2
 800630c:	bfc4      	itt	gt
 800630e:	1a9b      	subgt	r3, r3, r2
 8006310:	18ed      	addgt	r5, r5, r3
 8006312:	2600      	movs	r6, #0
 8006314:	341a      	adds	r4, #26
 8006316:	42b5      	cmp	r5, r6
 8006318:	d11a      	bne.n	8006350 <_printf_common+0xc8>
 800631a:	2000      	movs	r0, #0
 800631c:	e008      	b.n	8006330 <_printf_common+0xa8>
 800631e:	2301      	movs	r3, #1
 8006320:	4652      	mov	r2, sl
 8006322:	4649      	mov	r1, r9
 8006324:	4638      	mov	r0, r7
 8006326:	47c0      	blx	r8
 8006328:	3001      	adds	r0, #1
 800632a:	d103      	bne.n	8006334 <_printf_common+0xac>
 800632c:	f04f 30ff 	mov.w	r0, #4294967295
 8006330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006334:	3501      	adds	r5, #1
 8006336:	e7c6      	b.n	80062c6 <_printf_common+0x3e>
 8006338:	18e1      	adds	r1, r4, r3
 800633a:	1c5a      	adds	r2, r3, #1
 800633c:	2030      	movs	r0, #48	; 0x30
 800633e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006342:	4422      	add	r2, r4
 8006344:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006348:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800634c:	3302      	adds	r3, #2
 800634e:	e7c7      	b.n	80062e0 <_printf_common+0x58>
 8006350:	2301      	movs	r3, #1
 8006352:	4622      	mov	r2, r4
 8006354:	4649      	mov	r1, r9
 8006356:	4638      	mov	r0, r7
 8006358:	47c0      	blx	r8
 800635a:	3001      	adds	r0, #1
 800635c:	d0e6      	beq.n	800632c <_printf_common+0xa4>
 800635e:	3601      	adds	r6, #1
 8006360:	e7d9      	b.n	8006316 <_printf_common+0x8e>
	...

08006364 <_printf_i>:
 8006364:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006368:	7e0f      	ldrb	r7, [r1, #24]
 800636a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800636c:	2f78      	cmp	r7, #120	; 0x78
 800636e:	4691      	mov	r9, r2
 8006370:	4680      	mov	r8, r0
 8006372:	460c      	mov	r4, r1
 8006374:	469a      	mov	sl, r3
 8006376:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800637a:	d807      	bhi.n	800638c <_printf_i+0x28>
 800637c:	2f62      	cmp	r7, #98	; 0x62
 800637e:	d80a      	bhi.n	8006396 <_printf_i+0x32>
 8006380:	2f00      	cmp	r7, #0
 8006382:	f000 80d4 	beq.w	800652e <_printf_i+0x1ca>
 8006386:	2f58      	cmp	r7, #88	; 0x58
 8006388:	f000 80c0 	beq.w	800650c <_printf_i+0x1a8>
 800638c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006390:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006394:	e03a      	b.n	800640c <_printf_i+0xa8>
 8006396:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800639a:	2b15      	cmp	r3, #21
 800639c:	d8f6      	bhi.n	800638c <_printf_i+0x28>
 800639e:	a101      	add	r1, pc, #4	; (adr r1, 80063a4 <_printf_i+0x40>)
 80063a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063a4:	080063fd 	.word	0x080063fd
 80063a8:	08006411 	.word	0x08006411
 80063ac:	0800638d 	.word	0x0800638d
 80063b0:	0800638d 	.word	0x0800638d
 80063b4:	0800638d 	.word	0x0800638d
 80063b8:	0800638d 	.word	0x0800638d
 80063bc:	08006411 	.word	0x08006411
 80063c0:	0800638d 	.word	0x0800638d
 80063c4:	0800638d 	.word	0x0800638d
 80063c8:	0800638d 	.word	0x0800638d
 80063cc:	0800638d 	.word	0x0800638d
 80063d0:	08006515 	.word	0x08006515
 80063d4:	0800643d 	.word	0x0800643d
 80063d8:	080064cf 	.word	0x080064cf
 80063dc:	0800638d 	.word	0x0800638d
 80063e0:	0800638d 	.word	0x0800638d
 80063e4:	08006537 	.word	0x08006537
 80063e8:	0800638d 	.word	0x0800638d
 80063ec:	0800643d 	.word	0x0800643d
 80063f0:	0800638d 	.word	0x0800638d
 80063f4:	0800638d 	.word	0x0800638d
 80063f8:	080064d7 	.word	0x080064d7
 80063fc:	682b      	ldr	r3, [r5, #0]
 80063fe:	1d1a      	adds	r2, r3, #4
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	602a      	str	r2, [r5, #0]
 8006404:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006408:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800640c:	2301      	movs	r3, #1
 800640e:	e09f      	b.n	8006550 <_printf_i+0x1ec>
 8006410:	6820      	ldr	r0, [r4, #0]
 8006412:	682b      	ldr	r3, [r5, #0]
 8006414:	0607      	lsls	r7, r0, #24
 8006416:	f103 0104 	add.w	r1, r3, #4
 800641a:	6029      	str	r1, [r5, #0]
 800641c:	d501      	bpl.n	8006422 <_printf_i+0xbe>
 800641e:	681e      	ldr	r6, [r3, #0]
 8006420:	e003      	b.n	800642a <_printf_i+0xc6>
 8006422:	0646      	lsls	r6, r0, #25
 8006424:	d5fb      	bpl.n	800641e <_printf_i+0xba>
 8006426:	f9b3 6000 	ldrsh.w	r6, [r3]
 800642a:	2e00      	cmp	r6, #0
 800642c:	da03      	bge.n	8006436 <_printf_i+0xd2>
 800642e:	232d      	movs	r3, #45	; 0x2d
 8006430:	4276      	negs	r6, r6
 8006432:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006436:	485a      	ldr	r0, [pc, #360]	; (80065a0 <_printf_i+0x23c>)
 8006438:	230a      	movs	r3, #10
 800643a:	e012      	b.n	8006462 <_printf_i+0xfe>
 800643c:	682b      	ldr	r3, [r5, #0]
 800643e:	6820      	ldr	r0, [r4, #0]
 8006440:	1d19      	adds	r1, r3, #4
 8006442:	6029      	str	r1, [r5, #0]
 8006444:	0605      	lsls	r5, r0, #24
 8006446:	d501      	bpl.n	800644c <_printf_i+0xe8>
 8006448:	681e      	ldr	r6, [r3, #0]
 800644a:	e002      	b.n	8006452 <_printf_i+0xee>
 800644c:	0641      	lsls	r1, r0, #25
 800644e:	d5fb      	bpl.n	8006448 <_printf_i+0xe4>
 8006450:	881e      	ldrh	r6, [r3, #0]
 8006452:	4853      	ldr	r0, [pc, #332]	; (80065a0 <_printf_i+0x23c>)
 8006454:	2f6f      	cmp	r7, #111	; 0x6f
 8006456:	bf0c      	ite	eq
 8006458:	2308      	moveq	r3, #8
 800645a:	230a      	movne	r3, #10
 800645c:	2100      	movs	r1, #0
 800645e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006462:	6865      	ldr	r5, [r4, #4]
 8006464:	60a5      	str	r5, [r4, #8]
 8006466:	2d00      	cmp	r5, #0
 8006468:	bfa2      	ittt	ge
 800646a:	6821      	ldrge	r1, [r4, #0]
 800646c:	f021 0104 	bicge.w	r1, r1, #4
 8006470:	6021      	strge	r1, [r4, #0]
 8006472:	b90e      	cbnz	r6, 8006478 <_printf_i+0x114>
 8006474:	2d00      	cmp	r5, #0
 8006476:	d04b      	beq.n	8006510 <_printf_i+0x1ac>
 8006478:	4615      	mov	r5, r2
 800647a:	fbb6 f1f3 	udiv	r1, r6, r3
 800647e:	fb03 6711 	mls	r7, r3, r1, r6
 8006482:	5dc7      	ldrb	r7, [r0, r7]
 8006484:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006488:	4637      	mov	r7, r6
 800648a:	42bb      	cmp	r3, r7
 800648c:	460e      	mov	r6, r1
 800648e:	d9f4      	bls.n	800647a <_printf_i+0x116>
 8006490:	2b08      	cmp	r3, #8
 8006492:	d10b      	bne.n	80064ac <_printf_i+0x148>
 8006494:	6823      	ldr	r3, [r4, #0]
 8006496:	07de      	lsls	r6, r3, #31
 8006498:	d508      	bpl.n	80064ac <_printf_i+0x148>
 800649a:	6923      	ldr	r3, [r4, #16]
 800649c:	6861      	ldr	r1, [r4, #4]
 800649e:	4299      	cmp	r1, r3
 80064a0:	bfde      	ittt	le
 80064a2:	2330      	movle	r3, #48	; 0x30
 80064a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064ac:	1b52      	subs	r2, r2, r5
 80064ae:	6122      	str	r2, [r4, #16]
 80064b0:	f8cd a000 	str.w	sl, [sp]
 80064b4:	464b      	mov	r3, r9
 80064b6:	aa03      	add	r2, sp, #12
 80064b8:	4621      	mov	r1, r4
 80064ba:	4640      	mov	r0, r8
 80064bc:	f7ff fee4 	bl	8006288 <_printf_common>
 80064c0:	3001      	adds	r0, #1
 80064c2:	d14a      	bne.n	800655a <_printf_i+0x1f6>
 80064c4:	f04f 30ff 	mov.w	r0, #4294967295
 80064c8:	b004      	add	sp, #16
 80064ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ce:	6823      	ldr	r3, [r4, #0]
 80064d0:	f043 0320 	orr.w	r3, r3, #32
 80064d4:	6023      	str	r3, [r4, #0]
 80064d6:	4833      	ldr	r0, [pc, #204]	; (80065a4 <_printf_i+0x240>)
 80064d8:	2778      	movs	r7, #120	; 0x78
 80064da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80064de:	6823      	ldr	r3, [r4, #0]
 80064e0:	6829      	ldr	r1, [r5, #0]
 80064e2:	061f      	lsls	r7, r3, #24
 80064e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80064e8:	d402      	bmi.n	80064f0 <_printf_i+0x18c>
 80064ea:	065f      	lsls	r7, r3, #25
 80064ec:	bf48      	it	mi
 80064ee:	b2b6      	uxthmi	r6, r6
 80064f0:	07df      	lsls	r7, r3, #31
 80064f2:	bf48      	it	mi
 80064f4:	f043 0320 	orrmi.w	r3, r3, #32
 80064f8:	6029      	str	r1, [r5, #0]
 80064fa:	bf48      	it	mi
 80064fc:	6023      	strmi	r3, [r4, #0]
 80064fe:	b91e      	cbnz	r6, 8006508 <_printf_i+0x1a4>
 8006500:	6823      	ldr	r3, [r4, #0]
 8006502:	f023 0320 	bic.w	r3, r3, #32
 8006506:	6023      	str	r3, [r4, #0]
 8006508:	2310      	movs	r3, #16
 800650a:	e7a7      	b.n	800645c <_printf_i+0xf8>
 800650c:	4824      	ldr	r0, [pc, #144]	; (80065a0 <_printf_i+0x23c>)
 800650e:	e7e4      	b.n	80064da <_printf_i+0x176>
 8006510:	4615      	mov	r5, r2
 8006512:	e7bd      	b.n	8006490 <_printf_i+0x12c>
 8006514:	682b      	ldr	r3, [r5, #0]
 8006516:	6826      	ldr	r6, [r4, #0]
 8006518:	6961      	ldr	r1, [r4, #20]
 800651a:	1d18      	adds	r0, r3, #4
 800651c:	6028      	str	r0, [r5, #0]
 800651e:	0635      	lsls	r5, r6, #24
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	d501      	bpl.n	8006528 <_printf_i+0x1c4>
 8006524:	6019      	str	r1, [r3, #0]
 8006526:	e002      	b.n	800652e <_printf_i+0x1ca>
 8006528:	0670      	lsls	r0, r6, #25
 800652a:	d5fb      	bpl.n	8006524 <_printf_i+0x1c0>
 800652c:	8019      	strh	r1, [r3, #0]
 800652e:	2300      	movs	r3, #0
 8006530:	6123      	str	r3, [r4, #16]
 8006532:	4615      	mov	r5, r2
 8006534:	e7bc      	b.n	80064b0 <_printf_i+0x14c>
 8006536:	682b      	ldr	r3, [r5, #0]
 8006538:	1d1a      	adds	r2, r3, #4
 800653a:	602a      	str	r2, [r5, #0]
 800653c:	681d      	ldr	r5, [r3, #0]
 800653e:	6862      	ldr	r2, [r4, #4]
 8006540:	2100      	movs	r1, #0
 8006542:	4628      	mov	r0, r5
 8006544:	f7f9 fe4c 	bl	80001e0 <memchr>
 8006548:	b108      	cbz	r0, 800654e <_printf_i+0x1ea>
 800654a:	1b40      	subs	r0, r0, r5
 800654c:	6060      	str	r0, [r4, #4]
 800654e:	6863      	ldr	r3, [r4, #4]
 8006550:	6123      	str	r3, [r4, #16]
 8006552:	2300      	movs	r3, #0
 8006554:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006558:	e7aa      	b.n	80064b0 <_printf_i+0x14c>
 800655a:	6923      	ldr	r3, [r4, #16]
 800655c:	462a      	mov	r2, r5
 800655e:	4649      	mov	r1, r9
 8006560:	4640      	mov	r0, r8
 8006562:	47d0      	blx	sl
 8006564:	3001      	adds	r0, #1
 8006566:	d0ad      	beq.n	80064c4 <_printf_i+0x160>
 8006568:	6823      	ldr	r3, [r4, #0]
 800656a:	079b      	lsls	r3, r3, #30
 800656c:	d413      	bmi.n	8006596 <_printf_i+0x232>
 800656e:	68e0      	ldr	r0, [r4, #12]
 8006570:	9b03      	ldr	r3, [sp, #12]
 8006572:	4298      	cmp	r0, r3
 8006574:	bfb8      	it	lt
 8006576:	4618      	movlt	r0, r3
 8006578:	e7a6      	b.n	80064c8 <_printf_i+0x164>
 800657a:	2301      	movs	r3, #1
 800657c:	4632      	mov	r2, r6
 800657e:	4649      	mov	r1, r9
 8006580:	4640      	mov	r0, r8
 8006582:	47d0      	blx	sl
 8006584:	3001      	adds	r0, #1
 8006586:	d09d      	beq.n	80064c4 <_printf_i+0x160>
 8006588:	3501      	adds	r5, #1
 800658a:	68e3      	ldr	r3, [r4, #12]
 800658c:	9903      	ldr	r1, [sp, #12]
 800658e:	1a5b      	subs	r3, r3, r1
 8006590:	42ab      	cmp	r3, r5
 8006592:	dcf2      	bgt.n	800657a <_printf_i+0x216>
 8006594:	e7eb      	b.n	800656e <_printf_i+0x20a>
 8006596:	2500      	movs	r5, #0
 8006598:	f104 0619 	add.w	r6, r4, #25
 800659c:	e7f5      	b.n	800658a <_printf_i+0x226>
 800659e:	bf00      	nop
 80065a0:	080093ab 	.word	0x080093ab
 80065a4:	080093bc 	.word	0x080093bc

080065a8 <std>:
 80065a8:	2300      	movs	r3, #0
 80065aa:	b510      	push	{r4, lr}
 80065ac:	4604      	mov	r4, r0
 80065ae:	e9c0 3300 	strd	r3, r3, [r0]
 80065b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065b6:	6083      	str	r3, [r0, #8]
 80065b8:	8181      	strh	r1, [r0, #12]
 80065ba:	6643      	str	r3, [r0, #100]	; 0x64
 80065bc:	81c2      	strh	r2, [r0, #14]
 80065be:	6183      	str	r3, [r0, #24]
 80065c0:	4619      	mov	r1, r3
 80065c2:	2208      	movs	r2, #8
 80065c4:	305c      	adds	r0, #92	; 0x5c
 80065c6:	f000 f914 	bl	80067f2 <memset>
 80065ca:	4b0d      	ldr	r3, [pc, #52]	; (8006600 <std+0x58>)
 80065cc:	6263      	str	r3, [r4, #36]	; 0x24
 80065ce:	4b0d      	ldr	r3, [pc, #52]	; (8006604 <std+0x5c>)
 80065d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80065d2:	4b0d      	ldr	r3, [pc, #52]	; (8006608 <std+0x60>)
 80065d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80065d6:	4b0d      	ldr	r3, [pc, #52]	; (800660c <std+0x64>)
 80065d8:	6323      	str	r3, [r4, #48]	; 0x30
 80065da:	4b0d      	ldr	r3, [pc, #52]	; (8006610 <std+0x68>)
 80065dc:	6224      	str	r4, [r4, #32]
 80065de:	429c      	cmp	r4, r3
 80065e0:	d006      	beq.n	80065f0 <std+0x48>
 80065e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80065e6:	4294      	cmp	r4, r2
 80065e8:	d002      	beq.n	80065f0 <std+0x48>
 80065ea:	33d0      	adds	r3, #208	; 0xd0
 80065ec:	429c      	cmp	r4, r3
 80065ee:	d105      	bne.n	80065fc <std+0x54>
 80065f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80065f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065f8:	f000 b978 	b.w	80068ec <__retarget_lock_init_recursive>
 80065fc:	bd10      	pop	{r4, pc}
 80065fe:	bf00      	nop
 8006600:	0800676d 	.word	0x0800676d
 8006604:	0800678f 	.word	0x0800678f
 8006608:	080067c7 	.word	0x080067c7
 800660c:	080067eb 	.word	0x080067eb
 8006610:	20000414 	.word	0x20000414

08006614 <stdio_exit_handler>:
 8006614:	4a02      	ldr	r2, [pc, #8]	; (8006620 <stdio_exit_handler+0xc>)
 8006616:	4903      	ldr	r1, [pc, #12]	; (8006624 <stdio_exit_handler+0x10>)
 8006618:	4803      	ldr	r0, [pc, #12]	; (8006628 <stdio_exit_handler+0x14>)
 800661a:	f000 b869 	b.w	80066f0 <_fwalk_sglue>
 800661e:	bf00      	nop
 8006620:	2000001c 	.word	0x2000001c
 8006624:	080082b9 	.word	0x080082b9
 8006628:	20000028 	.word	0x20000028

0800662c <cleanup_stdio>:
 800662c:	6841      	ldr	r1, [r0, #4]
 800662e:	4b0c      	ldr	r3, [pc, #48]	; (8006660 <cleanup_stdio+0x34>)
 8006630:	4299      	cmp	r1, r3
 8006632:	b510      	push	{r4, lr}
 8006634:	4604      	mov	r4, r0
 8006636:	d001      	beq.n	800663c <cleanup_stdio+0x10>
 8006638:	f001 fe3e 	bl	80082b8 <_fflush_r>
 800663c:	68a1      	ldr	r1, [r4, #8]
 800663e:	4b09      	ldr	r3, [pc, #36]	; (8006664 <cleanup_stdio+0x38>)
 8006640:	4299      	cmp	r1, r3
 8006642:	d002      	beq.n	800664a <cleanup_stdio+0x1e>
 8006644:	4620      	mov	r0, r4
 8006646:	f001 fe37 	bl	80082b8 <_fflush_r>
 800664a:	68e1      	ldr	r1, [r4, #12]
 800664c:	4b06      	ldr	r3, [pc, #24]	; (8006668 <cleanup_stdio+0x3c>)
 800664e:	4299      	cmp	r1, r3
 8006650:	d004      	beq.n	800665c <cleanup_stdio+0x30>
 8006652:	4620      	mov	r0, r4
 8006654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006658:	f001 be2e 	b.w	80082b8 <_fflush_r>
 800665c:	bd10      	pop	{r4, pc}
 800665e:	bf00      	nop
 8006660:	20000414 	.word	0x20000414
 8006664:	2000047c 	.word	0x2000047c
 8006668:	200004e4 	.word	0x200004e4

0800666c <global_stdio_init.part.0>:
 800666c:	b510      	push	{r4, lr}
 800666e:	4b0b      	ldr	r3, [pc, #44]	; (800669c <global_stdio_init.part.0+0x30>)
 8006670:	4c0b      	ldr	r4, [pc, #44]	; (80066a0 <global_stdio_init.part.0+0x34>)
 8006672:	4a0c      	ldr	r2, [pc, #48]	; (80066a4 <global_stdio_init.part.0+0x38>)
 8006674:	601a      	str	r2, [r3, #0]
 8006676:	4620      	mov	r0, r4
 8006678:	2200      	movs	r2, #0
 800667a:	2104      	movs	r1, #4
 800667c:	f7ff ff94 	bl	80065a8 <std>
 8006680:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006684:	2201      	movs	r2, #1
 8006686:	2109      	movs	r1, #9
 8006688:	f7ff ff8e 	bl	80065a8 <std>
 800668c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006690:	2202      	movs	r2, #2
 8006692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006696:	2112      	movs	r1, #18
 8006698:	f7ff bf86 	b.w	80065a8 <std>
 800669c:	2000054c 	.word	0x2000054c
 80066a0:	20000414 	.word	0x20000414
 80066a4:	08006615 	.word	0x08006615

080066a8 <__sfp_lock_acquire>:
 80066a8:	4801      	ldr	r0, [pc, #4]	; (80066b0 <__sfp_lock_acquire+0x8>)
 80066aa:	f000 b920 	b.w	80068ee <__retarget_lock_acquire_recursive>
 80066ae:	bf00      	nop
 80066b0:	20000555 	.word	0x20000555

080066b4 <__sfp_lock_release>:
 80066b4:	4801      	ldr	r0, [pc, #4]	; (80066bc <__sfp_lock_release+0x8>)
 80066b6:	f000 b91b 	b.w	80068f0 <__retarget_lock_release_recursive>
 80066ba:	bf00      	nop
 80066bc:	20000555 	.word	0x20000555

080066c0 <__sinit>:
 80066c0:	b510      	push	{r4, lr}
 80066c2:	4604      	mov	r4, r0
 80066c4:	f7ff fff0 	bl	80066a8 <__sfp_lock_acquire>
 80066c8:	6a23      	ldr	r3, [r4, #32]
 80066ca:	b11b      	cbz	r3, 80066d4 <__sinit+0x14>
 80066cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066d0:	f7ff bff0 	b.w	80066b4 <__sfp_lock_release>
 80066d4:	4b04      	ldr	r3, [pc, #16]	; (80066e8 <__sinit+0x28>)
 80066d6:	6223      	str	r3, [r4, #32]
 80066d8:	4b04      	ldr	r3, [pc, #16]	; (80066ec <__sinit+0x2c>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1f5      	bne.n	80066cc <__sinit+0xc>
 80066e0:	f7ff ffc4 	bl	800666c <global_stdio_init.part.0>
 80066e4:	e7f2      	b.n	80066cc <__sinit+0xc>
 80066e6:	bf00      	nop
 80066e8:	0800662d 	.word	0x0800662d
 80066ec:	2000054c 	.word	0x2000054c

080066f0 <_fwalk_sglue>:
 80066f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066f4:	4607      	mov	r7, r0
 80066f6:	4688      	mov	r8, r1
 80066f8:	4614      	mov	r4, r2
 80066fa:	2600      	movs	r6, #0
 80066fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006700:	f1b9 0901 	subs.w	r9, r9, #1
 8006704:	d505      	bpl.n	8006712 <_fwalk_sglue+0x22>
 8006706:	6824      	ldr	r4, [r4, #0]
 8006708:	2c00      	cmp	r4, #0
 800670a:	d1f7      	bne.n	80066fc <_fwalk_sglue+0xc>
 800670c:	4630      	mov	r0, r6
 800670e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006712:	89ab      	ldrh	r3, [r5, #12]
 8006714:	2b01      	cmp	r3, #1
 8006716:	d907      	bls.n	8006728 <_fwalk_sglue+0x38>
 8006718:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800671c:	3301      	adds	r3, #1
 800671e:	d003      	beq.n	8006728 <_fwalk_sglue+0x38>
 8006720:	4629      	mov	r1, r5
 8006722:	4638      	mov	r0, r7
 8006724:	47c0      	blx	r8
 8006726:	4306      	orrs	r6, r0
 8006728:	3568      	adds	r5, #104	; 0x68
 800672a:	e7e9      	b.n	8006700 <_fwalk_sglue+0x10>

0800672c <siprintf>:
 800672c:	b40e      	push	{r1, r2, r3}
 800672e:	b500      	push	{lr}
 8006730:	b09c      	sub	sp, #112	; 0x70
 8006732:	ab1d      	add	r3, sp, #116	; 0x74
 8006734:	9002      	str	r0, [sp, #8]
 8006736:	9006      	str	r0, [sp, #24]
 8006738:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800673c:	4809      	ldr	r0, [pc, #36]	; (8006764 <siprintf+0x38>)
 800673e:	9107      	str	r1, [sp, #28]
 8006740:	9104      	str	r1, [sp, #16]
 8006742:	4909      	ldr	r1, [pc, #36]	; (8006768 <siprintf+0x3c>)
 8006744:	f853 2b04 	ldr.w	r2, [r3], #4
 8006748:	9105      	str	r1, [sp, #20]
 800674a:	6800      	ldr	r0, [r0, #0]
 800674c:	9301      	str	r3, [sp, #4]
 800674e:	a902      	add	r1, sp, #8
 8006750:	f001 fc2e 	bl	8007fb0 <_svfiprintf_r>
 8006754:	9b02      	ldr	r3, [sp, #8]
 8006756:	2200      	movs	r2, #0
 8006758:	701a      	strb	r2, [r3, #0]
 800675a:	b01c      	add	sp, #112	; 0x70
 800675c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006760:	b003      	add	sp, #12
 8006762:	4770      	bx	lr
 8006764:	20000074 	.word	0x20000074
 8006768:	ffff0208 	.word	0xffff0208

0800676c <__sread>:
 800676c:	b510      	push	{r4, lr}
 800676e:	460c      	mov	r4, r1
 8006770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006774:	f000 f86c 	bl	8006850 <_read_r>
 8006778:	2800      	cmp	r0, #0
 800677a:	bfab      	itete	ge
 800677c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800677e:	89a3      	ldrhlt	r3, [r4, #12]
 8006780:	181b      	addge	r3, r3, r0
 8006782:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006786:	bfac      	ite	ge
 8006788:	6563      	strge	r3, [r4, #84]	; 0x54
 800678a:	81a3      	strhlt	r3, [r4, #12]
 800678c:	bd10      	pop	{r4, pc}

0800678e <__swrite>:
 800678e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006792:	461f      	mov	r7, r3
 8006794:	898b      	ldrh	r3, [r1, #12]
 8006796:	05db      	lsls	r3, r3, #23
 8006798:	4605      	mov	r5, r0
 800679a:	460c      	mov	r4, r1
 800679c:	4616      	mov	r6, r2
 800679e:	d505      	bpl.n	80067ac <__swrite+0x1e>
 80067a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067a4:	2302      	movs	r3, #2
 80067a6:	2200      	movs	r2, #0
 80067a8:	f000 f840 	bl	800682c <_lseek_r>
 80067ac:	89a3      	ldrh	r3, [r4, #12]
 80067ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067b6:	81a3      	strh	r3, [r4, #12]
 80067b8:	4632      	mov	r2, r6
 80067ba:	463b      	mov	r3, r7
 80067bc:	4628      	mov	r0, r5
 80067be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067c2:	f000 b857 	b.w	8006874 <_write_r>

080067c6 <__sseek>:
 80067c6:	b510      	push	{r4, lr}
 80067c8:	460c      	mov	r4, r1
 80067ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067ce:	f000 f82d 	bl	800682c <_lseek_r>
 80067d2:	1c43      	adds	r3, r0, #1
 80067d4:	89a3      	ldrh	r3, [r4, #12]
 80067d6:	bf15      	itete	ne
 80067d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80067da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80067de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80067e2:	81a3      	strheq	r3, [r4, #12]
 80067e4:	bf18      	it	ne
 80067e6:	81a3      	strhne	r3, [r4, #12]
 80067e8:	bd10      	pop	{r4, pc}

080067ea <__sclose>:
 80067ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067ee:	f000 b80d 	b.w	800680c <_close_r>

080067f2 <memset>:
 80067f2:	4402      	add	r2, r0
 80067f4:	4603      	mov	r3, r0
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d100      	bne.n	80067fc <memset+0xa>
 80067fa:	4770      	bx	lr
 80067fc:	f803 1b01 	strb.w	r1, [r3], #1
 8006800:	e7f9      	b.n	80067f6 <memset+0x4>
	...

08006804 <_localeconv_r>:
 8006804:	4800      	ldr	r0, [pc, #0]	; (8006808 <_localeconv_r+0x4>)
 8006806:	4770      	bx	lr
 8006808:	20000168 	.word	0x20000168

0800680c <_close_r>:
 800680c:	b538      	push	{r3, r4, r5, lr}
 800680e:	4d06      	ldr	r5, [pc, #24]	; (8006828 <_close_r+0x1c>)
 8006810:	2300      	movs	r3, #0
 8006812:	4604      	mov	r4, r0
 8006814:	4608      	mov	r0, r1
 8006816:	602b      	str	r3, [r5, #0]
 8006818:	f7fa fe8f 	bl	800153a <_close>
 800681c:	1c43      	adds	r3, r0, #1
 800681e:	d102      	bne.n	8006826 <_close_r+0x1a>
 8006820:	682b      	ldr	r3, [r5, #0]
 8006822:	b103      	cbz	r3, 8006826 <_close_r+0x1a>
 8006824:	6023      	str	r3, [r4, #0]
 8006826:	bd38      	pop	{r3, r4, r5, pc}
 8006828:	20000550 	.word	0x20000550

0800682c <_lseek_r>:
 800682c:	b538      	push	{r3, r4, r5, lr}
 800682e:	4d07      	ldr	r5, [pc, #28]	; (800684c <_lseek_r+0x20>)
 8006830:	4604      	mov	r4, r0
 8006832:	4608      	mov	r0, r1
 8006834:	4611      	mov	r1, r2
 8006836:	2200      	movs	r2, #0
 8006838:	602a      	str	r2, [r5, #0]
 800683a:	461a      	mov	r2, r3
 800683c:	f7fa fea4 	bl	8001588 <_lseek>
 8006840:	1c43      	adds	r3, r0, #1
 8006842:	d102      	bne.n	800684a <_lseek_r+0x1e>
 8006844:	682b      	ldr	r3, [r5, #0]
 8006846:	b103      	cbz	r3, 800684a <_lseek_r+0x1e>
 8006848:	6023      	str	r3, [r4, #0]
 800684a:	bd38      	pop	{r3, r4, r5, pc}
 800684c:	20000550 	.word	0x20000550

08006850 <_read_r>:
 8006850:	b538      	push	{r3, r4, r5, lr}
 8006852:	4d07      	ldr	r5, [pc, #28]	; (8006870 <_read_r+0x20>)
 8006854:	4604      	mov	r4, r0
 8006856:	4608      	mov	r0, r1
 8006858:	4611      	mov	r1, r2
 800685a:	2200      	movs	r2, #0
 800685c:	602a      	str	r2, [r5, #0]
 800685e:	461a      	mov	r2, r3
 8006860:	f7fa fe32 	bl	80014c8 <_read>
 8006864:	1c43      	adds	r3, r0, #1
 8006866:	d102      	bne.n	800686e <_read_r+0x1e>
 8006868:	682b      	ldr	r3, [r5, #0]
 800686a:	b103      	cbz	r3, 800686e <_read_r+0x1e>
 800686c:	6023      	str	r3, [r4, #0]
 800686e:	bd38      	pop	{r3, r4, r5, pc}
 8006870:	20000550 	.word	0x20000550

08006874 <_write_r>:
 8006874:	b538      	push	{r3, r4, r5, lr}
 8006876:	4d07      	ldr	r5, [pc, #28]	; (8006894 <_write_r+0x20>)
 8006878:	4604      	mov	r4, r0
 800687a:	4608      	mov	r0, r1
 800687c:	4611      	mov	r1, r2
 800687e:	2200      	movs	r2, #0
 8006880:	602a      	str	r2, [r5, #0]
 8006882:	461a      	mov	r2, r3
 8006884:	f7fa fe3d 	bl	8001502 <_write>
 8006888:	1c43      	adds	r3, r0, #1
 800688a:	d102      	bne.n	8006892 <_write_r+0x1e>
 800688c:	682b      	ldr	r3, [r5, #0]
 800688e:	b103      	cbz	r3, 8006892 <_write_r+0x1e>
 8006890:	6023      	str	r3, [r4, #0]
 8006892:	bd38      	pop	{r3, r4, r5, pc}
 8006894:	20000550 	.word	0x20000550

08006898 <__errno>:
 8006898:	4b01      	ldr	r3, [pc, #4]	; (80068a0 <__errno+0x8>)
 800689a:	6818      	ldr	r0, [r3, #0]
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	20000074 	.word	0x20000074

080068a4 <__libc_init_array>:
 80068a4:	b570      	push	{r4, r5, r6, lr}
 80068a6:	4d0d      	ldr	r5, [pc, #52]	; (80068dc <__libc_init_array+0x38>)
 80068a8:	4c0d      	ldr	r4, [pc, #52]	; (80068e0 <__libc_init_array+0x3c>)
 80068aa:	1b64      	subs	r4, r4, r5
 80068ac:	10a4      	asrs	r4, r4, #2
 80068ae:	2600      	movs	r6, #0
 80068b0:	42a6      	cmp	r6, r4
 80068b2:	d109      	bne.n	80068c8 <__libc_init_array+0x24>
 80068b4:	4d0b      	ldr	r5, [pc, #44]	; (80068e4 <__libc_init_array+0x40>)
 80068b6:	4c0c      	ldr	r4, [pc, #48]	; (80068e8 <__libc_init_array+0x44>)
 80068b8:	f002 fca0 	bl	80091fc <_init>
 80068bc:	1b64      	subs	r4, r4, r5
 80068be:	10a4      	asrs	r4, r4, #2
 80068c0:	2600      	movs	r6, #0
 80068c2:	42a6      	cmp	r6, r4
 80068c4:	d105      	bne.n	80068d2 <__libc_init_array+0x2e>
 80068c6:	bd70      	pop	{r4, r5, r6, pc}
 80068c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80068cc:	4798      	blx	r3
 80068ce:	3601      	adds	r6, #1
 80068d0:	e7ee      	b.n	80068b0 <__libc_init_array+0xc>
 80068d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80068d6:	4798      	blx	r3
 80068d8:	3601      	adds	r6, #1
 80068da:	e7f2      	b.n	80068c2 <__libc_init_array+0x1e>
 80068dc:	08009648 	.word	0x08009648
 80068e0:	08009648 	.word	0x08009648
 80068e4:	08009648 	.word	0x08009648
 80068e8:	0800964c 	.word	0x0800964c

080068ec <__retarget_lock_init_recursive>:
 80068ec:	4770      	bx	lr

080068ee <__retarget_lock_acquire_recursive>:
 80068ee:	4770      	bx	lr

080068f0 <__retarget_lock_release_recursive>:
 80068f0:	4770      	bx	lr

080068f2 <memcpy>:
 80068f2:	440a      	add	r2, r1
 80068f4:	4291      	cmp	r1, r2
 80068f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80068fa:	d100      	bne.n	80068fe <memcpy+0xc>
 80068fc:	4770      	bx	lr
 80068fe:	b510      	push	{r4, lr}
 8006900:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006904:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006908:	4291      	cmp	r1, r2
 800690a:	d1f9      	bne.n	8006900 <memcpy+0xe>
 800690c:	bd10      	pop	{r4, pc}

0800690e <quorem>:
 800690e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006912:	6903      	ldr	r3, [r0, #16]
 8006914:	690c      	ldr	r4, [r1, #16]
 8006916:	42a3      	cmp	r3, r4
 8006918:	4607      	mov	r7, r0
 800691a:	db7e      	blt.n	8006a1a <quorem+0x10c>
 800691c:	3c01      	subs	r4, #1
 800691e:	f101 0814 	add.w	r8, r1, #20
 8006922:	f100 0514 	add.w	r5, r0, #20
 8006926:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800692a:	9301      	str	r3, [sp, #4]
 800692c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006930:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006934:	3301      	adds	r3, #1
 8006936:	429a      	cmp	r2, r3
 8006938:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800693c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006940:	fbb2 f6f3 	udiv	r6, r2, r3
 8006944:	d331      	bcc.n	80069aa <quorem+0x9c>
 8006946:	f04f 0e00 	mov.w	lr, #0
 800694a:	4640      	mov	r0, r8
 800694c:	46ac      	mov	ip, r5
 800694e:	46f2      	mov	sl, lr
 8006950:	f850 2b04 	ldr.w	r2, [r0], #4
 8006954:	b293      	uxth	r3, r2
 8006956:	fb06 e303 	mla	r3, r6, r3, lr
 800695a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800695e:	0c1a      	lsrs	r2, r3, #16
 8006960:	b29b      	uxth	r3, r3
 8006962:	ebaa 0303 	sub.w	r3, sl, r3
 8006966:	f8dc a000 	ldr.w	sl, [ip]
 800696a:	fa13 f38a 	uxtah	r3, r3, sl
 800696e:	fb06 220e 	mla	r2, r6, lr, r2
 8006972:	9300      	str	r3, [sp, #0]
 8006974:	9b00      	ldr	r3, [sp, #0]
 8006976:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800697a:	b292      	uxth	r2, r2
 800697c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006980:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006984:	f8bd 3000 	ldrh.w	r3, [sp]
 8006988:	4581      	cmp	r9, r0
 800698a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800698e:	f84c 3b04 	str.w	r3, [ip], #4
 8006992:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006996:	d2db      	bcs.n	8006950 <quorem+0x42>
 8006998:	f855 300b 	ldr.w	r3, [r5, fp]
 800699c:	b92b      	cbnz	r3, 80069aa <quorem+0x9c>
 800699e:	9b01      	ldr	r3, [sp, #4]
 80069a0:	3b04      	subs	r3, #4
 80069a2:	429d      	cmp	r5, r3
 80069a4:	461a      	mov	r2, r3
 80069a6:	d32c      	bcc.n	8006a02 <quorem+0xf4>
 80069a8:	613c      	str	r4, [r7, #16]
 80069aa:	4638      	mov	r0, r7
 80069ac:	f001 f9a6 	bl	8007cfc <__mcmp>
 80069b0:	2800      	cmp	r0, #0
 80069b2:	db22      	blt.n	80069fa <quorem+0xec>
 80069b4:	3601      	adds	r6, #1
 80069b6:	4629      	mov	r1, r5
 80069b8:	2000      	movs	r0, #0
 80069ba:	f858 2b04 	ldr.w	r2, [r8], #4
 80069be:	f8d1 c000 	ldr.w	ip, [r1]
 80069c2:	b293      	uxth	r3, r2
 80069c4:	1ac3      	subs	r3, r0, r3
 80069c6:	0c12      	lsrs	r2, r2, #16
 80069c8:	fa13 f38c 	uxtah	r3, r3, ip
 80069cc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80069d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069da:	45c1      	cmp	r9, r8
 80069dc:	f841 3b04 	str.w	r3, [r1], #4
 80069e0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80069e4:	d2e9      	bcs.n	80069ba <quorem+0xac>
 80069e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069ee:	b922      	cbnz	r2, 80069fa <quorem+0xec>
 80069f0:	3b04      	subs	r3, #4
 80069f2:	429d      	cmp	r5, r3
 80069f4:	461a      	mov	r2, r3
 80069f6:	d30a      	bcc.n	8006a0e <quorem+0x100>
 80069f8:	613c      	str	r4, [r7, #16]
 80069fa:	4630      	mov	r0, r6
 80069fc:	b003      	add	sp, #12
 80069fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a02:	6812      	ldr	r2, [r2, #0]
 8006a04:	3b04      	subs	r3, #4
 8006a06:	2a00      	cmp	r2, #0
 8006a08:	d1ce      	bne.n	80069a8 <quorem+0x9a>
 8006a0a:	3c01      	subs	r4, #1
 8006a0c:	e7c9      	b.n	80069a2 <quorem+0x94>
 8006a0e:	6812      	ldr	r2, [r2, #0]
 8006a10:	3b04      	subs	r3, #4
 8006a12:	2a00      	cmp	r2, #0
 8006a14:	d1f0      	bne.n	80069f8 <quorem+0xea>
 8006a16:	3c01      	subs	r4, #1
 8006a18:	e7eb      	b.n	80069f2 <quorem+0xe4>
 8006a1a:	2000      	movs	r0, #0
 8006a1c:	e7ee      	b.n	80069fc <quorem+0xee>
	...

08006a20 <_dtoa_r>:
 8006a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a24:	ed2d 8b04 	vpush	{d8-d9}
 8006a28:	69c5      	ldr	r5, [r0, #28]
 8006a2a:	b093      	sub	sp, #76	; 0x4c
 8006a2c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006a30:	ec57 6b10 	vmov	r6, r7, d0
 8006a34:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006a38:	9107      	str	r1, [sp, #28]
 8006a3a:	4604      	mov	r4, r0
 8006a3c:	920a      	str	r2, [sp, #40]	; 0x28
 8006a3e:	930d      	str	r3, [sp, #52]	; 0x34
 8006a40:	b975      	cbnz	r5, 8006a60 <_dtoa_r+0x40>
 8006a42:	2010      	movs	r0, #16
 8006a44:	f000 fe2a 	bl	800769c <malloc>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	61e0      	str	r0, [r4, #28]
 8006a4c:	b920      	cbnz	r0, 8006a58 <_dtoa_r+0x38>
 8006a4e:	4bae      	ldr	r3, [pc, #696]	; (8006d08 <_dtoa_r+0x2e8>)
 8006a50:	21ef      	movs	r1, #239	; 0xef
 8006a52:	48ae      	ldr	r0, [pc, #696]	; (8006d0c <_dtoa_r+0x2ec>)
 8006a54:	f001 fc82 	bl	800835c <__assert_func>
 8006a58:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006a5c:	6005      	str	r5, [r0, #0]
 8006a5e:	60c5      	str	r5, [r0, #12]
 8006a60:	69e3      	ldr	r3, [r4, #28]
 8006a62:	6819      	ldr	r1, [r3, #0]
 8006a64:	b151      	cbz	r1, 8006a7c <_dtoa_r+0x5c>
 8006a66:	685a      	ldr	r2, [r3, #4]
 8006a68:	604a      	str	r2, [r1, #4]
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	4093      	lsls	r3, r2
 8006a6e:	608b      	str	r3, [r1, #8]
 8006a70:	4620      	mov	r0, r4
 8006a72:	f000 ff07 	bl	8007884 <_Bfree>
 8006a76:	69e3      	ldr	r3, [r4, #28]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	601a      	str	r2, [r3, #0]
 8006a7c:	1e3b      	subs	r3, r7, #0
 8006a7e:	bfbb      	ittet	lt
 8006a80:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006a84:	9303      	strlt	r3, [sp, #12]
 8006a86:	2300      	movge	r3, #0
 8006a88:	2201      	movlt	r2, #1
 8006a8a:	bfac      	ite	ge
 8006a8c:	f8c8 3000 	strge.w	r3, [r8]
 8006a90:	f8c8 2000 	strlt.w	r2, [r8]
 8006a94:	4b9e      	ldr	r3, [pc, #632]	; (8006d10 <_dtoa_r+0x2f0>)
 8006a96:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006a9a:	ea33 0308 	bics.w	r3, r3, r8
 8006a9e:	d11b      	bne.n	8006ad8 <_dtoa_r+0xb8>
 8006aa0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006aa2:	f242 730f 	movw	r3, #9999	; 0x270f
 8006aa6:	6013      	str	r3, [r2, #0]
 8006aa8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006aac:	4333      	orrs	r3, r6
 8006aae:	f000 8593 	beq.w	80075d8 <_dtoa_r+0xbb8>
 8006ab2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ab4:	b963      	cbnz	r3, 8006ad0 <_dtoa_r+0xb0>
 8006ab6:	4b97      	ldr	r3, [pc, #604]	; (8006d14 <_dtoa_r+0x2f4>)
 8006ab8:	e027      	b.n	8006b0a <_dtoa_r+0xea>
 8006aba:	4b97      	ldr	r3, [pc, #604]	; (8006d18 <_dtoa_r+0x2f8>)
 8006abc:	9300      	str	r3, [sp, #0]
 8006abe:	3308      	adds	r3, #8
 8006ac0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006ac2:	6013      	str	r3, [r2, #0]
 8006ac4:	9800      	ldr	r0, [sp, #0]
 8006ac6:	b013      	add	sp, #76	; 0x4c
 8006ac8:	ecbd 8b04 	vpop	{d8-d9}
 8006acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ad0:	4b90      	ldr	r3, [pc, #576]	; (8006d14 <_dtoa_r+0x2f4>)
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	3303      	adds	r3, #3
 8006ad6:	e7f3      	b.n	8006ac0 <_dtoa_r+0xa0>
 8006ad8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006adc:	2200      	movs	r2, #0
 8006ade:	ec51 0b17 	vmov	r0, r1, d7
 8006ae2:	eeb0 8a47 	vmov.f32	s16, s14
 8006ae6:	eef0 8a67 	vmov.f32	s17, s15
 8006aea:	2300      	movs	r3, #0
 8006aec:	f7f9 fff4 	bl	8000ad8 <__aeabi_dcmpeq>
 8006af0:	4681      	mov	r9, r0
 8006af2:	b160      	cbz	r0, 8006b0e <_dtoa_r+0xee>
 8006af4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006af6:	2301      	movs	r3, #1
 8006af8:	6013      	str	r3, [r2, #0]
 8006afa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f000 8568 	beq.w	80075d2 <_dtoa_r+0xbb2>
 8006b02:	4b86      	ldr	r3, [pc, #536]	; (8006d1c <_dtoa_r+0x2fc>)
 8006b04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006b06:	6013      	str	r3, [r2, #0]
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	e7da      	b.n	8006ac4 <_dtoa_r+0xa4>
 8006b0e:	aa10      	add	r2, sp, #64	; 0x40
 8006b10:	a911      	add	r1, sp, #68	; 0x44
 8006b12:	4620      	mov	r0, r4
 8006b14:	eeb0 0a48 	vmov.f32	s0, s16
 8006b18:	eef0 0a68 	vmov.f32	s1, s17
 8006b1c:	f001 f994 	bl	8007e48 <__d2b>
 8006b20:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006b24:	4682      	mov	sl, r0
 8006b26:	2d00      	cmp	r5, #0
 8006b28:	d07f      	beq.n	8006c2a <_dtoa_r+0x20a>
 8006b2a:	ee18 3a90 	vmov	r3, s17
 8006b2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b32:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006b36:	ec51 0b18 	vmov	r0, r1, d8
 8006b3a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006b3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006b42:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006b46:	4619      	mov	r1, r3
 8006b48:	2200      	movs	r2, #0
 8006b4a:	4b75      	ldr	r3, [pc, #468]	; (8006d20 <_dtoa_r+0x300>)
 8006b4c:	f7f9 fba4 	bl	8000298 <__aeabi_dsub>
 8006b50:	a367      	add	r3, pc, #412	; (adr r3, 8006cf0 <_dtoa_r+0x2d0>)
 8006b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b56:	f7f9 fd57 	bl	8000608 <__aeabi_dmul>
 8006b5a:	a367      	add	r3, pc, #412	; (adr r3, 8006cf8 <_dtoa_r+0x2d8>)
 8006b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b60:	f7f9 fb9c 	bl	800029c <__adddf3>
 8006b64:	4606      	mov	r6, r0
 8006b66:	4628      	mov	r0, r5
 8006b68:	460f      	mov	r7, r1
 8006b6a:	f7f9 fce3 	bl	8000534 <__aeabi_i2d>
 8006b6e:	a364      	add	r3, pc, #400	; (adr r3, 8006d00 <_dtoa_r+0x2e0>)
 8006b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b74:	f7f9 fd48 	bl	8000608 <__aeabi_dmul>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	4630      	mov	r0, r6
 8006b7e:	4639      	mov	r1, r7
 8006b80:	f7f9 fb8c 	bl	800029c <__adddf3>
 8006b84:	4606      	mov	r6, r0
 8006b86:	460f      	mov	r7, r1
 8006b88:	f7f9 ffee 	bl	8000b68 <__aeabi_d2iz>
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	4683      	mov	fp, r0
 8006b90:	2300      	movs	r3, #0
 8006b92:	4630      	mov	r0, r6
 8006b94:	4639      	mov	r1, r7
 8006b96:	f7f9 ffa9 	bl	8000aec <__aeabi_dcmplt>
 8006b9a:	b148      	cbz	r0, 8006bb0 <_dtoa_r+0x190>
 8006b9c:	4658      	mov	r0, fp
 8006b9e:	f7f9 fcc9 	bl	8000534 <__aeabi_i2d>
 8006ba2:	4632      	mov	r2, r6
 8006ba4:	463b      	mov	r3, r7
 8006ba6:	f7f9 ff97 	bl	8000ad8 <__aeabi_dcmpeq>
 8006baa:	b908      	cbnz	r0, 8006bb0 <_dtoa_r+0x190>
 8006bac:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006bb0:	f1bb 0f16 	cmp.w	fp, #22
 8006bb4:	d857      	bhi.n	8006c66 <_dtoa_r+0x246>
 8006bb6:	4b5b      	ldr	r3, [pc, #364]	; (8006d24 <_dtoa_r+0x304>)
 8006bb8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc0:	ec51 0b18 	vmov	r0, r1, d8
 8006bc4:	f7f9 ff92 	bl	8000aec <__aeabi_dcmplt>
 8006bc8:	2800      	cmp	r0, #0
 8006bca:	d04e      	beq.n	8006c6a <_dtoa_r+0x24a>
 8006bcc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	930c      	str	r3, [sp, #48]	; 0x30
 8006bd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006bd6:	1b5b      	subs	r3, r3, r5
 8006bd8:	1e5a      	subs	r2, r3, #1
 8006bda:	bf45      	ittet	mi
 8006bdc:	f1c3 0301 	rsbmi	r3, r3, #1
 8006be0:	9305      	strmi	r3, [sp, #20]
 8006be2:	2300      	movpl	r3, #0
 8006be4:	2300      	movmi	r3, #0
 8006be6:	9206      	str	r2, [sp, #24]
 8006be8:	bf54      	ite	pl
 8006bea:	9305      	strpl	r3, [sp, #20]
 8006bec:	9306      	strmi	r3, [sp, #24]
 8006bee:	f1bb 0f00 	cmp.w	fp, #0
 8006bf2:	db3c      	blt.n	8006c6e <_dtoa_r+0x24e>
 8006bf4:	9b06      	ldr	r3, [sp, #24]
 8006bf6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006bfa:	445b      	add	r3, fp
 8006bfc:	9306      	str	r3, [sp, #24]
 8006bfe:	2300      	movs	r3, #0
 8006c00:	9308      	str	r3, [sp, #32]
 8006c02:	9b07      	ldr	r3, [sp, #28]
 8006c04:	2b09      	cmp	r3, #9
 8006c06:	d868      	bhi.n	8006cda <_dtoa_r+0x2ba>
 8006c08:	2b05      	cmp	r3, #5
 8006c0a:	bfc4      	itt	gt
 8006c0c:	3b04      	subgt	r3, #4
 8006c0e:	9307      	strgt	r3, [sp, #28]
 8006c10:	9b07      	ldr	r3, [sp, #28]
 8006c12:	f1a3 0302 	sub.w	r3, r3, #2
 8006c16:	bfcc      	ite	gt
 8006c18:	2500      	movgt	r5, #0
 8006c1a:	2501      	movle	r5, #1
 8006c1c:	2b03      	cmp	r3, #3
 8006c1e:	f200 8085 	bhi.w	8006d2c <_dtoa_r+0x30c>
 8006c22:	e8df f003 	tbb	[pc, r3]
 8006c26:	3b2e      	.short	0x3b2e
 8006c28:	5839      	.short	0x5839
 8006c2a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006c2e:	441d      	add	r5, r3
 8006c30:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006c34:	2b20      	cmp	r3, #32
 8006c36:	bfc1      	itttt	gt
 8006c38:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006c3c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006c40:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006c44:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006c48:	bfd6      	itet	le
 8006c4a:	f1c3 0320 	rsble	r3, r3, #32
 8006c4e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006c52:	fa06 f003 	lslle.w	r0, r6, r3
 8006c56:	f7f9 fc5d 	bl	8000514 <__aeabi_ui2d>
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006c60:	3d01      	subs	r5, #1
 8006c62:	920e      	str	r2, [sp, #56]	; 0x38
 8006c64:	e76f      	b.n	8006b46 <_dtoa_r+0x126>
 8006c66:	2301      	movs	r3, #1
 8006c68:	e7b3      	b.n	8006bd2 <_dtoa_r+0x1b2>
 8006c6a:	900c      	str	r0, [sp, #48]	; 0x30
 8006c6c:	e7b2      	b.n	8006bd4 <_dtoa_r+0x1b4>
 8006c6e:	9b05      	ldr	r3, [sp, #20]
 8006c70:	eba3 030b 	sub.w	r3, r3, fp
 8006c74:	9305      	str	r3, [sp, #20]
 8006c76:	f1cb 0300 	rsb	r3, fp, #0
 8006c7a:	9308      	str	r3, [sp, #32]
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c80:	e7bf      	b.n	8006c02 <_dtoa_r+0x1e2>
 8006c82:	2300      	movs	r3, #0
 8006c84:	9309      	str	r3, [sp, #36]	; 0x24
 8006c86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	dc52      	bgt.n	8006d32 <_dtoa_r+0x312>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	9301      	str	r3, [sp, #4]
 8006c90:	9304      	str	r3, [sp, #16]
 8006c92:	461a      	mov	r2, r3
 8006c94:	920a      	str	r2, [sp, #40]	; 0x28
 8006c96:	e00b      	b.n	8006cb0 <_dtoa_r+0x290>
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e7f3      	b.n	8006c84 <_dtoa_r+0x264>
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8006ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ca2:	445b      	add	r3, fp
 8006ca4:	9301      	str	r3, [sp, #4]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	9304      	str	r3, [sp, #16]
 8006cac:	bfb8      	it	lt
 8006cae:	2301      	movlt	r3, #1
 8006cb0:	69e0      	ldr	r0, [r4, #28]
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	2204      	movs	r2, #4
 8006cb6:	f102 0614 	add.w	r6, r2, #20
 8006cba:	429e      	cmp	r6, r3
 8006cbc:	d93d      	bls.n	8006d3a <_dtoa_r+0x31a>
 8006cbe:	6041      	str	r1, [r0, #4]
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	f000 fd9f 	bl	8007804 <_Balloc>
 8006cc6:	9000      	str	r0, [sp, #0]
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	d139      	bne.n	8006d40 <_dtoa_r+0x320>
 8006ccc:	4b16      	ldr	r3, [pc, #88]	; (8006d28 <_dtoa_r+0x308>)
 8006cce:	4602      	mov	r2, r0
 8006cd0:	f240 11af 	movw	r1, #431	; 0x1af
 8006cd4:	e6bd      	b.n	8006a52 <_dtoa_r+0x32>
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e7e1      	b.n	8006c9e <_dtoa_r+0x27e>
 8006cda:	2501      	movs	r5, #1
 8006cdc:	2300      	movs	r3, #0
 8006cde:	9307      	str	r3, [sp, #28]
 8006ce0:	9509      	str	r5, [sp, #36]	; 0x24
 8006ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ce6:	9301      	str	r3, [sp, #4]
 8006ce8:	9304      	str	r3, [sp, #16]
 8006cea:	2200      	movs	r2, #0
 8006cec:	2312      	movs	r3, #18
 8006cee:	e7d1      	b.n	8006c94 <_dtoa_r+0x274>
 8006cf0:	636f4361 	.word	0x636f4361
 8006cf4:	3fd287a7 	.word	0x3fd287a7
 8006cf8:	8b60c8b3 	.word	0x8b60c8b3
 8006cfc:	3fc68a28 	.word	0x3fc68a28
 8006d00:	509f79fb 	.word	0x509f79fb
 8006d04:	3fd34413 	.word	0x3fd34413
 8006d08:	080093da 	.word	0x080093da
 8006d0c:	080093f1 	.word	0x080093f1
 8006d10:	7ff00000 	.word	0x7ff00000
 8006d14:	080093d6 	.word	0x080093d6
 8006d18:	080093cd 	.word	0x080093cd
 8006d1c:	080093aa 	.word	0x080093aa
 8006d20:	3ff80000 	.word	0x3ff80000
 8006d24:	080094e0 	.word	0x080094e0
 8006d28:	08009449 	.word	0x08009449
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d30:	e7d7      	b.n	8006ce2 <_dtoa_r+0x2c2>
 8006d32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d34:	9301      	str	r3, [sp, #4]
 8006d36:	9304      	str	r3, [sp, #16]
 8006d38:	e7ba      	b.n	8006cb0 <_dtoa_r+0x290>
 8006d3a:	3101      	adds	r1, #1
 8006d3c:	0052      	lsls	r2, r2, #1
 8006d3e:	e7ba      	b.n	8006cb6 <_dtoa_r+0x296>
 8006d40:	69e3      	ldr	r3, [r4, #28]
 8006d42:	9a00      	ldr	r2, [sp, #0]
 8006d44:	601a      	str	r2, [r3, #0]
 8006d46:	9b04      	ldr	r3, [sp, #16]
 8006d48:	2b0e      	cmp	r3, #14
 8006d4a:	f200 80a8 	bhi.w	8006e9e <_dtoa_r+0x47e>
 8006d4e:	2d00      	cmp	r5, #0
 8006d50:	f000 80a5 	beq.w	8006e9e <_dtoa_r+0x47e>
 8006d54:	f1bb 0f00 	cmp.w	fp, #0
 8006d58:	dd38      	ble.n	8006dcc <_dtoa_r+0x3ac>
 8006d5a:	4bc0      	ldr	r3, [pc, #768]	; (800705c <_dtoa_r+0x63c>)
 8006d5c:	f00b 020f 	and.w	r2, fp, #15
 8006d60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d64:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006d68:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006d6c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006d70:	d019      	beq.n	8006da6 <_dtoa_r+0x386>
 8006d72:	4bbb      	ldr	r3, [pc, #748]	; (8007060 <_dtoa_r+0x640>)
 8006d74:	ec51 0b18 	vmov	r0, r1, d8
 8006d78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d7c:	f7f9 fd6e 	bl	800085c <__aeabi_ddiv>
 8006d80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d84:	f008 080f 	and.w	r8, r8, #15
 8006d88:	2503      	movs	r5, #3
 8006d8a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007060 <_dtoa_r+0x640>
 8006d8e:	f1b8 0f00 	cmp.w	r8, #0
 8006d92:	d10a      	bne.n	8006daa <_dtoa_r+0x38a>
 8006d94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d98:	4632      	mov	r2, r6
 8006d9a:	463b      	mov	r3, r7
 8006d9c:	f7f9 fd5e 	bl	800085c <__aeabi_ddiv>
 8006da0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006da4:	e02b      	b.n	8006dfe <_dtoa_r+0x3de>
 8006da6:	2502      	movs	r5, #2
 8006da8:	e7ef      	b.n	8006d8a <_dtoa_r+0x36a>
 8006daa:	f018 0f01 	tst.w	r8, #1
 8006dae:	d008      	beq.n	8006dc2 <_dtoa_r+0x3a2>
 8006db0:	4630      	mov	r0, r6
 8006db2:	4639      	mov	r1, r7
 8006db4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006db8:	f7f9 fc26 	bl	8000608 <__aeabi_dmul>
 8006dbc:	3501      	adds	r5, #1
 8006dbe:	4606      	mov	r6, r0
 8006dc0:	460f      	mov	r7, r1
 8006dc2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006dc6:	f109 0908 	add.w	r9, r9, #8
 8006dca:	e7e0      	b.n	8006d8e <_dtoa_r+0x36e>
 8006dcc:	f000 809f 	beq.w	8006f0e <_dtoa_r+0x4ee>
 8006dd0:	f1cb 0600 	rsb	r6, fp, #0
 8006dd4:	4ba1      	ldr	r3, [pc, #644]	; (800705c <_dtoa_r+0x63c>)
 8006dd6:	4fa2      	ldr	r7, [pc, #648]	; (8007060 <_dtoa_r+0x640>)
 8006dd8:	f006 020f 	and.w	r2, r6, #15
 8006ddc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de4:	ec51 0b18 	vmov	r0, r1, d8
 8006de8:	f7f9 fc0e 	bl	8000608 <__aeabi_dmul>
 8006dec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006df0:	1136      	asrs	r6, r6, #4
 8006df2:	2300      	movs	r3, #0
 8006df4:	2502      	movs	r5, #2
 8006df6:	2e00      	cmp	r6, #0
 8006df8:	d17e      	bne.n	8006ef8 <_dtoa_r+0x4d8>
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1d0      	bne.n	8006da0 <_dtoa_r+0x380>
 8006dfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e00:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f000 8084 	beq.w	8006f12 <_dtoa_r+0x4f2>
 8006e0a:	4b96      	ldr	r3, [pc, #600]	; (8007064 <_dtoa_r+0x644>)
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	4640      	mov	r0, r8
 8006e10:	4649      	mov	r1, r9
 8006e12:	f7f9 fe6b 	bl	8000aec <__aeabi_dcmplt>
 8006e16:	2800      	cmp	r0, #0
 8006e18:	d07b      	beq.n	8006f12 <_dtoa_r+0x4f2>
 8006e1a:	9b04      	ldr	r3, [sp, #16]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d078      	beq.n	8006f12 <_dtoa_r+0x4f2>
 8006e20:	9b01      	ldr	r3, [sp, #4]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	dd39      	ble.n	8006e9a <_dtoa_r+0x47a>
 8006e26:	4b90      	ldr	r3, [pc, #576]	; (8007068 <_dtoa_r+0x648>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	4640      	mov	r0, r8
 8006e2c:	4649      	mov	r1, r9
 8006e2e:	f7f9 fbeb 	bl	8000608 <__aeabi_dmul>
 8006e32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e36:	9e01      	ldr	r6, [sp, #4]
 8006e38:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006e3c:	3501      	adds	r5, #1
 8006e3e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006e42:	4628      	mov	r0, r5
 8006e44:	f7f9 fb76 	bl	8000534 <__aeabi_i2d>
 8006e48:	4642      	mov	r2, r8
 8006e4a:	464b      	mov	r3, r9
 8006e4c:	f7f9 fbdc 	bl	8000608 <__aeabi_dmul>
 8006e50:	4b86      	ldr	r3, [pc, #536]	; (800706c <_dtoa_r+0x64c>)
 8006e52:	2200      	movs	r2, #0
 8006e54:	f7f9 fa22 	bl	800029c <__adddf3>
 8006e58:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006e5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e60:	9303      	str	r3, [sp, #12]
 8006e62:	2e00      	cmp	r6, #0
 8006e64:	d158      	bne.n	8006f18 <_dtoa_r+0x4f8>
 8006e66:	4b82      	ldr	r3, [pc, #520]	; (8007070 <_dtoa_r+0x650>)
 8006e68:	2200      	movs	r2, #0
 8006e6a:	4640      	mov	r0, r8
 8006e6c:	4649      	mov	r1, r9
 8006e6e:	f7f9 fa13 	bl	8000298 <__aeabi_dsub>
 8006e72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e76:	4680      	mov	r8, r0
 8006e78:	4689      	mov	r9, r1
 8006e7a:	f7f9 fe55 	bl	8000b28 <__aeabi_dcmpgt>
 8006e7e:	2800      	cmp	r0, #0
 8006e80:	f040 8296 	bne.w	80073b0 <_dtoa_r+0x990>
 8006e84:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006e88:	4640      	mov	r0, r8
 8006e8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e8e:	4649      	mov	r1, r9
 8006e90:	f7f9 fe2c 	bl	8000aec <__aeabi_dcmplt>
 8006e94:	2800      	cmp	r0, #0
 8006e96:	f040 8289 	bne.w	80073ac <_dtoa_r+0x98c>
 8006e9a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006e9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f2c0 814e 	blt.w	8007142 <_dtoa_r+0x722>
 8006ea6:	f1bb 0f0e 	cmp.w	fp, #14
 8006eaa:	f300 814a 	bgt.w	8007142 <_dtoa_r+0x722>
 8006eae:	4b6b      	ldr	r3, [pc, #428]	; (800705c <_dtoa_r+0x63c>)
 8006eb0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006eb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006eb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f280 80dc 	bge.w	8007078 <_dtoa_r+0x658>
 8006ec0:	9b04      	ldr	r3, [sp, #16]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f300 80d8 	bgt.w	8007078 <_dtoa_r+0x658>
 8006ec8:	f040 826f 	bne.w	80073aa <_dtoa_r+0x98a>
 8006ecc:	4b68      	ldr	r3, [pc, #416]	; (8007070 <_dtoa_r+0x650>)
 8006ece:	2200      	movs	r2, #0
 8006ed0:	4640      	mov	r0, r8
 8006ed2:	4649      	mov	r1, r9
 8006ed4:	f7f9 fb98 	bl	8000608 <__aeabi_dmul>
 8006ed8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006edc:	f7f9 fe1a 	bl	8000b14 <__aeabi_dcmpge>
 8006ee0:	9e04      	ldr	r6, [sp, #16]
 8006ee2:	4637      	mov	r7, r6
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	f040 8245 	bne.w	8007374 <_dtoa_r+0x954>
 8006eea:	9d00      	ldr	r5, [sp, #0]
 8006eec:	2331      	movs	r3, #49	; 0x31
 8006eee:	f805 3b01 	strb.w	r3, [r5], #1
 8006ef2:	f10b 0b01 	add.w	fp, fp, #1
 8006ef6:	e241      	b.n	800737c <_dtoa_r+0x95c>
 8006ef8:	07f2      	lsls	r2, r6, #31
 8006efa:	d505      	bpl.n	8006f08 <_dtoa_r+0x4e8>
 8006efc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f00:	f7f9 fb82 	bl	8000608 <__aeabi_dmul>
 8006f04:	3501      	adds	r5, #1
 8006f06:	2301      	movs	r3, #1
 8006f08:	1076      	asrs	r6, r6, #1
 8006f0a:	3708      	adds	r7, #8
 8006f0c:	e773      	b.n	8006df6 <_dtoa_r+0x3d6>
 8006f0e:	2502      	movs	r5, #2
 8006f10:	e775      	b.n	8006dfe <_dtoa_r+0x3de>
 8006f12:	9e04      	ldr	r6, [sp, #16]
 8006f14:	465f      	mov	r7, fp
 8006f16:	e792      	b.n	8006e3e <_dtoa_r+0x41e>
 8006f18:	9900      	ldr	r1, [sp, #0]
 8006f1a:	4b50      	ldr	r3, [pc, #320]	; (800705c <_dtoa_r+0x63c>)
 8006f1c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f20:	4431      	add	r1, r6
 8006f22:	9102      	str	r1, [sp, #8]
 8006f24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f26:	eeb0 9a47 	vmov.f32	s18, s14
 8006f2a:	eef0 9a67 	vmov.f32	s19, s15
 8006f2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006f32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f36:	2900      	cmp	r1, #0
 8006f38:	d044      	beq.n	8006fc4 <_dtoa_r+0x5a4>
 8006f3a:	494e      	ldr	r1, [pc, #312]	; (8007074 <_dtoa_r+0x654>)
 8006f3c:	2000      	movs	r0, #0
 8006f3e:	f7f9 fc8d 	bl	800085c <__aeabi_ddiv>
 8006f42:	ec53 2b19 	vmov	r2, r3, d9
 8006f46:	f7f9 f9a7 	bl	8000298 <__aeabi_dsub>
 8006f4a:	9d00      	ldr	r5, [sp, #0]
 8006f4c:	ec41 0b19 	vmov	d9, r0, r1
 8006f50:	4649      	mov	r1, r9
 8006f52:	4640      	mov	r0, r8
 8006f54:	f7f9 fe08 	bl	8000b68 <__aeabi_d2iz>
 8006f58:	4606      	mov	r6, r0
 8006f5a:	f7f9 faeb 	bl	8000534 <__aeabi_i2d>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	460b      	mov	r3, r1
 8006f62:	4640      	mov	r0, r8
 8006f64:	4649      	mov	r1, r9
 8006f66:	f7f9 f997 	bl	8000298 <__aeabi_dsub>
 8006f6a:	3630      	adds	r6, #48	; 0x30
 8006f6c:	f805 6b01 	strb.w	r6, [r5], #1
 8006f70:	ec53 2b19 	vmov	r2, r3, d9
 8006f74:	4680      	mov	r8, r0
 8006f76:	4689      	mov	r9, r1
 8006f78:	f7f9 fdb8 	bl	8000aec <__aeabi_dcmplt>
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	d164      	bne.n	800704a <_dtoa_r+0x62a>
 8006f80:	4642      	mov	r2, r8
 8006f82:	464b      	mov	r3, r9
 8006f84:	4937      	ldr	r1, [pc, #220]	; (8007064 <_dtoa_r+0x644>)
 8006f86:	2000      	movs	r0, #0
 8006f88:	f7f9 f986 	bl	8000298 <__aeabi_dsub>
 8006f8c:	ec53 2b19 	vmov	r2, r3, d9
 8006f90:	f7f9 fdac 	bl	8000aec <__aeabi_dcmplt>
 8006f94:	2800      	cmp	r0, #0
 8006f96:	f040 80b6 	bne.w	8007106 <_dtoa_r+0x6e6>
 8006f9a:	9b02      	ldr	r3, [sp, #8]
 8006f9c:	429d      	cmp	r5, r3
 8006f9e:	f43f af7c 	beq.w	8006e9a <_dtoa_r+0x47a>
 8006fa2:	4b31      	ldr	r3, [pc, #196]	; (8007068 <_dtoa_r+0x648>)
 8006fa4:	ec51 0b19 	vmov	r0, r1, d9
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f7f9 fb2d 	bl	8000608 <__aeabi_dmul>
 8006fae:	4b2e      	ldr	r3, [pc, #184]	; (8007068 <_dtoa_r+0x648>)
 8006fb0:	ec41 0b19 	vmov	d9, r0, r1
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	4640      	mov	r0, r8
 8006fb8:	4649      	mov	r1, r9
 8006fba:	f7f9 fb25 	bl	8000608 <__aeabi_dmul>
 8006fbe:	4680      	mov	r8, r0
 8006fc0:	4689      	mov	r9, r1
 8006fc2:	e7c5      	b.n	8006f50 <_dtoa_r+0x530>
 8006fc4:	ec51 0b17 	vmov	r0, r1, d7
 8006fc8:	f7f9 fb1e 	bl	8000608 <__aeabi_dmul>
 8006fcc:	9b02      	ldr	r3, [sp, #8]
 8006fce:	9d00      	ldr	r5, [sp, #0]
 8006fd0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fd2:	ec41 0b19 	vmov	d9, r0, r1
 8006fd6:	4649      	mov	r1, r9
 8006fd8:	4640      	mov	r0, r8
 8006fda:	f7f9 fdc5 	bl	8000b68 <__aeabi_d2iz>
 8006fde:	4606      	mov	r6, r0
 8006fe0:	f7f9 faa8 	bl	8000534 <__aeabi_i2d>
 8006fe4:	3630      	adds	r6, #48	; 0x30
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	460b      	mov	r3, r1
 8006fea:	4640      	mov	r0, r8
 8006fec:	4649      	mov	r1, r9
 8006fee:	f7f9 f953 	bl	8000298 <__aeabi_dsub>
 8006ff2:	f805 6b01 	strb.w	r6, [r5], #1
 8006ff6:	9b02      	ldr	r3, [sp, #8]
 8006ff8:	429d      	cmp	r5, r3
 8006ffa:	4680      	mov	r8, r0
 8006ffc:	4689      	mov	r9, r1
 8006ffe:	f04f 0200 	mov.w	r2, #0
 8007002:	d124      	bne.n	800704e <_dtoa_r+0x62e>
 8007004:	4b1b      	ldr	r3, [pc, #108]	; (8007074 <_dtoa_r+0x654>)
 8007006:	ec51 0b19 	vmov	r0, r1, d9
 800700a:	f7f9 f947 	bl	800029c <__adddf3>
 800700e:	4602      	mov	r2, r0
 8007010:	460b      	mov	r3, r1
 8007012:	4640      	mov	r0, r8
 8007014:	4649      	mov	r1, r9
 8007016:	f7f9 fd87 	bl	8000b28 <__aeabi_dcmpgt>
 800701a:	2800      	cmp	r0, #0
 800701c:	d173      	bne.n	8007106 <_dtoa_r+0x6e6>
 800701e:	ec53 2b19 	vmov	r2, r3, d9
 8007022:	4914      	ldr	r1, [pc, #80]	; (8007074 <_dtoa_r+0x654>)
 8007024:	2000      	movs	r0, #0
 8007026:	f7f9 f937 	bl	8000298 <__aeabi_dsub>
 800702a:	4602      	mov	r2, r0
 800702c:	460b      	mov	r3, r1
 800702e:	4640      	mov	r0, r8
 8007030:	4649      	mov	r1, r9
 8007032:	f7f9 fd5b 	bl	8000aec <__aeabi_dcmplt>
 8007036:	2800      	cmp	r0, #0
 8007038:	f43f af2f 	beq.w	8006e9a <_dtoa_r+0x47a>
 800703c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800703e:	1e6b      	subs	r3, r5, #1
 8007040:	930f      	str	r3, [sp, #60]	; 0x3c
 8007042:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007046:	2b30      	cmp	r3, #48	; 0x30
 8007048:	d0f8      	beq.n	800703c <_dtoa_r+0x61c>
 800704a:	46bb      	mov	fp, r7
 800704c:	e04a      	b.n	80070e4 <_dtoa_r+0x6c4>
 800704e:	4b06      	ldr	r3, [pc, #24]	; (8007068 <_dtoa_r+0x648>)
 8007050:	f7f9 fada 	bl	8000608 <__aeabi_dmul>
 8007054:	4680      	mov	r8, r0
 8007056:	4689      	mov	r9, r1
 8007058:	e7bd      	b.n	8006fd6 <_dtoa_r+0x5b6>
 800705a:	bf00      	nop
 800705c:	080094e0 	.word	0x080094e0
 8007060:	080094b8 	.word	0x080094b8
 8007064:	3ff00000 	.word	0x3ff00000
 8007068:	40240000 	.word	0x40240000
 800706c:	401c0000 	.word	0x401c0000
 8007070:	40140000 	.word	0x40140000
 8007074:	3fe00000 	.word	0x3fe00000
 8007078:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800707c:	9d00      	ldr	r5, [sp, #0]
 800707e:	4642      	mov	r2, r8
 8007080:	464b      	mov	r3, r9
 8007082:	4630      	mov	r0, r6
 8007084:	4639      	mov	r1, r7
 8007086:	f7f9 fbe9 	bl	800085c <__aeabi_ddiv>
 800708a:	f7f9 fd6d 	bl	8000b68 <__aeabi_d2iz>
 800708e:	9001      	str	r0, [sp, #4]
 8007090:	f7f9 fa50 	bl	8000534 <__aeabi_i2d>
 8007094:	4642      	mov	r2, r8
 8007096:	464b      	mov	r3, r9
 8007098:	f7f9 fab6 	bl	8000608 <__aeabi_dmul>
 800709c:	4602      	mov	r2, r0
 800709e:	460b      	mov	r3, r1
 80070a0:	4630      	mov	r0, r6
 80070a2:	4639      	mov	r1, r7
 80070a4:	f7f9 f8f8 	bl	8000298 <__aeabi_dsub>
 80070a8:	9e01      	ldr	r6, [sp, #4]
 80070aa:	9f04      	ldr	r7, [sp, #16]
 80070ac:	3630      	adds	r6, #48	; 0x30
 80070ae:	f805 6b01 	strb.w	r6, [r5], #1
 80070b2:	9e00      	ldr	r6, [sp, #0]
 80070b4:	1bae      	subs	r6, r5, r6
 80070b6:	42b7      	cmp	r7, r6
 80070b8:	4602      	mov	r2, r0
 80070ba:	460b      	mov	r3, r1
 80070bc:	d134      	bne.n	8007128 <_dtoa_r+0x708>
 80070be:	f7f9 f8ed 	bl	800029c <__adddf3>
 80070c2:	4642      	mov	r2, r8
 80070c4:	464b      	mov	r3, r9
 80070c6:	4606      	mov	r6, r0
 80070c8:	460f      	mov	r7, r1
 80070ca:	f7f9 fd2d 	bl	8000b28 <__aeabi_dcmpgt>
 80070ce:	b9c8      	cbnz	r0, 8007104 <_dtoa_r+0x6e4>
 80070d0:	4642      	mov	r2, r8
 80070d2:	464b      	mov	r3, r9
 80070d4:	4630      	mov	r0, r6
 80070d6:	4639      	mov	r1, r7
 80070d8:	f7f9 fcfe 	bl	8000ad8 <__aeabi_dcmpeq>
 80070dc:	b110      	cbz	r0, 80070e4 <_dtoa_r+0x6c4>
 80070de:	9b01      	ldr	r3, [sp, #4]
 80070e0:	07db      	lsls	r3, r3, #31
 80070e2:	d40f      	bmi.n	8007104 <_dtoa_r+0x6e4>
 80070e4:	4651      	mov	r1, sl
 80070e6:	4620      	mov	r0, r4
 80070e8:	f000 fbcc 	bl	8007884 <_Bfree>
 80070ec:	2300      	movs	r3, #0
 80070ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80070f0:	702b      	strb	r3, [r5, #0]
 80070f2:	f10b 0301 	add.w	r3, fp, #1
 80070f6:	6013      	str	r3, [r2, #0]
 80070f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f43f ace2 	beq.w	8006ac4 <_dtoa_r+0xa4>
 8007100:	601d      	str	r5, [r3, #0]
 8007102:	e4df      	b.n	8006ac4 <_dtoa_r+0xa4>
 8007104:	465f      	mov	r7, fp
 8007106:	462b      	mov	r3, r5
 8007108:	461d      	mov	r5, r3
 800710a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800710e:	2a39      	cmp	r2, #57	; 0x39
 8007110:	d106      	bne.n	8007120 <_dtoa_r+0x700>
 8007112:	9a00      	ldr	r2, [sp, #0]
 8007114:	429a      	cmp	r2, r3
 8007116:	d1f7      	bne.n	8007108 <_dtoa_r+0x6e8>
 8007118:	9900      	ldr	r1, [sp, #0]
 800711a:	2230      	movs	r2, #48	; 0x30
 800711c:	3701      	adds	r7, #1
 800711e:	700a      	strb	r2, [r1, #0]
 8007120:	781a      	ldrb	r2, [r3, #0]
 8007122:	3201      	adds	r2, #1
 8007124:	701a      	strb	r2, [r3, #0]
 8007126:	e790      	b.n	800704a <_dtoa_r+0x62a>
 8007128:	4ba3      	ldr	r3, [pc, #652]	; (80073b8 <_dtoa_r+0x998>)
 800712a:	2200      	movs	r2, #0
 800712c:	f7f9 fa6c 	bl	8000608 <__aeabi_dmul>
 8007130:	2200      	movs	r2, #0
 8007132:	2300      	movs	r3, #0
 8007134:	4606      	mov	r6, r0
 8007136:	460f      	mov	r7, r1
 8007138:	f7f9 fcce 	bl	8000ad8 <__aeabi_dcmpeq>
 800713c:	2800      	cmp	r0, #0
 800713e:	d09e      	beq.n	800707e <_dtoa_r+0x65e>
 8007140:	e7d0      	b.n	80070e4 <_dtoa_r+0x6c4>
 8007142:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007144:	2a00      	cmp	r2, #0
 8007146:	f000 80ca 	beq.w	80072de <_dtoa_r+0x8be>
 800714a:	9a07      	ldr	r2, [sp, #28]
 800714c:	2a01      	cmp	r2, #1
 800714e:	f300 80ad 	bgt.w	80072ac <_dtoa_r+0x88c>
 8007152:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007154:	2a00      	cmp	r2, #0
 8007156:	f000 80a5 	beq.w	80072a4 <_dtoa_r+0x884>
 800715a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800715e:	9e08      	ldr	r6, [sp, #32]
 8007160:	9d05      	ldr	r5, [sp, #20]
 8007162:	9a05      	ldr	r2, [sp, #20]
 8007164:	441a      	add	r2, r3
 8007166:	9205      	str	r2, [sp, #20]
 8007168:	9a06      	ldr	r2, [sp, #24]
 800716a:	2101      	movs	r1, #1
 800716c:	441a      	add	r2, r3
 800716e:	4620      	mov	r0, r4
 8007170:	9206      	str	r2, [sp, #24]
 8007172:	f000 fc3d 	bl	80079f0 <__i2b>
 8007176:	4607      	mov	r7, r0
 8007178:	b165      	cbz	r5, 8007194 <_dtoa_r+0x774>
 800717a:	9b06      	ldr	r3, [sp, #24]
 800717c:	2b00      	cmp	r3, #0
 800717e:	dd09      	ble.n	8007194 <_dtoa_r+0x774>
 8007180:	42ab      	cmp	r3, r5
 8007182:	9a05      	ldr	r2, [sp, #20]
 8007184:	bfa8      	it	ge
 8007186:	462b      	movge	r3, r5
 8007188:	1ad2      	subs	r2, r2, r3
 800718a:	9205      	str	r2, [sp, #20]
 800718c:	9a06      	ldr	r2, [sp, #24]
 800718e:	1aed      	subs	r5, r5, r3
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	9306      	str	r3, [sp, #24]
 8007194:	9b08      	ldr	r3, [sp, #32]
 8007196:	b1f3      	cbz	r3, 80071d6 <_dtoa_r+0x7b6>
 8007198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800719a:	2b00      	cmp	r3, #0
 800719c:	f000 80a3 	beq.w	80072e6 <_dtoa_r+0x8c6>
 80071a0:	2e00      	cmp	r6, #0
 80071a2:	dd10      	ble.n	80071c6 <_dtoa_r+0x7a6>
 80071a4:	4639      	mov	r1, r7
 80071a6:	4632      	mov	r2, r6
 80071a8:	4620      	mov	r0, r4
 80071aa:	f000 fce1 	bl	8007b70 <__pow5mult>
 80071ae:	4652      	mov	r2, sl
 80071b0:	4601      	mov	r1, r0
 80071b2:	4607      	mov	r7, r0
 80071b4:	4620      	mov	r0, r4
 80071b6:	f000 fc31 	bl	8007a1c <__multiply>
 80071ba:	4651      	mov	r1, sl
 80071bc:	4680      	mov	r8, r0
 80071be:	4620      	mov	r0, r4
 80071c0:	f000 fb60 	bl	8007884 <_Bfree>
 80071c4:	46c2      	mov	sl, r8
 80071c6:	9b08      	ldr	r3, [sp, #32]
 80071c8:	1b9a      	subs	r2, r3, r6
 80071ca:	d004      	beq.n	80071d6 <_dtoa_r+0x7b6>
 80071cc:	4651      	mov	r1, sl
 80071ce:	4620      	mov	r0, r4
 80071d0:	f000 fcce 	bl	8007b70 <__pow5mult>
 80071d4:	4682      	mov	sl, r0
 80071d6:	2101      	movs	r1, #1
 80071d8:	4620      	mov	r0, r4
 80071da:	f000 fc09 	bl	80079f0 <__i2b>
 80071de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	4606      	mov	r6, r0
 80071e4:	f340 8081 	ble.w	80072ea <_dtoa_r+0x8ca>
 80071e8:	461a      	mov	r2, r3
 80071ea:	4601      	mov	r1, r0
 80071ec:	4620      	mov	r0, r4
 80071ee:	f000 fcbf 	bl	8007b70 <__pow5mult>
 80071f2:	9b07      	ldr	r3, [sp, #28]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	4606      	mov	r6, r0
 80071f8:	dd7a      	ble.n	80072f0 <_dtoa_r+0x8d0>
 80071fa:	f04f 0800 	mov.w	r8, #0
 80071fe:	6933      	ldr	r3, [r6, #16]
 8007200:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007204:	6918      	ldr	r0, [r3, #16]
 8007206:	f000 fba5 	bl	8007954 <__hi0bits>
 800720a:	f1c0 0020 	rsb	r0, r0, #32
 800720e:	9b06      	ldr	r3, [sp, #24]
 8007210:	4418      	add	r0, r3
 8007212:	f010 001f 	ands.w	r0, r0, #31
 8007216:	f000 8094 	beq.w	8007342 <_dtoa_r+0x922>
 800721a:	f1c0 0320 	rsb	r3, r0, #32
 800721e:	2b04      	cmp	r3, #4
 8007220:	f340 8085 	ble.w	800732e <_dtoa_r+0x90e>
 8007224:	9b05      	ldr	r3, [sp, #20]
 8007226:	f1c0 001c 	rsb	r0, r0, #28
 800722a:	4403      	add	r3, r0
 800722c:	9305      	str	r3, [sp, #20]
 800722e:	9b06      	ldr	r3, [sp, #24]
 8007230:	4403      	add	r3, r0
 8007232:	4405      	add	r5, r0
 8007234:	9306      	str	r3, [sp, #24]
 8007236:	9b05      	ldr	r3, [sp, #20]
 8007238:	2b00      	cmp	r3, #0
 800723a:	dd05      	ble.n	8007248 <_dtoa_r+0x828>
 800723c:	4651      	mov	r1, sl
 800723e:	461a      	mov	r2, r3
 8007240:	4620      	mov	r0, r4
 8007242:	f000 fcef 	bl	8007c24 <__lshift>
 8007246:	4682      	mov	sl, r0
 8007248:	9b06      	ldr	r3, [sp, #24]
 800724a:	2b00      	cmp	r3, #0
 800724c:	dd05      	ble.n	800725a <_dtoa_r+0x83a>
 800724e:	4631      	mov	r1, r6
 8007250:	461a      	mov	r2, r3
 8007252:	4620      	mov	r0, r4
 8007254:	f000 fce6 	bl	8007c24 <__lshift>
 8007258:	4606      	mov	r6, r0
 800725a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800725c:	2b00      	cmp	r3, #0
 800725e:	d072      	beq.n	8007346 <_dtoa_r+0x926>
 8007260:	4631      	mov	r1, r6
 8007262:	4650      	mov	r0, sl
 8007264:	f000 fd4a 	bl	8007cfc <__mcmp>
 8007268:	2800      	cmp	r0, #0
 800726a:	da6c      	bge.n	8007346 <_dtoa_r+0x926>
 800726c:	2300      	movs	r3, #0
 800726e:	4651      	mov	r1, sl
 8007270:	220a      	movs	r2, #10
 8007272:	4620      	mov	r0, r4
 8007274:	f000 fb28 	bl	80078c8 <__multadd>
 8007278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800727a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800727e:	4682      	mov	sl, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	f000 81b0 	beq.w	80075e6 <_dtoa_r+0xbc6>
 8007286:	2300      	movs	r3, #0
 8007288:	4639      	mov	r1, r7
 800728a:	220a      	movs	r2, #10
 800728c:	4620      	mov	r0, r4
 800728e:	f000 fb1b 	bl	80078c8 <__multadd>
 8007292:	9b01      	ldr	r3, [sp, #4]
 8007294:	2b00      	cmp	r3, #0
 8007296:	4607      	mov	r7, r0
 8007298:	f300 8096 	bgt.w	80073c8 <_dtoa_r+0x9a8>
 800729c:	9b07      	ldr	r3, [sp, #28]
 800729e:	2b02      	cmp	r3, #2
 80072a0:	dc59      	bgt.n	8007356 <_dtoa_r+0x936>
 80072a2:	e091      	b.n	80073c8 <_dtoa_r+0x9a8>
 80072a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80072a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80072aa:	e758      	b.n	800715e <_dtoa_r+0x73e>
 80072ac:	9b04      	ldr	r3, [sp, #16]
 80072ae:	1e5e      	subs	r6, r3, #1
 80072b0:	9b08      	ldr	r3, [sp, #32]
 80072b2:	42b3      	cmp	r3, r6
 80072b4:	bfbf      	itttt	lt
 80072b6:	9b08      	ldrlt	r3, [sp, #32]
 80072b8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80072ba:	9608      	strlt	r6, [sp, #32]
 80072bc:	1af3      	sublt	r3, r6, r3
 80072be:	bfb4      	ite	lt
 80072c0:	18d2      	addlt	r2, r2, r3
 80072c2:	1b9e      	subge	r6, r3, r6
 80072c4:	9b04      	ldr	r3, [sp, #16]
 80072c6:	bfbc      	itt	lt
 80072c8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80072ca:	2600      	movlt	r6, #0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	bfb7      	itett	lt
 80072d0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80072d4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80072d8:	1a9d      	sublt	r5, r3, r2
 80072da:	2300      	movlt	r3, #0
 80072dc:	e741      	b.n	8007162 <_dtoa_r+0x742>
 80072de:	9e08      	ldr	r6, [sp, #32]
 80072e0:	9d05      	ldr	r5, [sp, #20]
 80072e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80072e4:	e748      	b.n	8007178 <_dtoa_r+0x758>
 80072e6:	9a08      	ldr	r2, [sp, #32]
 80072e8:	e770      	b.n	80071cc <_dtoa_r+0x7ac>
 80072ea:	9b07      	ldr	r3, [sp, #28]
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	dc19      	bgt.n	8007324 <_dtoa_r+0x904>
 80072f0:	9b02      	ldr	r3, [sp, #8]
 80072f2:	b9bb      	cbnz	r3, 8007324 <_dtoa_r+0x904>
 80072f4:	9b03      	ldr	r3, [sp, #12]
 80072f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072fa:	b99b      	cbnz	r3, 8007324 <_dtoa_r+0x904>
 80072fc:	9b03      	ldr	r3, [sp, #12]
 80072fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007302:	0d1b      	lsrs	r3, r3, #20
 8007304:	051b      	lsls	r3, r3, #20
 8007306:	b183      	cbz	r3, 800732a <_dtoa_r+0x90a>
 8007308:	9b05      	ldr	r3, [sp, #20]
 800730a:	3301      	adds	r3, #1
 800730c:	9305      	str	r3, [sp, #20]
 800730e:	9b06      	ldr	r3, [sp, #24]
 8007310:	3301      	adds	r3, #1
 8007312:	9306      	str	r3, [sp, #24]
 8007314:	f04f 0801 	mov.w	r8, #1
 8007318:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800731a:	2b00      	cmp	r3, #0
 800731c:	f47f af6f 	bne.w	80071fe <_dtoa_r+0x7de>
 8007320:	2001      	movs	r0, #1
 8007322:	e774      	b.n	800720e <_dtoa_r+0x7ee>
 8007324:	f04f 0800 	mov.w	r8, #0
 8007328:	e7f6      	b.n	8007318 <_dtoa_r+0x8f8>
 800732a:	4698      	mov	r8, r3
 800732c:	e7f4      	b.n	8007318 <_dtoa_r+0x8f8>
 800732e:	d082      	beq.n	8007236 <_dtoa_r+0x816>
 8007330:	9a05      	ldr	r2, [sp, #20]
 8007332:	331c      	adds	r3, #28
 8007334:	441a      	add	r2, r3
 8007336:	9205      	str	r2, [sp, #20]
 8007338:	9a06      	ldr	r2, [sp, #24]
 800733a:	441a      	add	r2, r3
 800733c:	441d      	add	r5, r3
 800733e:	9206      	str	r2, [sp, #24]
 8007340:	e779      	b.n	8007236 <_dtoa_r+0x816>
 8007342:	4603      	mov	r3, r0
 8007344:	e7f4      	b.n	8007330 <_dtoa_r+0x910>
 8007346:	9b04      	ldr	r3, [sp, #16]
 8007348:	2b00      	cmp	r3, #0
 800734a:	dc37      	bgt.n	80073bc <_dtoa_r+0x99c>
 800734c:	9b07      	ldr	r3, [sp, #28]
 800734e:	2b02      	cmp	r3, #2
 8007350:	dd34      	ble.n	80073bc <_dtoa_r+0x99c>
 8007352:	9b04      	ldr	r3, [sp, #16]
 8007354:	9301      	str	r3, [sp, #4]
 8007356:	9b01      	ldr	r3, [sp, #4]
 8007358:	b963      	cbnz	r3, 8007374 <_dtoa_r+0x954>
 800735a:	4631      	mov	r1, r6
 800735c:	2205      	movs	r2, #5
 800735e:	4620      	mov	r0, r4
 8007360:	f000 fab2 	bl	80078c8 <__multadd>
 8007364:	4601      	mov	r1, r0
 8007366:	4606      	mov	r6, r0
 8007368:	4650      	mov	r0, sl
 800736a:	f000 fcc7 	bl	8007cfc <__mcmp>
 800736e:	2800      	cmp	r0, #0
 8007370:	f73f adbb 	bgt.w	8006eea <_dtoa_r+0x4ca>
 8007374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007376:	9d00      	ldr	r5, [sp, #0]
 8007378:	ea6f 0b03 	mvn.w	fp, r3
 800737c:	f04f 0800 	mov.w	r8, #0
 8007380:	4631      	mov	r1, r6
 8007382:	4620      	mov	r0, r4
 8007384:	f000 fa7e 	bl	8007884 <_Bfree>
 8007388:	2f00      	cmp	r7, #0
 800738a:	f43f aeab 	beq.w	80070e4 <_dtoa_r+0x6c4>
 800738e:	f1b8 0f00 	cmp.w	r8, #0
 8007392:	d005      	beq.n	80073a0 <_dtoa_r+0x980>
 8007394:	45b8      	cmp	r8, r7
 8007396:	d003      	beq.n	80073a0 <_dtoa_r+0x980>
 8007398:	4641      	mov	r1, r8
 800739a:	4620      	mov	r0, r4
 800739c:	f000 fa72 	bl	8007884 <_Bfree>
 80073a0:	4639      	mov	r1, r7
 80073a2:	4620      	mov	r0, r4
 80073a4:	f000 fa6e 	bl	8007884 <_Bfree>
 80073a8:	e69c      	b.n	80070e4 <_dtoa_r+0x6c4>
 80073aa:	2600      	movs	r6, #0
 80073ac:	4637      	mov	r7, r6
 80073ae:	e7e1      	b.n	8007374 <_dtoa_r+0x954>
 80073b0:	46bb      	mov	fp, r7
 80073b2:	4637      	mov	r7, r6
 80073b4:	e599      	b.n	8006eea <_dtoa_r+0x4ca>
 80073b6:	bf00      	nop
 80073b8:	40240000 	.word	0x40240000
 80073bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f000 80c8 	beq.w	8007554 <_dtoa_r+0xb34>
 80073c4:	9b04      	ldr	r3, [sp, #16]
 80073c6:	9301      	str	r3, [sp, #4]
 80073c8:	2d00      	cmp	r5, #0
 80073ca:	dd05      	ble.n	80073d8 <_dtoa_r+0x9b8>
 80073cc:	4639      	mov	r1, r7
 80073ce:	462a      	mov	r2, r5
 80073d0:	4620      	mov	r0, r4
 80073d2:	f000 fc27 	bl	8007c24 <__lshift>
 80073d6:	4607      	mov	r7, r0
 80073d8:	f1b8 0f00 	cmp.w	r8, #0
 80073dc:	d05b      	beq.n	8007496 <_dtoa_r+0xa76>
 80073de:	6879      	ldr	r1, [r7, #4]
 80073e0:	4620      	mov	r0, r4
 80073e2:	f000 fa0f 	bl	8007804 <_Balloc>
 80073e6:	4605      	mov	r5, r0
 80073e8:	b928      	cbnz	r0, 80073f6 <_dtoa_r+0x9d6>
 80073ea:	4b83      	ldr	r3, [pc, #524]	; (80075f8 <_dtoa_r+0xbd8>)
 80073ec:	4602      	mov	r2, r0
 80073ee:	f240 21ef 	movw	r1, #751	; 0x2ef
 80073f2:	f7ff bb2e 	b.w	8006a52 <_dtoa_r+0x32>
 80073f6:	693a      	ldr	r2, [r7, #16]
 80073f8:	3202      	adds	r2, #2
 80073fa:	0092      	lsls	r2, r2, #2
 80073fc:	f107 010c 	add.w	r1, r7, #12
 8007400:	300c      	adds	r0, #12
 8007402:	f7ff fa76 	bl	80068f2 <memcpy>
 8007406:	2201      	movs	r2, #1
 8007408:	4629      	mov	r1, r5
 800740a:	4620      	mov	r0, r4
 800740c:	f000 fc0a 	bl	8007c24 <__lshift>
 8007410:	9b00      	ldr	r3, [sp, #0]
 8007412:	3301      	adds	r3, #1
 8007414:	9304      	str	r3, [sp, #16]
 8007416:	e9dd 2300 	ldrd	r2, r3, [sp]
 800741a:	4413      	add	r3, r2
 800741c:	9308      	str	r3, [sp, #32]
 800741e:	9b02      	ldr	r3, [sp, #8]
 8007420:	f003 0301 	and.w	r3, r3, #1
 8007424:	46b8      	mov	r8, r7
 8007426:	9306      	str	r3, [sp, #24]
 8007428:	4607      	mov	r7, r0
 800742a:	9b04      	ldr	r3, [sp, #16]
 800742c:	4631      	mov	r1, r6
 800742e:	3b01      	subs	r3, #1
 8007430:	4650      	mov	r0, sl
 8007432:	9301      	str	r3, [sp, #4]
 8007434:	f7ff fa6b 	bl	800690e <quorem>
 8007438:	4641      	mov	r1, r8
 800743a:	9002      	str	r0, [sp, #8]
 800743c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007440:	4650      	mov	r0, sl
 8007442:	f000 fc5b 	bl	8007cfc <__mcmp>
 8007446:	463a      	mov	r2, r7
 8007448:	9005      	str	r0, [sp, #20]
 800744a:	4631      	mov	r1, r6
 800744c:	4620      	mov	r0, r4
 800744e:	f000 fc71 	bl	8007d34 <__mdiff>
 8007452:	68c2      	ldr	r2, [r0, #12]
 8007454:	4605      	mov	r5, r0
 8007456:	bb02      	cbnz	r2, 800749a <_dtoa_r+0xa7a>
 8007458:	4601      	mov	r1, r0
 800745a:	4650      	mov	r0, sl
 800745c:	f000 fc4e 	bl	8007cfc <__mcmp>
 8007460:	4602      	mov	r2, r0
 8007462:	4629      	mov	r1, r5
 8007464:	4620      	mov	r0, r4
 8007466:	9209      	str	r2, [sp, #36]	; 0x24
 8007468:	f000 fa0c 	bl	8007884 <_Bfree>
 800746c:	9b07      	ldr	r3, [sp, #28]
 800746e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007470:	9d04      	ldr	r5, [sp, #16]
 8007472:	ea43 0102 	orr.w	r1, r3, r2
 8007476:	9b06      	ldr	r3, [sp, #24]
 8007478:	4319      	orrs	r1, r3
 800747a:	d110      	bne.n	800749e <_dtoa_r+0xa7e>
 800747c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007480:	d029      	beq.n	80074d6 <_dtoa_r+0xab6>
 8007482:	9b05      	ldr	r3, [sp, #20]
 8007484:	2b00      	cmp	r3, #0
 8007486:	dd02      	ble.n	800748e <_dtoa_r+0xa6e>
 8007488:	9b02      	ldr	r3, [sp, #8]
 800748a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800748e:	9b01      	ldr	r3, [sp, #4]
 8007490:	f883 9000 	strb.w	r9, [r3]
 8007494:	e774      	b.n	8007380 <_dtoa_r+0x960>
 8007496:	4638      	mov	r0, r7
 8007498:	e7ba      	b.n	8007410 <_dtoa_r+0x9f0>
 800749a:	2201      	movs	r2, #1
 800749c:	e7e1      	b.n	8007462 <_dtoa_r+0xa42>
 800749e:	9b05      	ldr	r3, [sp, #20]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	db04      	blt.n	80074ae <_dtoa_r+0xa8e>
 80074a4:	9907      	ldr	r1, [sp, #28]
 80074a6:	430b      	orrs	r3, r1
 80074a8:	9906      	ldr	r1, [sp, #24]
 80074aa:	430b      	orrs	r3, r1
 80074ac:	d120      	bne.n	80074f0 <_dtoa_r+0xad0>
 80074ae:	2a00      	cmp	r2, #0
 80074b0:	dded      	ble.n	800748e <_dtoa_r+0xa6e>
 80074b2:	4651      	mov	r1, sl
 80074b4:	2201      	movs	r2, #1
 80074b6:	4620      	mov	r0, r4
 80074b8:	f000 fbb4 	bl	8007c24 <__lshift>
 80074bc:	4631      	mov	r1, r6
 80074be:	4682      	mov	sl, r0
 80074c0:	f000 fc1c 	bl	8007cfc <__mcmp>
 80074c4:	2800      	cmp	r0, #0
 80074c6:	dc03      	bgt.n	80074d0 <_dtoa_r+0xab0>
 80074c8:	d1e1      	bne.n	800748e <_dtoa_r+0xa6e>
 80074ca:	f019 0f01 	tst.w	r9, #1
 80074ce:	d0de      	beq.n	800748e <_dtoa_r+0xa6e>
 80074d0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80074d4:	d1d8      	bne.n	8007488 <_dtoa_r+0xa68>
 80074d6:	9a01      	ldr	r2, [sp, #4]
 80074d8:	2339      	movs	r3, #57	; 0x39
 80074da:	7013      	strb	r3, [r2, #0]
 80074dc:	462b      	mov	r3, r5
 80074de:	461d      	mov	r5, r3
 80074e0:	3b01      	subs	r3, #1
 80074e2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80074e6:	2a39      	cmp	r2, #57	; 0x39
 80074e8:	d06c      	beq.n	80075c4 <_dtoa_r+0xba4>
 80074ea:	3201      	adds	r2, #1
 80074ec:	701a      	strb	r2, [r3, #0]
 80074ee:	e747      	b.n	8007380 <_dtoa_r+0x960>
 80074f0:	2a00      	cmp	r2, #0
 80074f2:	dd07      	ble.n	8007504 <_dtoa_r+0xae4>
 80074f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80074f8:	d0ed      	beq.n	80074d6 <_dtoa_r+0xab6>
 80074fa:	9a01      	ldr	r2, [sp, #4]
 80074fc:	f109 0301 	add.w	r3, r9, #1
 8007500:	7013      	strb	r3, [r2, #0]
 8007502:	e73d      	b.n	8007380 <_dtoa_r+0x960>
 8007504:	9b04      	ldr	r3, [sp, #16]
 8007506:	9a08      	ldr	r2, [sp, #32]
 8007508:	f803 9c01 	strb.w	r9, [r3, #-1]
 800750c:	4293      	cmp	r3, r2
 800750e:	d043      	beq.n	8007598 <_dtoa_r+0xb78>
 8007510:	4651      	mov	r1, sl
 8007512:	2300      	movs	r3, #0
 8007514:	220a      	movs	r2, #10
 8007516:	4620      	mov	r0, r4
 8007518:	f000 f9d6 	bl	80078c8 <__multadd>
 800751c:	45b8      	cmp	r8, r7
 800751e:	4682      	mov	sl, r0
 8007520:	f04f 0300 	mov.w	r3, #0
 8007524:	f04f 020a 	mov.w	r2, #10
 8007528:	4641      	mov	r1, r8
 800752a:	4620      	mov	r0, r4
 800752c:	d107      	bne.n	800753e <_dtoa_r+0xb1e>
 800752e:	f000 f9cb 	bl	80078c8 <__multadd>
 8007532:	4680      	mov	r8, r0
 8007534:	4607      	mov	r7, r0
 8007536:	9b04      	ldr	r3, [sp, #16]
 8007538:	3301      	adds	r3, #1
 800753a:	9304      	str	r3, [sp, #16]
 800753c:	e775      	b.n	800742a <_dtoa_r+0xa0a>
 800753e:	f000 f9c3 	bl	80078c8 <__multadd>
 8007542:	4639      	mov	r1, r7
 8007544:	4680      	mov	r8, r0
 8007546:	2300      	movs	r3, #0
 8007548:	220a      	movs	r2, #10
 800754a:	4620      	mov	r0, r4
 800754c:	f000 f9bc 	bl	80078c8 <__multadd>
 8007550:	4607      	mov	r7, r0
 8007552:	e7f0      	b.n	8007536 <_dtoa_r+0xb16>
 8007554:	9b04      	ldr	r3, [sp, #16]
 8007556:	9301      	str	r3, [sp, #4]
 8007558:	9d00      	ldr	r5, [sp, #0]
 800755a:	4631      	mov	r1, r6
 800755c:	4650      	mov	r0, sl
 800755e:	f7ff f9d6 	bl	800690e <quorem>
 8007562:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007566:	9b00      	ldr	r3, [sp, #0]
 8007568:	f805 9b01 	strb.w	r9, [r5], #1
 800756c:	1aea      	subs	r2, r5, r3
 800756e:	9b01      	ldr	r3, [sp, #4]
 8007570:	4293      	cmp	r3, r2
 8007572:	dd07      	ble.n	8007584 <_dtoa_r+0xb64>
 8007574:	4651      	mov	r1, sl
 8007576:	2300      	movs	r3, #0
 8007578:	220a      	movs	r2, #10
 800757a:	4620      	mov	r0, r4
 800757c:	f000 f9a4 	bl	80078c8 <__multadd>
 8007580:	4682      	mov	sl, r0
 8007582:	e7ea      	b.n	800755a <_dtoa_r+0xb3a>
 8007584:	9b01      	ldr	r3, [sp, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	bfc8      	it	gt
 800758a:	461d      	movgt	r5, r3
 800758c:	9b00      	ldr	r3, [sp, #0]
 800758e:	bfd8      	it	le
 8007590:	2501      	movle	r5, #1
 8007592:	441d      	add	r5, r3
 8007594:	f04f 0800 	mov.w	r8, #0
 8007598:	4651      	mov	r1, sl
 800759a:	2201      	movs	r2, #1
 800759c:	4620      	mov	r0, r4
 800759e:	f000 fb41 	bl	8007c24 <__lshift>
 80075a2:	4631      	mov	r1, r6
 80075a4:	4682      	mov	sl, r0
 80075a6:	f000 fba9 	bl	8007cfc <__mcmp>
 80075aa:	2800      	cmp	r0, #0
 80075ac:	dc96      	bgt.n	80074dc <_dtoa_r+0xabc>
 80075ae:	d102      	bne.n	80075b6 <_dtoa_r+0xb96>
 80075b0:	f019 0f01 	tst.w	r9, #1
 80075b4:	d192      	bne.n	80074dc <_dtoa_r+0xabc>
 80075b6:	462b      	mov	r3, r5
 80075b8:	461d      	mov	r5, r3
 80075ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075be:	2a30      	cmp	r2, #48	; 0x30
 80075c0:	d0fa      	beq.n	80075b8 <_dtoa_r+0xb98>
 80075c2:	e6dd      	b.n	8007380 <_dtoa_r+0x960>
 80075c4:	9a00      	ldr	r2, [sp, #0]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d189      	bne.n	80074de <_dtoa_r+0xabe>
 80075ca:	f10b 0b01 	add.w	fp, fp, #1
 80075ce:	2331      	movs	r3, #49	; 0x31
 80075d0:	e796      	b.n	8007500 <_dtoa_r+0xae0>
 80075d2:	4b0a      	ldr	r3, [pc, #40]	; (80075fc <_dtoa_r+0xbdc>)
 80075d4:	f7ff ba99 	b.w	8006b0a <_dtoa_r+0xea>
 80075d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075da:	2b00      	cmp	r3, #0
 80075dc:	f47f aa6d 	bne.w	8006aba <_dtoa_r+0x9a>
 80075e0:	4b07      	ldr	r3, [pc, #28]	; (8007600 <_dtoa_r+0xbe0>)
 80075e2:	f7ff ba92 	b.w	8006b0a <_dtoa_r+0xea>
 80075e6:	9b01      	ldr	r3, [sp, #4]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	dcb5      	bgt.n	8007558 <_dtoa_r+0xb38>
 80075ec:	9b07      	ldr	r3, [sp, #28]
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	f73f aeb1 	bgt.w	8007356 <_dtoa_r+0x936>
 80075f4:	e7b0      	b.n	8007558 <_dtoa_r+0xb38>
 80075f6:	bf00      	nop
 80075f8:	08009449 	.word	0x08009449
 80075fc:	080093a9 	.word	0x080093a9
 8007600:	080093cd 	.word	0x080093cd

08007604 <_free_r>:
 8007604:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007606:	2900      	cmp	r1, #0
 8007608:	d044      	beq.n	8007694 <_free_r+0x90>
 800760a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800760e:	9001      	str	r0, [sp, #4]
 8007610:	2b00      	cmp	r3, #0
 8007612:	f1a1 0404 	sub.w	r4, r1, #4
 8007616:	bfb8      	it	lt
 8007618:	18e4      	addlt	r4, r4, r3
 800761a:	f000 f8e7 	bl	80077ec <__malloc_lock>
 800761e:	4a1e      	ldr	r2, [pc, #120]	; (8007698 <_free_r+0x94>)
 8007620:	9801      	ldr	r0, [sp, #4]
 8007622:	6813      	ldr	r3, [r2, #0]
 8007624:	b933      	cbnz	r3, 8007634 <_free_r+0x30>
 8007626:	6063      	str	r3, [r4, #4]
 8007628:	6014      	str	r4, [r2, #0]
 800762a:	b003      	add	sp, #12
 800762c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007630:	f000 b8e2 	b.w	80077f8 <__malloc_unlock>
 8007634:	42a3      	cmp	r3, r4
 8007636:	d908      	bls.n	800764a <_free_r+0x46>
 8007638:	6825      	ldr	r5, [r4, #0]
 800763a:	1961      	adds	r1, r4, r5
 800763c:	428b      	cmp	r3, r1
 800763e:	bf01      	itttt	eq
 8007640:	6819      	ldreq	r1, [r3, #0]
 8007642:	685b      	ldreq	r3, [r3, #4]
 8007644:	1949      	addeq	r1, r1, r5
 8007646:	6021      	streq	r1, [r4, #0]
 8007648:	e7ed      	b.n	8007626 <_free_r+0x22>
 800764a:	461a      	mov	r2, r3
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	b10b      	cbz	r3, 8007654 <_free_r+0x50>
 8007650:	42a3      	cmp	r3, r4
 8007652:	d9fa      	bls.n	800764a <_free_r+0x46>
 8007654:	6811      	ldr	r1, [r2, #0]
 8007656:	1855      	adds	r5, r2, r1
 8007658:	42a5      	cmp	r5, r4
 800765a:	d10b      	bne.n	8007674 <_free_r+0x70>
 800765c:	6824      	ldr	r4, [r4, #0]
 800765e:	4421      	add	r1, r4
 8007660:	1854      	adds	r4, r2, r1
 8007662:	42a3      	cmp	r3, r4
 8007664:	6011      	str	r1, [r2, #0]
 8007666:	d1e0      	bne.n	800762a <_free_r+0x26>
 8007668:	681c      	ldr	r4, [r3, #0]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	6053      	str	r3, [r2, #4]
 800766e:	440c      	add	r4, r1
 8007670:	6014      	str	r4, [r2, #0]
 8007672:	e7da      	b.n	800762a <_free_r+0x26>
 8007674:	d902      	bls.n	800767c <_free_r+0x78>
 8007676:	230c      	movs	r3, #12
 8007678:	6003      	str	r3, [r0, #0]
 800767a:	e7d6      	b.n	800762a <_free_r+0x26>
 800767c:	6825      	ldr	r5, [r4, #0]
 800767e:	1961      	adds	r1, r4, r5
 8007680:	428b      	cmp	r3, r1
 8007682:	bf04      	itt	eq
 8007684:	6819      	ldreq	r1, [r3, #0]
 8007686:	685b      	ldreq	r3, [r3, #4]
 8007688:	6063      	str	r3, [r4, #4]
 800768a:	bf04      	itt	eq
 800768c:	1949      	addeq	r1, r1, r5
 800768e:	6021      	streq	r1, [r4, #0]
 8007690:	6054      	str	r4, [r2, #4]
 8007692:	e7ca      	b.n	800762a <_free_r+0x26>
 8007694:	b003      	add	sp, #12
 8007696:	bd30      	pop	{r4, r5, pc}
 8007698:	20000558 	.word	0x20000558

0800769c <malloc>:
 800769c:	4b02      	ldr	r3, [pc, #8]	; (80076a8 <malloc+0xc>)
 800769e:	4601      	mov	r1, r0
 80076a0:	6818      	ldr	r0, [r3, #0]
 80076a2:	f000 b823 	b.w	80076ec <_malloc_r>
 80076a6:	bf00      	nop
 80076a8:	20000074 	.word	0x20000074

080076ac <sbrk_aligned>:
 80076ac:	b570      	push	{r4, r5, r6, lr}
 80076ae:	4e0e      	ldr	r6, [pc, #56]	; (80076e8 <sbrk_aligned+0x3c>)
 80076b0:	460c      	mov	r4, r1
 80076b2:	6831      	ldr	r1, [r6, #0]
 80076b4:	4605      	mov	r5, r0
 80076b6:	b911      	cbnz	r1, 80076be <sbrk_aligned+0x12>
 80076b8:	f000 fe40 	bl	800833c <_sbrk_r>
 80076bc:	6030      	str	r0, [r6, #0]
 80076be:	4621      	mov	r1, r4
 80076c0:	4628      	mov	r0, r5
 80076c2:	f000 fe3b 	bl	800833c <_sbrk_r>
 80076c6:	1c43      	adds	r3, r0, #1
 80076c8:	d00a      	beq.n	80076e0 <sbrk_aligned+0x34>
 80076ca:	1cc4      	adds	r4, r0, #3
 80076cc:	f024 0403 	bic.w	r4, r4, #3
 80076d0:	42a0      	cmp	r0, r4
 80076d2:	d007      	beq.n	80076e4 <sbrk_aligned+0x38>
 80076d4:	1a21      	subs	r1, r4, r0
 80076d6:	4628      	mov	r0, r5
 80076d8:	f000 fe30 	bl	800833c <_sbrk_r>
 80076dc:	3001      	adds	r0, #1
 80076de:	d101      	bne.n	80076e4 <sbrk_aligned+0x38>
 80076e0:	f04f 34ff 	mov.w	r4, #4294967295
 80076e4:	4620      	mov	r0, r4
 80076e6:	bd70      	pop	{r4, r5, r6, pc}
 80076e8:	2000055c 	.word	0x2000055c

080076ec <_malloc_r>:
 80076ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076f0:	1ccd      	adds	r5, r1, #3
 80076f2:	f025 0503 	bic.w	r5, r5, #3
 80076f6:	3508      	adds	r5, #8
 80076f8:	2d0c      	cmp	r5, #12
 80076fa:	bf38      	it	cc
 80076fc:	250c      	movcc	r5, #12
 80076fe:	2d00      	cmp	r5, #0
 8007700:	4607      	mov	r7, r0
 8007702:	db01      	blt.n	8007708 <_malloc_r+0x1c>
 8007704:	42a9      	cmp	r1, r5
 8007706:	d905      	bls.n	8007714 <_malloc_r+0x28>
 8007708:	230c      	movs	r3, #12
 800770a:	603b      	str	r3, [r7, #0]
 800770c:	2600      	movs	r6, #0
 800770e:	4630      	mov	r0, r6
 8007710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007714:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80077e8 <_malloc_r+0xfc>
 8007718:	f000 f868 	bl	80077ec <__malloc_lock>
 800771c:	f8d8 3000 	ldr.w	r3, [r8]
 8007720:	461c      	mov	r4, r3
 8007722:	bb5c      	cbnz	r4, 800777c <_malloc_r+0x90>
 8007724:	4629      	mov	r1, r5
 8007726:	4638      	mov	r0, r7
 8007728:	f7ff ffc0 	bl	80076ac <sbrk_aligned>
 800772c:	1c43      	adds	r3, r0, #1
 800772e:	4604      	mov	r4, r0
 8007730:	d155      	bne.n	80077de <_malloc_r+0xf2>
 8007732:	f8d8 4000 	ldr.w	r4, [r8]
 8007736:	4626      	mov	r6, r4
 8007738:	2e00      	cmp	r6, #0
 800773a:	d145      	bne.n	80077c8 <_malloc_r+0xdc>
 800773c:	2c00      	cmp	r4, #0
 800773e:	d048      	beq.n	80077d2 <_malloc_r+0xe6>
 8007740:	6823      	ldr	r3, [r4, #0]
 8007742:	4631      	mov	r1, r6
 8007744:	4638      	mov	r0, r7
 8007746:	eb04 0903 	add.w	r9, r4, r3
 800774a:	f000 fdf7 	bl	800833c <_sbrk_r>
 800774e:	4581      	cmp	r9, r0
 8007750:	d13f      	bne.n	80077d2 <_malloc_r+0xe6>
 8007752:	6821      	ldr	r1, [r4, #0]
 8007754:	1a6d      	subs	r5, r5, r1
 8007756:	4629      	mov	r1, r5
 8007758:	4638      	mov	r0, r7
 800775a:	f7ff ffa7 	bl	80076ac <sbrk_aligned>
 800775e:	3001      	adds	r0, #1
 8007760:	d037      	beq.n	80077d2 <_malloc_r+0xe6>
 8007762:	6823      	ldr	r3, [r4, #0]
 8007764:	442b      	add	r3, r5
 8007766:	6023      	str	r3, [r4, #0]
 8007768:	f8d8 3000 	ldr.w	r3, [r8]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d038      	beq.n	80077e2 <_malloc_r+0xf6>
 8007770:	685a      	ldr	r2, [r3, #4]
 8007772:	42a2      	cmp	r2, r4
 8007774:	d12b      	bne.n	80077ce <_malloc_r+0xe2>
 8007776:	2200      	movs	r2, #0
 8007778:	605a      	str	r2, [r3, #4]
 800777a:	e00f      	b.n	800779c <_malloc_r+0xb0>
 800777c:	6822      	ldr	r2, [r4, #0]
 800777e:	1b52      	subs	r2, r2, r5
 8007780:	d41f      	bmi.n	80077c2 <_malloc_r+0xd6>
 8007782:	2a0b      	cmp	r2, #11
 8007784:	d917      	bls.n	80077b6 <_malloc_r+0xca>
 8007786:	1961      	adds	r1, r4, r5
 8007788:	42a3      	cmp	r3, r4
 800778a:	6025      	str	r5, [r4, #0]
 800778c:	bf18      	it	ne
 800778e:	6059      	strne	r1, [r3, #4]
 8007790:	6863      	ldr	r3, [r4, #4]
 8007792:	bf08      	it	eq
 8007794:	f8c8 1000 	streq.w	r1, [r8]
 8007798:	5162      	str	r2, [r4, r5]
 800779a:	604b      	str	r3, [r1, #4]
 800779c:	4638      	mov	r0, r7
 800779e:	f104 060b 	add.w	r6, r4, #11
 80077a2:	f000 f829 	bl	80077f8 <__malloc_unlock>
 80077a6:	f026 0607 	bic.w	r6, r6, #7
 80077aa:	1d23      	adds	r3, r4, #4
 80077ac:	1af2      	subs	r2, r6, r3
 80077ae:	d0ae      	beq.n	800770e <_malloc_r+0x22>
 80077b0:	1b9b      	subs	r3, r3, r6
 80077b2:	50a3      	str	r3, [r4, r2]
 80077b4:	e7ab      	b.n	800770e <_malloc_r+0x22>
 80077b6:	42a3      	cmp	r3, r4
 80077b8:	6862      	ldr	r2, [r4, #4]
 80077ba:	d1dd      	bne.n	8007778 <_malloc_r+0x8c>
 80077bc:	f8c8 2000 	str.w	r2, [r8]
 80077c0:	e7ec      	b.n	800779c <_malloc_r+0xb0>
 80077c2:	4623      	mov	r3, r4
 80077c4:	6864      	ldr	r4, [r4, #4]
 80077c6:	e7ac      	b.n	8007722 <_malloc_r+0x36>
 80077c8:	4634      	mov	r4, r6
 80077ca:	6876      	ldr	r6, [r6, #4]
 80077cc:	e7b4      	b.n	8007738 <_malloc_r+0x4c>
 80077ce:	4613      	mov	r3, r2
 80077d0:	e7cc      	b.n	800776c <_malloc_r+0x80>
 80077d2:	230c      	movs	r3, #12
 80077d4:	603b      	str	r3, [r7, #0]
 80077d6:	4638      	mov	r0, r7
 80077d8:	f000 f80e 	bl	80077f8 <__malloc_unlock>
 80077dc:	e797      	b.n	800770e <_malloc_r+0x22>
 80077de:	6025      	str	r5, [r4, #0]
 80077e0:	e7dc      	b.n	800779c <_malloc_r+0xb0>
 80077e2:	605b      	str	r3, [r3, #4]
 80077e4:	deff      	udf	#255	; 0xff
 80077e6:	bf00      	nop
 80077e8:	20000558 	.word	0x20000558

080077ec <__malloc_lock>:
 80077ec:	4801      	ldr	r0, [pc, #4]	; (80077f4 <__malloc_lock+0x8>)
 80077ee:	f7ff b87e 	b.w	80068ee <__retarget_lock_acquire_recursive>
 80077f2:	bf00      	nop
 80077f4:	20000554 	.word	0x20000554

080077f8 <__malloc_unlock>:
 80077f8:	4801      	ldr	r0, [pc, #4]	; (8007800 <__malloc_unlock+0x8>)
 80077fa:	f7ff b879 	b.w	80068f0 <__retarget_lock_release_recursive>
 80077fe:	bf00      	nop
 8007800:	20000554 	.word	0x20000554

08007804 <_Balloc>:
 8007804:	b570      	push	{r4, r5, r6, lr}
 8007806:	69c6      	ldr	r6, [r0, #28]
 8007808:	4604      	mov	r4, r0
 800780a:	460d      	mov	r5, r1
 800780c:	b976      	cbnz	r6, 800782c <_Balloc+0x28>
 800780e:	2010      	movs	r0, #16
 8007810:	f7ff ff44 	bl	800769c <malloc>
 8007814:	4602      	mov	r2, r0
 8007816:	61e0      	str	r0, [r4, #28]
 8007818:	b920      	cbnz	r0, 8007824 <_Balloc+0x20>
 800781a:	4b18      	ldr	r3, [pc, #96]	; (800787c <_Balloc+0x78>)
 800781c:	4818      	ldr	r0, [pc, #96]	; (8007880 <_Balloc+0x7c>)
 800781e:	216b      	movs	r1, #107	; 0x6b
 8007820:	f000 fd9c 	bl	800835c <__assert_func>
 8007824:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007828:	6006      	str	r6, [r0, #0]
 800782a:	60c6      	str	r6, [r0, #12]
 800782c:	69e6      	ldr	r6, [r4, #28]
 800782e:	68f3      	ldr	r3, [r6, #12]
 8007830:	b183      	cbz	r3, 8007854 <_Balloc+0x50>
 8007832:	69e3      	ldr	r3, [r4, #28]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800783a:	b9b8      	cbnz	r0, 800786c <_Balloc+0x68>
 800783c:	2101      	movs	r1, #1
 800783e:	fa01 f605 	lsl.w	r6, r1, r5
 8007842:	1d72      	adds	r2, r6, #5
 8007844:	0092      	lsls	r2, r2, #2
 8007846:	4620      	mov	r0, r4
 8007848:	f000 fda6 	bl	8008398 <_calloc_r>
 800784c:	b160      	cbz	r0, 8007868 <_Balloc+0x64>
 800784e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007852:	e00e      	b.n	8007872 <_Balloc+0x6e>
 8007854:	2221      	movs	r2, #33	; 0x21
 8007856:	2104      	movs	r1, #4
 8007858:	4620      	mov	r0, r4
 800785a:	f000 fd9d 	bl	8008398 <_calloc_r>
 800785e:	69e3      	ldr	r3, [r4, #28]
 8007860:	60f0      	str	r0, [r6, #12]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d1e4      	bne.n	8007832 <_Balloc+0x2e>
 8007868:	2000      	movs	r0, #0
 800786a:	bd70      	pop	{r4, r5, r6, pc}
 800786c:	6802      	ldr	r2, [r0, #0]
 800786e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007872:	2300      	movs	r3, #0
 8007874:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007878:	e7f7      	b.n	800786a <_Balloc+0x66>
 800787a:	bf00      	nop
 800787c:	080093da 	.word	0x080093da
 8007880:	0800945a 	.word	0x0800945a

08007884 <_Bfree>:
 8007884:	b570      	push	{r4, r5, r6, lr}
 8007886:	69c6      	ldr	r6, [r0, #28]
 8007888:	4605      	mov	r5, r0
 800788a:	460c      	mov	r4, r1
 800788c:	b976      	cbnz	r6, 80078ac <_Bfree+0x28>
 800788e:	2010      	movs	r0, #16
 8007890:	f7ff ff04 	bl	800769c <malloc>
 8007894:	4602      	mov	r2, r0
 8007896:	61e8      	str	r0, [r5, #28]
 8007898:	b920      	cbnz	r0, 80078a4 <_Bfree+0x20>
 800789a:	4b09      	ldr	r3, [pc, #36]	; (80078c0 <_Bfree+0x3c>)
 800789c:	4809      	ldr	r0, [pc, #36]	; (80078c4 <_Bfree+0x40>)
 800789e:	218f      	movs	r1, #143	; 0x8f
 80078a0:	f000 fd5c 	bl	800835c <__assert_func>
 80078a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078a8:	6006      	str	r6, [r0, #0]
 80078aa:	60c6      	str	r6, [r0, #12]
 80078ac:	b13c      	cbz	r4, 80078be <_Bfree+0x3a>
 80078ae:	69eb      	ldr	r3, [r5, #28]
 80078b0:	6862      	ldr	r2, [r4, #4]
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078b8:	6021      	str	r1, [r4, #0]
 80078ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80078be:	bd70      	pop	{r4, r5, r6, pc}
 80078c0:	080093da 	.word	0x080093da
 80078c4:	0800945a 	.word	0x0800945a

080078c8 <__multadd>:
 80078c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078cc:	690d      	ldr	r5, [r1, #16]
 80078ce:	4607      	mov	r7, r0
 80078d0:	460c      	mov	r4, r1
 80078d2:	461e      	mov	r6, r3
 80078d4:	f101 0c14 	add.w	ip, r1, #20
 80078d8:	2000      	movs	r0, #0
 80078da:	f8dc 3000 	ldr.w	r3, [ip]
 80078de:	b299      	uxth	r1, r3
 80078e0:	fb02 6101 	mla	r1, r2, r1, r6
 80078e4:	0c1e      	lsrs	r6, r3, #16
 80078e6:	0c0b      	lsrs	r3, r1, #16
 80078e8:	fb02 3306 	mla	r3, r2, r6, r3
 80078ec:	b289      	uxth	r1, r1
 80078ee:	3001      	adds	r0, #1
 80078f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80078f4:	4285      	cmp	r5, r0
 80078f6:	f84c 1b04 	str.w	r1, [ip], #4
 80078fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80078fe:	dcec      	bgt.n	80078da <__multadd+0x12>
 8007900:	b30e      	cbz	r6, 8007946 <__multadd+0x7e>
 8007902:	68a3      	ldr	r3, [r4, #8]
 8007904:	42ab      	cmp	r3, r5
 8007906:	dc19      	bgt.n	800793c <__multadd+0x74>
 8007908:	6861      	ldr	r1, [r4, #4]
 800790a:	4638      	mov	r0, r7
 800790c:	3101      	adds	r1, #1
 800790e:	f7ff ff79 	bl	8007804 <_Balloc>
 8007912:	4680      	mov	r8, r0
 8007914:	b928      	cbnz	r0, 8007922 <__multadd+0x5a>
 8007916:	4602      	mov	r2, r0
 8007918:	4b0c      	ldr	r3, [pc, #48]	; (800794c <__multadd+0x84>)
 800791a:	480d      	ldr	r0, [pc, #52]	; (8007950 <__multadd+0x88>)
 800791c:	21ba      	movs	r1, #186	; 0xba
 800791e:	f000 fd1d 	bl	800835c <__assert_func>
 8007922:	6922      	ldr	r2, [r4, #16]
 8007924:	3202      	adds	r2, #2
 8007926:	f104 010c 	add.w	r1, r4, #12
 800792a:	0092      	lsls	r2, r2, #2
 800792c:	300c      	adds	r0, #12
 800792e:	f7fe ffe0 	bl	80068f2 <memcpy>
 8007932:	4621      	mov	r1, r4
 8007934:	4638      	mov	r0, r7
 8007936:	f7ff ffa5 	bl	8007884 <_Bfree>
 800793a:	4644      	mov	r4, r8
 800793c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007940:	3501      	adds	r5, #1
 8007942:	615e      	str	r6, [r3, #20]
 8007944:	6125      	str	r5, [r4, #16]
 8007946:	4620      	mov	r0, r4
 8007948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800794c:	08009449 	.word	0x08009449
 8007950:	0800945a 	.word	0x0800945a

08007954 <__hi0bits>:
 8007954:	0c03      	lsrs	r3, r0, #16
 8007956:	041b      	lsls	r3, r3, #16
 8007958:	b9d3      	cbnz	r3, 8007990 <__hi0bits+0x3c>
 800795a:	0400      	lsls	r0, r0, #16
 800795c:	2310      	movs	r3, #16
 800795e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007962:	bf04      	itt	eq
 8007964:	0200      	lsleq	r0, r0, #8
 8007966:	3308      	addeq	r3, #8
 8007968:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800796c:	bf04      	itt	eq
 800796e:	0100      	lsleq	r0, r0, #4
 8007970:	3304      	addeq	r3, #4
 8007972:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007976:	bf04      	itt	eq
 8007978:	0080      	lsleq	r0, r0, #2
 800797a:	3302      	addeq	r3, #2
 800797c:	2800      	cmp	r0, #0
 800797e:	db05      	blt.n	800798c <__hi0bits+0x38>
 8007980:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007984:	f103 0301 	add.w	r3, r3, #1
 8007988:	bf08      	it	eq
 800798a:	2320      	moveq	r3, #32
 800798c:	4618      	mov	r0, r3
 800798e:	4770      	bx	lr
 8007990:	2300      	movs	r3, #0
 8007992:	e7e4      	b.n	800795e <__hi0bits+0xa>

08007994 <__lo0bits>:
 8007994:	6803      	ldr	r3, [r0, #0]
 8007996:	f013 0207 	ands.w	r2, r3, #7
 800799a:	d00c      	beq.n	80079b6 <__lo0bits+0x22>
 800799c:	07d9      	lsls	r1, r3, #31
 800799e:	d422      	bmi.n	80079e6 <__lo0bits+0x52>
 80079a0:	079a      	lsls	r2, r3, #30
 80079a2:	bf49      	itett	mi
 80079a4:	085b      	lsrmi	r3, r3, #1
 80079a6:	089b      	lsrpl	r3, r3, #2
 80079a8:	6003      	strmi	r3, [r0, #0]
 80079aa:	2201      	movmi	r2, #1
 80079ac:	bf5c      	itt	pl
 80079ae:	6003      	strpl	r3, [r0, #0]
 80079b0:	2202      	movpl	r2, #2
 80079b2:	4610      	mov	r0, r2
 80079b4:	4770      	bx	lr
 80079b6:	b299      	uxth	r1, r3
 80079b8:	b909      	cbnz	r1, 80079be <__lo0bits+0x2a>
 80079ba:	0c1b      	lsrs	r3, r3, #16
 80079bc:	2210      	movs	r2, #16
 80079be:	b2d9      	uxtb	r1, r3
 80079c0:	b909      	cbnz	r1, 80079c6 <__lo0bits+0x32>
 80079c2:	3208      	adds	r2, #8
 80079c4:	0a1b      	lsrs	r3, r3, #8
 80079c6:	0719      	lsls	r1, r3, #28
 80079c8:	bf04      	itt	eq
 80079ca:	091b      	lsreq	r3, r3, #4
 80079cc:	3204      	addeq	r2, #4
 80079ce:	0799      	lsls	r1, r3, #30
 80079d0:	bf04      	itt	eq
 80079d2:	089b      	lsreq	r3, r3, #2
 80079d4:	3202      	addeq	r2, #2
 80079d6:	07d9      	lsls	r1, r3, #31
 80079d8:	d403      	bmi.n	80079e2 <__lo0bits+0x4e>
 80079da:	085b      	lsrs	r3, r3, #1
 80079dc:	f102 0201 	add.w	r2, r2, #1
 80079e0:	d003      	beq.n	80079ea <__lo0bits+0x56>
 80079e2:	6003      	str	r3, [r0, #0]
 80079e4:	e7e5      	b.n	80079b2 <__lo0bits+0x1e>
 80079e6:	2200      	movs	r2, #0
 80079e8:	e7e3      	b.n	80079b2 <__lo0bits+0x1e>
 80079ea:	2220      	movs	r2, #32
 80079ec:	e7e1      	b.n	80079b2 <__lo0bits+0x1e>
	...

080079f0 <__i2b>:
 80079f0:	b510      	push	{r4, lr}
 80079f2:	460c      	mov	r4, r1
 80079f4:	2101      	movs	r1, #1
 80079f6:	f7ff ff05 	bl	8007804 <_Balloc>
 80079fa:	4602      	mov	r2, r0
 80079fc:	b928      	cbnz	r0, 8007a0a <__i2b+0x1a>
 80079fe:	4b05      	ldr	r3, [pc, #20]	; (8007a14 <__i2b+0x24>)
 8007a00:	4805      	ldr	r0, [pc, #20]	; (8007a18 <__i2b+0x28>)
 8007a02:	f240 1145 	movw	r1, #325	; 0x145
 8007a06:	f000 fca9 	bl	800835c <__assert_func>
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	6144      	str	r4, [r0, #20]
 8007a0e:	6103      	str	r3, [r0, #16]
 8007a10:	bd10      	pop	{r4, pc}
 8007a12:	bf00      	nop
 8007a14:	08009449 	.word	0x08009449
 8007a18:	0800945a 	.word	0x0800945a

08007a1c <__multiply>:
 8007a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a20:	4691      	mov	r9, r2
 8007a22:	690a      	ldr	r2, [r1, #16]
 8007a24:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	bfb8      	it	lt
 8007a2c:	460b      	movlt	r3, r1
 8007a2e:	460c      	mov	r4, r1
 8007a30:	bfbc      	itt	lt
 8007a32:	464c      	movlt	r4, r9
 8007a34:	4699      	movlt	r9, r3
 8007a36:	6927      	ldr	r7, [r4, #16]
 8007a38:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007a3c:	68a3      	ldr	r3, [r4, #8]
 8007a3e:	6861      	ldr	r1, [r4, #4]
 8007a40:	eb07 060a 	add.w	r6, r7, sl
 8007a44:	42b3      	cmp	r3, r6
 8007a46:	b085      	sub	sp, #20
 8007a48:	bfb8      	it	lt
 8007a4a:	3101      	addlt	r1, #1
 8007a4c:	f7ff feda 	bl	8007804 <_Balloc>
 8007a50:	b930      	cbnz	r0, 8007a60 <__multiply+0x44>
 8007a52:	4602      	mov	r2, r0
 8007a54:	4b44      	ldr	r3, [pc, #272]	; (8007b68 <__multiply+0x14c>)
 8007a56:	4845      	ldr	r0, [pc, #276]	; (8007b6c <__multiply+0x150>)
 8007a58:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007a5c:	f000 fc7e 	bl	800835c <__assert_func>
 8007a60:	f100 0514 	add.w	r5, r0, #20
 8007a64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a68:	462b      	mov	r3, r5
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	4543      	cmp	r3, r8
 8007a6e:	d321      	bcc.n	8007ab4 <__multiply+0x98>
 8007a70:	f104 0314 	add.w	r3, r4, #20
 8007a74:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007a78:	f109 0314 	add.w	r3, r9, #20
 8007a7c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007a80:	9202      	str	r2, [sp, #8]
 8007a82:	1b3a      	subs	r2, r7, r4
 8007a84:	3a15      	subs	r2, #21
 8007a86:	f022 0203 	bic.w	r2, r2, #3
 8007a8a:	3204      	adds	r2, #4
 8007a8c:	f104 0115 	add.w	r1, r4, #21
 8007a90:	428f      	cmp	r7, r1
 8007a92:	bf38      	it	cc
 8007a94:	2204      	movcc	r2, #4
 8007a96:	9201      	str	r2, [sp, #4]
 8007a98:	9a02      	ldr	r2, [sp, #8]
 8007a9a:	9303      	str	r3, [sp, #12]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d80c      	bhi.n	8007aba <__multiply+0x9e>
 8007aa0:	2e00      	cmp	r6, #0
 8007aa2:	dd03      	ble.n	8007aac <__multiply+0x90>
 8007aa4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d05b      	beq.n	8007b64 <__multiply+0x148>
 8007aac:	6106      	str	r6, [r0, #16]
 8007aae:	b005      	add	sp, #20
 8007ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ab4:	f843 2b04 	str.w	r2, [r3], #4
 8007ab8:	e7d8      	b.n	8007a6c <__multiply+0x50>
 8007aba:	f8b3 a000 	ldrh.w	sl, [r3]
 8007abe:	f1ba 0f00 	cmp.w	sl, #0
 8007ac2:	d024      	beq.n	8007b0e <__multiply+0xf2>
 8007ac4:	f104 0e14 	add.w	lr, r4, #20
 8007ac8:	46a9      	mov	r9, r5
 8007aca:	f04f 0c00 	mov.w	ip, #0
 8007ace:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007ad2:	f8d9 1000 	ldr.w	r1, [r9]
 8007ad6:	fa1f fb82 	uxth.w	fp, r2
 8007ada:	b289      	uxth	r1, r1
 8007adc:	fb0a 110b 	mla	r1, sl, fp, r1
 8007ae0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007ae4:	f8d9 2000 	ldr.w	r2, [r9]
 8007ae8:	4461      	add	r1, ip
 8007aea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007aee:	fb0a c20b 	mla	r2, sl, fp, ip
 8007af2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007af6:	b289      	uxth	r1, r1
 8007af8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007afc:	4577      	cmp	r7, lr
 8007afe:	f849 1b04 	str.w	r1, [r9], #4
 8007b02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b06:	d8e2      	bhi.n	8007ace <__multiply+0xb2>
 8007b08:	9a01      	ldr	r2, [sp, #4]
 8007b0a:	f845 c002 	str.w	ip, [r5, r2]
 8007b0e:	9a03      	ldr	r2, [sp, #12]
 8007b10:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007b14:	3304      	adds	r3, #4
 8007b16:	f1b9 0f00 	cmp.w	r9, #0
 8007b1a:	d021      	beq.n	8007b60 <__multiply+0x144>
 8007b1c:	6829      	ldr	r1, [r5, #0]
 8007b1e:	f104 0c14 	add.w	ip, r4, #20
 8007b22:	46ae      	mov	lr, r5
 8007b24:	f04f 0a00 	mov.w	sl, #0
 8007b28:	f8bc b000 	ldrh.w	fp, [ip]
 8007b2c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007b30:	fb09 220b 	mla	r2, r9, fp, r2
 8007b34:	4452      	add	r2, sl
 8007b36:	b289      	uxth	r1, r1
 8007b38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007b3c:	f84e 1b04 	str.w	r1, [lr], #4
 8007b40:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007b44:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007b48:	f8be 1000 	ldrh.w	r1, [lr]
 8007b4c:	fb09 110a 	mla	r1, r9, sl, r1
 8007b50:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007b54:	4567      	cmp	r7, ip
 8007b56:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007b5a:	d8e5      	bhi.n	8007b28 <__multiply+0x10c>
 8007b5c:	9a01      	ldr	r2, [sp, #4]
 8007b5e:	50a9      	str	r1, [r5, r2]
 8007b60:	3504      	adds	r5, #4
 8007b62:	e799      	b.n	8007a98 <__multiply+0x7c>
 8007b64:	3e01      	subs	r6, #1
 8007b66:	e79b      	b.n	8007aa0 <__multiply+0x84>
 8007b68:	08009449 	.word	0x08009449
 8007b6c:	0800945a 	.word	0x0800945a

08007b70 <__pow5mult>:
 8007b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b74:	4615      	mov	r5, r2
 8007b76:	f012 0203 	ands.w	r2, r2, #3
 8007b7a:	4606      	mov	r6, r0
 8007b7c:	460f      	mov	r7, r1
 8007b7e:	d007      	beq.n	8007b90 <__pow5mult+0x20>
 8007b80:	4c25      	ldr	r4, [pc, #148]	; (8007c18 <__pow5mult+0xa8>)
 8007b82:	3a01      	subs	r2, #1
 8007b84:	2300      	movs	r3, #0
 8007b86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b8a:	f7ff fe9d 	bl	80078c8 <__multadd>
 8007b8e:	4607      	mov	r7, r0
 8007b90:	10ad      	asrs	r5, r5, #2
 8007b92:	d03d      	beq.n	8007c10 <__pow5mult+0xa0>
 8007b94:	69f4      	ldr	r4, [r6, #28]
 8007b96:	b97c      	cbnz	r4, 8007bb8 <__pow5mult+0x48>
 8007b98:	2010      	movs	r0, #16
 8007b9a:	f7ff fd7f 	bl	800769c <malloc>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	61f0      	str	r0, [r6, #28]
 8007ba2:	b928      	cbnz	r0, 8007bb0 <__pow5mult+0x40>
 8007ba4:	4b1d      	ldr	r3, [pc, #116]	; (8007c1c <__pow5mult+0xac>)
 8007ba6:	481e      	ldr	r0, [pc, #120]	; (8007c20 <__pow5mult+0xb0>)
 8007ba8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007bac:	f000 fbd6 	bl	800835c <__assert_func>
 8007bb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007bb4:	6004      	str	r4, [r0, #0]
 8007bb6:	60c4      	str	r4, [r0, #12]
 8007bb8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007bbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007bc0:	b94c      	cbnz	r4, 8007bd6 <__pow5mult+0x66>
 8007bc2:	f240 2171 	movw	r1, #625	; 0x271
 8007bc6:	4630      	mov	r0, r6
 8007bc8:	f7ff ff12 	bl	80079f0 <__i2b>
 8007bcc:	2300      	movs	r3, #0
 8007bce:	f8c8 0008 	str.w	r0, [r8, #8]
 8007bd2:	4604      	mov	r4, r0
 8007bd4:	6003      	str	r3, [r0, #0]
 8007bd6:	f04f 0900 	mov.w	r9, #0
 8007bda:	07eb      	lsls	r3, r5, #31
 8007bdc:	d50a      	bpl.n	8007bf4 <__pow5mult+0x84>
 8007bde:	4639      	mov	r1, r7
 8007be0:	4622      	mov	r2, r4
 8007be2:	4630      	mov	r0, r6
 8007be4:	f7ff ff1a 	bl	8007a1c <__multiply>
 8007be8:	4639      	mov	r1, r7
 8007bea:	4680      	mov	r8, r0
 8007bec:	4630      	mov	r0, r6
 8007bee:	f7ff fe49 	bl	8007884 <_Bfree>
 8007bf2:	4647      	mov	r7, r8
 8007bf4:	106d      	asrs	r5, r5, #1
 8007bf6:	d00b      	beq.n	8007c10 <__pow5mult+0xa0>
 8007bf8:	6820      	ldr	r0, [r4, #0]
 8007bfa:	b938      	cbnz	r0, 8007c0c <__pow5mult+0x9c>
 8007bfc:	4622      	mov	r2, r4
 8007bfe:	4621      	mov	r1, r4
 8007c00:	4630      	mov	r0, r6
 8007c02:	f7ff ff0b 	bl	8007a1c <__multiply>
 8007c06:	6020      	str	r0, [r4, #0]
 8007c08:	f8c0 9000 	str.w	r9, [r0]
 8007c0c:	4604      	mov	r4, r0
 8007c0e:	e7e4      	b.n	8007bda <__pow5mult+0x6a>
 8007c10:	4638      	mov	r0, r7
 8007c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c16:	bf00      	nop
 8007c18:	080095a8 	.word	0x080095a8
 8007c1c:	080093da 	.word	0x080093da
 8007c20:	0800945a 	.word	0x0800945a

08007c24 <__lshift>:
 8007c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c28:	460c      	mov	r4, r1
 8007c2a:	6849      	ldr	r1, [r1, #4]
 8007c2c:	6923      	ldr	r3, [r4, #16]
 8007c2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c32:	68a3      	ldr	r3, [r4, #8]
 8007c34:	4607      	mov	r7, r0
 8007c36:	4691      	mov	r9, r2
 8007c38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c3c:	f108 0601 	add.w	r6, r8, #1
 8007c40:	42b3      	cmp	r3, r6
 8007c42:	db0b      	blt.n	8007c5c <__lshift+0x38>
 8007c44:	4638      	mov	r0, r7
 8007c46:	f7ff fddd 	bl	8007804 <_Balloc>
 8007c4a:	4605      	mov	r5, r0
 8007c4c:	b948      	cbnz	r0, 8007c62 <__lshift+0x3e>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	4b28      	ldr	r3, [pc, #160]	; (8007cf4 <__lshift+0xd0>)
 8007c52:	4829      	ldr	r0, [pc, #164]	; (8007cf8 <__lshift+0xd4>)
 8007c54:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007c58:	f000 fb80 	bl	800835c <__assert_func>
 8007c5c:	3101      	adds	r1, #1
 8007c5e:	005b      	lsls	r3, r3, #1
 8007c60:	e7ee      	b.n	8007c40 <__lshift+0x1c>
 8007c62:	2300      	movs	r3, #0
 8007c64:	f100 0114 	add.w	r1, r0, #20
 8007c68:	f100 0210 	add.w	r2, r0, #16
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	4553      	cmp	r3, sl
 8007c70:	db33      	blt.n	8007cda <__lshift+0xb6>
 8007c72:	6920      	ldr	r0, [r4, #16]
 8007c74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c78:	f104 0314 	add.w	r3, r4, #20
 8007c7c:	f019 091f 	ands.w	r9, r9, #31
 8007c80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c88:	d02b      	beq.n	8007ce2 <__lshift+0xbe>
 8007c8a:	f1c9 0e20 	rsb	lr, r9, #32
 8007c8e:	468a      	mov	sl, r1
 8007c90:	2200      	movs	r2, #0
 8007c92:	6818      	ldr	r0, [r3, #0]
 8007c94:	fa00 f009 	lsl.w	r0, r0, r9
 8007c98:	4310      	orrs	r0, r2
 8007c9a:	f84a 0b04 	str.w	r0, [sl], #4
 8007c9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ca2:	459c      	cmp	ip, r3
 8007ca4:	fa22 f20e 	lsr.w	r2, r2, lr
 8007ca8:	d8f3      	bhi.n	8007c92 <__lshift+0x6e>
 8007caa:	ebac 0304 	sub.w	r3, ip, r4
 8007cae:	3b15      	subs	r3, #21
 8007cb0:	f023 0303 	bic.w	r3, r3, #3
 8007cb4:	3304      	adds	r3, #4
 8007cb6:	f104 0015 	add.w	r0, r4, #21
 8007cba:	4584      	cmp	ip, r0
 8007cbc:	bf38      	it	cc
 8007cbe:	2304      	movcc	r3, #4
 8007cc0:	50ca      	str	r2, [r1, r3]
 8007cc2:	b10a      	cbz	r2, 8007cc8 <__lshift+0xa4>
 8007cc4:	f108 0602 	add.w	r6, r8, #2
 8007cc8:	3e01      	subs	r6, #1
 8007cca:	4638      	mov	r0, r7
 8007ccc:	612e      	str	r6, [r5, #16]
 8007cce:	4621      	mov	r1, r4
 8007cd0:	f7ff fdd8 	bl	8007884 <_Bfree>
 8007cd4:	4628      	mov	r0, r5
 8007cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cda:	f842 0f04 	str.w	r0, [r2, #4]!
 8007cde:	3301      	adds	r3, #1
 8007ce0:	e7c5      	b.n	8007c6e <__lshift+0x4a>
 8007ce2:	3904      	subs	r1, #4
 8007ce4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ce8:	f841 2f04 	str.w	r2, [r1, #4]!
 8007cec:	459c      	cmp	ip, r3
 8007cee:	d8f9      	bhi.n	8007ce4 <__lshift+0xc0>
 8007cf0:	e7ea      	b.n	8007cc8 <__lshift+0xa4>
 8007cf2:	bf00      	nop
 8007cf4:	08009449 	.word	0x08009449
 8007cf8:	0800945a 	.word	0x0800945a

08007cfc <__mcmp>:
 8007cfc:	b530      	push	{r4, r5, lr}
 8007cfe:	6902      	ldr	r2, [r0, #16]
 8007d00:	690c      	ldr	r4, [r1, #16]
 8007d02:	1b12      	subs	r2, r2, r4
 8007d04:	d10e      	bne.n	8007d24 <__mcmp+0x28>
 8007d06:	f100 0314 	add.w	r3, r0, #20
 8007d0a:	3114      	adds	r1, #20
 8007d0c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007d10:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007d14:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007d18:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007d1c:	42a5      	cmp	r5, r4
 8007d1e:	d003      	beq.n	8007d28 <__mcmp+0x2c>
 8007d20:	d305      	bcc.n	8007d2e <__mcmp+0x32>
 8007d22:	2201      	movs	r2, #1
 8007d24:	4610      	mov	r0, r2
 8007d26:	bd30      	pop	{r4, r5, pc}
 8007d28:	4283      	cmp	r3, r0
 8007d2a:	d3f3      	bcc.n	8007d14 <__mcmp+0x18>
 8007d2c:	e7fa      	b.n	8007d24 <__mcmp+0x28>
 8007d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8007d32:	e7f7      	b.n	8007d24 <__mcmp+0x28>

08007d34 <__mdiff>:
 8007d34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d38:	460c      	mov	r4, r1
 8007d3a:	4606      	mov	r6, r0
 8007d3c:	4611      	mov	r1, r2
 8007d3e:	4620      	mov	r0, r4
 8007d40:	4690      	mov	r8, r2
 8007d42:	f7ff ffdb 	bl	8007cfc <__mcmp>
 8007d46:	1e05      	subs	r5, r0, #0
 8007d48:	d110      	bne.n	8007d6c <__mdiff+0x38>
 8007d4a:	4629      	mov	r1, r5
 8007d4c:	4630      	mov	r0, r6
 8007d4e:	f7ff fd59 	bl	8007804 <_Balloc>
 8007d52:	b930      	cbnz	r0, 8007d62 <__mdiff+0x2e>
 8007d54:	4b3a      	ldr	r3, [pc, #232]	; (8007e40 <__mdiff+0x10c>)
 8007d56:	4602      	mov	r2, r0
 8007d58:	f240 2137 	movw	r1, #567	; 0x237
 8007d5c:	4839      	ldr	r0, [pc, #228]	; (8007e44 <__mdiff+0x110>)
 8007d5e:	f000 fafd 	bl	800835c <__assert_func>
 8007d62:	2301      	movs	r3, #1
 8007d64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d6c:	bfa4      	itt	ge
 8007d6e:	4643      	movge	r3, r8
 8007d70:	46a0      	movge	r8, r4
 8007d72:	4630      	mov	r0, r6
 8007d74:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007d78:	bfa6      	itte	ge
 8007d7a:	461c      	movge	r4, r3
 8007d7c:	2500      	movge	r5, #0
 8007d7e:	2501      	movlt	r5, #1
 8007d80:	f7ff fd40 	bl	8007804 <_Balloc>
 8007d84:	b920      	cbnz	r0, 8007d90 <__mdiff+0x5c>
 8007d86:	4b2e      	ldr	r3, [pc, #184]	; (8007e40 <__mdiff+0x10c>)
 8007d88:	4602      	mov	r2, r0
 8007d8a:	f240 2145 	movw	r1, #581	; 0x245
 8007d8e:	e7e5      	b.n	8007d5c <__mdiff+0x28>
 8007d90:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007d94:	6926      	ldr	r6, [r4, #16]
 8007d96:	60c5      	str	r5, [r0, #12]
 8007d98:	f104 0914 	add.w	r9, r4, #20
 8007d9c:	f108 0514 	add.w	r5, r8, #20
 8007da0:	f100 0e14 	add.w	lr, r0, #20
 8007da4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007da8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007dac:	f108 0210 	add.w	r2, r8, #16
 8007db0:	46f2      	mov	sl, lr
 8007db2:	2100      	movs	r1, #0
 8007db4:	f859 3b04 	ldr.w	r3, [r9], #4
 8007db8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007dbc:	fa11 f88b 	uxtah	r8, r1, fp
 8007dc0:	b299      	uxth	r1, r3
 8007dc2:	0c1b      	lsrs	r3, r3, #16
 8007dc4:	eba8 0801 	sub.w	r8, r8, r1
 8007dc8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007dcc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007dd0:	fa1f f888 	uxth.w	r8, r8
 8007dd4:	1419      	asrs	r1, r3, #16
 8007dd6:	454e      	cmp	r6, r9
 8007dd8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007ddc:	f84a 3b04 	str.w	r3, [sl], #4
 8007de0:	d8e8      	bhi.n	8007db4 <__mdiff+0x80>
 8007de2:	1b33      	subs	r3, r6, r4
 8007de4:	3b15      	subs	r3, #21
 8007de6:	f023 0303 	bic.w	r3, r3, #3
 8007dea:	3304      	adds	r3, #4
 8007dec:	3415      	adds	r4, #21
 8007dee:	42a6      	cmp	r6, r4
 8007df0:	bf38      	it	cc
 8007df2:	2304      	movcc	r3, #4
 8007df4:	441d      	add	r5, r3
 8007df6:	4473      	add	r3, lr
 8007df8:	469e      	mov	lr, r3
 8007dfa:	462e      	mov	r6, r5
 8007dfc:	4566      	cmp	r6, ip
 8007dfe:	d30e      	bcc.n	8007e1e <__mdiff+0xea>
 8007e00:	f10c 0203 	add.w	r2, ip, #3
 8007e04:	1b52      	subs	r2, r2, r5
 8007e06:	f022 0203 	bic.w	r2, r2, #3
 8007e0a:	3d03      	subs	r5, #3
 8007e0c:	45ac      	cmp	ip, r5
 8007e0e:	bf38      	it	cc
 8007e10:	2200      	movcc	r2, #0
 8007e12:	4413      	add	r3, r2
 8007e14:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007e18:	b17a      	cbz	r2, 8007e3a <__mdiff+0x106>
 8007e1a:	6107      	str	r7, [r0, #16]
 8007e1c:	e7a4      	b.n	8007d68 <__mdiff+0x34>
 8007e1e:	f856 8b04 	ldr.w	r8, [r6], #4
 8007e22:	fa11 f288 	uxtah	r2, r1, r8
 8007e26:	1414      	asrs	r4, r2, #16
 8007e28:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007e2c:	b292      	uxth	r2, r2
 8007e2e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007e32:	f84e 2b04 	str.w	r2, [lr], #4
 8007e36:	1421      	asrs	r1, r4, #16
 8007e38:	e7e0      	b.n	8007dfc <__mdiff+0xc8>
 8007e3a:	3f01      	subs	r7, #1
 8007e3c:	e7ea      	b.n	8007e14 <__mdiff+0xe0>
 8007e3e:	bf00      	nop
 8007e40:	08009449 	.word	0x08009449
 8007e44:	0800945a 	.word	0x0800945a

08007e48 <__d2b>:
 8007e48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e4c:	460f      	mov	r7, r1
 8007e4e:	2101      	movs	r1, #1
 8007e50:	ec59 8b10 	vmov	r8, r9, d0
 8007e54:	4616      	mov	r6, r2
 8007e56:	f7ff fcd5 	bl	8007804 <_Balloc>
 8007e5a:	4604      	mov	r4, r0
 8007e5c:	b930      	cbnz	r0, 8007e6c <__d2b+0x24>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	4b24      	ldr	r3, [pc, #144]	; (8007ef4 <__d2b+0xac>)
 8007e62:	4825      	ldr	r0, [pc, #148]	; (8007ef8 <__d2b+0xb0>)
 8007e64:	f240 310f 	movw	r1, #783	; 0x30f
 8007e68:	f000 fa78 	bl	800835c <__assert_func>
 8007e6c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007e70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e74:	bb2d      	cbnz	r5, 8007ec2 <__d2b+0x7a>
 8007e76:	9301      	str	r3, [sp, #4]
 8007e78:	f1b8 0300 	subs.w	r3, r8, #0
 8007e7c:	d026      	beq.n	8007ecc <__d2b+0x84>
 8007e7e:	4668      	mov	r0, sp
 8007e80:	9300      	str	r3, [sp, #0]
 8007e82:	f7ff fd87 	bl	8007994 <__lo0bits>
 8007e86:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007e8a:	b1e8      	cbz	r0, 8007ec8 <__d2b+0x80>
 8007e8c:	f1c0 0320 	rsb	r3, r0, #32
 8007e90:	fa02 f303 	lsl.w	r3, r2, r3
 8007e94:	430b      	orrs	r3, r1
 8007e96:	40c2      	lsrs	r2, r0
 8007e98:	6163      	str	r3, [r4, #20]
 8007e9a:	9201      	str	r2, [sp, #4]
 8007e9c:	9b01      	ldr	r3, [sp, #4]
 8007e9e:	61a3      	str	r3, [r4, #24]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	bf14      	ite	ne
 8007ea4:	2202      	movne	r2, #2
 8007ea6:	2201      	moveq	r2, #1
 8007ea8:	6122      	str	r2, [r4, #16]
 8007eaa:	b1bd      	cbz	r5, 8007edc <__d2b+0x94>
 8007eac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007eb0:	4405      	add	r5, r0
 8007eb2:	603d      	str	r5, [r7, #0]
 8007eb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007eb8:	6030      	str	r0, [r6, #0]
 8007eba:	4620      	mov	r0, r4
 8007ebc:	b003      	add	sp, #12
 8007ebe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ec2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ec6:	e7d6      	b.n	8007e76 <__d2b+0x2e>
 8007ec8:	6161      	str	r1, [r4, #20]
 8007eca:	e7e7      	b.n	8007e9c <__d2b+0x54>
 8007ecc:	a801      	add	r0, sp, #4
 8007ece:	f7ff fd61 	bl	8007994 <__lo0bits>
 8007ed2:	9b01      	ldr	r3, [sp, #4]
 8007ed4:	6163      	str	r3, [r4, #20]
 8007ed6:	3020      	adds	r0, #32
 8007ed8:	2201      	movs	r2, #1
 8007eda:	e7e5      	b.n	8007ea8 <__d2b+0x60>
 8007edc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007ee0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007ee4:	6038      	str	r0, [r7, #0]
 8007ee6:	6918      	ldr	r0, [r3, #16]
 8007ee8:	f7ff fd34 	bl	8007954 <__hi0bits>
 8007eec:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007ef0:	e7e2      	b.n	8007eb8 <__d2b+0x70>
 8007ef2:	bf00      	nop
 8007ef4:	08009449 	.word	0x08009449
 8007ef8:	0800945a 	.word	0x0800945a

08007efc <__ssputs_r>:
 8007efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f00:	688e      	ldr	r6, [r1, #8]
 8007f02:	461f      	mov	r7, r3
 8007f04:	42be      	cmp	r6, r7
 8007f06:	680b      	ldr	r3, [r1, #0]
 8007f08:	4682      	mov	sl, r0
 8007f0a:	460c      	mov	r4, r1
 8007f0c:	4690      	mov	r8, r2
 8007f0e:	d82c      	bhi.n	8007f6a <__ssputs_r+0x6e>
 8007f10:	898a      	ldrh	r2, [r1, #12]
 8007f12:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f16:	d026      	beq.n	8007f66 <__ssputs_r+0x6a>
 8007f18:	6965      	ldr	r5, [r4, #20]
 8007f1a:	6909      	ldr	r1, [r1, #16]
 8007f1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f20:	eba3 0901 	sub.w	r9, r3, r1
 8007f24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f28:	1c7b      	adds	r3, r7, #1
 8007f2a:	444b      	add	r3, r9
 8007f2c:	106d      	asrs	r5, r5, #1
 8007f2e:	429d      	cmp	r5, r3
 8007f30:	bf38      	it	cc
 8007f32:	461d      	movcc	r5, r3
 8007f34:	0553      	lsls	r3, r2, #21
 8007f36:	d527      	bpl.n	8007f88 <__ssputs_r+0x8c>
 8007f38:	4629      	mov	r1, r5
 8007f3a:	f7ff fbd7 	bl	80076ec <_malloc_r>
 8007f3e:	4606      	mov	r6, r0
 8007f40:	b360      	cbz	r0, 8007f9c <__ssputs_r+0xa0>
 8007f42:	6921      	ldr	r1, [r4, #16]
 8007f44:	464a      	mov	r2, r9
 8007f46:	f7fe fcd4 	bl	80068f2 <memcpy>
 8007f4a:	89a3      	ldrh	r3, [r4, #12]
 8007f4c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f54:	81a3      	strh	r3, [r4, #12]
 8007f56:	6126      	str	r6, [r4, #16]
 8007f58:	6165      	str	r5, [r4, #20]
 8007f5a:	444e      	add	r6, r9
 8007f5c:	eba5 0509 	sub.w	r5, r5, r9
 8007f60:	6026      	str	r6, [r4, #0]
 8007f62:	60a5      	str	r5, [r4, #8]
 8007f64:	463e      	mov	r6, r7
 8007f66:	42be      	cmp	r6, r7
 8007f68:	d900      	bls.n	8007f6c <__ssputs_r+0x70>
 8007f6a:	463e      	mov	r6, r7
 8007f6c:	6820      	ldr	r0, [r4, #0]
 8007f6e:	4632      	mov	r2, r6
 8007f70:	4641      	mov	r1, r8
 8007f72:	f000 f9c9 	bl	8008308 <memmove>
 8007f76:	68a3      	ldr	r3, [r4, #8]
 8007f78:	1b9b      	subs	r3, r3, r6
 8007f7a:	60a3      	str	r3, [r4, #8]
 8007f7c:	6823      	ldr	r3, [r4, #0]
 8007f7e:	4433      	add	r3, r6
 8007f80:	6023      	str	r3, [r4, #0]
 8007f82:	2000      	movs	r0, #0
 8007f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f88:	462a      	mov	r2, r5
 8007f8a:	f000 fa2d 	bl	80083e8 <_realloc_r>
 8007f8e:	4606      	mov	r6, r0
 8007f90:	2800      	cmp	r0, #0
 8007f92:	d1e0      	bne.n	8007f56 <__ssputs_r+0x5a>
 8007f94:	6921      	ldr	r1, [r4, #16]
 8007f96:	4650      	mov	r0, sl
 8007f98:	f7ff fb34 	bl	8007604 <_free_r>
 8007f9c:	230c      	movs	r3, #12
 8007f9e:	f8ca 3000 	str.w	r3, [sl]
 8007fa2:	89a3      	ldrh	r3, [r4, #12]
 8007fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fa8:	81a3      	strh	r3, [r4, #12]
 8007faa:	f04f 30ff 	mov.w	r0, #4294967295
 8007fae:	e7e9      	b.n	8007f84 <__ssputs_r+0x88>

08007fb0 <_svfiprintf_r>:
 8007fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fb4:	4698      	mov	r8, r3
 8007fb6:	898b      	ldrh	r3, [r1, #12]
 8007fb8:	061b      	lsls	r3, r3, #24
 8007fba:	b09d      	sub	sp, #116	; 0x74
 8007fbc:	4607      	mov	r7, r0
 8007fbe:	460d      	mov	r5, r1
 8007fc0:	4614      	mov	r4, r2
 8007fc2:	d50e      	bpl.n	8007fe2 <_svfiprintf_r+0x32>
 8007fc4:	690b      	ldr	r3, [r1, #16]
 8007fc6:	b963      	cbnz	r3, 8007fe2 <_svfiprintf_r+0x32>
 8007fc8:	2140      	movs	r1, #64	; 0x40
 8007fca:	f7ff fb8f 	bl	80076ec <_malloc_r>
 8007fce:	6028      	str	r0, [r5, #0]
 8007fd0:	6128      	str	r0, [r5, #16]
 8007fd2:	b920      	cbnz	r0, 8007fde <_svfiprintf_r+0x2e>
 8007fd4:	230c      	movs	r3, #12
 8007fd6:	603b      	str	r3, [r7, #0]
 8007fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fdc:	e0d0      	b.n	8008180 <_svfiprintf_r+0x1d0>
 8007fde:	2340      	movs	r3, #64	; 0x40
 8007fe0:	616b      	str	r3, [r5, #20]
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	9309      	str	r3, [sp, #36]	; 0x24
 8007fe6:	2320      	movs	r3, #32
 8007fe8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fec:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ff0:	2330      	movs	r3, #48	; 0x30
 8007ff2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008198 <_svfiprintf_r+0x1e8>
 8007ff6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ffa:	f04f 0901 	mov.w	r9, #1
 8007ffe:	4623      	mov	r3, r4
 8008000:	469a      	mov	sl, r3
 8008002:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008006:	b10a      	cbz	r2, 800800c <_svfiprintf_r+0x5c>
 8008008:	2a25      	cmp	r2, #37	; 0x25
 800800a:	d1f9      	bne.n	8008000 <_svfiprintf_r+0x50>
 800800c:	ebba 0b04 	subs.w	fp, sl, r4
 8008010:	d00b      	beq.n	800802a <_svfiprintf_r+0x7a>
 8008012:	465b      	mov	r3, fp
 8008014:	4622      	mov	r2, r4
 8008016:	4629      	mov	r1, r5
 8008018:	4638      	mov	r0, r7
 800801a:	f7ff ff6f 	bl	8007efc <__ssputs_r>
 800801e:	3001      	adds	r0, #1
 8008020:	f000 80a9 	beq.w	8008176 <_svfiprintf_r+0x1c6>
 8008024:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008026:	445a      	add	r2, fp
 8008028:	9209      	str	r2, [sp, #36]	; 0x24
 800802a:	f89a 3000 	ldrb.w	r3, [sl]
 800802e:	2b00      	cmp	r3, #0
 8008030:	f000 80a1 	beq.w	8008176 <_svfiprintf_r+0x1c6>
 8008034:	2300      	movs	r3, #0
 8008036:	f04f 32ff 	mov.w	r2, #4294967295
 800803a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800803e:	f10a 0a01 	add.w	sl, sl, #1
 8008042:	9304      	str	r3, [sp, #16]
 8008044:	9307      	str	r3, [sp, #28]
 8008046:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800804a:	931a      	str	r3, [sp, #104]	; 0x68
 800804c:	4654      	mov	r4, sl
 800804e:	2205      	movs	r2, #5
 8008050:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008054:	4850      	ldr	r0, [pc, #320]	; (8008198 <_svfiprintf_r+0x1e8>)
 8008056:	f7f8 f8c3 	bl	80001e0 <memchr>
 800805a:	9a04      	ldr	r2, [sp, #16]
 800805c:	b9d8      	cbnz	r0, 8008096 <_svfiprintf_r+0xe6>
 800805e:	06d0      	lsls	r0, r2, #27
 8008060:	bf44      	itt	mi
 8008062:	2320      	movmi	r3, #32
 8008064:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008068:	0711      	lsls	r1, r2, #28
 800806a:	bf44      	itt	mi
 800806c:	232b      	movmi	r3, #43	; 0x2b
 800806e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008072:	f89a 3000 	ldrb.w	r3, [sl]
 8008076:	2b2a      	cmp	r3, #42	; 0x2a
 8008078:	d015      	beq.n	80080a6 <_svfiprintf_r+0xf6>
 800807a:	9a07      	ldr	r2, [sp, #28]
 800807c:	4654      	mov	r4, sl
 800807e:	2000      	movs	r0, #0
 8008080:	f04f 0c0a 	mov.w	ip, #10
 8008084:	4621      	mov	r1, r4
 8008086:	f811 3b01 	ldrb.w	r3, [r1], #1
 800808a:	3b30      	subs	r3, #48	; 0x30
 800808c:	2b09      	cmp	r3, #9
 800808e:	d94d      	bls.n	800812c <_svfiprintf_r+0x17c>
 8008090:	b1b0      	cbz	r0, 80080c0 <_svfiprintf_r+0x110>
 8008092:	9207      	str	r2, [sp, #28]
 8008094:	e014      	b.n	80080c0 <_svfiprintf_r+0x110>
 8008096:	eba0 0308 	sub.w	r3, r0, r8
 800809a:	fa09 f303 	lsl.w	r3, r9, r3
 800809e:	4313      	orrs	r3, r2
 80080a0:	9304      	str	r3, [sp, #16]
 80080a2:	46a2      	mov	sl, r4
 80080a4:	e7d2      	b.n	800804c <_svfiprintf_r+0x9c>
 80080a6:	9b03      	ldr	r3, [sp, #12]
 80080a8:	1d19      	adds	r1, r3, #4
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	9103      	str	r1, [sp, #12]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	bfbb      	ittet	lt
 80080b2:	425b      	neglt	r3, r3
 80080b4:	f042 0202 	orrlt.w	r2, r2, #2
 80080b8:	9307      	strge	r3, [sp, #28]
 80080ba:	9307      	strlt	r3, [sp, #28]
 80080bc:	bfb8      	it	lt
 80080be:	9204      	strlt	r2, [sp, #16]
 80080c0:	7823      	ldrb	r3, [r4, #0]
 80080c2:	2b2e      	cmp	r3, #46	; 0x2e
 80080c4:	d10c      	bne.n	80080e0 <_svfiprintf_r+0x130>
 80080c6:	7863      	ldrb	r3, [r4, #1]
 80080c8:	2b2a      	cmp	r3, #42	; 0x2a
 80080ca:	d134      	bne.n	8008136 <_svfiprintf_r+0x186>
 80080cc:	9b03      	ldr	r3, [sp, #12]
 80080ce:	1d1a      	adds	r2, r3, #4
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	9203      	str	r2, [sp, #12]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	bfb8      	it	lt
 80080d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80080dc:	3402      	adds	r4, #2
 80080de:	9305      	str	r3, [sp, #20]
 80080e0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80081a8 <_svfiprintf_r+0x1f8>
 80080e4:	7821      	ldrb	r1, [r4, #0]
 80080e6:	2203      	movs	r2, #3
 80080e8:	4650      	mov	r0, sl
 80080ea:	f7f8 f879 	bl	80001e0 <memchr>
 80080ee:	b138      	cbz	r0, 8008100 <_svfiprintf_r+0x150>
 80080f0:	9b04      	ldr	r3, [sp, #16]
 80080f2:	eba0 000a 	sub.w	r0, r0, sl
 80080f6:	2240      	movs	r2, #64	; 0x40
 80080f8:	4082      	lsls	r2, r0
 80080fa:	4313      	orrs	r3, r2
 80080fc:	3401      	adds	r4, #1
 80080fe:	9304      	str	r3, [sp, #16]
 8008100:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008104:	4825      	ldr	r0, [pc, #148]	; (800819c <_svfiprintf_r+0x1ec>)
 8008106:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800810a:	2206      	movs	r2, #6
 800810c:	f7f8 f868 	bl	80001e0 <memchr>
 8008110:	2800      	cmp	r0, #0
 8008112:	d038      	beq.n	8008186 <_svfiprintf_r+0x1d6>
 8008114:	4b22      	ldr	r3, [pc, #136]	; (80081a0 <_svfiprintf_r+0x1f0>)
 8008116:	bb1b      	cbnz	r3, 8008160 <_svfiprintf_r+0x1b0>
 8008118:	9b03      	ldr	r3, [sp, #12]
 800811a:	3307      	adds	r3, #7
 800811c:	f023 0307 	bic.w	r3, r3, #7
 8008120:	3308      	adds	r3, #8
 8008122:	9303      	str	r3, [sp, #12]
 8008124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008126:	4433      	add	r3, r6
 8008128:	9309      	str	r3, [sp, #36]	; 0x24
 800812a:	e768      	b.n	8007ffe <_svfiprintf_r+0x4e>
 800812c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008130:	460c      	mov	r4, r1
 8008132:	2001      	movs	r0, #1
 8008134:	e7a6      	b.n	8008084 <_svfiprintf_r+0xd4>
 8008136:	2300      	movs	r3, #0
 8008138:	3401      	adds	r4, #1
 800813a:	9305      	str	r3, [sp, #20]
 800813c:	4619      	mov	r1, r3
 800813e:	f04f 0c0a 	mov.w	ip, #10
 8008142:	4620      	mov	r0, r4
 8008144:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008148:	3a30      	subs	r2, #48	; 0x30
 800814a:	2a09      	cmp	r2, #9
 800814c:	d903      	bls.n	8008156 <_svfiprintf_r+0x1a6>
 800814e:	2b00      	cmp	r3, #0
 8008150:	d0c6      	beq.n	80080e0 <_svfiprintf_r+0x130>
 8008152:	9105      	str	r1, [sp, #20]
 8008154:	e7c4      	b.n	80080e0 <_svfiprintf_r+0x130>
 8008156:	fb0c 2101 	mla	r1, ip, r1, r2
 800815a:	4604      	mov	r4, r0
 800815c:	2301      	movs	r3, #1
 800815e:	e7f0      	b.n	8008142 <_svfiprintf_r+0x192>
 8008160:	ab03      	add	r3, sp, #12
 8008162:	9300      	str	r3, [sp, #0]
 8008164:	462a      	mov	r2, r5
 8008166:	4b0f      	ldr	r3, [pc, #60]	; (80081a4 <_svfiprintf_r+0x1f4>)
 8008168:	a904      	add	r1, sp, #16
 800816a:	4638      	mov	r0, r7
 800816c:	f7fd fe56 	bl	8005e1c <_printf_float>
 8008170:	1c42      	adds	r2, r0, #1
 8008172:	4606      	mov	r6, r0
 8008174:	d1d6      	bne.n	8008124 <_svfiprintf_r+0x174>
 8008176:	89ab      	ldrh	r3, [r5, #12]
 8008178:	065b      	lsls	r3, r3, #25
 800817a:	f53f af2d 	bmi.w	8007fd8 <_svfiprintf_r+0x28>
 800817e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008180:	b01d      	add	sp, #116	; 0x74
 8008182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008186:	ab03      	add	r3, sp, #12
 8008188:	9300      	str	r3, [sp, #0]
 800818a:	462a      	mov	r2, r5
 800818c:	4b05      	ldr	r3, [pc, #20]	; (80081a4 <_svfiprintf_r+0x1f4>)
 800818e:	a904      	add	r1, sp, #16
 8008190:	4638      	mov	r0, r7
 8008192:	f7fe f8e7 	bl	8006364 <_printf_i>
 8008196:	e7eb      	b.n	8008170 <_svfiprintf_r+0x1c0>
 8008198:	080095b4 	.word	0x080095b4
 800819c:	080095be 	.word	0x080095be
 80081a0:	08005e1d 	.word	0x08005e1d
 80081a4:	08007efd 	.word	0x08007efd
 80081a8:	080095ba 	.word	0x080095ba

080081ac <__sflush_r>:
 80081ac:	898a      	ldrh	r2, [r1, #12]
 80081ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081b2:	4605      	mov	r5, r0
 80081b4:	0710      	lsls	r0, r2, #28
 80081b6:	460c      	mov	r4, r1
 80081b8:	d458      	bmi.n	800826c <__sflush_r+0xc0>
 80081ba:	684b      	ldr	r3, [r1, #4]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	dc05      	bgt.n	80081cc <__sflush_r+0x20>
 80081c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	dc02      	bgt.n	80081cc <__sflush_r+0x20>
 80081c6:	2000      	movs	r0, #0
 80081c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081ce:	2e00      	cmp	r6, #0
 80081d0:	d0f9      	beq.n	80081c6 <__sflush_r+0x1a>
 80081d2:	2300      	movs	r3, #0
 80081d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80081d8:	682f      	ldr	r7, [r5, #0]
 80081da:	6a21      	ldr	r1, [r4, #32]
 80081dc:	602b      	str	r3, [r5, #0]
 80081de:	d032      	beq.n	8008246 <__sflush_r+0x9a>
 80081e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80081e2:	89a3      	ldrh	r3, [r4, #12]
 80081e4:	075a      	lsls	r2, r3, #29
 80081e6:	d505      	bpl.n	80081f4 <__sflush_r+0x48>
 80081e8:	6863      	ldr	r3, [r4, #4]
 80081ea:	1ac0      	subs	r0, r0, r3
 80081ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80081ee:	b10b      	cbz	r3, 80081f4 <__sflush_r+0x48>
 80081f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081f2:	1ac0      	subs	r0, r0, r3
 80081f4:	2300      	movs	r3, #0
 80081f6:	4602      	mov	r2, r0
 80081f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081fa:	6a21      	ldr	r1, [r4, #32]
 80081fc:	4628      	mov	r0, r5
 80081fe:	47b0      	blx	r6
 8008200:	1c43      	adds	r3, r0, #1
 8008202:	89a3      	ldrh	r3, [r4, #12]
 8008204:	d106      	bne.n	8008214 <__sflush_r+0x68>
 8008206:	6829      	ldr	r1, [r5, #0]
 8008208:	291d      	cmp	r1, #29
 800820a:	d82b      	bhi.n	8008264 <__sflush_r+0xb8>
 800820c:	4a29      	ldr	r2, [pc, #164]	; (80082b4 <__sflush_r+0x108>)
 800820e:	410a      	asrs	r2, r1
 8008210:	07d6      	lsls	r6, r2, #31
 8008212:	d427      	bmi.n	8008264 <__sflush_r+0xb8>
 8008214:	2200      	movs	r2, #0
 8008216:	6062      	str	r2, [r4, #4]
 8008218:	04d9      	lsls	r1, r3, #19
 800821a:	6922      	ldr	r2, [r4, #16]
 800821c:	6022      	str	r2, [r4, #0]
 800821e:	d504      	bpl.n	800822a <__sflush_r+0x7e>
 8008220:	1c42      	adds	r2, r0, #1
 8008222:	d101      	bne.n	8008228 <__sflush_r+0x7c>
 8008224:	682b      	ldr	r3, [r5, #0]
 8008226:	b903      	cbnz	r3, 800822a <__sflush_r+0x7e>
 8008228:	6560      	str	r0, [r4, #84]	; 0x54
 800822a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800822c:	602f      	str	r7, [r5, #0]
 800822e:	2900      	cmp	r1, #0
 8008230:	d0c9      	beq.n	80081c6 <__sflush_r+0x1a>
 8008232:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008236:	4299      	cmp	r1, r3
 8008238:	d002      	beq.n	8008240 <__sflush_r+0x94>
 800823a:	4628      	mov	r0, r5
 800823c:	f7ff f9e2 	bl	8007604 <_free_r>
 8008240:	2000      	movs	r0, #0
 8008242:	6360      	str	r0, [r4, #52]	; 0x34
 8008244:	e7c0      	b.n	80081c8 <__sflush_r+0x1c>
 8008246:	2301      	movs	r3, #1
 8008248:	4628      	mov	r0, r5
 800824a:	47b0      	blx	r6
 800824c:	1c41      	adds	r1, r0, #1
 800824e:	d1c8      	bne.n	80081e2 <__sflush_r+0x36>
 8008250:	682b      	ldr	r3, [r5, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d0c5      	beq.n	80081e2 <__sflush_r+0x36>
 8008256:	2b1d      	cmp	r3, #29
 8008258:	d001      	beq.n	800825e <__sflush_r+0xb2>
 800825a:	2b16      	cmp	r3, #22
 800825c:	d101      	bne.n	8008262 <__sflush_r+0xb6>
 800825e:	602f      	str	r7, [r5, #0]
 8008260:	e7b1      	b.n	80081c6 <__sflush_r+0x1a>
 8008262:	89a3      	ldrh	r3, [r4, #12]
 8008264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008268:	81a3      	strh	r3, [r4, #12]
 800826a:	e7ad      	b.n	80081c8 <__sflush_r+0x1c>
 800826c:	690f      	ldr	r7, [r1, #16]
 800826e:	2f00      	cmp	r7, #0
 8008270:	d0a9      	beq.n	80081c6 <__sflush_r+0x1a>
 8008272:	0793      	lsls	r3, r2, #30
 8008274:	680e      	ldr	r6, [r1, #0]
 8008276:	bf08      	it	eq
 8008278:	694b      	ldreq	r3, [r1, #20]
 800827a:	600f      	str	r7, [r1, #0]
 800827c:	bf18      	it	ne
 800827e:	2300      	movne	r3, #0
 8008280:	eba6 0807 	sub.w	r8, r6, r7
 8008284:	608b      	str	r3, [r1, #8]
 8008286:	f1b8 0f00 	cmp.w	r8, #0
 800828a:	dd9c      	ble.n	80081c6 <__sflush_r+0x1a>
 800828c:	6a21      	ldr	r1, [r4, #32]
 800828e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008290:	4643      	mov	r3, r8
 8008292:	463a      	mov	r2, r7
 8008294:	4628      	mov	r0, r5
 8008296:	47b0      	blx	r6
 8008298:	2800      	cmp	r0, #0
 800829a:	dc06      	bgt.n	80082aa <__sflush_r+0xfe>
 800829c:	89a3      	ldrh	r3, [r4, #12]
 800829e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082a2:	81a3      	strh	r3, [r4, #12]
 80082a4:	f04f 30ff 	mov.w	r0, #4294967295
 80082a8:	e78e      	b.n	80081c8 <__sflush_r+0x1c>
 80082aa:	4407      	add	r7, r0
 80082ac:	eba8 0800 	sub.w	r8, r8, r0
 80082b0:	e7e9      	b.n	8008286 <__sflush_r+0xda>
 80082b2:	bf00      	nop
 80082b4:	dfbffffe 	.word	0xdfbffffe

080082b8 <_fflush_r>:
 80082b8:	b538      	push	{r3, r4, r5, lr}
 80082ba:	690b      	ldr	r3, [r1, #16]
 80082bc:	4605      	mov	r5, r0
 80082be:	460c      	mov	r4, r1
 80082c0:	b913      	cbnz	r3, 80082c8 <_fflush_r+0x10>
 80082c2:	2500      	movs	r5, #0
 80082c4:	4628      	mov	r0, r5
 80082c6:	bd38      	pop	{r3, r4, r5, pc}
 80082c8:	b118      	cbz	r0, 80082d2 <_fflush_r+0x1a>
 80082ca:	6a03      	ldr	r3, [r0, #32]
 80082cc:	b90b      	cbnz	r3, 80082d2 <_fflush_r+0x1a>
 80082ce:	f7fe f9f7 	bl	80066c0 <__sinit>
 80082d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d0f3      	beq.n	80082c2 <_fflush_r+0xa>
 80082da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80082dc:	07d0      	lsls	r0, r2, #31
 80082de:	d404      	bmi.n	80082ea <_fflush_r+0x32>
 80082e0:	0599      	lsls	r1, r3, #22
 80082e2:	d402      	bmi.n	80082ea <_fflush_r+0x32>
 80082e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082e6:	f7fe fb02 	bl	80068ee <__retarget_lock_acquire_recursive>
 80082ea:	4628      	mov	r0, r5
 80082ec:	4621      	mov	r1, r4
 80082ee:	f7ff ff5d 	bl	80081ac <__sflush_r>
 80082f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082f4:	07da      	lsls	r2, r3, #31
 80082f6:	4605      	mov	r5, r0
 80082f8:	d4e4      	bmi.n	80082c4 <_fflush_r+0xc>
 80082fa:	89a3      	ldrh	r3, [r4, #12]
 80082fc:	059b      	lsls	r3, r3, #22
 80082fe:	d4e1      	bmi.n	80082c4 <_fflush_r+0xc>
 8008300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008302:	f7fe faf5 	bl	80068f0 <__retarget_lock_release_recursive>
 8008306:	e7dd      	b.n	80082c4 <_fflush_r+0xc>

08008308 <memmove>:
 8008308:	4288      	cmp	r0, r1
 800830a:	b510      	push	{r4, lr}
 800830c:	eb01 0402 	add.w	r4, r1, r2
 8008310:	d902      	bls.n	8008318 <memmove+0x10>
 8008312:	4284      	cmp	r4, r0
 8008314:	4623      	mov	r3, r4
 8008316:	d807      	bhi.n	8008328 <memmove+0x20>
 8008318:	1e43      	subs	r3, r0, #1
 800831a:	42a1      	cmp	r1, r4
 800831c:	d008      	beq.n	8008330 <memmove+0x28>
 800831e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008322:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008326:	e7f8      	b.n	800831a <memmove+0x12>
 8008328:	4402      	add	r2, r0
 800832a:	4601      	mov	r1, r0
 800832c:	428a      	cmp	r2, r1
 800832e:	d100      	bne.n	8008332 <memmove+0x2a>
 8008330:	bd10      	pop	{r4, pc}
 8008332:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008336:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800833a:	e7f7      	b.n	800832c <memmove+0x24>

0800833c <_sbrk_r>:
 800833c:	b538      	push	{r3, r4, r5, lr}
 800833e:	4d06      	ldr	r5, [pc, #24]	; (8008358 <_sbrk_r+0x1c>)
 8008340:	2300      	movs	r3, #0
 8008342:	4604      	mov	r4, r0
 8008344:	4608      	mov	r0, r1
 8008346:	602b      	str	r3, [r5, #0]
 8008348:	f7f9 f92c 	bl	80015a4 <_sbrk>
 800834c:	1c43      	adds	r3, r0, #1
 800834e:	d102      	bne.n	8008356 <_sbrk_r+0x1a>
 8008350:	682b      	ldr	r3, [r5, #0]
 8008352:	b103      	cbz	r3, 8008356 <_sbrk_r+0x1a>
 8008354:	6023      	str	r3, [r4, #0]
 8008356:	bd38      	pop	{r3, r4, r5, pc}
 8008358:	20000550 	.word	0x20000550

0800835c <__assert_func>:
 800835c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800835e:	4614      	mov	r4, r2
 8008360:	461a      	mov	r2, r3
 8008362:	4b09      	ldr	r3, [pc, #36]	; (8008388 <__assert_func+0x2c>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4605      	mov	r5, r0
 8008368:	68d8      	ldr	r0, [r3, #12]
 800836a:	b14c      	cbz	r4, 8008380 <__assert_func+0x24>
 800836c:	4b07      	ldr	r3, [pc, #28]	; (800838c <__assert_func+0x30>)
 800836e:	9100      	str	r1, [sp, #0]
 8008370:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008374:	4906      	ldr	r1, [pc, #24]	; (8008390 <__assert_func+0x34>)
 8008376:	462b      	mov	r3, r5
 8008378:	f000 f872 	bl	8008460 <fiprintf>
 800837c:	f000 f882 	bl	8008484 <abort>
 8008380:	4b04      	ldr	r3, [pc, #16]	; (8008394 <__assert_func+0x38>)
 8008382:	461c      	mov	r4, r3
 8008384:	e7f3      	b.n	800836e <__assert_func+0x12>
 8008386:	bf00      	nop
 8008388:	20000074 	.word	0x20000074
 800838c:	080095cf 	.word	0x080095cf
 8008390:	080095dc 	.word	0x080095dc
 8008394:	0800960a 	.word	0x0800960a

08008398 <_calloc_r>:
 8008398:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800839a:	fba1 2402 	umull	r2, r4, r1, r2
 800839e:	b94c      	cbnz	r4, 80083b4 <_calloc_r+0x1c>
 80083a0:	4611      	mov	r1, r2
 80083a2:	9201      	str	r2, [sp, #4]
 80083a4:	f7ff f9a2 	bl	80076ec <_malloc_r>
 80083a8:	9a01      	ldr	r2, [sp, #4]
 80083aa:	4605      	mov	r5, r0
 80083ac:	b930      	cbnz	r0, 80083bc <_calloc_r+0x24>
 80083ae:	4628      	mov	r0, r5
 80083b0:	b003      	add	sp, #12
 80083b2:	bd30      	pop	{r4, r5, pc}
 80083b4:	220c      	movs	r2, #12
 80083b6:	6002      	str	r2, [r0, #0]
 80083b8:	2500      	movs	r5, #0
 80083ba:	e7f8      	b.n	80083ae <_calloc_r+0x16>
 80083bc:	4621      	mov	r1, r4
 80083be:	f7fe fa18 	bl	80067f2 <memset>
 80083c2:	e7f4      	b.n	80083ae <_calloc_r+0x16>

080083c4 <__ascii_mbtowc>:
 80083c4:	b082      	sub	sp, #8
 80083c6:	b901      	cbnz	r1, 80083ca <__ascii_mbtowc+0x6>
 80083c8:	a901      	add	r1, sp, #4
 80083ca:	b142      	cbz	r2, 80083de <__ascii_mbtowc+0x1a>
 80083cc:	b14b      	cbz	r3, 80083e2 <__ascii_mbtowc+0x1e>
 80083ce:	7813      	ldrb	r3, [r2, #0]
 80083d0:	600b      	str	r3, [r1, #0]
 80083d2:	7812      	ldrb	r2, [r2, #0]
 80083d4:	1e10      	subs	r0, r2, #0
 80083d6:	bf18      	it	ne
 80083d8:	2001      	movne	r0, #1
 80083da:	b002      	add	sp, #8
 80083dc:	4770      	bx	lr
 80083de:	4610      	mov	r0, r2
 80083e0:	e7fb      	b.n	80083da <__ascii_mbtowc+0x16>
 80083e2:	f06f 0001 	mvn.w	r0, #1
 80083e6:	e7f8      	b.n	80083da <__ascii_mbtowc+0x16>

080083e8 <_realloc_r>:
 80083e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083ec:	4680      	mov	r8, r0
 80083ee:	4614      	mov	r4, r2
 80083f0:	460e      	mov	r6, r1
 80083f2:	b921      	cbnz	r1, 80083fe <_realloc_r+0x16>
 80083f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083f8:	4611      	mov	r1, r2
 80083fa:	f7ff b977 	b.w	80076ec <_malloc_r>
 80083fe:	b92a      	cbnz	r2, 800840c <_realloc_r+0x24>
 8008400:	f7ff f900 	bl	8007604 <_free_r>
 8008404:	4625      	mov	r5, r4
 8008406:	4628      	mov	r0, r5
 8008408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800840c:	f000 f841 	bl	8008492 <_malloc_usable_size_r>
 8008410:	4284      	cmp	r4, r0
 8008412:	4607      	mov	r7, r0
 8008414:	d802      	bhi.n	800841c <_realloc_r+0x34>
 8008416:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800841a:	d812      	bhi.n	8008442 <_realloc_r+0x5a>
 800841c:	4621      	mov	r1, r4
 800841e:	4640      	mov	r0, r8
 8008420:	f7ff f964 	bl	80076ec <_malloc_r>
 8008424:	4605      	mov	r5, r0
 8008426:	2800      	cmp	r0, #0
 8008428:	d0ed      	beq.n	8008406 <_realloc_r+0x1e>
 800842a:	42bc      	cmp	r4, r7
 800842c:	4622      	mov	r2, r4
 800842e:	4631      	mov	r1, r6
 8008430:	bf28      	it	cs
 8008432:	463a      	movcs	r2, r7
 8008434:	f7fe fa5d 	bl	80068f2 <memcpy>
 8008438:	4631      	mov	r1, r6
 800843a:	4640      	mov	r0, r8
 800843c:	f7ff f8e2 	bl	8007604 <_free_r>
 8008440:	e7e1      	b.n	8008406 <_realloc_r+0x1e>
 8008442:	4635      	mov	r5, r6
 8008444:	e7df      	b.n	8008406 <_realloc_r+0x1e>

08008446 <__ascii_wctomb>:
 8008446:	b149      	cbz	r1, 800845c <__ascii_wctomb+0x16>
 8008448:	2aff      	cmp	r2, #255	; 0xff
 800844a:	bf85      	ittet	hi
 800844c:	238a      	movhi	r3, #138	; 0x8a
 800844e:	6003      	strhi	r3, [r0, #0]
 8008450:	700a      	strbls	r2, [r1, #0]
 8008452:	f04f 30ff 	movhi.w	r0, #4294967295
 8008456:	bf98      	it	ls
 8008458:	2001      	movls	r0, #1
 800845a:	4770      	bx	lr
 800845c:	4608      	mov	r0, r1
 800845e:	4770      	bx	lr

08008460 <fiprintf>:
 8008460:	b40e      	push	{r1, r2, r3}
 8008462:	b503      	push	{r0, r1, lr}
 8008464:	4601      	mov	r1, r0
 8008466:	ab03      	add	r3, sp, #12
 8008468:	4805      	ldr	r0, [pc, #20]	; (8008480 <fiprintf+0x20>)
 800846a:	f853 2b04 	ldr.w	r2, [r3], #4
 800846e:	6800      	ldr	r0, [r0, #0]
 8008470:	9301      	str	r3, [sp, #4]
 8008472:	f000 f83f 	bl	80084f4 <_vfiprintf_r>
 8008476:	b002      	add	sp, #8
 8008478:	f85d eb04 	ldr.w	lr, [sp], #4
 800847c:	b003      	add	sp, #12
 800847e:	4770      	bx	lr
 8008480:	20000074 	.word	0x20000074

08008484 <abort>:
 8008484:	b508      	push	{r3, lr}
 8008486:	2006      	movs	r0, #6
 8008488:	f000 fa0c 	bl	80088a4 <raise>
 800848c:	2001      	movs	r0, #1
 800848e:	f7f9 f811 	bl	80014b4 <_exit>

08008492 <_malloc_usable_size_r>:
 8008492:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008496:	1f18      	subs	r0, r3, #4
 8008498:	2b00      	cmp	r3, #0
 800849a:	bfbc      	itt	lt
 800849c:	580b      	ldrlt	r3, [r1, r0]
 800849e:	18c0      	addlt	r0, r0, r3
 80084a0:	4770      	bx	lr

080084a2 <__sfputc_r>:
 80084a2:	6893      	ldr	r3, [r2, #8]
 80084a4:	3b01      	subs	r3, #1
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	b410      	push	{r4}
 80084aa:	6093      	str	r3, [r2, #8]
 80084ac:	da08      	bge.n	80084c0 <__sfputc_r+0x1e>
 80084ae:	6994      	ldr	r4, [r2, #24]
 80084b0:	42a3      	cmp	r3, r4
 80084b2:	db01      	blt.n	80084b8 <__sfputc_r+0x16>
 80084b4:	290a      	cmp	r1, #10
 80084b6:	d103      	bne.n	80084c0 <__sfputc_r+0x1e>
 80084b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084bc:	f000 b934 	b.w	8008728 <__swbuf_r>
 80084c0:	6813      	ldr	r3, [r2, #0]
 80084c2:	1c58      	adds	r0, r3, #1
 80084c4:	6010      	str	r0, [r2, #0]
 80084c6:	7019      	strb	r1, [r3, #0]
 80084c8:	4608      	mov	r0, r1
 80084ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <__sfputs_r>:
 80084d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084d2:	4606      	mov	r6, r0
 80084d4:	460f      	mov	r7, r1
 80084d6:	4614      	mov	r4, r2
 80084d8:	18d5      	adds	r5, r2, r3
 80084da:	42ac      	cmp	r4, r5
 80084dc:	d101      	bne.n	80084e2 <__sfputs_r+0x12>
 80084de:	2000      	movs	r0, #0
 80084e0:	e007      	b.n	80084f2 <__sfputs_r+0x22>
 80084e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084e6:	463a      	mov	r2, r7
 80084e8:	4630      	mov	r0, r6
 80084ea:	f7ff ffda 	bl	80084a2 <__sfputc_r>
 80084ee:	1c43      	adds	r3, r0, #1
 80084f0:	d1f3      	bne.n	80084da <__sfputs_r+0xa>
 80084f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080084f4 <_vfiprintf_r>:
 80084f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f8:	460d      	mov	r5, r1
 80084fa:	b09d      	sub	sp, #116	; 0x74
 80084fc:	4614      	mov	r4, r2
 80084fe:	4698      	mov	r8, r3
 8008500:	4606      	mov	r6, r0
 8008502:	b118      	cbz	r0, 800850c <_vfiprintf_r+0x18>
 8008504:	6a03      	ldr	r3, [r0, #32]
 8008506:	b90b      	cbnz	r3, 800850c <_vfiprintf_r+0x18>
 8008508:	f7fe f8da 	bl	80066c0 <__sinit>
 800850c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800850e:	07d9      	lsls	r1, r3, #31
 8008510:	d405      	bmi.n	800851e <_vfiprintf_r+0x2a>
 8008512:	89ab      	ldrh	r3, [r5, #12]
 8008514:	059a      	lsls	r2, r3, #22
 8008516:	d402      	bmi.n	800851e <_vfiprintf_r+0x2a>
 8008518:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800851a:	f7fe f9e8 	bl	80068ee <__retarget_lock_acquire_recursive>
 800851e:	89ab      	ldrh	r3, [r5, #12]
 8008520:	071b      	lsls	r3, r3, #28
 8008522:	d501      	bpl.n	8008528 <_vfiprintf_r+0x34>
 8008524:	692b      	ldr	r3, [r5, #16]
 8008526:	b99b      	cbnz	r3, 8008550 <_vfiprintf_r+0x5c>
 8008528:	4629      	mov	r1, r5
 800852a:	4630      	mov	r0, r6
 800852c:	f000 f93a 	bl	80087a4 <__swsetup_r>
 8008530:	b170      	cbz	r0, 8008550 <_vfiprintf_r+0x5c>
 8008532:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008534:	07dc      	lsls	r4, r3, #31
 8008536:	d504      	bpl.n	8008542 <_vfiprintf_r+0x4e>
 8008538:	f04f 30ff 	mov.w	r0, #4294967295
 800853c:	b01d      	add	sp, #116	; 0x74
 800853e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008542:	89ab      	ldrh	r3, [r5, #12]
 8008544:	0598      	lsls	r0, r3, #22
 8008546:	d4f7      	bmi.n	8008538 <_vfiprintf_r+0x44>
 8008548:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800854a:	f7fe f9d1 	bl	80068f0 <__retarget_lock_release_recursive>
 800854e:	e7f3      	b.n	8008538 <_vfiprintf_r+0x44>
 8008550:	2300      	movs	r3, #0
 8008552:	9309      	str	r3, [sp, #36]	; 0x24
 8008554:	2320      	movs	r3, #32
 8008556:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800855a:	f8cd 800c 	str.w	r8, [sp, #12]
 800855e:	2330      	movs	r3, #48	; 0x30
 8008560:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008714 <_vfiprintf_r+0x220>
 8008564:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008568:	f04f 0901 	mov.w	r9, #1
 800856c:	4623      	mov	r3, r4
 800856e:	469a      	mov	sl, r3
 8008570:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008574:	b10a      	cbz	r2, 800857a <_vfiprintf_r+0x86>
 8008576:	2a25      	cmp	r2, #37	; 0x25
 8008578:	d1f9      	bne.n	800856e <_vfiprintf_r+0x7a>
 800857a:	ebba 0b04 	subs.w	fp, sl, r4
 800857e:	d00b      	beq.n	8008598 <_vfiprintf_r+0xa4>
 8008580:	465b      	mov	r3, fp
 8008582:	4622      	mov	r2, r4
 8008584:	4629      	mov	r1, r5
 8008586:	4630      	mov	r0, r6
 8008588:	f7ff ffa2 	bl	80084d0 <__sfputs_r>
 800858c:	3001      	adds	r0, #1
 800858e:	f000 80a9 	beq.w	80086e4 <_vfiprintf_r+0x1f0>
 8008592:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008594:	445a      	add	r2, fp
 8008596:	9209      	str	r2, [sp, #36]	; 0x24
 8008598:	f89a 3000 	ldrb.w	r3, [sl]
 800859c:	2b00      	cmp	r3, #0
 800859e:	f000 80a1 	beq.w	80086e4 <_vfiprintf_r+0x1f0>
 80085a2:	2300      	movs	r3, #0
 80085a4:	f04f 32ff 	mov.w	r2, #4294967295
 80085a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085ac:	f10a 0a01 	add.w	sl, sl, #1
 80085b0:	9304      	str	r3, [sp, #16]
 80085b2:	9307      	str	r3, [sp, #28]
 80085b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085b8:	931a      	str	r3, [sp, #104]	; 0x68
 80085ba:	4654      	mov	r4, sl
 80085bc:	2205      	movs	r2, #5
 80085be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085c2:	4854      	ldr	r0, [pc, #336]	; (8008714 <_vfiprintf_r+0x220>)
 80085c4:	f7f7 fe0c 	bl	80001e0 <memchr>
 80085c8:	9a04      	ldr	r2, [sp, #16]
 80085ca:	b9d8      	cbnz	r0, 8008604 <_vfiprintf_r+0x110>
 80085cc:	06d1      	lsls	r1, r2, #27
 80085ce:	bf44      	itt	mi
 80085d0:	2320      	movmi	r3, #32
 80085d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085d6:	0713      	lsls	r3, r2, #28
 80085d8:	bf44      	itt	mi
 80085da:	232b      	movmi	r3, #43	; 0x2b
 80085dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085e0:	f89a 3000 	ldrb.w	r3, [sl]
 80085e4:	2b2a      	cmp	r3, #42	; 0x2a
 80085e6:	d015      	beq.n	8008614 <_vfiprintf_r+0x120>
 80085e8:	9a07      	ldr	r2, [sp, #28]
 80085ea:	4654      	mov	r4, sl
 80085ec:	2000      	movs	r0, #0
 80085ee:	f04f 0c0a 	mov.w	ip, #10
 80085f2:	4621      	mov	r1, r4
 80085f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085f8:	3b30      	subs	r3, #48	; 0x30
 80085fa:	2b09      	cmp	r3, #9
 80085fc:	d94d      	bls.n	800869a <_vfiprintf_r+0x1a6>
 80085fe:	b1b0      	cbz	r0, 800862e <_vfiprintf_r+0x13a>
 8008600:	9207      	str	r2, [sp, #28]
 8008602:	e014      	b.n	800862e <_vfiprintf_r+0x13a>
 8008604:	eba0 0308 	sub.w	r3, r0, r8
 8008608:	fa09 f303 	lsl.w	r3, r9, r3
 800860c:	4313      	orrs	r3, r2
 800860e:	9304      	str	r3, [sp, #16]
 8008610:	46a2      	mov	sl, r4
 8008612:	e7d2      	b.n	80085ba <_vfiprintf_r+0xc6>
 8008614:	9b03      	ldr	r3, [sp, #12]
 8008616:	1d19      	adds	r1, r3, #4
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	9103      	str	r1, [sp, #12]
 800861c:	2b00      	cmp	r3, #0
 800861e:	bfbb      	ittet	lt
 8008620:	425b      	neglt	r3, r3
 8008622:	f042 0202 	orrlt.w	r2, r2, #2
 8008626:	9307      	strge	r3, [sp, #28]
 8008628:	9307      	strlt	r3, [sp, #28]
 800862a:	bfb8      	it	lt
 800862c:	9204      	strlt	r2, [sp, #16]
 800862e:	7823      	ldrb	r3, [r4, #0]
 8008630:	2b2e      	cmp	r3, #46	; 0x2e
 8008632:	d10c      	bne.n	800864e <_vfiprintf_r+0x15a>
 8008634:	7863      	ldrb	r3, [r4, #1]
 8008636:	2b2a      	cmp	r3, #42	; 0x2a
 8008638:	d134      	bne.n	80086a4 <_vfiprintf_r+0x1b0>
 800863a:	9b03      	ldr	r3, [sp, #12]
 800863c:	1d1a      	adds	r2, r3, #4
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	9203      	str	r2, [sp, #12]
 8008642:	2b00      	cmp	r3, #0
 8008644:	bfb8      	it	lt
 8008646:	f04f 33ff 	movlt.w	r3, #4294967295
 800864a:	3402      	adds	r4, #2
 800864c:	9305      	str	r3, [sp, #20]
 800864e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008724 <_vfiprintf_r+0x230>
 8008652:	7821      	ldrb	r1, [r4, #0]
 8008654:	2203      	movs	r2, #3
 8008656:	4650      	mov	r0, sl
 8008658:	f7f7 fdc2 	bl	80001e0 <memchr>
 800865c:	b138      	cbz	r0, 800866e <_vfiprintf_r+0x17a>
 800865e:	9b04      	ldr	r3, [sp, #16]
 8008660:	eba0 000a 	sub.w	r0, r0, sl
 8008664:	2240      	movs	r2, #64	; 0x40
 8008666:	4082      	lsls	r2, r0
 8008668:	4313      	orrs	r3, r2
 800866a:	3401      	adds	r4, #1
 800866c:	9304      	str	r3, [sp, #16]
 800866e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008672:	4829      	ldr	r0, [pc, #164]	; (8008718 <_vfiprintf_r+0x224>)
 8008674:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008678:	2206      	movs	r2, #6
 800867a:	f7f7 fdb1 	bl	80001e0 <memchr>
 800867e:	2800      	cmp	r0, #0
 8008680:	d03f      	beq.n	8008702 <_vfiprintf_r+0x20e>
 8008682:	4b26      	ldr	r3, [pc, #152]	; (800871c <_vfiprintf_r+0x228>)
 8008684:	bb1b      	cbnz	r3, 80086ce <_vfiprintf_r+0x1da>
 8008686:	9b03      	ldr	r3, [sp, #12]
 8008688:	3307      	adds	r3, #7
 800868a:	f023 0307 	bic.w	r3, r3, #7
 800868e:	3308      	adds	r3, #8
 8008690:	9303      	str	r3, [sp, #12]
 8008692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008694:	443b      	add	r3, r7
 8008696:	9309      	str	r3, [sp, #36]	; 0x24
 8008698:	e768      	b.n	800856c <_vfiprintf_r+0x78>
 800869a:	fb0c 3202 	mla	r2, ip, r2, r3
 800869e:	460c      	mov	r4, r1
 80086a0:	2001      	movs	r0, #1
 80086a2:	e7a6      	b.n	80085f2 <_vfiprintf_r+0xfe>
 80086a4:	2300      	movs	r3, #0
 80086a6:	3401      	adds	r4, #1
 80086a8:	9305      	str	r3, [sp, #20]
 80086aa:	4619      	mov	r1, r3
 80086ac:	f04f 0c0a 	mov.w	ip, #10
 80086b0:	4620      	mov	r0, r4
 80086b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086b6:	3a30      	subs	r2, #48	; 0x30
 80086b8:	2a09      	cmp	r2, #9
 80086ba:	d903      	bls.n	80086c4 <_vfiprintf_r+0x1d0>
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d0c6      	beq.n	800864e <_vfiprintf_r+0x15a>
 80086c0:	9105      	str	r1, [sp, #20]
 80086c2:	e7c4      	b.n	800864e <_vfiprintf_r+0x15a>
 80086c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80086c8:	4604      	mov	r4, r0
 80086ca:	2301      	movs	r3, #1
 80086cc:	e7f0      	b.n	80086b0 <_vfiprintf_r+0x1bc>
 80086ce:	ab03      	add	r3, sp, #12
 80086d0:	9300      	str	r3, [sp, #0]
 80086d2:	462a      	mov	r2, r5
 80086d4:	4b12      	ldr	r3, [pc, #72]	; (8008720 <_vfiprintf_r+0x22c>)
 80086d6:	a904      	add	r1, sp, #16
 80086d8:	4630      	mov	r0, r6
 80086da:	f7fd fb9f 	bl	8005e1c <_printf_float>
 80086de:	4607      	mov	r7, r0
 80086e0:	1c78      	adds	r0, r7, #1
 80086e2:	d1d6      	bne.n	8008692 <_vfiprintf_r+0x19e>
 80086e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086e6:	07d9      	lsls	r1, r3, #31
 80086e8:	d405      	bmi.n	80086f6 <_vfiprintf_r+0x202>
 80086ea:	89ab      	ldrh	r3, [r5, #12]
 80086ec:	059a      	lsls	r2, r3, #22
 80086ee:	d402      	bmi.n	80086f6 <_vfiprintf_r+0x202>
 80086f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086f2:	f7fe f8fd 	bl	80068f0 <__retarget_lock_release_recursive>
 80086f6:	89ab      	ldrh	r3, [r5, #12]
 80086f8:	065b      	lsls	r3, r3, #25
 80086fa:	f53f af1d 	bmi.w	8008538 <_vfiprintf_r+0x44>
 80086fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008700:	e71c      	b.n	800853c <_vfiprintf_r+0x48>
 8008702:	ab03      	add	r3, sp, #12
 8008704:	9300      	str	r3, [sp, #0]
 8008706:	462a      	mov	r2, r5
 8008708:	4b05      	ldr	r3, [pc, #20]	; (8008720 <_vfiprintf_r+0x22c>)
 800870a:	a904      	add	r1, sp, #16
 800870c:	4630      	mov	r0, r6
 800870e:	f7fd fe29 	bl	8006364 <_printf_i>
 8008712:	e7e4      	b.n	80086de <_vfiprintf_r+0x1ea>
 8008714:	080095b4 	.word	0x080095b4
 8008718:	080095be 	.word	0x080095be
 800871c:	08005e1d 	.word	0x08005e1d
 8008720:	080084d1 	.word	0x080084d1
 8008724:	080095ba 	.word	0x080095ba

08008728 <__swbuf_r>:
 8008728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800872a:	460e      	mov	r6, r1
 800872c:	4614      	mov	r4, r2
 800872e:	4605      	mov	r5, r0
 8008730:	b118      	cbz	r0, 800873a <__swbuf_r+0x12>
 8008732:	6a03      	ldr	r3, [r0, #32]
 8008734:	b90b      	cbnz	r3, 800873a <__swbuf_r+0x12>
 8008736:	f7fd ffc3 	bl	80066c0 <__sinit>
 800873a:	69a3      	ldr	r3, [r4, #24]
 800873c:	60a3      	str	r3, [r4, #8]
 800873e:	89a3      	ldrh	r3, [r4, #12]
 8008740:	071a      	lsls	r2, r3, #28
 8008742:	d525      	bpl.n	8008790 <__swbuf_r+0x68>
 8008744:	6923      	ldr	r3, [r4, #16]
 8008746:	b31b      	cbz	r3, 8008790 <__swbuf_r+0x68>
 8008748:	6823      	ldr	r3, [r4, #0]
 800874a:	6922      	ldr	r2, [r4, #16]
 800874c:	1a98      	subs	r0, r3, r2
 800874e:	6963      	ldr	r3, [r4, #20]
 8008750:	b2f6      	uxtb	r6, r6
 8008752:	4283      	cmp	r3, r0
 8008754:	4637      	mov	r7, r6
 8008756:	dc04      	bgt.n	8008762 <__swbuf_r+0x3a>
 8008758:	4621      	mov	r1, r4
 800875a:	4628      	mov	r0, r5
 800875c:	f7ff fdac 	bl	80082b8 <_fflush_r>
 8008760:	b9e0      	cbnz	r0, 800879c <__swbuf_r+0x74>
 8008762:	68a3      	ldr	r3, [r4, #8]
 8008764:	3b01      	subs	r3, #1
 8008766:	60a3      	str	r3, [r4, #8]
 8008768:	6823      	ldr	r3, [r4, #0]
 800876a:	1c5a      	adds	r2, r3, #1
 800876c:	6022      	str	r2, [r4, #0]
 800876e:	701e      	strb	r6, [r3, #0]
 8008770:	6962      	ldr	r2, [r4, #20]
 8008772:	1c43      	adds	r3, r0, #1
 8008774:	429a      	cmp	r2, r3
 8008776:	d004      	beq.n	8008782 <__swbuf_r+0x5a>
 8008778:	89a3      	ldrh	r3, [r4, #12]
 800877a:	07db      	lsls	r3, r3, #31
 800877c:	d506      	bpl.n	800878c <__swbuf_r+0x64>
 800877e:	2e0a      	cmp	r6, #10
 8008780:	d104      	bne.n	800878c <__swbuf_r+0x64>
 8008782:	4621      	mov	r1, r4
 8008784:	4628      	mov	r0, r5
 8008786:	f7ff fd97 	bl	80082b8 <_fflush_r>
 800878a:	b938      	cbnz	r0, 800879c <__swbuf_r+0x74>
 800878c:	4638      	mov	r0, r7
 800878e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008790:	4621      	mov	r1, r4
 8008792:	4628      	mov	r0, r5
 8008794:	f000 f806 	bl	80087a4 <__swsetup_r>
 8008798:	2800      	cmp	r0, #0
 800879a:	d0d5      	beq.n	8008748 <__swbuf_r+0x20>
 800879c:	f04f 37ff 	mov.w	r7, #4294967295
 80087a0:	e7f4      	b.n	800878c <__swbuf_r+0x64>
	...

080087a4 <__swsetup_r>:
 80087a4:	b538      	push	{r3, r4, r5, lr}
 80087a6:	4b2a      	ldr	r3, [pc, #168]	; (8008850 <__swsetup_r+0xac>)
 80087a8:	4605      	mov	r5, r0
 80087aa:	6818      	ldr	r0, [r3, #0]
 80087ac:	460c      	mov	r4, r1
 80087ae:	b118      	cbz	r0, 80087b8 <__swsetup_r+0x14>
 80087b0:	6a03      	ldr	r3, [r0, #32]
 80087b2:	b90b      	cbnz	r3, 80087b8 <__swsetup_r+0x14>
 80087b4:	f7fd ff84 	bl	80066c0 <__sinit>
 80087b8:	89a3      	ldrh	r3, [r4, #12]
 80087ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087be:	0718      	lsls	r0, r3, #28
 80087c0:	d422      	bmi.n	8008808 <__swsetup_r+0x64>
 80087c2:	06d9      	lsls	r1, r3, #27
 80087c4:	d407      	bmi.n	80087d6 <__swsetup_r+0x32>
 80087c6:	2309      	movs	r3, #9
 80087c8:	602b      	str	r3, [r5, #0]
 80087ca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80087ce:	81a3      	strh	r3, [r4, #12]
 80087d0:	f04f 30ff 	mov.w	r0, #4294967295
 80087d4:	e034      	b.n	8008840 <__swsetup_r+0x9c>
 80087d6:	0758      	lsls	r0, r3, #29
 80087d8:	d512      	bpl.n	8008800 <__swsetup_r+0x5c>
 80087da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087dc:	b141      	cbz	r1, 80087f0 <__swsetup_r+0x4c>
 80087de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087e2:	4299      	cmp	r1, r3
 80087e4:	d002      	beq.n	80087ec <__swsetup_r+0x48>
 80087e6:	4628      	mov	r0, r5
 80087e8:	f7fe ff0c 	bl	8007604 <_free_r>
 80087ec:	2300      	movs	r3, #0
 80087ee:	6363      	str	r3, [r4, #52]	; 0x34
 80087f0:	89a3      	ldrh	r3, [r4, #12]
 80087f2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80087f6:	81a3      	strh	r3, [r4, #12]
 80087f8:	2300      	movs	r3, #0
 80087fa:	6063      	str	r3, [r4, #4]
 80087fc:	6923      	ldr	r3, [r4, #16]
 80087fe:	6023      	str	r3, [r4, #0]
 8008800:	89a3      	ldrh	r3, [r4, #12]
 8008802:	f043 0308 	orr.w	r3, r3, #8
 8008806:	81a3      	strh	r3, [r4, #12]
 8008808:	6923      	ldr	r3, [r4, #16]
 800880a:	b94b      	cbnz	r3, 8008820 <__swsetup_r+0x7c>
 800880c:	89a3      	ldrh	r3, [r4, #12]
 800880e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008812:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008816:	d003      	beq.n	8008820 <__swsetup_r+0x7c>
 8008818:	4621      	mov	r1, r4
 800881a:	4628      	mov	r0, r5
 800881c:	f000 f884 	bl	8008928 <__smakebuf_r>
 8008820:	89a0      	ldrh	r0, [r4, #12]
 8008822:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008826:	f010 0301 	ands.w	r3, r0, #1
 800882a:	d00a      	beq.n	8008842 <__swsetup_r+0x9e>
 800882c:	2300      	movs	r3, #0
 800882e:	60a3      	str	r3, [r4, #8]
 8008830:	6963      	ldr	r3, [r4, #20]
 8008832:	425b      	negs	r3, r3
 8008834:	61a3      	str	r3, [r4, #24]
 8008836:	6923      	ldr	r3, [r4, #16]
 8008838:	b943      	cbnz	r3, 800884c <__swsetup_r+0xa8>
 800883a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800883e:	d1c4      	bne.n	80087ca <__swsetup_r+0x26>
 8008840:	bd38      	pop	{r3, r4, r5, pc}
 8008842:	0781      	lsls	r1, r0, #30
 8008844:	bf58      	it	pl
 8008846:	6963      	ldrpl	r3, [r4, #20]
 8008848:	60a3      	str	r3, [r4, #8]
 800884a:	e7f4      	b.n	8008836 <__swsetup_r+0x92>
 800884c:	2000      	movs	r0, #0
 800884e:	e7f7      	b.n	8008840 <__swsetup_r+0x9c>
 8008850:	20000074 	.word	0x20000074

08008854 <_raise_r>:
 8008854:	291f      	cmp	r1, #31
 8008856:	b538      	push	{r3, r4, r5, lr}
 8008858:	4604      	mov	r4, r0
 800885a:	460d      	mov	r5, r1
 800885c:	d904      	bls.n	8008868 <_raise_r+0x14>
 800885e:	2316      	movs	r3, #22
 8008860:	6003      	str	r3, [r0, #0]
 8008862:	f04f 30ff 	mov.w	r0, #4294967295
 8008866:	bd38      	pop	{r3, r4, r5, pc}
 8008868:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800886a:	b112      	cbz	r2, 8008872 <_raise_r+0x1e>
 800886c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008870:	b94b      	cbnz	r3, 8008886 <_raise_r+0x32>
 8008872:	4620      	mov	r0, r4
 8008874:	f000 f830 	bl	80088d8 <_getpid_r>
 8008878:	462a      	mov	r2, r5
 800887a:	4601      	mov	r1, r0
 800887c:	4620      	mov	r0, r4
 800887e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008882:	f000 b817 	b.w	80088b4 <_kill_r>
 8008886:	2b01      	cmp	r3, #1
 8008888:	d00a      	beq.n	80088a0 <_raise_r+0x4c>
 800888a:	1c59      	adds	r1, r3, #1
 800888c:	d103      	bne.n	8008896 <_raise_r+0x42>
 800888e:	2316      	movs	r3, #22
 8008890:	6003      	str	r3, [r0, #0]
 8008892:	2001      	movs	r0, #1
 8008894:	e7e7      	b.n	8008866 <_raise_r+0x12>
 8008896:	2400      	movs	r4, #0
 8008898:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800889c:	4628      	mov	r0, r5
 800889e:	4798      	blx	r3
 80088a0:	2000      	movs	r0, #0
 80088a2:	e7e0      	b.n	8008866 <_raise_r+0x12>

080088a4 <raise>:
 80088a4:	4b02      	ldr	r3, [pc, #8]	; (80088b0 <raise+0xc>)
 80088a6:	4601      	mov	r1, r0
 80088a8:	6818      	ldr	r0, [r3, #0]
 80088aa:	f7ff bfd3 	b.w	8008854 <_raise_r>
 80088ae:	bf00      	nop
 80088b0:	20000074 	.word	0x20000074

080088b4 <_kill_r>:
 80088b4:	b538      	push	{r3, r4, r5, lr}
 80088b6:	4d07      	ldr	r5, [pc, #28]	; (80088d4 <_kill_r+0x20>)
 80088b8:	2300      	movs	r3, #0
 80088ba:	4604      	mov	r4, r0
 80088bc:	4608      	mov	r0, r1
 80088be:	4611      	mov	r1, r2
 80088c0:	602b      	str	r3, [r5, #0]
 80088c2:	f7f8 fde7 	bl	8001494 <_kill>
 80088c6:	1c43      	adds	r3, r0, #1
 80088c8:	d102      	bne.n	80088d0 <_kill_r+0x1c>
 80088ca:	682b      	ldr	r3, [r5, #0]
 80088cc:	b103      	cbz	r3, 80088d0 <_kill_r+0x1c>
 80088ce:	6023      	str	r3, [r4, #0]
 80088d0:	bd38      	pop	{r3, r4, r5, pc}
 80088d2:	bf00      	nop
 80088d4:	20000550 	.word	0x20000550

080088d8 <_getpid_r>:
 80088d8:	f7f8 bdd4 	b.w	8001484 <_getpid>

080088dc <__swhatbuf_r>:
 80088dc:	b570      	push	{r4, r5, r6, lr}
 80088de:	460c      	mov	r4, r1
 80088e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088e4:	2900      	cmp	r1, #0
 80088e6:	b096      	sub	sp, #88	; 0x58
 80088e8:	4615      	mov	r5, r2
 80088ea:	461e      	mov	r6, r3
 80088ec:	da0d      	bge.n	800890a <__swhatbuf_r+0x2e>
 80088ee:	89a3      	ldrh	r3, [r4, #12]
 80088f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80088f4:	f04f 0100 	mov.w	r1, #0
 80088f8:	bf0c      	ite	eq
 80088fa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80088fe:	2340      	movne	r3, #64	; 0x40
 8008900:	2000      	movs	r0, #0
 8008902:	6031      	str	r1, [r6, #0]
 8008904:	602b      	str	r3, [r5, #0]
 8008906:	b016      	add	sp, #88	; 0x58
 8008908:	bd70      	pop	{r4, r5, r6, pc}
 800890a:	466a      	mov	r2, sp
 800890c:	f000 f848 	bl	80089a0 <_fstat_r>
 8008910:	2800      	cmp	r0, #0
 8008912:	dbec      	blt.n	80088ee <__swhatbuf_r+0x12>
 8008914:	9901      	ldr	r1, [sp, #4]
 8008916:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800891a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800891e:	4259      	negs	r1, r3
 8008920:	4159      	adcs	r1, r3
 8008922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008926:	e7eb      	b.n	8008900 <__swhatbuf_r+0x24>

08008928 <__smakebuf_r>:
 8008928:	898b      	ldrh	r3, [r1, #12]
 800892a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800892c:	079d      	lsls	r5, r3, #30
 800892e:	4606      	mov	r6, r0
 8008930:	460c      	mov	r4, r1
 8008932:	d507      	bpl.n	8008944 <__smakebuf_r+0x1c>
 8008934:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008938:	6023      	str	r3, [r4, #0]
 800893a:	6123      	str	r3, [r4, #16]
 800893c:	2301      	movs	r3, #1
 800893e:	6163      	str	r3, [r4, #20]
 8008940:	b002      	add	sp, #8
 8008942:	bd70      	pop	{r4, r5, r6, pc}
 8008944:	ab01      	add	r3, sp, #4
 8008946:	466a      	mov	r2, sp
 8008948:	f7ff ffc8 	bl	80088dc <__swhatbuf_r>
 800894c:	9900      	ldr	r1, [sp, #0]
 800894e:	4605      	mov	r5, r0
 8008950:	4630      	mov	r0, r6
 8008952:	f7fe fecb 	bl	80076ec <_malloc_r>
 8008956:	b948      	cbnz	r0, 800896c <__smakebuf_r+0x44>
 8008958:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800895c:	059a      	lsls	r2, r3, #22
 800895e:	d4ef      	bmi.n	8008940 <__smakebuf_r+0x18>
 8008960:	f023 0303 	bic.w	r3, r3, #3
 8008964:	f043 0302 	orr.w	r3, r3, #2
 8008968:	81a3      	strh	r3, [r4, #12]
 800896a:	e7e3      	b.n	8008934 <__smakebuf_r+0xc>
 800896c:	89a3      	ldrh	r3, [r4, #12]
 800896e:	6020      	str	r0, [r4, #0]
 8008970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008974:	81a3      	strh	r3, [r4, #12]
 8008976:	9b00      	ldr	r3, [sp, #0]
 8008978:	6163      	str	r3, [r4, #20]
 800897a:	9b01      	ldr	r3, [sp, #4]
 800897c:	6120      	str	r0, [r4, #16]
 800897e:	b15b      	cbz	r3, 8008998 <__smakebuf_r+0x70>
 8008980:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008984:	4630      	mov	r0, r6
 8008986:	f000 f81d 	bl	80089c4 <_isatty_r>
 800898a:	b128      	cbz	r0, 8008998 <__smakebuf_r+0x70>
 800898c:	89a3      	ldrh	r3, [r4, #12]
 800898e:	f023 0303 	bic.w	r3, r3, #3
 8008992:	f043 0301 	orr.w	r3, r3, #1
 8008996:	81a3      	strh	r3, [r4, #12]
 8008998:	89a3      	ldrh	r3, [r4, #12]
 800899a:	431d      	orrs	r5, r3
 800899c:	81a5      	strh	r5, [r4, #12]
 800899e:	e7cf      	b.n	8008940 <__smakebuf_r+0x18>

080089a0 <_fstat_r>:
 80089a0:	b538      	push	{r3, r4, r5, lr}
 80089a2:	4d07      	ldr	r5, [pc, #28]	; (80089c0 <_fstat_r+0x20>)
 80089a4:	2300      	movs	r3, #0
 80089a6:	4604      	mov	r4, r0
 80089a8:	4608      	mov	r0, r1
 80089aa:	4611      	mov	r1, r2
 80089ac:	602b      	str	r3, [r5, #0]
 80089ae:	f7f8 fdd0 	bl	8001552 <_fstat>
 80089b2:	1c43      	adds	r3, r0, #1
 80089b4:	d102      	bne.n	80089bc <_fstat_r+0x1c>
 80089b6:	682b      	ldr	r3, [r5, #0]
 80089b8:	b103      	cbz	r3, 80089bc <_fstat_r+0x1c>
 80089ba:	6023      	str	r3, [r4, #0]
 80089bc:	bd38      	pop	{r3, r4, r5, pc}
 80089be:	bf00      	nop
 80089c0:	20000550 	.word	0x20000550

080089c4 <_isatty_r>:
 80089c4:	b538      	push	{r3, r4, r5, lr}
 80089c6:	4d06      	ldr	r5, [pc, #24]	; (80089e0 <_isatty_r+0x1c>)
 80089c8:	2300      	movs	r3, #0
 80089ca:	4604      	mov	r4, r0
 80089cc:	4608      	mov	r0, r1
 80089ce:	602b      	str	r3, [r5, #0]
 80089d0:	f7f8 fdcf 	bl	8001572 <_isatty>
 80089d4:	1c43      	adds	r3, r0, #1
 80089d6:	d102      	bne.n	80089de <_isatty_r+0x1a>
 80089d8:	682b      	ldr	r3, [r5, #0]
 80089da:	b103      	cbz	r3, 80089de <_isatty_r+0x1a>
 80089dc:	6023      	str	r3, [r4, #0]
 80089de:	bd38      	pop	{r3, r4, r5, pc}
 80089e0:	20000550 	.word	0x20000550
 80089e4:	00000000 	.word	0x00000000

080089e8 <exp>:
 80089e8:	b538      	push	{r3, r4, r5, lr}
 80089ea:	ed2d 8b02 	vpush	{d8}
 80089ee:	ec55 4b10 	vmov	r4, r5, d0
 80089f2:	f000 f895 	bl	8008b20 <__ieee754_exp>
 80089f6:	eeb0 8a40 	vmov.f32	s16, s0
 80089fa:	eef0 8a60 	vmov.f32	s17, s1
 80089fe:	ec45 4b10 	vmov	d0, r4, r5
 8008a02:	f000 f877 	bl	8008af4 <finite>
 8008a06:	b168      	cbz	r0, 8008a24 <exp+0x3c>
 8008a08:	a317      	add	r3, pc, #92	; (adr r3, 8008a68 <exp+0x80>)
 8008a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0e:	4620      	mov	r0, r4
 8008a10:	4629      	mov	r1, r5
 8008a12:	f7f8 f889 	bl	8000b28 <__aeabi_dcmpgt>
 8008a16:	b160      	cbz	r0, 8008a32 <exp+0x4a>
 8008a18:	f7fd ff3e 	bl	8006898 <__errno>
 8008a1c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8008a58 <exp+0x70>
 8008a20:	2322      	movs	r3, #34	; 0x22
 8008a22:	6003      	str	r3, [r0, #0]
 8008a24:	eeb0 0a48 	vmov.f32	s0, s16
 8008a28:	eef0 0a68 	vmov.f32	s1, s17
 8008a2c:	ecbd 8b02 	vpop	{d8}
 8008a30:	bd38      	pop	{r3, r4, r5, pc}
 8008a32:	a30f      	add	r3, pc, #60	; (adr r3, 8008a70 <exp+0x88>)
 8008a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a38:	4620      	mov	r0, r4
 8008a3a:	4629      	mov	r1, r5
 8008a3c:	f7f8 f856 	bl	8000aec <__aeabi_dcmplt>
 8008a40:	2800      	cmp	r0, #0
 8008a42:	d0ef      	beq.n	8008a24 <exp+0x3c>
 8008a44:	f7fd ff28 	bl	8006898 <__errno>
 8008a48:	2322      	movs	r3, #34	; 0x22
 8008a4a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8008a60 <exp+0x78>
 8008a4e:	6003      	str	r3, [r0, #0]
 8008a50:	e7e8      	b.n	8008a24 <exp+0x3c>
 8008a52:	bf00      	nop
 8008a54:	f3af 8000 	nop.w
 8008a58:	00000000 	.word	0x00000000
 8008a5c:	7ff00000 	.word	0x7ff00000
	...
 8008a68:	fefa39ef 	.word	0xfefa39ef
 8008a6c:	40862e42 	.word	0x40862e42
 8008a70:	d52d3051 	.word	0xd52d3051
 8008a74:	c0874910 	.word	0xc0874910

08008a78 <log>:
 8008a78:	b538      	push	{r3, r4, r5, lr}
 8008a7a:	ed2d 8b02 	vpush	{d8}
 8008a7e:	ec55 4b10 	vmov	r4, r5, d0
 8008a82:	f000 f9d1 	bl	8008e28 <__ieee754_log>
 8008a86:	4622      	mov	r2, r4
 8008a88:	462b      	mov	r3, r5
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	4629      	mov	r1, r5
 8008a8e:	eeb0 8a40 	vmov.f32	s16, s0
 8008a92:	eef0 8a60 	vmov.f32	s17, s1
 8008a96:	f7f8 f851 	bl	8000b3c <__aeabi_dcmpun>
 8008a9a:	b998      	cbnz	r0, 8008ac4 <log+0x4c>
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	4629      	mov	r1, r5
 8008aa4:	f7f8 f840 	bl	8000b28 <__aeabi_dcmpgt>
 8008aa8:	b960      	cbnz	r0, 8008ac4 <log+0x4c>
 8008aaa:	2200      	movs	r2, #0
 8008aac:	2300      	movs	r3, #0
 8008aae:	4620      	mov	r0, r4
 8008ab0:	4629      	mov	r1, r5
 8008ab2:	f7f8 f811 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ab6:	b160      	cbz	r0, 8008ad2 <log+0x5a>
 8008ab8:	f7fd feee 	bl	8006898 <__errno>
 8008abc:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8008ae8 <log+0x70>
 8008ac0:	2322      	movs	r3, #34	; 0x22
 8008ac2:	6003      	str	r3, [r0, #0]
 8008ac4:	eeb0 0a48 	vmov.f32	s0, s16
 8008ac8:	eef0 0a68 	vmov.f32	s1, s17
 8008acc:	ecbd 8b02 	vpop	{d8}
 8008ad0:	bd38      	pop	{r3, r4, r5, pc}
 8008ad2:	f7fd fee1 	bl	8006898 <__errno>
 8008ad6:	ecbd 8b02 	vpop	{d8}
 8008ada:	2321      	movs	r3, #33	; 0x21
 8008adc:	6003      	str	r3, [r0, #0]
 8008ade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ae2:	4803      	ldr	r0, [pc, #12]	; (8008af0 <log+0x78>)
 8008ae4:	f000 b814 	b.w	8008b10 <nan>
 8008ae8:	00000000 	.word	0x00000000
 8008aec:	fff00000 	.word	0xfff00000
 8008af0:	0800960a 	.word	0x0800960a

08008af4 <finite>:
 8008af4:	b082      	sub	sp, #8
 8008af6:	ed8d 0b00 	vstr	d0, [sp]
 8008afa:	9801      	ldr	r0, [sp, #4]
 8008afc:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008b00:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008b04:	0fc0      	lsrs	r0, r0, #31
 8008b06:	b002      	add	sp, #8
 8008b08:	4770      	bx	lr
 8008b0a:	0000      	movs	r0, r0
 8008b0c:	0000      	movs	r0, r0
	...

08008b10 <nan>:
 8008b10:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008b18 <nan+0x8>
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop
 8008b18:	00000000 	.word	0x00000000
 8008b1c:	7ff80000 	.word	0x7ff80000

08008b20 <__ieee754_exp>:
 8008b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b24:	ec55 4b10 	vmov	r4, r5, d0
 8008b28:	49b5      	ldr	r1, [pc, #724]	; (8008e00 <__ieee754_exp+0x2e0>)
 8008b2a:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8008b2e:	428a      	cmp	r2, r1
 8008b30:	ed2d 8b04 	vpush	{d8-d9}
 8008b34:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8008b38:	d93b      	bls.n	8008bb2 <__ieee754_exp+0x92>
 8008b3a:	49b2      	ldr	r1, [pc, #712]	; (8008e04 <__ieee754_exp+0x2e4>)
 8008b3c:	428a      	cmp	r2, r1
 8008b3e:	d916      	bls.n	8008b6e <__ieee754_exp+0x4e>
 8008b40:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008b44:	4323      	orrs	r3, r4
 8008b46:	ee10 2a10 	vmov	r2, s0
 8008b4a:	d007      	beq.n	8008b5c <__ieee754_exp+0x3c>
 8008b4c:	462b      	mov	r3, r5
 8008b4e:	4620      	mov	r0, r4
 8008b50:	4629      	mov	r1, r5
 8008b52:	f7f7 fba3 	bl	800029c <__adddf3>
 8008b56:	4604      	mov	r4, r0
 8008b58:	460d      	mov	r5, r1
 8008b5a:	e002      	b.n	8008b62 <__ieee754_exp+0x42>
 8008b5c:	b10e      	cbz	r6, 8008b62 <__ieee754_exp+0x42>
 8008b5e:	2400      	movs	r4, #0
 8008b60:	2500      	movs	r5, #0
 8008b62:	ecbd 8b04 	vpop	{d8-d9}
 8008b66:	ec45 4b10 	vmov	d0, r4, r5
 8008b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b6e:	a38e      	add	r3, pc, #568	; (adr r3, 8008da8 <__ieee754_exp+0x288>)
 8008b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b74:	ee10 0a10 	vmov	r0, s0
 8008b78:	4629      	mov	r1, r5
 8008b7a:	f7f7 ffd5 	bl	8000b28 <__aeabi_dcmpgt>
 8008b7e:	4607      	mov	r7, r0
 8008b80:	b130      	cbz	r0, 8008b90 <__ieee754_exp+0x70>
 8008b82:	ecbd 8b04 	vpop	{d8-d9}
 8008b86:	2000      	movs	r0, #0
 8008b88:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b8c:	f000 bb2d 	b.w	80091ea <__math_oflow>
 8008b90:	a387      	add	r3, pc, #540	; (adr r3, 8008db0 <__ieee754_exp+0x290>)
 8008b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b96:	4620      	mov	r0, r4
 8008b98:	4629      	mov	r1, r5
 8008b9a:	f7f7 ffa7 	bl	8000aec <__aeabi_dcmplt>
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	f000 808b 	beq.w	8008cba <__ieee754_exp+0x19a>
 8008ba4:	ecbd 8b04 	vpop	{d8-d9}
 8008ba8:	4638      	mov	r0, r7
 8008baa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bae:	f000 bb13 	b.w	80091d8 <__math_uflow>
 8008bb2:	4b95      	ldr	r3, [pc, #596]	; (8008e08 <__ieee754_exp+0x2e8>)
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	f240 80ac 	bls.w	8008d12 <__ieee754_exp+0x1f2>
 8008bba:	4b94      	ldr	r3, [pc, #592]	; (8008e0c <__ieee754_exp+0x2ec>)
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d87c      	bhi.n	8008cba <__ieee754_exp+0x19a>
 8008bc0:	4b93      	ldr	r3, [pc, #588]	; (8008e10 <__ieee754_exp+0x2f0>)
 8008bc2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bca:	ee10 0a10 	vmov	r0, s0
 8008bce:	4629      	mov	r1, r5
 8008bd0:	f7f7 fb62 	bl	8000298 <__aeabi_dsub>
 8008bd4:	4b8f      	ldr	r3, [pc, #572]	; (8008e14 <__ieee754_exp+0x2f4>)
 8008bd6:	00f7      	lsls	r7, r6, #3
 8008bd8:	443b      	add	r3, r7
 8008bda:	ed93 7b00 	vldr	d7, [r3]
 8008bde:	f1c6 0a01 	rsb	sl, r6, #1
 8008be2:	4680      	mov	r8, r0
 8008be4:	4689      	mov	r9, r1
 8008be6:	ebaa 0a06 	sub.w	sl, sl, r6
 8008bea:	eeb0 8a47 	vmov.f32	s16, s14
 8008bee:	eef0 8a67 	vmov.f32	s17, s15
 8008bf2:	ec53 2b18 	vmov	r2, r3, d8
 8008bf6:	4640      	mov	r0, r8
 8008bf8:	4649      	mov	r1, r9
 8008bfa:	f7f7 fb4d 	bl	8000298 <__aeabi_dsub>
 8008bfe:	4604      	mov	r4, r0
 8008c00:	460d      	mov	r5, r1
 8008c02:	4622      	mov	r2, r4
 8008c04:	462b      	mov	r3, r5
 8008c06:	4620      	mov	r0, r4
 8008c08:	4629      	mov	r1, r5
 8008c0a:	f7f7 fcfd 	bl	8000608 <__aeabi_dmul>
 8008c0e:	a36a      	add	r3, pc, #424	; (adr r3, 8008db8 <__ieee754_exp+0x298>)
 8008c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c14:	4606      	mov	r6, r0
 8008c16:	460f      	mov	r7, r1
 8008c18:	f7f7 fcf6 	bl	8000608 <__aeabi_dmul>
 8008c1c:	a368      	add	r3, pc, #416	; (adr r3, 8008dc0 <__ieee754_exp+0x2a0>)
 8008c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c22:	f7f7 fb39 	bl	8000298 <__aeabi_dsub>
 8008c26:	4632      	mov	r2, r6
 8008c28:	463b      	mov	r3, r7
 8008c2a:	f7f7 fced 	bl	8000608 <__aeabi_dmul>
 8008c2e:	a366      	add	r3, pc, #408	; (adr r3, 8008dc8 <__ieee754_exp+0x2a8>)
 8008c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c34:	f7f7 fb32 	bl	800029c <__adddf3>
 8008c38:	4632      	mov	r2, r6
 8008c3a:	463b      	mov	r3, r7
 8008c3c:	f7f7 fce4 	bl	8000608 <__aeabi_dmul>
 8008c40:	a363      	add	r3, pc, #396	; (adr r3, 8008dd0 <__ieee754_exp+0x2b0>)
 8008c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c46:	f7f7 fb27 	bl	8000298 <__aeabi_dsub>
 8008c4a:	4632      	mov	r2, r6
 8008c4c:	463b      	mov	r3, r7
 8008c4e:	f7f7 fcdb 	bl	8000608 <__aeabi_dmul>
 8008c52:	a361      	add	r3, pc, #388	; (adr r3, 8008dd8 <__ieee754_exp+0x2b8>)
 8008c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c58:	f7f7 fb20 	bl	800029c <__adddf3>
 8008c5c:	4632      	mov	r2, r6
 8008c5e:	463b      	mov	r3, r7
 8008c60:	f7f7 fcd2 	bl	8000608 <__aeabi_dmul>
 8008c64:	4602      	mov	r2, r0
 8008c66:	460b      	mov	r3, r1
 8008c68:	4620      	mov	r0, r4
 8008c6a:	4629      	mov	r1, r5
 8008c6c:	f7f7 fb14 	bl	8000298 <__aeabi_dsub>
 8008c70:	4602      	mov	r2, r0
 8008c72:	460b      	mov	r3, r1
 8008c74:	4606      	mov	r6, r0
 8008c76:	460f      	mov	r7, r1
 8008c78:	4620      	mov	r0, r4
 8008c7a:	4629      	mov	r1, r5
 8008c7c:	f7f7 fcc4 	bl	8000608 <__aeabi_dmul>
 8008c80:	ec41 0b19 	vmov	d9, r0, r1
 8008c84:	f1ba 0f00 	cmp.w	sl, #0
 8008c88:	d15d      	bne.n	8008d46 <__ieee754_exp+0x226>
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008c90:	4630      	mov	r0, r6
 8008c92:	4639      	mov	r1, r7
 8008c94:	f7f7 fb00 	bl	8000298 <__aeabi_dsub>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	ec51 0b19 	vmov	r0, r1, d9
 8008ca0:	f7f7 fddc 	bl	800085c <__aeabi_ddiv>
 8008ca4:	4622      	mov	r2, r4
 8008ca6:	462b      	mov	r3, r5
 8008ca8:	f7f7 faf6 	bl	8000298 <__aeabi_dsub>
 8008cac:	4602      	mov	r2, r0
 8008cae:	460b      	mov	r3, r1
 8008cb0:	2000      	movs	r0, #0
 8008cb2:	4959      	ldr	r1, [pc, #356]	; (8008e18 <__ieee754_exp+0x2f8>)
 8008cb4:	f7f7 faf0 	bl	8000298 <__aeabi_dsub>
 8008cb8:	e74d      	b.n	8008b56 <__ieee754_exp+0x36>
 8008cba:	4b58      	ldr	r3, [pc, #352]	; (8008e1c <__ieee754_exp+0x2fc>)
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008cc2:	4629      	mov	r1, r5
 8008cc4:	a346      	add	r3, pc, #280	; (adr r3, 8008de0 <__ieee754_exp+0x2c0>)
 8008cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cca:	f7f7 fc9d 	bl	8000608 <__aeabi_dmul>
 8008cce:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008cd2:	f7f7 fae3 	bl	800029c <__adddf3>
 8008cd6:	f7f7 ff47 	bl	8000b68 <__aeabi_d2iz>
 8008cda:	4682      	mov	sl, r0
 8008cdc:	f7f7 fc2a 	bl	8000534 <__aeabi_i2d>
 8008ce0:	a341      	add	r3, pc, #260	; (adr r3, 8008de8 <__ieee754_exp+0x2c8>)
 8008ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce6:	4606      	mov	r6, r0
 8008ce8:	460f      	mov	r7, r1
 8008cea:	f7f7 fc8d 	bl	8000608 <__aeabi_dmul>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	4629      	mov	r1, r5
 8008cf6:	f7f7 facf 	bl	8000298 <__aeabi_dsub>
 8008cfa:	a33d      	add	r3, pc, #244	; (adr r3, 8008df0 <__ieee754_exp+0x2d0>)
 8008cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d00:	4680      	mov	r8, r0
 8008d02:	4689      	mov	r9, r1
 8008d04:	4630      	mov	r0, r6
 8008d06:	4639      	mov	r1, r7
 8008d08:	f7f7 fc7e 	bl	8000608 <__aeabi_dmul>
 8008d0c:	ec41 0b18 	vmov	d8, r0, r1
 8008d10:	e76f      	b.n	8008bf2 <__ieee754_exp+0xd2>
 8008d12:	4b43      	ldr	r3, [pc, #268]	; (8008e20 <__ieee754_exp+0x300>)
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d811      	bhi.n	8008d3c <__ieee754_exp+0x21c>
 8008d18:	a337      	add	r3, pc, #220	; (adr r3, 8008df8 <__ieee754_exp+0x2d8>)
 8008d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1e:	ee10 0a10 	vmov	r0, s0
 8008d22:	4629      	mov	r1, r5
 8008d24:	f7f7 faba 	bl	800029c <__adddf3>
 8008d28:	4b3b      	ldr	r3, [pc, #236]	; (8008e18 <__ieee754_exp+0x2f8>)
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f7f7 fefc 	bl	8000b28 <__aeabi_dcmpgt>
 8008d30:	b138      	cbz	r0, 8008d42 <__ieee754_exp+0x222>
 8008d32:	4b39      	ldr	r3, [pc, #228]	; (8008e18 <__ieee754_exp+0x2f8>)
 8008d34:	2200      	movs	r2, #0
 8008d36:	4620      	mov	r0, r4
 8008d38:	4629      	mov	r1, r5
 8008d3a:	e70a      	b.n	8008b52 <__ieee754_exp+0x32>
 8008d3c:	f04f 0a00 	mov.w	sl, #0
 8008d40:	e75f      	b.n	8008c02 <__ieee754_exp+0xe2>
 8008d42:	4682      	mov	sl, r0
 8008d44:	e75d      	b.n	8008c02 <__ieee754_exp+0xe2>
 8008d46:	4632      	mov	r2, r6
 8008d48:	463b      	mov	r3, r7
 8008d4a:	2000      	movs	r0, #0
 8008d4c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008d50:	f7f7 faa2 	bl	8000298 <__aeabi_dsub>
 8008d54:	4602      	mov	r2, r0
 8008d56:	460b      	mov	r3, r1
 8008d58:	ec51 0b19 	vmov	r0, r1, d9
 8008d5c:	f7f7 fd7e 	bl	800085c <__aeabi_ddiv>
 8008d60:	4602      	mov	r2, r0
 8008d62:	460b      	mov	r3, r1
 8008d64:	ec51 0b18 	vmov	r0, r1, d8
 8008d68:	f7f7 fa96 	bl	8000298 <__aeabi_dsub>
 8008d6c:	4642      	mov	r2, r8
 8008d6e:	464b      	mov	r3, r9
 8008d70:	f7f7 fa92 	bl	8000298 <__aeabi_dsub>
 8008d74:	4602      	mov	r2, r0
 8008d76:	460b      	mov	r3, r1
 8008d78:	2000      	movs	r0, #0
 8008d7a:	4927      	ldr	r1, [pc, #156]	; (8008e18 <__ieee754_exp+0x2f8>)
 8008d7c:	f7f7 fa8c 	bl	8000298 <__aeabi_dsub>
 8008d80:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8008d84:	4592      	cmp	sl, r2
 8008d86:	db02      	blt.n	8008d8e <__ieee754_exp+0x26e>
 8008d88:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8008d8c:	e6e3      	b.n	8008b56 <__ieee754_exp+0x36>
 8008d8e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8008d92:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8008d96:	2200      	movs	r2, #0
 8008d98:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8008d9c:	f7f7 fc34 	bl	8000608 <__aeabi_dmul>
 8008da0:	e6d9      	b.n	8008b56 <__ieee754_exp+0x36>
 8008da2:	bf00      	nop
 8008da4:	f3af 8000 	nop.w
 8008da8:	fefa39ef 	.word	0xfefa39ef
 8008dac:	40862e42 	.word	0x40862e42
 8008db0:	d52d3051 	.word	0xd52d3051
 8008db4:	c0874910 	.word	0xc0874910
 8008db8:	72bea4d0 	.word	0x72bea4d0
 8008dbc:	3e663769 	.word	0x3e663769
 8008dc0:	c5d26bf1 	.word	0xc5d26bf1
 8008dc4:	3ebbbd41 	.word	0x3ebbbd41
 8008dc8:	af25de2c 	.word	0xaf25de2c
 8008dcc:	3f11566a 	.word	0x3f11566a
 8008dd0:	16bebd93 	.word	0x16bebd93
 8008dd4:	3f66c16c 	.word	0x3f66c16c
 8008dd8:	5555553e 	.word	0x5555553e
 8008ddc:	3fc55555 	.word	0x3fc55555
 8008de0:	652b82fe 	.word	0x652b82fe
 8008de4:	3ff71547 	.word	0x3ff71547
 8008de8:	fee00000 	.word	0xfee00000
 8008dec:	3fe62e42 	.word	0x3fe62e42
 8008df0:	35793c76 	.word	0x35793c76
 8008df4:	3dea39ef 	.word	0x3dea39ef
 8008df8:	8800759c 	.word	0x8800759c
 8008dfc:	7e37e43c 	.word	0x7e37e43c
 8008e00:	40862e41 	.word	0x40862e41
 8008e04:	7fefffff 	.word	0x7fefffff
 8008e08:	3fd62e42 	.word	0x3fd62e42
 8008e0c:	3ff0a2b1 	.word	0x3ff0a2b1
 8008e10:	08009620 	.word	0x08009620
 8008e14:	08009630 	.word	0x08009630
 8008e18:	3ff00000 	.word	0x3ff00000
 8008e1c:	08009610 	.word	0x08009610
 8008e20:	3defffff 	.word	0x3defffff
 8008e24:	00000000 	.word	0x00000000

08008e28 <__ieee754_log>:
 8008e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e2c:	ec51 0b10 	vmov	r0, r1, d0
 8008e30:	ed2d 8b04 	vpush	{d8-d9}
 8008e34:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008e38:	b083      	sub	sp, #12
 8008e3a:	460d      	mov	r5, r1
 8008e3c:	da29      	bge.n	8008e92 <__ieee754_log+0x6a>
 8008e3e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008e42:	4303      	orrs	r3, r0
 8008e44:	ee10 2a10 	vmov	r2, s0
 8008e48:	d10c      	bne.n	8008e64 <__ieee754_log+0x3c>
 8008e4a:	49cf      	ldr	r1, [pc, #828]	; (8009188 <__ieee754_log+0x360>)
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	2300      	movs	r3, #0
 8008e50:	2000      	movs	r0, #0
 8008e52:	f7f7 fd03 	bl	800085c <__aeabi_ddiv>
 8008e56:	ec41 0b10 	vmov	d0, r0, r1
 8008e5a:	b003      	add	sp, #12
 8008e5c:	ecbd 8b04 	vpop	{d8-d9}
 8008e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e64:	2900      	cmp	r1, #0
 8008e66:	da05      	bge.n	8008e74 <__ieee754_log+0x4c>
 8008e68:	460b      	mov	r3, r1
 8008e6a:	f7f7 fa15 	bl	8000298 <__aeabi_dsub>
 8008e6e:	2200      	movs	r2, #0
 8008e70:	2300      	movs	r3, #0
 8008e72:	e7ee      	b.n	8008e52 <__ieee754_log+0x2a>
 8008e74:	4bc5      	ldr	r3, [pc, #788]	; (800918c <__ieee754_log+0x364>)
 8008e76:	2200      	movs	r2, #0
 8008e78:	f7f7 fbc6 	bl	8000608 <__aeabi_dmul>
 8008e7c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8008e80:	460d      	mov	r5, r1
 8008e82:	4ac3      	ldr	r2, [pc, #780]	; (8009190 <__ieee754_log+0x368>)
 8008e84:	4295      	cmp	r5, r2
 8008e86:	dd06      	ble.n	8008e96 <__ieee754_log+0x6e>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	f7f7 fa06 	bl	800029c <__adddf3>
 8008e90:	e7e1      	b.n	8008e56 <__ieee754_log+0x2e>
 8008e92:	2300      	movs	r3, #0
 8008e94:	e7f5      	b.n	8008e82 <__ieee754_log+0x5a>
 8008e96:	152c      	asrs	r4, r5, #20
 8008e98:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008e9c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8008ea0:	441c      	add	r4, r3
 8008ea2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8008ea6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8008eaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008eae:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8008eb2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8008eb6:	ea42 0105 	orr.w	r1, r2, r5
 8008eba:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	4bb4      	ldr	r3, [pc, #720]	; (8009194 <__ieee754_log+0x36c>)
 8008ec2:	f7f7 f9e9 	bl	8000298 <__aeabi_dsub>
 8008ec6:	1cab      	adds	r3, r5, #2
 8008ec8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ecc:	2b02      	cmp	r3, #2
 8008ece:	4682      	mov	sl, r0
 8008ed0:	468b      	mov	fp, r1
 8008ed2:	f04f 0200 	mov.w	r2, #0
 8008ed6:	dc53      	bgt.n	8008f80 <__ieee754_log+0x158>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	f7f7 fdfd 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ede:	b1d0      	cbz	r0, 8008f16 <__ieee754_log+0xee>
 8008ee0:	2c00      	cmp	r4, #0
 8008ee2:	f000 8122 	beq.w	800912a <__ieee754_log+0x302>
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	f7f7 fb24 	bl	8000534 <__aeabi_i2d>
 8008eec:	a390      	add	r3, pc, #576	; (adr r3, 8009130 <__ieee754_log+0x308>)
 8008eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef2:	4606      	mov	r6, r0
 8008ef4:	460f      	mov	r7, r1
 8008ef6:	f7f7 fb87 	bl	8000608 <__aeabi_dmul>
 8008efa:	a38f      	add	r3, pc, #572	; (adr r3, 8009138 <__ieee754_log+0x310>)
 8008efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f00:	4604      	mov	r4, r0
 8008f02:	460d      	mov	r5, r1
 8008f04:	4630      	mov	r0, r6
 8008f06:	4639      	mov	r1, r7
 8008f08:	f7f7 fb7e 	bl	8000608 <__aeabi_dmul>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	460b      	mov	r3, r1
 8008f10:	4620      	mov	r0, r4
 8008f12:	4629      	mov	r1, r5
 8008f14:	e7ba      	b.n	8008e8c <__ieee754_log+0x64>
 8008f16:	a38a      	add	r3, pc, #552	; (adr r3, 8009140 <__ieee754_log+0x318>)
 8008f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1c:	4650      	mov	r0, sl
 8008f1e:	4659      	mov	r1, fp
 8008f20:	f7f7 fb72 	bl	8000608 <__aeabi_dmul>
 8008f24:	4602      	mov	r2, r0
 8008f26:	460b      	mov	r3, r1
 8008f28:	2000      	movs	r0, #0
 8008f2a:	499b      	ldr	r1, [pc, #620]	; (8009198 <__ieee754_log+0x370>)
 8008f2c:	f7f7 f9b4 	bl	8000298 <__aeabi_dsub>
 8008f30:	4652      	mov	r2, sl
 8008f32:	4606      	mov	r6, r0
 8008f34:	460f      	mov	r7, r1
 8008f36:	465b      	mov	r3, fp
 8008f38:	4650      	mov	r0, sl
 8008f3a:	4659      	mov	r1, fp
 8008f3c:	f7f7 fb64 	bl	8000608 <__aeabi_dmul>
 8008f40:	4602      	mov	r2, r0
 8008f42:	460b      	mov	r3, r1
 8008f44:	4630      	mov	r0, r6
 8008f46:	4639      	mov	r1, r7
 8008f48:	f7f7 fb5e 	bl	8000608 <__aeabi_dmul>
 8008f4c:	4606      	mov	r6, r0
 8008f4e:	460f      	mov	r7, r1
 8008f50:	b914      	cbnz	r4, 8008f58 <__ieee754_log+0x130>
 8008f52:	4632      	mov	r2, r6
 8008f54:	463b      	mov	r3, r7
 8008f56:	e0a2      	b.n	800909e <__ieee754_log+0x276>
 8008f58:	4620      	mov	r0, r4
 8008f5a:	f7f7 faeb 	bl	8000534 <__aeabi_i2d>
 8008f5e:	a374      	add	r3, pc, #464	; (adr r3, 8009130 <__ieee754_log+0x308>)
 8008f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f64:	4680      	mov	r8, r0
 8008f66:	4689      	mov	r9, r1
 8008f68:	f7f7 fb4e 	bl	8000608 <__aeabi_dmul>
 8008f6c:	a372      	add	r3, pc, #456	; (adr r3, 8009138 <__ieee754_log+0x310>)
 8008f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f72:	4604      	mov	r4, r0
 8008f74:	460d      	mov	r5, r1
 8008f76:	4640      	mov	r0, r8
 8008f78:	4649      	mov	r1, r9
 8008f7a:	f7f7 fb45 	bl	8000608 <__aeabi_dmul>
 8008f7e:	e0a7      	b.n	80090d0 <__ieee754_log+0x2a8>
 8008f80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008f84:	f7f7 f98a 	bl	800029c <__adddf3>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	4650      	mov	r0, sl
 8008f8e:	4659      	mov	r1, fp
 8008f90:	f7f7 fc64 	bl	800085c <__aeabi_ddiv>
 8008f94:	ec41 0b18 	vmov	d8, r0, r1
 8008f98:	4620      	mov	r0, r4
 8008f9a:	f7f7 facb 	bl	8000534 <__aeabi_i2d>
 8008f9e:	ec53 2b18 	vmov	r2, r3, d8
 8008fa2:	ec41 0b19 	vmov	d9, r0, r1
 8008fa6:	ec51 0b18 	vmov	r0, r1, d8
 8008faa:	f7f7 fb2d 	bl	8000608 <__aeabi_dmul>
 8008fae:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8008fb2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8008fb6:	9301      	str	r3, [sp, #4]
 8008fb8:	4602      	mov	r2, r0
 8008fba:	460b      	mov	r3, r1
 8008fbc:	4680      	mov	r8, r0
 8008fbe:	4689      	mov	r9, r1
 8008fc0:	f7f7 fb22 	bl	8000608 <__aeabi_dmul>
 8008fc4:	a360      	add	r3, pc, #384	; (adr r3, 8009148 <__ieee754_log+0x320>)
 8008fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fca:	4606      	mov	r6, r0
 8008fcc:	460f      	mov	r7, r1
 8008fce:	f7f7 fb1b 	bl	8000608 <__aeabi_dmul>
 8008fd2:	a35f      	add	r3, pc, #380	; (adr r3, 8009150 <__ieee754_log+0x328>)
 8008fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd8:	f7f7 f960 	bl	800029c <__adddf3>
 8008fdc:	4632      	mov	r2, r6
 8008fde:	463b      	mov	r3, r7
 8008fe0:	f7f7 fb12 	bl	8000608 <__aeabi_dmul>
 8008fe4:	a35c      	add	r3, pc, #368	; (adr r3, 8009158 <__ieee754_log+0x330>)
 8008fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fea:	f7f7 f957 	bl	800029c <__adddf3>
 8008fee:	4632      	mov	r2, r6
 8008ff0:	463b      	mov	r3, r7
 8008ff2:	f7f7 fb09 	bl	8000608 <__aeabi_dmul>
 8008ff6:	a35a      	add	r3, pc, #360	; (adr r3, 8009160 <__ieee754_log+0x338>)
 8008ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffc:	f7f7 f94e 	bl	800029c <__adddf3>
 8009000:	4642      	mov	r2, r8
 8009002:	464b      	mov	r3, r9
 8009004:	f7f7 fb00 	bl	8000608 <__aeabi_dmul>
 8009008:	a357      	add	r3, pc, #348	; (adr r3, 8009168 <__ieee754_log+0x340>)
 800900a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900e:	4680      	mov	r8, r0
 8009010:	4689      	mov	r9, r1
 8009012:	4630      	mov	r0, r6
 8009014:	4639      	mov	r1, r7
 8009016:	f7f7 faf7 	bl	8000608 <__aeabi_dmul>
 800901a:	a355      	add	r3, pc, #340	; (adr r3, 8009170 <__ieee754_log+0x348>)
 800901c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009020:	f7f7 f93c 	bl	800029c <__adddf3>
 8009024:	4632      	mov	r2, r6
 8009026:	463b      	mov	r3, r7
 8009028:	f7f7 faee 	bl	8000608 <__aeabi_dmul>
 800902c:	a352      	add	r3, pc, #328	; (adr r3, 8009178 <__ieee754_log+0x350>)
 800902e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009032:	f7f7 f933 	bl	800029c <__adddf3>
 8009036:	4632      	mov	r2, r6
 8009038:	463b      	mov	r3, r7
 800903a:	f7f7 fae5 	bl	8000608 <__aeabi_dmul>
 800903e:	460b      	mov	r3, r1
 8009040:	4602      	mov	r2, r0
 8009042:	4649      	mov	r1, r9
 8009044:	4640      	mov	r0, r8
 8009046:	f7f7 f929 	bl	800029c <__adddf3>
 800904a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800904e:	9b01      	ldr	r3, [sp, #4]
 8009050:	3551      	adds	r5, #81	; 0x51
 8009052:	431d      	orrs	r5, r3
 8009054:	2d00      	cmp	r5, #0
 8009056:	4680      	mov	r8, r0
 8009058:	4689      	mov	r9, r1
 800905a:	dd48      	ble.n	80090ee <__ieee754_log+0x2c6>
 800905c:	4b4e      	ldr	r3, [pc, #312]	; (8009198 <__ieee754_log+0x370>)
 800905e:	2200      	movs	r2, #0
 8009060:	4650      	mov	r0, sl
 8009062:	4659      	mov	r1, fp
 8009064:	f7f7 fad0 	bl	8000608 <__aeabi_dmul>
 8009068:	4652      	mov	r2, sl
 800906a:	465b      	mov	r3, fp
 800906c:	f7f7 facc 	bl	8000608 <__aeabi_dmul>
 8009070:	4602      	mov	r2, r0
 8009072:	460b      	mov	r3, r1
 8009074:	4606      	mov	r6, r0
 8009076:	460f      	mov	r7, r1
 8009078:	4640      	mov	r0, r8
 800907a:	4649      	mov	r1, r9
 800907c:	f7f7 f90e 	bl	800029c <__adddf3>
 8009080:	ec53 2b18 	vmov	r2, r3, d8
 8009084:	f7f7 fac0 	bl	8000608 <__aeabi_dmul>
 8009088:	4680      	mov	r8, r0
 800908a:	4689      	mov	r9, r1
 800908c:	b964      	cbnz	r4, 80090a8 <__ieee754_log+0x280>
 800908e:	4602      	mov	r2, r0
 8009090:	460b      	mov	r3, r1
 8009092:	4630      	mov	r0, r6
 8009094:	4639      	mov	r1, r7
 8009096:	f7f7 f8ff 	bl	8000298 <__aeabi_dsub>
 800909a:	4602      	mov	r2, r0
 800909c:	460b      	mov	r3, r1
 800909e:	4650      	mov	r0, sl
 80090a0:	4659      	mov	r1, fp
 80090a2:	f7f7 f8f9 	bl	8000298 <__aeabi_dsub>
 80090a6:	e6d6      	b.n	8008e56 <__ieee754_log+0x2e>
 80090a8:	a321      	add	r3, pc, #132	; (adr r3, 8009130 <__ieee754_log+0x308>)
 80090aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ae:	ec51 0b19 	vmov	r0, r1, d9
 80090b2:	f7f7 faa9 	bl	8000608 <__aeabi_dmul>
 80090b6:	a320      	add	r3, pc, #128	; (adr r3, 8009138 <__ieee754_log+0x310>)
 80090b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090bc:	4604      	mov	r4, r0
 80090be:	460d      	mov	r5, r1
 80090c0:	ec51 0b19 	vmov	r0, r1, d9
 80090c4:	f7f7 faa0 	bl	8000608 <__aeabi_dmul>
 80090c8:	4642      	mov	r2, r8
 80090ca:	464b      	mov	r3, r9
 80090cc:	f7f7 f8e6 	bl	800029c <__adddf3>
 80090d0:	4602      	mov	r2, r0
 80090d2:	460b      	mov	r3, r1
 80090d4:	4630      	mov	r0, r6
 80090d6:	4639      	mov	r1, r7
 80090d8:	f7f7 f8de 	bl	8000298 <__aeabi_dsub>
 80090dc:	4652      	mov	r2, sl
 80090de:	465b      	mov	r3, fp
 80090e0:	f7f7 f8da 	bl	8000298 <__aeabi_dsub>
 80090e4:	4602      	mov	r2, r0
 80090e6:	460b      	mov	r3, r1
 80090e8:	4620      	mov	r0, r4
 80090ea:	4629      	mov	r1, r5
 80090ec:	e7d9      	b.n	80090a2 <__ieee754_log+0x27a>
 80090ee:	4602      	mov	r2, r0
 80090f0:	460b      	mov	r3, r1
 80090f2:	4650      	mov	r0, sl
 80090f4:	4659      	mov	r1, fp
 80090f6:	f7f7 f8cf 	bl	8000298 <__aeabi_dsub>
 80090fa:	ec53 2b18 	vmov	r2, r3, d8
 80090fe:	f7f7 fa83 	bl	8000608 <__aeabi_dmul>
 8009102:	4606      	mov	r6, r0
 8009104:	460f      	mov	r7, r1
 8009106:	2c00      	cmp	r4, #0
 8009108:	f43f af23 	beq.w	8008f52 <__ieee754_log+0x12a>
 800910c:	a308      	add	r3, pc, #32	; (adr r3, 8009130 <__ieee754_log+0x308>)
 800910e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009112:	ec51 0b19 	vmov	r0, r1, d9
 8009116:	f7f7 fa77 	bl	8000608 <__aeabi_dmul>
 800911a:	a307      	add	r3, pc, #28	; (adr r3, 8009138 <__ieee754_log+0x310>)
 800911c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009120:	4604      	mov	r4, r0
 8009122:	460d      	mov	r5, r1
 8009124:	ec51 0b19 	vmov	r0, r1, d9
 8009128:	e727      	b.n	8008f7a <__ieee754_log+0x152>
 800912a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8009180 <__ieee754_log+0x358>
 800912e:	e694      	b.n	8008e5a <__ieee754_log+0x32>
 8009130:	fee00000 	.word	0xfee00000
 8009134:	3fe62e42 	.word	0x3fe62e42
 8009138:	35793c76 	.word	0x35793c76
 800913c:	3dea39ef 	.word	0x3dea39ef
 8009140:	55555555 	.word	0x55555555
 8009144:	3fd55555 	.word	0x3fd55555
 8009148:	df3e5244 	.word	0xdf3e5244
 800914c:	3fc2f112 	.word	0x3fc2f112
 8009150:	96cb03de 	.word	0x96cb03de
 8009154:	3fc74664 	.word	0x3fc74664
 8009158:	94229359 	.word	0x94229359
 800915c:	3fd24924 	.word	0x3fd24924
 8009160:	55555593 	.word	0x55555593
 8009164:	3fe55555 	.word	0x3fe55555
 8009168:	d078c69f 	.word	0xd078c69f
 800916c:	3fc39a09 	.word	0x3fc39a09
 8009170:	1d8e78af 	.word	0x1d8e78af
 8009174:	3fcc71c5 	.word	0x3fcc71c5
 8009178:	9997fa04 	.word	0x9997fa04
 800917c:	3fd99999 	.word	0x3fd99999
	...
 8009188:	c3500000 	.word	0xc3500000
 800918c:	43500000 	.word	0x43500000
 8009190:	7fefffff 	.word	0x7fefffff
 8009194:	3ff00000 	.word	0x3ff00000
 8009198:	3fe00000 	.word	0x3fe00000

0800919c <with_errno>:
 800919c:	b570      	push	{r4, r5, r6, lr}
 800919e:	4604      	mov	r4, r0
 80091a0:	460d      	mov	r5, r1
 80091a2:	4616      	mov	r6, r2
 80091a4:	f7fd fb78 	bl	8006898 <__errno>
 80091a8:	4629      	mov	r1, r5
 80091aa:	6006      	str	r6, [r0, #0]
 80091ac:	4620      	mov	r0, r4
 80091ae:	bd70      	pop	{r4, r5, r6, pc}

080091b0 <xflow>:
 80091b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091b2:	4614      	mov	r4, r2
 80091b4:	461d      	mov	r5, r3
 80091b6:	b108      	cbz	r0, 80091bc <xflow+0xc>
 80091b8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80091bc:	e9cd 2300 	strd	r2, r3, [sp]
 80091c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091c4:	4620      	mov	r0, r4
 80091c6:	4629      	mov	r1, r5
 80091c8:	f7f7 fa1e 	bl	8000608 <__aeabi_dmul>
 80091cc:	2222      	movs	r2, #34	; 0x22
 80091ce:	b003      	add	sp, #12
 80091d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091d4:	f7ff bfe2 	b.w	800919c <with_errno>

080091d8 <__math_uflow>:
 80091d8:	b508      	push	{r3, lr}
 80091da:	2200      	movs	r2, #0
 80091dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80091e0:	f7ff ffe6 	bl	80091b0 <xflow>
 80091e4:	ec41 0b10 	vmov	d0, r0, r1
 80091e8:	bd08      	pop	{r3, pc}

080091ea <__math_oflow>:
 80091ea:	b508      	push	{r3, lr}
 80091ec:	2200      	movs	r2, #0
 80091ee:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80091f2:	f7ff ffdd 	bl	80091b0 <xflow>
 80091f6:	ec41 0b10 	vmov	d0, r0, r1
 80091fa:	bd08      	pop	{r3, pc}

080091fc <_init>:
 80091fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091fe:	bf00      	nop
 8009200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009202:	bc08      	pop	{r3}
 8009204:	469e      	mov	lr, r3
 8009206:	4770      	bx	lr

08009208 <_fini>:
 8009208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800920a:	bf00      	nop
 800920c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800920e:	bc08      	pop	{r3}
 8009210:	469e      	mov	lr, r3
 8009212:	4770      	bx	lr
