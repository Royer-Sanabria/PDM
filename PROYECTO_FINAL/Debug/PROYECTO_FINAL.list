
PROYECTO_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e18  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08002fac  08002fac  00012fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030c8  080030c8  000200f4  2**0
                  CONTENTS
  4 .ARM          00000008  080030c8  080030c8  000130c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030d0  080030d0  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030d0  080030d0  000130d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030d4  080030d4  000130d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  080030d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  200000f4  080031cc  000200f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  080031cc  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008b35  00000000  00000000  00020167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a9b  00000000  00000000  00028c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000750  00000000  00000000  0002a738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000589  00000000  00000000  0002ae88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001589a  00000000  00000000  0002b411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a565  00000000  00000000  00040cab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008459c  00000000  00000000  0004b210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001de8  00000000  00000000  000cf7ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000d1594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000f4 	.word	0x200000f4
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002f94 	.word	0x08002f94

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200000f8 	.word	0x200000f8
 80001d0:	08002f94 	.word	0x08002f94

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b970 	b.w	80004dc <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9e08      	ldr	r6, [sp, #32]
 800021a:	460d      	mov	r5, r1
 800021c:	4604      	mov	r4, r0
 800021e:	460f      	mov	r7, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14a      	bne.n	80002ba <__udivmoddi4+0xa6>
 8000224:	428a      	cmp	r2, r1
 8000226:	4694      	mov	ip, r2
 8000228:	d965      	bls.n	80002f6 <__udivmoddi4+0xe2>
 800022a:	fab2 f382 	clz	r3, r2
 800022e:	b143      	cbz	r3, 8000242 <__udivmoddi4+0x2e>
 8000230:	fa02 fc03 	lsl.w	ip, r2, r3
 8000234:	f1c3 0220 	rsb	r2, r3, #32
 8000238:	409f      	lsls	r7, r3
 800023a:	fa20 f202 	lsr.w	r2, r0, r2
 800023e:	4317      	orrs	r7, r2
 8000240:	409c      	lsls	r4, r3
 8000242:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000246:	fa1f f58c 	uxth.w	r5, ip
 800024a:	fbb7 f1fe 	udiv	r1, r7, lr
 800024e:	0c22      	lsrs	r2, r4, #16
 8000250:	fb0e 7711 	mls	r7, lr, r1, r7
 8000254:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000258:	fb01 f005 	mul.w	r0, r1, r5
 800025c:	4290      	cmp	r0, r2
 800025e:	d90a      	bls.n	8000276 <__udivmoddi4+0x62>
 8000260:	eb1c 0202 	adds.w	r2, ip, r2
 8000264:	f101 37ff 	add.w	r7, r1, #4294967295
 8000268:	f080 811c 	bcs.w	80004a4 <__udivmoddi4+0x290>
 800026c:	4290      	cmp	r0, r2
 800026e:	f240 8119 	bls.w	80004a4 <__udivmoddi4+0x290>
 8000272:	3902      	subs	r1, #2
 8000274:	4462      	add	r2, ip
 8000276:	1a12      	subs	r2, r2, r0
 8000278:	b2a4      	uxth	r4, r4
 800027a:	fbb2 f0fe 	udiv	r0, r2, lr
 800027e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000282:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000286:	fb00 f505 	mul.w	r5, r0, r5
 800028a:	42a5      	cmp	r5, r4
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x90>
 800028e:	eb1c 0404 	adds.w	r4, ip, r4
 8000292:	f100 32ff 	add.w	r2, r0, #4294967295
 8000296:	f080 8107 	bcs.w	80004a8 <__udivmoddi4+0x294>
 800029a:	42a5      	cmp	r5, r4
 800029c:	f240 8104 	bls.w	80004a8 <__udivmoddi4+0x294>
 80002a0:	4464      	add	r4, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a8:	1b64      	subs	r4, r4, r5
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11e      	cbz	r6, 80002b6 <__udivmoddi4+0xa2>
 80002ae:	40dc      	lsrs	r4, r3
 80002b0:	2300      	movs	r3, #0
 80002b2:	e9c6 4300 	strd	r4, r3, [r6]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d908      	bls.n	80002d0 <__udivmoddi4+0xbc>
 80002be:	2e00      	cmp	r6, #0
 80002c0:	f000 80ed 	beq.w	800049e <__udivmoddi4+0x28a>
 80002c4:	2100      	movs	r1, #0
 80002c6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ca:	4608      	mov	r0, r1
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	fab3 f183 	clz	r1, r3
 80002d4:	2900      	cmp	r1, #0
 80002d6:	d149      	bne.n	800036c <__udivmoddi4+0x158>
 80002d8:	42ab      	cmp	r3, r5
 80002da:	d302      	bcc.n	80002e2 <__udivmoddi4+0xce>
 80002dc:	4282      	cmp	r2, r0
 80002de:	f200 80f8 	bhi.w	80004d2 <__udivmoddi4+0x2be>
 80002e2:	1a84      	subs	r4, r0, r2
 80002e4:	eb65 0203 	sbc.w	r2, r5, r3
 80002e8:	2001      	movs	r0, #1
 80002ea:	4617      	mov	r7, r2
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d0e2      	beq.n	80002b6 <__udivmoddi4+0xa2>
 80002f0:	e9c6 4700 	strd	r4, r7, [r6]
 80002f4:	e7df      	b.n	80002b6 <__udivmoddi4+0xa2>
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xe6>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f382 	clz	r3, r2
 80002fe:	2b00      	cmp	r3, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x210>
 8000304:	1a8a      	subs	r2, r1, r2
 8000306:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030a:	fa1f fe8c 	uxth.w	lr, ip
 800030e:	2101      	movs	r1, #1
 8000310:	fbb2 f5f7 	udiv	r5, r2, r7
 8000314:	fb07 2015 	mls	r0, r7, r5, r2
 8000318:	0c22      	lsrs	r2, r4, #16
 800031a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031e:	fb0e f005 	mul.w	r0, lr, r5
 8000322:	4290      	cmp	r0, r2
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x124>
 8000326:	eb1c 0202 	adds.w	r2, ip, r2
 800032a:	f105 38ff 	add.w	r8, r5, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x122>
 8000330:	4290      	cmp	r0, r2
 8000332:	f200 80cb 	bhi.w	80004cc <__udivmoddi4+0x2b8>
 8000336:	4645      	mov	r5, r8
 8000338:	1a12      	subs	r2, r2, r0
 800033a:	b2a4      	uxth	r4, r4
 800033c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000340:	fb07 2210 	mls	r2, r7, r0, r2
 8000344:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000348:	fb0e fe00 	mul.w	lr, lr, r0
 800034c:	45a6      	cmp	lr, r4
 800034e:	d908      	bls.n	8000362 <__udivmoddi4+0x14e>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f100 32ff 	add.w	r2, r0, #4294967295
 8000358:	d202      	bcs.n	8000360 <__udivmoddi4+0x14c>
 800035a:	45a6      	cmp	lr, r4
 800035c:	f200 80bb 	bhi.w	80004d6 <__udivmoddi4+0x2c2>
 8000360:	4610      	mov	r0, r2
 8000362:	eba4 040e 	sub.w	r4, r4, lr
 8000366:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800036a:	e79f      	b.n	80002ac <__udivmoddi4+0x98>
 800036c:	f1c1 0720 	rsb	r7, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 fc07 	lsr.w	ip, r2, r7
 8000376:	ea4c 0c03 	orr.w	ip, ip, r3
 800037a:	fa05 f401 	lsl.w	r4, r5, r1
 800037e:	fa20 f307 	lsr.w	r3, r0, r7
 8000382:	40fd      	lsrs	r5, r7
 8000384:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000388:	4323      	orrs	r3, r4
 800038a:	fbb5 f8f9 	udiv	r8, r5, r9
 800038e:	fa1f fe8c 	uxth.w	lr, ip
 8000392:	fb09 5518 	mls	r5, r9, r8, r5
 8000396:	0c1c      	lsrs	r4, r3, #16
 8000398:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800039c:	fb08 f50e 	mul.w	r5, r8, lr
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	fa00 f001 	lsl.w	r0, r0, r1
 80003aa:	d90b      	bls.n	80003c4 <__udivmoddi4+0x1b0>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b4:	f080 8088 	bcs.w	80004c8 <__udivmoddi4+0x2b4>
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	f240 8085 	bls.w	80004c8 <__udivmoddi4+0x2b4>
 80003be:	f1a8 0802 	sub.w	r8, r8, #2
 80003c2:	4464      	add	r4, ip
 80003c4:	1b64      	subs	r4, r4, r5
 80003c6:	b29d      	uxth	r5, r3
 80003c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003cc:	fb09 4413 	mls	r4, r9, r3, r4
 80003d0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x1da>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e4:	d26c      	bcs.n	80004c0 <__udivmoddi4+0x2ac>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	d96a      	bls.n	80004c0 <__udivmoddi4+0x2ac>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	4464      	add	r4, ip
 80003ee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f2:	fba3 9502 	umull	r9, r5, r3, r2
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	42ac      	cmp	r4, r5
 80003fc:	46c8      	mov	r8, r9
 80003fe:	46ae      	mov	lr, r5
 8000400:	d356      	bcc.n	80004b0 <__udivmoddi4+0x29c>
 8000402:	d053      	beq.n	80004ac <__udivmoddi4+0x298>
 8000404:	b156      	cbz	r6, 800041c <__udivmoddi4+0x208>
 8000406:	ebb0 0208 	subs.w	r2, r0, r8
 800040a:	eb64 040e 	sbc.w	r4, r4, lr
 800040e:	fa04 f707 	lsl.w	r7, r4, r7
 8000412:	40ca      	lsrs	r2, r1
 8000414:	40cc      	lsrs	r4, r1
 8000416:	4317      	orrs	r7, r2
 8000418:	e9c6 7400 	strd	r7, r4, [r6]
 800041c:	4618      	mov	r0, r3
 800041e:	2100      	movs	r1, #0
 8000420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000424:	f1c3 0120 	rsb	r1, r3, #32
 8000428:	fa02 fc03 	lsl.w	ip, r2, r3
 800042c:	fa20 f201 	lsr.w	r2, r0, r1
 8000430:	fa25 f101 	lsr.w	r1, r5, r1
 8000434:	409d      	lsls	r5, r3
 8000436:	432a      	orrs	r2, r5
 8000438:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043c:	fa1f fe8c 	uxth.w	lr, ip
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1510 	mls	r5, r7, r0, r1
 8000448:	0c11      	lsrs	r1, r2, #16
 800044a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044e:	fb00 f50e 	mul.w	r5, r0, lr
 8000452:	428d      	cmp	r5, r1
 8000454:	fa04 f403 	lsl.w	r4, r4, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x258>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000462:	d22f      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000464:	428d      	cmp	r5, r1
 8000466:	d92d      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 8000468:	3802      	subs	r0, #2
 800046a:	4461      	add	r1, ip
 800046c:	1b49      	subs	r1, r1, r5
 800046e:	b292      	uxth	r2, r2
 8000470:	fbb1 f5f7 	udiv	r5, r1, r7
 8000474:	fb07 1115 	mls	r1, r7, r5, r1
 8000478:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800047c:	fb05 f10e 	mul.w	r1, r5, lr
 8000480:	4291      	cmp	r1, r2
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x282>
 8000484:	eb1c 0202 	adds.w	r2, ip, r2
 8000488:	f105 38ff 	add.w	r8, r5, #4294967295
 800048c:	d216      	bcs.n	80004bc <__udivmoddi4+0x2a8>
 800048e:	4291      	cmp	r1, r2
 8000490:	d914      	bls.n	80004bc <__udivmoddi4+0x2a8>
 8000492:	3d02      	subs	r5, #2
 8000494:	4462      	add	r2, ip
 8000496:	1a52      	subs	r2, r2, r1
 8000498:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800049c:	e738      	b.n	8000310 <__udivmoddi4+0xfc>
 800049e:	4631      	mov	r1, r6
 80004a0:	4630      	mov	r0, r6
 80004a2:	e708      	b.n	80002b6 <__udivmoddi4+0xa2>
 80004a4:	4639      	mov	r1, r7
 80004a6:	e6e6      	b.n	8000276 <__udivmoddi4+0x62>
 80004a8:	4610      	mov	r0, r2
 80004aa:	e6fb      	b.n	80002a4 <__udivmoddi4+0x90>
 80004ac:	4548      	cmp	r0, r9
 80004ae:	d2a9      	bcs.n	8000404 <__udivmoddi4+0x1f0>
 80004b0:	ebb9 0802 	subs.w	r8, r9, r2
 80004b4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b8:	3b01      	subs	r3, #1
 80004ba:	e7a3      	b.n	8000404 <__udivmoddi4+0x1f0>
 80004bc:	4645      	mov	r5, r8
 80004be:	e7ea      	b.n	8000496 <__udivmoddi4+0x282>
 80004c0:	462b      	mov	r3, r5
 80004c2:	e794      	b.n	80003ee <__udivmoddi4+0x1da>
 80004c4:	4640      	mov	r0, r8
 80004c6:	e7d1      	b.n	800046c <__udivmoddi4+0x258>
 80004c8:	46d0      	mov	r8, sl
 80004ca:	e77b      	b.n	80003c4 <__udivmoddi4+0x1b0>
 80004cc:	3d02      	subs	r5, #2
 80004ce:	4462      	add	r2, ip
 80004d0:	e732      	b.n	8000338 <__udivmoddi4+0x124>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e70a      	b.n	80002ec <__udivmoddi4+0xd8>
 80004d6:	4464      	add	r4, ip
 80004d8:	3802      	subs	r0, #2
 80004da:	e742      	b.n	8000362 <__udivmoddi4+0x14e>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b088      	sub	sp, #32
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

delay_t myDelay;
delay_t Delay_Simulacion_sensor;
delayInit(&myDelay, 500);
 80004e6:	f107 0310 	add.w	r3, r7, #16
 80004ea:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80004ee:	4618      	mov	r0, r3
 80004f0:	f000 f9b9 	bl	8000866 <delayInit>
delayInit(&Delay_Simulacion_sensor,100);
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	2164      	movs	r1, #100	; 0x64
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 f9b4 	bl	8000866 <delayInit>
UART_Init();
 80004fe:	f000 f9f5 	bl	80008ec <UART_Init>
uint16_t Temperatura=0;
 8000502:	2300      	movs	r3, #0
 8000504:	83fb      	strh	r3, [r7, #30]
UARTRead_t Datos;
Datos.estado=false;
 8000506:	2300      	movs	r3, #0
 8000508:	703b      	strb	r3, [r7, #0]
Datos.dato=0;
 800050a:	2300      	movs	r3, #0
 800050c:	807b      	strh	r3, [r7, #2]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fbe3 	bl	8000cd8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f809 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f867 	bl	80005e8 <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

UART_Status_button();
 800051a:	f000 faf7 	bl	8000b0c <UART_Status_button>
Datos=UART_Mef();
 800051e:	f000 fa31 	bl	8000984 <UART_Mef>
 8000522:	4603      	mov	r3, r0
 8000524:	603b      	str	r3, [r7, #0]
UART_Status_button();
 8000526:	e7f8      	b.n	800051a <main+0x3a>

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b094      	sub	sp, #80	; 0x50
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0320 	add.w	r3, r7, #32
 8000532:	2230      	movs	r2, #48	; 0x30
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f002 fcfa 	bl	8002f30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	4b23      	ldr	r3, [pc, #140]	; (80005e0 <SystemClock_Config+0xb8>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	4a22      	ldr	r2, [pc, #136]	; (80005e0 <SystemClock_Config+0xb8>)
 8000556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055a:	6413      	str	r3, [r2, #64]	; 0x40
 800055c:	4b20      	ldr	r3, [pc, #128]	; (80005e0 <SystemClock_Config+0xb8>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000568:	2300      	movs	r3, #0
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	4b1d      	ldr	r3, [pc, #116]	; (80005e4 <SystemClock_Config+0xbc>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000574:	4a1b      	ldr	r2, [pc, #108]	; (80005e4 <SystemClock_Config+0xbc>)
 8000576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4b19      	ldr	r3, [pc, #100]	; (80005e4 <SystemClock_Config+0xbc>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000588:	2302      	movs	r3, #2
 800058a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058c:	2301      	movs	r3, #1
 800058e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000590:	2310      	movs	r3, #16
 8000592:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000594:	2300      	movs	r3, #0
 8000596:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	f107 0320 	add.w	r3, r7, #32
 800059c:	4618      	mov	r0, r3
 800059e:	f000 ff67 	bl	8001470 <HAL_RCC_OscConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005a8:	f000 f870 	bl	800068c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	230f      	movs	r3, #15
 80005ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b0:	2300      	movs	r3, #0
 80005b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 f9ca 	bl	8001960 <HAL_RCC_ClockConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005d2:	f000 f85b 	bl	800068c <Error_Handler>
  }
}
 80005d6:	bf00      	nop
 80005d8:	3750      	adds	r7, #80	; 0x50
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40007000 	.word	0x40007000

080005e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <MX_GPIO_Init+0x98>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a1e      	ldr	r2, [pc, #120]	; (8000680 <MX_GPIO_Init+0x98>)
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <MX_GPIO_Init+0x98>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0304 	and.w	r3, r3, #4
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	4b18      	ldr	r3, [pc, #96]	; (8000680 <MX_GPIO_Init+0x98>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a17      	ldr	r2, [pc, #92]	; (8000680 <MX_GPIO_Init+0x98>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b15      	ldr	r3, [pc, #84]	; (8000680 <MX_GPIO_Init+0x98>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2120      	movs	r1, #32
 800063a:	4812      	ldr	r0, [pc, #72]	; (8000684 <MX_GPIO_Init+0x9c>)
 800063c:	f000 fefe 	bl	800143c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000640:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000644:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800064e:	f107 030c 	add.w	r3, r7, #12
 8000652:	4619      	mov	r1, r3
 8000654:	480c      	ldr	r0, [pc, #48]	; (8000688 <MX_GPIO_Init+0xa0>)
 8000656:	f000 fd55 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800065a:	2320      	movs	r3, #32
 800065c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065e:	2301      	movs	r3, #1
 8000660:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000666:	2300      	movs	r3, #0
 8000668:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066a:	f107 030c 	add.w	r3, r7, #12
 800066e:	4619      	mov	r1, r3
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <MX_GPIO_Init+0x9c>)
 8000672:	f000 fd47 	bl	8001104 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000676:	bf00      	nop
 8000678:	3720      	adds	r7, #32
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800
 8000684:	40020000 	.word	0x40020000
 8000688:	40020800 	.word	0x40020800

0800068c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000690:	b672      	cpsid	i
}
 8000692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000694:	e7fe      	b.n	8000694 <Error_Handler+0x8>
	...

08000698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <HAL_MspInit+0x4c>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a6:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <HAL_MspInit+0x4c>)
 80006a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ac:	6453      	str	r3, [r2, #68]	; 0x44
 80006ae:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <HAL_MspInit+0x4c>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	603b      	str	r3, [r7, #0]
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <HAL_MspInit+0x4c>)
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	4a08      	ldr	r2, [pc, #32]	; (80006e4 <HAL_MspInit+0x4c>)
 80006c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c8:	6413      	str	r3, [r2, #64]	; 0x40
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <HAL_MspInit+0x4c>)
 80006cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800

080006e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	; 0x28
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a1d      	ldr	r2, [pc, #116]	; (800077c <HAL_UART_MspInit+0x94>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d133      	bne.n	8000772 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <HAL_UART_MspInit+0x98>)
 8000710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000712:	4a1b      	ldr	r2, [pc, #108]	; (8000780 <HAL_UART_MspInit+0x98>)
 8000714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000718:	6413      	str	r3, [r2, #64]	; 0x40
 800071a:	4b19      	ldr	r3, [pc, #100]	; (8000780 <HAL_UART_MspInit+0x98>)
 800071c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <HAL_UART_MspInit+0x98>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a14      	ldr	r2, [pc, #80]	; (8000780 <HAL_UART_MspInit+0x98>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b12      	ldr	r3, [pc, #72]	; (8000780 <HAL_UART_MspInit+0x98>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000742:	230c      	movs	r3, #12
 8000744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000746:	2302      	movs	r3, #2
 8000748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074e:	2303      	movs	r3, #3
 8000750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000752:	2307      	movs	r3, #7
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4619      	mov	r1, r3
 800075c:	4809      	ldr	r0, [pc, #36]	; (8000784 <HAL_UART_MspInit+0x9c>)
 800075e:	f000 fcd1 	bl	8001104 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2100      	movs	r1, #0
 8000766:	2026      	movs	r0, #38	; 0x26
 8000768:	f000 fc03 	bl	8000f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800076c:	2026      	movs	r0, #38	; 0x26
 800076e:	f000 fc1c 	bl	8000faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000772:	bf00      	nop
 8000774:	3728      	adds	r7, #40	; 0x28
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40004400 	.word	0x40004400
 8000780:	40023800 	.word	0x40023800
 8000784:	40020000 	.word	0x40020000

08000788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800078c:	e7fe      	b.n	800078c <NMI_Handler+0x4>

0800078e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000792:	e7fe      	b.n	8000792 <HardFault_Handler+0x4>

08000794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <MemManage_Handler+0x4>

0800079a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800079e:	e7fe      	b.n	800079e <BusFault_Handler+0x4>

080007a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <UsageFault_Handler+0x4>

080007a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr

080007c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d4:	f000 fad2 	bl	8000d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}

080007dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007e0:	4802      	ldr	r0, [pc, #8]	; (80007ec <USART2_IRQHandler+0x10>)
 80007e2:	f001 fbad 	bl	8001f40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000120 	.word	0x20000120

080007f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <SystemInit+0x20>)
 80007f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007fa:	4a05      	ldr	r2, [pc, #20]	; (8000810 <SystemInit+0x20>)
 80007fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000800:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
ldr   sp, =_estack    		 /* set stack pointer */
 8000814:	f8df d034 	ldr.w	sp, [pc, #52]	; 800084c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000818:	480d      	ldr	r0, [pc, #52]	; (8000850 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800081a:	490e      	ldr	r1, [pc, #56]	; (8000854 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800081c:	4a0e      	ldr	r2, [pc, #56]	; (8000858 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800081e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000820:	e002      	b.n	8000828 <LoopCopyDataInit>

08000822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000826:	3304      	adds	r3, #4

08000828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800082a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800082c:	d3f9      	bcc.n	8000822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800082e:	4a0b      	ldr	r2, [pc, #44]	; (800085c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000830:	4c0b      	ldr	r4, [pc, #44]	; (8000860 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000834:	e001      	b.n	800083a <LoopFillZerobss>

08000836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000838:	3204      	adds	r2, #4

0800083a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800083a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800083c:	d3fb      	bcc.n	8000836 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800083e:	f7ff ffd7 	bl	80007f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000842:	f002 fb83 	bl	8002f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000846:	f7ff fe4b 	bl	80004e0 <main>
  bx  lr    
 800084a:	4770      	bx	lr
ldr   sp, =_estack    		 /* set stack pointer */
 800084c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000854:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 8000858:	080030d8 	.word	0x080030d8
  ldr r2, =_sbss
 800085c:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 8000860:	200002b4 	.word	0x200002b4

08000864 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000864:	e7fe      	b.n	8000864 <ADC_IRQHandler>

08000866 <delayInit>:
 */

#include "API_Delay.h"

void delayInit(delay_t*delay, tick_t duration)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
 800086e:	6039      	str	r1, [r7, #0]
	delay->running = false;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2200      	movs	r2, #0
 8000874:	721a      	strb	r2, [r3, #8]
	delayWrite(delay, duration);
 8000876:	6839      	ldr	r1, [r7, #0]
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f000 f828 	bl	80008ce <delayWrite>

}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <delayRead>:

bool_t delayRead(delay_t*delay)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b082      	sub	sp, #8
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
	if(delay->running)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	7a1b      	ldrb	r3, [r3, #8]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d00e      	beq.n	80008b4 <delayRead+0x2e>
	{
	if((HAL_GetTick()- delay->startTime)>= delay->duration)
 8000896:	f000 fa85 	bl	8000da4 <HAL_GetTick>
 800089a:	4602      	mov	r2, r0
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	1ad2      	subs	r2, r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d30c      	bcc.n	80008c4 <delayRead+0x3e>
		{
		delay->running=false;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2200      	movs	r2, #0
 80008ae:	721a      	strb	r2, [r3, #8]
		return true;
 80008b0:	2301      	movs	r3, #1
 80008b2:	e008      	b.n	80008c6 <delayRead+0x40>
		}
	}
	else
	{
		delay->startTime=HAL_GetTick();
 80008b4:	f000 fa76 	bl	8000da4 <HAL_GetTick>
 80008b8:	4602      	mov	r2, r0
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	601a      	str	r2, [r3, #0]
		delay->running=true;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2201      	movs	r2, #1
 80008c2:	721a      	strb	r2, [r3, #8]
	}
	return false;
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <delayWrite>:

void delayWrite(delay_t*delay, tick_t duration)
{
 80008ce:	b480      	push	{r7}
 80008d0:	b083      	sub	sp, #12
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
 80008d6:	6039      	str	r1, [r7, #0]
	delay->duration=duration;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	683a      	ldr	r2, [r7, #0]
 80008dc:	605a      	str	r2, [r3, #4]
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
	...

080008ec <UART_Init>:

/*UART_Init(void)
 * Funcion de inicializacion de parametros de la UART y reset de variables
 * de comparación.
 */
void UART_Init(void){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
MX_USART2_UART_Init();
 80008f0:	f000 f934 	bl	8000b5c <MX_USART2_UART_Init>
HAL_UART_Receive_IT(&huart2, (uint8_t *)rx_buffer, BUFFER_SIZE);
 80008f4:	2203      	movs	r2, #3
 80008f6:	4907      	ldr	r1, [pc, #28]	; (8000914 <UART_Init+0x28>)
 80008f8:	4807      	ldr	r0, [pc, #28]	; (8000918 <UART_Init+0x2c>)
 80008fa:	f001 faf0 	bl	8001ede <HAL_UART_Receive_IT>
set_temperature.estado=false;
 80008fe:	4b07      	ldr	r3, [pc, #28]	; (800091c <UART_Init+0x30>)
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
set_temperature_confirmation.estado=false;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <UART_Init+0x34>)
 8000906:	2200      	movs	r2, #0
 8000908:	701a      	strb	r2, [r3, #0]
debounceFSM_init();
 800090a:	f000 f951 	bl	8000bb0 <debounceFSM_init>
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000110 	.word	0x20000110
 8000918:	20000120 	.word	0x20000120
 800091c:	20000118 	.word	0x20000118
 8000920:	2000011c 	.word	0x2000011c

08000924 <UART_Read>:
 * - Lectura ingreso de datos desde la UART a la F401RE.
 * - Se usa interrupción y se establece una bandera rx_data_ready
 *   cuando se realiza la interrupción, el valor digitado por la UART es almacenada
 *   en la variable local UartRead y se inicializa la interrupción.
 */
UARTRead_t UART_Read(){
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
UARTRead_t UartRead;
	if (rx_data_ready) {
 800092a:	4b12      	ldr	r3, [pc, #72]	; (8000974 <UART_Read+0x50>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	b2db      	uxtb	r3, r3
 8000930:	2b00      	cmp	r3, #0
 8000932:	d00d      	beq.n	8000950 <UART_Read+0x2c>
		rx_data_ready = 0;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <UART_Read+0x50>)
 8000936:	2200      	movs	r2, #0
 8000938:	701a      	strb	r2, [r3, #0]
	    UartRead.dato=UART_Date;
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <UART_Read+0x54>)
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	807b      	strh	r3, [r7, #2]
	    UartRead.estado=true;
 8000940:	2301      	movs	r3, #1
 8000942:	703b      	strb	r3, [r7, #0]
		HAL_UART_Receive_IT(&huart2, rx_buffer, BUFFER_SIZE);
 8000944:	2203      	movs	r2, #3
 8000946:	490d      	ldr	r1, [pc, #52]	; (800097c <UART_Read+0x58>)
 8000948:	480d      	ldr	r0, [pc, #52]	; (8000980 <UART_Read+0x5c>)
 800094a:	f001 fac8 	bl	8001ede <HAL_UART_Receive_IT>
 800094e:	e003      	b.n	8000958 <UART_Read+0x34>
		}
	else{
	    UartRead.dato=Null_Int;
 8000950:	2300      	movs	r3, #0
 8000952:	807b      	strh	r3, [r7, #2]
	    UartRead.estado=false;
 8000954:	2300      	movs	r3, #0
 8000956:	703b      	strb	r3, [r7, #0]
	}
return UartRead;
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	2300      	movs	r3, #0
 800095e:	88ba      	ldrh	r2, [r7, #4]
 8000960:	f362 030f 	bfi	r3, r2, #0, #16
 8000964:	88fa      	ldrh	r2, [r7, #6]
 8000966:	f362 431f 	bfi	r3, r2, #16, #16
}
 800096a:	4618      	mov	r0, r3
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000116 	.word	0x20000116
 8000978:	20000114 	.word	0x20000114
 800097c:	20000110 	.word	0x20000110
 8000980:	20000120 	.word	0x20000120

08000984 <UART_Mef>:
 *   	  Uart y se espera la activación de la interrupción para pasar al Estado 4:
 *   	* Estado 4 (read_confirmation_set_temperature) Se espera el dato de 3 bytes acompañado de un true
 *   	  proporcionado por la función UARTRead(). Se evalua si los datos ingresados son los mismos y se
 *   	  retorna el dato acompañado de un True.
 */
UARTRead_t UART_Mef(){
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
	UARTRead_t temperature_real;
	switch (flag_program){
 800098a:	4b41      	ldr	r3, [pc, #260]	; (8000a90 <UART_Mef+0x10c>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b03      	cmp	r3, #3
 8000990:	d868      	bhi.n	8000a64 <UART_Mef+0xe0>
 8000992:	a201      	add	r2, pc, #4	; (adr r2, 8000998 <UART_Mef+0x14>)
 8000994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000998:	080009c7 	.word	0x080009c7
 800099c:	080009ff 	.word	0x080009ff
 80009a0:	080009a9 	.word	0x080009a9
 80009a4:	080009e1 	.word	0x080009e1
	case(write_message_temperature):
		HAL_UART_Transmit(&huart2,(uint8_t *)mensaje_lectura_datos, strlen(mensaje_lectura_datos), HAL_MAX_DELAY);
 80009a8:	483a      	ldr	r0, [pc, #232]	; (8000a94 <UART_Mef+0x110>)
 80009aa:	f7ff fc13 	bl	80001d4 <strlen>
 80009ae:	4603      	mov	r3, r0
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295
 80009b6:	4937      	ldr	r1, [pc, #220]	; (8000a94 <UART_Mef+0x110>)
 80009b8:	4837      	ldr	r0, [pc, #220]	; (8000a98 <UART_Mef+0x114>)
 80009ba:	f001 f9fe 	bl	8001dba <HAL_UART_Transmit>
			flag_program=read_set_temperature;
 80009be:	4b34      	ldr	r3, [pc, #208]	; (8000a90 <UART_Mef+0x10c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	701a      	strb	r2, [r3, #0]
			break;
 80009c4:	e057      	b.n	8000a76 <UART_Mef+0xf2>

	case (read_set_temperature):
		set_temperature=UART_Read();
 80009c6:	f7ff ffad 	bl	8000924 <UART_Read>
 80009ca:	4603      	mov	r3, r0
 80009cc:	4a33      	ldr	r2, [pc, #204]	; (8000a9c <UART_Mef+0x118>)
 80009ce:	6013      	str	r3, [r2, #0]
			if(true==set_temperature.estado){
 80009d0:	4b32      	ldr	r3, [pc, #200]	; (8000a9c <UART_Mef+0x118>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d04b      	beq.n	8000a70 <UART_Mef+0xec>
				flag_program=write_message_confirmation;
 80009d8:	4b2d      	ldr	r3, [pc, #180]	; (8000a90 <UART_Mef+0x10c>)
 80009da:	2203      	movs	r2, #3
 80009dc:	701a      	strb	r2, [r3, #0]
				    }
			break;
 80009de:	e047      	b.n	8000a70 <UART_Mef+0xec>

	case (write_message_confirmation):
		HAL_UART_Transmit(&huart2,(uint8_t *)mensaje_confirmacion_datos, strlen(mensaje_confirmacion_datos), HAL_MAX_DELAY);
 80009e0:	482f      	ldr	r0, [pc, #188]	; (8000aa0 <UART_Mef+0x11c>)
 80009e2:	f7ff fbf7 	bl	80001d4 <strlen>
 80009e6:	4603      	mov	r3, r0
 80009e8:	b29a      	uxth	r2, r3
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
 80009ee:	492c      	ldr	r1, [pc, #176]	; (8000aa0 <UART_Mef+0x11c>)
 80009f0:	4829      	ldr	r0, [pc, #164]	; (8000a98 <UART_Mef+0x114>)
 80009f2:	f001 f9e2 	bl	8001dba <HAL_UART_Transmit>
	flag_program=read_confirmation_set_temperature;
 80009f6:	4b26      	ldr	r3, [pc, #152]	; (8000a90 <UART_Mef+0x10c>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	701a      	strb	r2, [r3, #0]
	break;
 80009fc:	e03b      	b.n	8000a76 <UART_Mef+0xf2>

	case (read_confirmation_set_temperature):
			set_temperature_confirmation=UART_Read();
 80009fe:	f7ff ff91 	bl	8000924 <UART_Read>
 8000a02:	4603      	mov	r3, r0
 8000a04:	4a27      	ldr	r2, [pc, #156]	; (8000aa4 <UART_Mef+0x120>)
 8000a06:	6013      	str	r3, [r2, #0]
		if (true==set_temperature_confirmation.estado){
 8000a08:	4b26      	ldr	r3, [pc, #152]	; (8000aa4 <UART_Mef+0x120>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d031      	beq.n	8000a74 <UART_Mef+0xf0>
			if(set_temperature.dato==set_temperature_confirmation.dato){
 8000a10:	4b22      	ldr	r3, [pc, #136]	; (8000a9c <UART_Mef+0x118>)
 8000a12:	885a      	ldrh	r2, [r3, #2]
 8000a14:	4b23      	ldr	r3, [pc, #140]	; (8000aa4 <UART_Mef+0x120>)
 8000a16:	885b      	ldrh	r3, [r3, #2]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d112      	bne.n	8000a42 <UART_Mef+0xbe>
				HAL_UART_Transmit(&huart2,(uint8_t *)mensaje_correcto_datos, strlen(mensaje_correcto_datos), HAL_MAX_DELAY);
 8000a1c:	4822      	ldr	r0, [pc, #136]	; (8000aa8 <UART_Mef+0x124>)
 8000a1e:	f7ff fbd9 	bl	80001d4 <strlen>
 8000a22:	4603      	mov	r3, r0
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2a:	491f      	ldr	r1, [pc, #124]	; (8000aa8 <UART_Mef+0x124>)
 8000a2c:	481a      	ldr	r0, [pc, #104]	; (8000a98 <UART_Mef+0x114>)
 8000a2e:	f001 f9c4 	bl	8001dba <HAL_UART_Transmit>
				temperature_real.dato=set_temperature.dato;
 8000a32:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <UART_Mef+0x118>)
 8000a34:	885b      	ldrh	r3, [r3, #2]
 8000a36:	807b      	strh	r3, [r7, #2]
				temperature_real.estado=true;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	703b      	strb	r3, [r7, #0]
				return temperature_real;
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	e01b      	b.n	8000a7a <UART_Mef+0xf6>

		}
			else {
				HAL_UART_Transmit(&huart2,(uint8_t *)mensaje_error_datos, strlen(mensaje_error_datos), HAL_MAX_DELAY);
 8000a42:	481a      	ldr	r0, [pc, #104]	; (8000aac <UART_Mef+0x128>)
 8000a44:	f7ff fbc6 	bl	80001d4 <strlen>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a50:	4916      	ldr	r1, [pc, #88]	; (8000aac <UART_Mef+0x128>)
 8000a52:	4811      	ldr	r0, [pc, #68]	; (8000a98 <UART_Mef+0x114>)
 8000a54:	f001 f9b1 	bl	8001dba <HAL_UART_Transmit>
				flag_program=write_message_temperature;
 8000a58:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <UART_Mef+0x10c>)
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	701a      	strb	r2, [r3, #0]
				temperature_real.estado=false;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	703b      	strb	r3, [r7, #0]
				}
			}
break;
 8000a62:	e007      	b.n	8000a74 <UART_Mef+0xf0>

	default:
		flag_program=write_message_temperature;
 8000a64:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <UART_Mef+0x10c>)
 8000a66:	2202      	movs	r2, #2
 8000a68:	701a      	strb	r2, [r3, #0]
		temperature_real.estado=false;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	703b      	strb	r3, [r7, #0]
		break;
 8000a6e:	e002      	b.n	8000a76 <UART_Mef+0xf2>
			break;
 8000a70:	bf00      	nop
 8000a72:	e000      	b.n	8000a76 <UART_Mef+0xf2>
break;
 8000a74:	bf00      	nop
	}
	return temperature_real;
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	607b      	str	r3, [r7, #4]
}
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	88ba      	ldrh	r2, [r7, #4]
 8000a7e:	f362 030f 	bfi	r3, r2, #0, #16
 8000a82:	88fa      	ldrh	r2, [r7, #6]
 8000a84:	f362 431f 	bfi	r3, r2, #16, #16
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000097 	.word	0x20000097
 8000a94:	20000004 	.word	0x20000004
 8000a98:	20000120 	.word	0x20000120
 8000a9c:	20000118 	.word	0x20000118
 8000aa0:	20000028 	.word	0x20000028
 8000aa4:	2000011c 	.word	0x2000011c
 8000aa8:	20000068 	.word	0x20000068
 8000aac:	20000050 	.word	0x20000050

08000ab0 <HAL_UART_RxCpltCallback>:

/*void HAL_UART_RxCpltCallback:
 * Función que indica que hubo un ingreso de datos  y lo guarda en una variable static y transmite el
 * valor ingresado por la uart.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]

			UART_Date= atoi((char *)rx_buffer);
 8000ab8:	480f      	ldr	r0, [pc, #60]	; (8000af8 <HAL_UART_RxCpltCallback+0x48>)
 8000aba:	f002 f9a9 	bl	8002e10 <atoi>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <HAL_UART_RxCpltCallback+0x4c>)
 8000ac4:	801a      	strh	r2, [r3, #0]
		 	HAL_UART_Transmit(&huart2,(uint8_t *)rx_buffer,sizeof(rx_buffer), HAL_MAX_DELAY);
 8000ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aca:	2203      	movs	r2, #3
 8000acc:	490a      	ldr	r1, [pc, #40]	; (8000af8 <HAL_UART_RxCpltCallback+0x48>)
 8000ace:	480c      	ldr	r0, [pc, #48]	; (8000b00 <HAL_UART_RxCpltCallback+0x50>)
 8000ad0:	f001 f973 	bl	8001dba <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2,(uint8_t *)interlineado, strlen(interlineado), HAL_MAX_DELAY);
 8000ad4:	480b      	ldr	r0, [pc, #44]	; (8000b04 <HAL_UART_RxCpltCallback+0x54>)
 8000ad6:	f7ff fb7d 	bl	80001d4 <strlen>
 8000ada:	4603      	mov	r3, r0
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae2:	4908      	ldr	r1, [pc, #32]	; (8000b04 <HAL_UART_RxCpltCallback+0x54>)
 8000ae4:	4806      	ldr	r0, [pc, #24]	; (8000b00 <HAL_UART_RxCpltCallback+0x50>)
 8000ae6:	f001 f968 	bl	8001dba <HAL_UART_Transmit>
			rx_data_ready = 1;
 8000aea:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <HAL_UART_RxCpltCallback+0x58>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	701a      	strb	r2, [r3, #0]
}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000110 	.word	0x20000110
 8000afc:	20000114 	.word	0x20000114
 8000b00:	20000120 	.word	0x20000120
 8000b04:	20000094 	.word	0x20000094
 8000b08:	20000116 	.word	0x20000116

08000b0c <UART_Status_button>:


/*UART_Status_button(void)
 * Funcion para re iniciar la MEF.
 */
void UART_Status_button(void){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
if (readKey()){
 8000b10:	f000 f8d0 	bl	8000cb4 <readKey>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d013      	beq.n	8000b42 <UART_Status_button+0x36>
		HAL_UART_Transmit(&huart2,(uint8_t *)mensaje_reseteo_datos, strlen(mensaje_reseteo_datos), HAL_MAX_DELAY);
 8000b1a:	480b      	ldr	r0, [pc, #44]	; (8000b48 <UART_Status_button+0x3c>)
 8000b1c:	f7ff fb5a 	bl	80001d4 <strlen>
 8000b20:	4603      	mov	r3, r0
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	f04f 33ff 	mov.w	r3, #4294967295
 8000b28:	4907      	ldr	r1, [pc, #28]	; (8000b48 <UART_Status_button+0x3c>)
 8000b2a:	4808      	ldr	r0, [pc, #32]	; (8000b4c <UART_Status_button+0x40>)
 8000b2c:	f001 f945 	bl	8001dba <HAL_UART_Transmit>
		flag_program=write_message_temperature;
 8000b30:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <UART_Status_button+0x44>)
 8000b32:	2202      	movs	r2, #2
 8000b34:	701a      	strb	r2, [r3, #0]
		set_temperature.estado=false;
 8000b36:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <UART_Status_button+0x48>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	701a      	strb	r2, [r3, #0]
		set_temperature_confirmation.estado=false;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <UART_Status_button+0x4c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	701a      	strb	r2, [r3, #0]
		}
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	2000007c 	.word	0x2000007c
 8000b4c:	20000120 	.word	0x20000120
 8000b50:	20000097 	.word	0x20000097
 8000b54:	20000118 	.word	0x20000118
 8000b58:	2000011c 	.word	0x2000011c

08000b5c <MX_USART2_UART_Init>:




void MX_USART2_UART_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000b60:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <MX_USART2_UART_Init+0x4c>)
 8000b62:	4a12      	ldr	r2, [pc, #72]	; (8000bac <MX_USART2_UART_Init+0x50>)
 8000b64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <MX_USART2_UART_Init+0x4c>)
 8000b68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <MX_USART2_UART_Init+0x4c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <MX_USART2_UART_Init+0x4c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <MX_USART2_UART_Init+0x4c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b80:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <MX_USART2_UART_Init+0x4c>)
 8000b82:	220c      	movs	r2, #12
 8000b84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b86:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <MX_USART2_UART_Init+0x4c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <MX_USART2_UART_Init+0x4c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b92:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <MX_USART2_UART_Init+0x4c>)
 8000b94:	f001 f8c4 	bl	8001d20 <HAL_UART_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b9e:	f7ff fd75 	bl	800068c <Error_Handler>
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000120 	.word	0x20000120
 8000bac:	40004400 	.word	0x40004400

08000bb0 <debounceFSM_init>:
static bool real_status_button;

/*
 * función de inicio de debounceFSM
 */
void debounceFSM_init(void){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	delayInit(&Retardo,delay_control);
 8000bb4:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <debounceFSM_init+0x1c>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <debounceFSM_init+0x20>)
 8000bbc:	f7ff fe53 	bl	8000866 <delayInit>
	status_mef=buttonUp;
 8000bc0:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <debounceFSM_init+0x24>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	701a      	strb	r2, [r3, #0]
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000098 	.word	0x20000098
 8000bd0:	20000168 	.word	0x20000168
 8000bd4:	20000164 	.word	0x20000164

08000bd8 <debounceFSM_update>:

/*
 * Actualizacion de la MEF de estado del botón.
 *
 */
void debounceFSM_update(){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	switch (status_mef){
 8000bdc:	4b31      	ldr	r3, [pc, #196]	; (8000ca4 <debounceFSM_update+0xcc>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b03      	cmp	r3, #3
 8000be2:	d85c      	bhi.n	8000c9e <debounceFSM_update+0xc6>
 8000be4:	a201      	add	r2, pc, #4	; (adr r2, 8000bec <debounceFSM_update+0x14>)
 8000be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bea:	bf00      	nop
 8000bec:	08000bfd 	.word	0x08000bfd
 8000bf0:	08000c47 	.word	0x08000c47
 8000bf4:	08000c5f 	.word	0x08000c5f
 8000bf8:	08000c15 	.word	0x08000c15
		case buttonUp:

			if(RESET==HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 8000bfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c00:	4829      	ldr	r0, [pc, #164]	; (8000ca8 <debounceFSM_update+0xd0>)
 8000c02:	f000 fc03 	bl	800140c <HAL_GPIO_ReadPin>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d141      	bne.n	8000c90 <debounceFSM_update+0xb8>
				status_mef=buttonFalling;
 8000c0c:	4b25      	ldr	r3, [pc, #148]	; (8000ca4 <debounceFSM_update+0xcc>)
 8000c0e:	2203      	movs	r2, #3
 8000c10:	701a      	strb	r2, [r3, #0]
			}
		    break;
 8000c12:	e03d      	b.n	8000c90 <debounceFSM_update+0xb8>
		case buttonFalling:
			if(delayRead(&Retardo)){
 8000c14:	4825      	ldr	r0, [pc, #148]	; (8000cac <debounceFSM_update+0xd4>)
 8000c16:	f7ff fe36 	bl	8000886 <delayRead>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d039      	beq.n	8000c94 <debounceFSM_update+0xbc>
				if(SET==HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 8000c20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c24:	4820      	ldr	r0, [pc, #128]	; (8000ca8 <debounceFSM_update+0xd0>)
 8000c26:	f000 fbf1 	bl	800140c <HAL_GPIO_ReadPin>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d106      	bne.n	8000c3e <debounceFSM_update+0x66>
					status_mef=buttonUp;
 8000c30:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <debounceFSM_update+0xcc>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	701a      	strb	r2, [r3, #0]
					real_status_button=true;
 8000c36:	4b1e      	ldr	r3, [pc, #120]	; (8000cb0 <debounceFSM_update+0xd8>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	701a      	strb	r2, [r3, #0]
				}
				else {
				status_mef=buttonDown;
				}
			}
			break;
 8000c3c:	e02a      	b.n	8000c94 <debounceFSM_update+0xbc>
				status_mef=buttonDown;
 8000c3e:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <debounceFSM_update+0xcc>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	701a      	strb	r2, [r3, #0]
			break;
 8000c44:	e026      	b.n	8000c94 <debounceFSM_update+0xbc>

		case buttonDown:
			if (SET==HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 8000c46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c4a:	4817      	ldr	r0, [pc, #92]	; (8000ca8 <debounceFSM_update+0xd0>)
 8000c4c:	f000 fbde 	bl	800140c <HAL_GPIO_ReadPin>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d120      	bne.n	8000c98 <debounceFSM_update+0xc0>
				status_mef=buttonRising;
 8000c56:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <debounceFSM_update+0xcc>)
 8000c58:	2202      	movs	r2, #2
 8000c5a:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000c5c:	e01c      	b.n	8000c98 <debounceFSM_update+0xc0>

		case buttonRising:
			if(delayRead(&Retardo)){
 8000c5e:	4813      	ldr	r0, [pc, #76]	; (8000cac <debounceFSM_update+0xd4>)
 8000c60:	f7ff fe11 	bl	8000886 <delayRead>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d018      	beq.n	8000c9c <debounceFSM_update+0xc4>
			if(RESET==HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 8000c6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c6e:	480e      	ldr	r0, [pc, #56]	; (8000ca8 <debounceFSM_update+0xd0>)
 8000c70:	f000 fbcc 	bl	800140c <HAL_GPIO_ReadPin>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d106      	bne.n	8000c88 <debounceFSM_update+0xb0>
				status_mef=buttonUp;
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <debounceFSM_update+0xcc>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	701a      	strb	r2, [r3, #0]
				real_status_button=true;
 8000c80:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <debounceFSM_update+0xd8>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	701a      	strb	r2, [r3, #0]
			}
			else {
				status_mef=buttonDown;
			}
			}
			break;
 8000c86:	e009      	b.n	8000c9c <debounceFSM_update+0xc4>
				status_mef=buttonDown;
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <debounceFSM_update+0xcc>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	701a      	strb	r2, [r3, #0]
			break;
 8000c8e:	e005      	b.n	8000c9c <debounceFSM_update+0xc4>
		    break;
 8000c90:	bf00      	nop
 8000c92:	e004      	b.n	8000c9e <debounceFSM_update+0xc6>
			break;
 8000c94:	bf00      	nop
 8000c96:	e002      	b.n	8000c9e <debounceFSM_update+0xc6>
			break;
 8000c98:	bf00      	nop
 8000c9a:	e000      	b.n	8000c9e <debounceFSM_update+0xc6>
			break;
 8000c9c:	bf00      	nop
		default:

	}
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000164 	.word	0x20000164
 8000ca8:	40020800 	.word	0x40020800
 8000cac:	20000168 	.word	0x20000168
 8000cb0:	20000174 	.word	0x20000174

08000cb4 <readKey>:

/*
 * Funcion que devuelve un true en caso que haya se haya presionado el botón
 */
bool_t readKey(){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
	debounceFSM_update();
 8000cb8:	f7ff ff8e 	bl	8000bd8 <debounceFSM_update>
	if(real_status_button){
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <readKey+0x20>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d004      	beq.n	8000cce <readKey+0x1a>
		real_status_button=false;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <readKey+0x20>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	701a      	strb	r2, [r3, #0]
				return true;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e000      	b.n	8000cd0 <readKey+0x1c>
	}
	else{
	return false;
 8000cce:	2300      	movs	r3, #0
	}
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000174 	.word	0x20000174

08000cd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <HAL_Init+0x40>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a0d      	ldr	r2, [pc, #52]	; (8000d18 <HAL_Init+0x40>)
 8000ce2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <HAL_Init+0x40>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <HAL_Init+0x40>)
 8000cee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cf2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <HAL_Init+0x40>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a07      	ldr	r2, [pc, #28]	; (8000d18 <HAL_Init+0x40>)
 8000cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d00:	2003      	movs	r0, #3
 8000d02:	f000 f92b 	bl	8000f5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d06:	200f      	movs	r0, #15
 8000d08:	f000 f808 	bl	8000d1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d0c:	f7ff fcc4 	bl	8000698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40023c00 	.word	0x40023c00

08000d1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <HAL_InitTick+0x54>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <HAL_InitTick+0x58>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 f943 	bl	8000fc6 <HAL_SYSTICK_Config>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e00e      	b.n	8000d68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2b0f      	cmp	r3, #15
 8000d4e:	d80a      	bhi.n	8000d66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d50:	2200      	movs	r2, #0
 8000d52:	6879      	ldr	r1, [r7, #4]
 8000d54:	f04f 30ff 	mov.w	r0, #4294967295
 8000d58:	f000 f90b 	bl	8000f72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d5c:	4a06      	ldr	r2, [pc, #24]	; (8000d78 <HAL_InitTick+0x5c>)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d62:	2300      	movs	r3, #0
 8000d64:	e000      	b.n	8000d68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000000 	.word	0x20000000
 8000d74:	200000a0 	.word	0x200000a0
 8000d78:	2000009c 	.word	0x2000009c

08000d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_IncTick+0x20>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_IncTick+0x24>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <HAL_IncTick+0x24>)
 8000d8e:	6013      	str	r3, [r2, #0]
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	200000a0 	.word	0x200000a0
 8000da0:	20000178 	.word	0x20000178

08000da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return uwTick;
 8000da8:	4b03      	ldr	r3, [pc, #12]	; (8000db8 <HAL_GetTick+0x14>)
 8000daa:	681b      	ldr	r3, [r3, #0]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000178 	.word	0x20000178

08000dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd2:	68ba      	ldr	r2, [r7, #8]
 8000dd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dee:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	60d3      	str	r3, [r2, #12]
}
 8000df4:	bf00      	nop
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e08:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <__NVIC_GetPriorityGrouping+0x18>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	0a1b      	lsrs	r3, r3, #8
 8000e0e:	f003 0307 	and.w	r3, r3, #7
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	db0b      	blt.n	8000e4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	f003 021f 	and.w	r2, r3, #31
 8000e38:	4907      	ldr	r1, [pc, #28]	; (8000e58 <__NVIC_EnableIRQ+0x38>)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	095b      	lsrs	r3, r3, #5
 8000e40:	2001      	movs	r0, #1
 8000e42:	fa00 f202 	lsl.w	r2, r0, r2
 8000e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000e100 	.word	0xe000e100

08000e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	db0a      	blt.n	8000e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	490c      	ldr	r1, [pc, #48]	; (8000ea8 <__NVIC_SetPriority+0x4c>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	0112      	lsls	r2, r2, #4
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	440b      	add	r3, r1
 8000e80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e84:	e00a      	b.n	8000e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4908      	ldr	r1, [pc, #32]	; (8000eac <__NVIC_SetPriority+0x50>)
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	f003 030f 	and.w	r3, r3, #15
 8000e92:	3b04      	subs	r3, #4
 8000e94:	0112      	lsls	r2, r2, #4
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	440b      	add	r3, r1
 8000e9a:	761a      	strb	r2, [r3, #24]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000e100 	.word	0xe000e100
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b089      	sub	sp, #36	; 0x24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f1c3 0307 	rsb	r3, r3, #7
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	bf28      	it	cs
 8000ece:	2304      	movcs	r3, #4
 8000ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	2b06      	cmp	r3, #6
 8000ed8:	d902      	bls.n	8000ee0 <NVIC_EncodePriority+0x30>
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3b03      	subs	r3, #3
 8000ede:	e000      	b.n	8000ee2 <NVIC_EncodePriority+0x32>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43da      	mvns	r2, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	43d9      	mvns	r1, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	4313      	orrs	r3, r2
         );
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3724      	adds	r7, #36	; 0x24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f28:	d301      	bcc.n	8000f2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00f      	b.n	8000f4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <SysTick_Config+0x40>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f36:	210f      	movs	r1, #15
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3c:	f7ff ff8e 	bl	8000e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <SysTick_Config+0x40>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f46:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <SysTick_Config+0x40>)
 8000f48:	2207      	movs	r2, #7
 8000f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	e000e010 	.word	0xe000e010

08000f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff ff29 	bl	8000dbc <__NVIC_SetPriorityGrouping>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b086      	sub	sp, #24
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	4603      	mov	r3, r0
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
 8000f7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f84:	f7ff ff3e 	bl	8000e04 <__NVIC_GetPriorityGrouping>
 8000f88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	68b9      	ldr	r1, [r7, #8]
 8000f8e:	6978      	ldr	r0, [r7, #20]
 8000f90:	f7ff ff8e 	bl	8000eb0 <NVIC_EncodePriority>
 8000f94:	4602      	mov	r2, r0
 8000f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff5d 	bl	8000e5c <__NVIC_SetPriority>
}
 8000fa2:	bf00      	nop
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff31 	bl	8000e20 <__NVIC_EnableIRQ>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ffa2 	bl	8000f18 <SysTick_Config>
 8000fd4:	4603      	mov	r3, r0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b084      	sub	sp, #16
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fec:	f7ff feda 	bl	8000da4 <HAL_GetTick>
 8000ff0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d008      	beq.n	8001010 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2280      	movs	r2, #128	; 0x80
 8001002:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e052      	b.n	80010b6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f022 0216 	bic.w	r2, r2, #22
 800101e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	695a      	ldr	r2, [r3, #20]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800102e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	2b00      	cmp	r3, #0
 8001036:	d103      	bne.n	8001040 <HAL_DMA_Abort+0x62>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800103c:	2b00      	cmp	r3, #0
 800103e:	d007      	beq.n	8001050 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f022 0208 	bic.w	r2, r2, #8
 800104e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f022 0201 	bic.w	r2, r2, #1
 800105e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001060:	e013      	b.n	800108a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001062:	f7ff fe9f 	bl	8000da4 <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b05      	cmp	r3, #5
 800106e:	d90c      	bls.n	800108a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2220      	movs	r2, #32
 8001074:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2203      	movs	r2, #3
 800107a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e015      	b.n	80010b6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1e4      	bne.n	8001062 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800109c:	223f      	movs	r2, #63	; 0x3f
 800109e:	409a      	lsls	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2201      	movs	r2, #1
 80010a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d004      	beq.n	80010dc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2280      	movs	r2, #128	; 0x80
 80010d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e00c      	b.n	80010f6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2205      	movs	r2, #5
 80010e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f022 0201 	bic.w	r2, r2, #1
 80010f2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001104:	b480      	push	{r7}
 8001106:	b089      	sub	sp, #36	; 0x24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001116:	2300      	movs	r3, #0
 8001118:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
 800111e:	e159      	b.n	80013d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001120:	2201      	movs	r2, #1
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	429a      	cmp	r2, r3
 800113a:	f040 8148 	bne.w	80013ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 0303 	and.w	r3, r3, #3
 8001146:	2b01      	cmp	r3, #1
 8001148:	d005      	beq.n	8001156 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001152:	2b02      	cmp	r3, #2
 8001154:	d130      	bne.n	80011b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	2203      	movs	r2, #3
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4013      	ands	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	68da      	ldr	r2, [r3, #12]
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800118c:	2201      	movs	r2, #1
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	091b      	lsrs	r3, r3, #4
 80011a2:	f003 0201 	and.w	r2, r3, #1
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	2b03      	cmp	r3, #3
 80011c2:	d017      	beq.n	80011f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	2203      	movs	r2, #3
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	689a      	ldr	r2, [r3, #8]
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d123      	bne.n	8001248 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	08da      	lsrs	r2, r3, #3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3208      	adds	r2, #8
 8001208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	f003 0307 	and.w	r3, r3, #7
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	220f      	movs	r2, #15
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	691a      	ldr	r2, [r3, #16]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	08da      	lsrs	r2, r3, #3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3208      	adds	r2, #8
 8001242:	69b9      	ldr	r1, [r7, #24]
 8001244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	2203      	movs	r2, #3
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0203 	and.w	r2, r3, #3
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001284:	2b00      	cmp	r3, #0
 8001286:	f000 80a2 	beq.w	80013ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	4b57      	ldr	r3, [pc, #348]	; (80013ec <HAL_GPIO_Init+0x2e8>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	4a56      	ldr	r2, [pc, #344]	; (80013ec <HAL_GPIO_Init+0x2e8>)
 8001294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001298:	6453      	str	r3, [r2, #68]	; 0x44
 800129a:	4b54      	ldr	r3, [pc, #336]	; (80013ec <HAL_GPIO_Init+0x2e8>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012a6:	4a52      	ldr	r2, [pc, #328]	; (80013f0 <HAL_GPIO_Init+0x2ec>)
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	089b      	lsrs	r3, r3, #2
 80012ac:	3302      	adds	r3, #2
 80012ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	220f      	movs	r2, #15
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a49      	ldr	r2, [pc, #292]	; (80013f4 <HAL_GPIO_Init+0x2f0>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d019      	beq.n	8001306 <HAL_GPIO_Init+0x202>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a48      	ldr	r2, [pc, #288]	; (80013f8 <HAL_GPIO_Init+0x2f4>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d013      	beq.n	8001302 <HAL_GPIO_Init+0x1fe>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a47      	ldr	r2, [pc, #284]	; (80013fc <HAL_GPIO_Init+0x2f8>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d00d      	beq.n	80012fe <HAL_GPIO_Init+0x1fa>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a46      	ldr	r2, [pc, #280]	; (8001400 <HAL_GPIO_Init+0x2fc>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d007      	beq.n	80012fa <HAL_GPIO_Init+0x1f6>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a45      	ldr	r2, [pc, #276]	; (8001404 <HAL_GPIO_Init+0x300>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d101      	bne.n	80012f6 <HAL_GPIO_Init+0x1f2>
 80012f2:	2304      	movs	r3, #4
 80012f4:	e008      	b.n	8001308 <HAL_GPIO_Init+0x204>
 80012f6:	2307      	movs	r3, #7
 80012f8:	e006      	b.n	8001308 <HAL_GPIO_Init+0x204>
 80012fa:	2303      	movs	r3, #3
 80012fc:	e004      	b.n	8001308 <HAL_GPIO_Init+0x204>
 80012fe:	2302      	movs	r3, #2
 8001300:	e002      	b.n	8001308 <HAL_GPIO_Init+0x204>
 8001302:	2301      	movs	r3, #1
 8001304:	e000      	b.n	8001308 <HAL_GPIO_Init+0x204>
 8001306:	2300      	movs	r3, #0
 8001308:	69fa      	ldr	r2, [r7, #28]
 800130a:	f002 0203 	and.w	r2, r2, #3
 800130e:	0092      	lsls	r2, r2, #2
 8001310:	4093      	lsls	r3, r2
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001318:	4935      	ldr	r1, [pc, #212]	; (80013f0 <HAL_GPIO_Init+0x2ec>)
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	089b      	lsrs	r3, r3, #2
 800131e:	3302      	adds	r3, #2
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001326:	4b38      	ldr	r3, [pc, #224]	; (8001408 <HAL_GPIO_Init+0x304>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	43db      	mvns	r3, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4013      	ands	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	4313      	orrs	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800134a:	4a2f      	ldr	r2, [pc, #188]	; (8001408 <HAL_GPIO_Init+0x304>)
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001350:	4b2d      	ldr	r3, [pc, #180]	; (8001408 <HAL_GPIO_Init+0x304>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	4313      	orrs	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001374:	4a24      	ldr	r2, [pc, #144]	; (8001408 <HAL_GPIO_Init+0x304>)
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800137a:	4b23      	ldr	r3, [pc, #140]	; (8001408 <HAL_GPIO_Init+0x304>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	43db      	mvns	r3, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4013      	ands	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	4313      	orrs	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800139e:	4a1a      	ldr	r2, [pc, #104]	; (8001408 <HAL_GPIO_Init+0x304>)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013a4:	4b18      	ldr	r3, [pc, #96]	; (8001408 <HAL_GPIO_Init+0x304>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013c8:	4a0f      	ldr	r2, [pc, #60]	; (8001408 <HAL_GPIO_Init+0x304>)
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3301      	adds	r3, #1
 80013d2:	61fb      	str	r3, [r7, #28]
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	2b0f      	cmp	r3, #15
 80013d8:	f67f aea2 	bls.w	8001120 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013dc:	bf00      	nop
 80013de:	bf00      	nop
 80013e0:	3724      	adds	r7, #36	; 0x24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40013800 	.word	0x40013800
 80013f4:	40020000 	.word	0x40020000
 80013f8:	40020400 	.word	0x40020400
 80013fc:	40020800 	.word	0x40020800
 8001400:	40020c00 	.word	0x40020c00
 8001404:	40021000 	.word	0x40021000
 8001408:	40013c00 	.word	0x40013c00

0800140c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	460b      	mov	r3, r1
 8001416:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	691a      	ldr	r2, [r3, #16]
 800141c:	887b      	ldrh	r3, [r7, #2]
 800141e:	4013      	ands	r3, r2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d002      	beq.n	800142a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001424:	2301      	movs	r3, #1
 8001426:	73fb      	strb	r3, [r7, #15]
 8001428:	e001      	b.n	800142e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800142a:	2300      	movs	r3, #0
 800142c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800142e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	807b      	strh	r3, [r7, #2]
 8001448:	4613      	mov	r3, r2
 800144a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800144c:	787b      	ldrb	r3, [r7, #1]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001452:	887a      	ldrh	r2, [r7, #2]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001458:	e003      	b.n	8001462 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800145a:	887b      	ldrh	r3, [r7, #2]
 800145c:	041a      	lsls	r2, r3, #16
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	619a      	str	r2, [r3, #24]
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e267      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b00      	cmp	r3, #0
 800148c:	d075      	beq.n	800157a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800148e:	4b88      	ldr	r3, [pc, #544]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 030c 	and.w	r3, r3, #12
 8001496:	2b04      	cmp	r3, #4
 8001498:	d00c      	beq.n	80014b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800149a:	4b85      	ldr	r3, [pc, #532]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014a2:	2b08      	cmp	r3, #8
 80014a4:	d112      	bne.n	80014cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014a6:	4b82      	ldr	r3, [pc, #520]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014b2:	d10b      	bne.n	80014cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b4:	4b7e      	ldr	r3, [pc, #504]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d05b      	beq.n	8001578 <HAL_RCC_OscConfig+0x108>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d157      	bne.n	8001578 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e242      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d4:	d106      	bne.n	80014e4 <HAL_RCC_OscConfig+0x74>
 80014d6:	4b76      	ldr	r3, [pc, #472]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a75      	ldr	r2, [pc, #468]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	e01d      	b.n	8001520 <HAL_RCC_OscConfig+0xb0>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014ec:	d10c      	bne.n	8001508 <HAL_RCC_OscConfig+0x98>
 80014ee:	4b70      	ldr	r3, [pc, #448]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a6f      	ldr	r2, [pc, #444]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	4b6d      	ldr	r3, [pc, #436]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a6c      	ldr	r2, [pc, #432]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	e00b      	b.n	8001520 <HAL_RCC_OscConfig+0xb0>
 8001508:	4b69      	ldr	r3, [pc, #420]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a68      	ldr	r2, [pc, #416]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 800150e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4b66      	ldr	r3, [pc, #408]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a65      	ldr	r2, [pc, #404]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 800151a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800151e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d013      	beq.n	8001550 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7ff fc3c 	bl	8000da4 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001530:	f7ff fc38 	bl	8000da4 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b64      	cmp	r3, #100	; 0x64
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e207      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001542:	4b5b      	ldr	r3, [pc, #364]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0f0      	beq.n	8001530 <HAL_RCC_OscConfig+0xc0>
 800154e:	e014      	b.n	800157a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001550:	f7ff fc28 	bl	8000da4 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001558:	f7ff fc24 	bl	8000da4 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b64      	cmp	r3, #100	; 0x64
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e1f3      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156a:	4b51      	ldr	r3, [pc, #324]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f0      	bne.n	8001558 <HAL_RCC_OscConfig+0xe8>
 8001576:	e000      	b.n	800157a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d063      	beq.n	800164e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001586:	4b4a      	ldr	r3, [pc, #296]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 030c 	and.w	r3, r3, #12
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00b      	beq.n	80015aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001592:	4b47      	ldr	r3, [pc, #284]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800159a:	2b08      	cmp	r3, #8
 800159c:	d11c      	bne.n	80015d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800159e:	4b44      	ldr	r3, [pc, #272]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d116      	bne.n	80015d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015aa:	4b41      	ldr	r3, [pc, #260]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d005      	beq.n	80015c2 <HAL_RCC_OscConfig+0x152>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d001      	beq.n	80015c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e1c7      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c2:	4b3b      	ldr	r3, [pc, #236]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	4937      	ldr	r1, [pc, #220]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015d6:	e03a      	b.n	800164e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d020      	beq.n	8001622 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e0:	4b34      	ldr	r3, [pc, #208]	; (80016b4 <HAL_RCC_OscConfig+0x244>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e6:	f7ff fbdd 	bl	8000da4 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ee:	f7ff fbd9 	bl	8000da4 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e1a8      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001600:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0f0      	beq.n	80015ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160c:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	4925      	ldr	r1, [pc, #148]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 800161c:	4313      	orrs	r3, r2
 800161e:	600b      	str	r3, [r1, #0]
 8001620:	e015      	b.n	800164e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001622:	4b24      	ldr	r3, [pc, #144]	; (80016b4 <HAL_RCC_OscConfig+0x244>)
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001628:	f7ff fbbc 	bl	8000da4 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001630:	f7ff fbb8 	bl	8000da4 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e187      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001642:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f0      	bne.n	8001630 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	2b00      	cmp	r3, #0
 8001658:	d036      	beq.n	80016c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d016      	beq.n	8001690 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001662:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <HAL_RCC_OscConfig+0x248>)
 8001664:	2201      	movs	r2, #1
 8001666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001668:	f7ff fb9c 	bl	8000da4 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001670:	f7ff fb98 	bl	8000da4 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e167      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0x200>
 800168e:	e01b      	b.n	80016c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_RCC_OscConfig+0x248>)
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001696:	f7ff fb85 	bl	8000da4 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800169c:	e00e      	b.n	80016bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800169e:	f7ff fb81 	bl	8000da4 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d907      	bls.n	80016bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e150      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
 80016b0:	40023800 	.word	0x40023800
 80016b4:	42470000 	.word	0x42470000
 80016b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016bc:	4b88      	ldr	r3, [pc, #544]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80016be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1ea      	bne.n	800169e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 8097 	beq.w	8001804 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016d6:	2300      	movs	r3, #0
 80016d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016da:	4b81      	ldr	r3, [pc, #516]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10f      	bne.n	8001706 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	4b7d      	ldr	r3, [pc, #500]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	4a7c      	ldr	r2, [pc, #496]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80016f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f4:	6413      	str	r3, [r2, #64]	; 0x40
 80016f6:	4b7a      	ldr	r3, [pc, #488]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001702:	2301      	movs	r3, #1
 8001704:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001706:	4b77      	ldr	r3, [pc, #476]	; (80018e4 <HAL_RCC_OscConfig+0x474>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800170e:	2b00      	cmp	r3, #0
 8001710:	d118      	bne.n	8001744 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001712:	4b74      	ldr	r3, [pc, #464]	; (80018e4 <HAL_RCC_OscConfig+0x474>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a73      	ldr	r2, [pc, #460]	; (80018e4 <HAL_RCC_OscConfig+0x474>)
 8001718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800171c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800171e:	f7ff fb41 	bl	8000da4 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001726:	f7ff fb3d 	bl	8000da4 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e10c      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001738:	4b6a      	ldr	r3, [pc, #424]	; (80018e4 <HAL_RCC_OscConfig+0x474>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0f0      	beq.n	8001726 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d106      	bne.n	800175a <HAL_RCC_OscConfig+0x2ea>
 800174c:	4b64      	ldr	r3, [pc, #400]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 800174e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001750:	4a63      	ldr	r2, [pc, #396]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	6713      	str	r3, [r2, #112]	; 0x70
 8001758:	e01c      	b.n	8001794 <HAL_RCC_OscConfig+0x324>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2b05      	cmp	r3, #5
 8001760:	d10c      	bne.n	800177c <HAL_RCC_OscConfig+0x30c>
 8001762:	4b5f      	ldr	r3, [pc, #380]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001766:	4a5e      	ldr	r2, [pc, #376]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001768:	f043 0304 	orr.w	r3, r3, #4
 800176c:	6713      	str	r3, [r2, #112]	; 0x70
 800176e:	4b5c      	ldr	r3, [pc, #368]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001772:	4a5b      	ldr	r2, [pc, #364]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6713      	str	r3, [r2, #112]	; 0x70
 800177a:	e00b      	b.n	8001794 <HAL_RCC_OscConfig+0x324>
 800177c:	4b58      	ldr	r3, [pc, #352]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 800177e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001780:	4a57      	ldr	r2, [pc, #348]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001782:	f023 0301 	bic.w	r3, r3, #1
 8001786:	6713      	str	r3, [r2, #112]	; 0x70
 8001788:	4b55      	ldr	r3, [pc, #340]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 800178a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178c:	4a54      	ldr	r2, [pc, #336]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 800178e:	f023 0304 	bic.w	r3, r3, #4
 8001792:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d015      	beq.n	80017c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179c:	f7ff fb02 	bl	8000da4 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a2:	e00a      	b.n	80017ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017a4:	f7ff fafe 	bl	8000da4 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e0cb      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ba:	4b49      	ldr	r3, [pc, #292]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80017bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0ee      	beq.n	80017a4 <HAL_RCC_OscConfig+0x334>
 80017c6:	e014      	b.n	80017f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c8:	f7ff faec 	bl	8000da4 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ce:	e00a      	b.n	80017e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017d0:	f7ff fae8 	bl	8000da4 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	f241 3288 	movw	r2, #5000	; 0x1388
 80017de:	4293      	cmp	r3, r2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e0b5      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e6:	4b3e      	ldr	r3, [pc, #248]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80017e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1ee      	bne.n	80017d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017f2:	7dfb      	ldrb	r3, [r7, #23]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d105      	bne.n	8001804 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f8:	4b39      	ldr	r3, [pc, #228]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	4a38      	ldr	r2, [pc, #224]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80017fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001802:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 80a1 	beq.w	8001950 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800180e:	4b34      	ldr	r3, [pc, #208]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 030c 	and.w	r3, r3, #12
 8001816:	2b08      	cmp	r3, #8
 8001818:	d05c      	beq.n	80018d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	2b02      	cmp	r3, #2
 8001820:	d141      	bne.n	80018a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001822:	4b31      	ldr	r3, [pc, #196]	; (80018e8 <HAL_RCC_OscConfig+0x478>)
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7ff fabc 	bl	8000da4 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001830:	f7ff fab8 	bl	8000da4 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e087      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001842:	4b27      	ldr	r3, [pc, #156]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69da      	ldr	r2, [r3, #28]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	431a      	orrs	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185c:	019b      	lsls	r3, r3, #6
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001864:	085b      	lsrs	r3, r3, #1
 8001866:	3b01      	subs	r3, #1
 8001868:	041b      	lsls	r3, r3, #16
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001870:	061b      	lsls	r3, r3, #24
 8001872:	491b      	ldr	r1, [pc, #108]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001874:	4313      	orrs	r3, r2
 8001876:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001878:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <HAL_RCC_OscConfig+0x478>)
 800187a:	2201      	movs	r2, #1
 800187c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187e:	f7ff fa91 	bl	8000da4 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001886:	f7ff fa8d 	bl	8000da4 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e05c      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001898:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0f0      	beq.n	8001886 <HAL_RCC_OscConfig+0x416>
 80018a4:	e054      	b.n	8001950 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a6:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <HAL_RCC_OscConfig+0x478>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ac:	f7ff fa7a 	bl	8000da4 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b4:	f7ff fa76 	bl	8000da4 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e045      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x444>
 80018d2:	e03d      	b.n	8001950 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d107      	bne.n	80018ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e038      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40007000 	.word	0x40007000
 80018e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018ec:	4b1b      	ldr	r3, [pc, #108]	; (800195c <HAL_RCC_OscConfig+0x4ec>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d028      	beq.n	800194c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001904:	429a      	cmp	r2, r3
 8001906:	d121      	bne.n	800194c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001912:	429a      	cmp	r2, r3
 8001914:	d11a      	bne.n	800194c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800191c:	4013      	ands	r3, r2
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001922:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001924:	4293      	cmp	r3, r2
 8001926:	d111      	bne.n	800194c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001932:	085b      	lsrs	r3, r3, #1
 8001934:	3b01      	subs	r3, #1
 8001936:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001938:	429a      	cmp	r2, r3
 800193a:	d107      	bne.n	800194c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001946:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001948:	429a      	cmp	r2, r3
 800194a:	d001      	beq.n	8001950 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e000      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40023800 	.word	0x40023800

08001960 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e0cc      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001974:	4b68      	ldr	r3, [pc, #416]	; (8001b18 <HAL_RCC_ClockConfig+0x1b8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	d90c      	bls.n	800199c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001982:	4b65      	ldr	r3, [pc, #404]	; (8001b18 <HAL_RCC_ClockConfig+0x1b8>)
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800198a:	4b63      	ldr	r3, [pc, #396]	; (8001b18 <HAL_RCC_ClockConfig+0x1b8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	429a      	cmp	r2, r3
 8001996:	d001      	beq.n	800199c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e0b8      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d020      	beq.n	80019ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d005      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019b4:	4b59      	ldr	r3, [pc, #356]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	4a58      	ldr	r2, [pc, #352]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019cc:	4b53      	ldr	r3, [pc, #332]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	4a52      	ldr	r2, [pc, #328]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019d8:	4b50      	ldr	r3, [pc, #320]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	494d      	ldr	r1, [pc, #308]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d044      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d107      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fe:	4b47      	ldr	r3, [pc, #284]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d119      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e07f      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d003      	beq.n	8001a1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	d107      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a1e:	4b3f      	ldr	r3, [pc, #252]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d109      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e06f      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2e:	4b3b      	ldr	r3, [pc, #236]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e067      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a3e:	4b37      	ldr	r3, [pc, #220]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f023 0203 	bic.w	r2, r3, #3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	4934      	ldr	r1, [pc, #208]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a50:	f7ff f9a8 	bl	8000da4 <HAL_GetTick>
 8001a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a56:	e00a      	b.n	8001a6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a58:	f7ff f9a4 	bl	8000da4 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e04f      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6e:	4b2b      	ldr	r3, [pc, #172]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 020c 	and.w	r2, r3, #12
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d1eb      	bne.n	8001a58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a80:	4b25      	ldr	r3, [pc, #148]	; (8001b18 <HAL_RCC_ClockConfig+0x1b8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d20c      	bcs.n	8001aa8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8e:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <HAL_RCC_ClockConfig+0x1b8>)
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a96:	4b20      	ldr	r3, [pc, #128]	; (8001b18 <HAL_RCC_ClockConfig+0x1b8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d001      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e032      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d008      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ab4:	4b19      	ldr	r3, [pc, #100]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	4916      	ldr	r1, [pc, #88]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d009      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ad2:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	490e      	ldr	r1, [pc, #56]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ae6:	f000 f821 	bl	8001b2c <HAL_RCC_GetSysClockFreq>
 8001aea:	4602      	mov	r2, r0
 8001aec:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	091b      	lsrs	r3, r3, #4
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	490a      	ldr	r1, [pc, #40]	; (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001af8:	5ccb      	ldrb	r3, [r1, r3]
 8001afa:	fa22 f303 	lsr.w	r3, r2, r3
 8001afe:	4a09      	ldr	r2, [pc, #36]	; (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001b00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <HAL_RCC_ClockConfig+0x1c8>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff f908 	bl	8000d1c <HAL_InitTick>

  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40023c00 	.word	0x40023c00
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	08002fac 	.word	0x08002fac
 8001b24:	20000000 	.word	0x20000000
 8001b28:	2000009c 	.word	0x2000009c

08001b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b30:	b090      	sub	sp, #64	; 0x40
 8001b32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	637b      	str	r3, [r7, #52]	; 0x34
 8001b38:	2300      	movs	r3, #0
 8001b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b44:	4b59      	ldr	r3, [pc, #356]	; (8001cac <HAL_RCC_GetSysClockFreq+0x180>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 030c 	and.w	r3, r3, #12
 8001b4c:	2b08      	cmp	r3, #8
 8001b4e:	d00d      	beq.n	8001b6c <HAL_RCC_GetSysClockFreq+0x40>
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	f200 80a1 	bhi.w	8001c98 <HAL_RCC_GetSysClockFreq+0x16c>
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d002      	beq.n	8001b60 <HAL_RCC_GetSysClockFreq+0x34>
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	d003      	beq.n	8001b66 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b5e:	e09b      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b60:	4b53      	ldr	r3, [pc, #332]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b62:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001b64:	e09b      	b.n	8001c9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b66:	4b53      	ldr	r3, [pc, #332]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b6a:	e098      	b.n	8001c9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b6c:	4b4f      	ldr	r3, [pc, #316]	; (8001cac <HAL_RCC_GetSysClockFreq+0x180>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b74:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b76:	4b4d      	ldr	r3, [pc, #308]	; (8001cac <HAL_RCC_GetSysClockFreq+0x180>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d028      	beq.n	8001bd4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b82:	4b4a      	ldr	r3, [pc, #296]	; (8001cac <HAL_RCC_GetSysClockFreq+0x180>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	099b      	lsrs	r3, r3, #6
 8001b88:	2200      	movs	r2, #0
 8001b8a:	623b      	str	r3, [r7, #32]
 8001b8c:	627a      	str	r2, [r7, #36]	; 0x24
 8001b8e:	6a3b      	ldr	r3, [r7, #32]
 8001b90:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b94:	2100      	movs	r1, #0
 8001b96:	4b47      	ldr	r3, [pc, #284]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b98:	fb03 f201 	mul.w	r2, r3, r1
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	fb00 f303 	mul.w	r3, r0, r3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	4a43      	ldr	r2, [pc, #268]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ba6:	fba0 1202 	umull	r1, r2, r0, r2
 8001baa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bac:	460a      	mov	r2, r1
 8001bae:	62ba      	str	r2, [r7, #40]	; 0x28
 8001bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bb2:	4413      	add	r3, r2
 8001bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bb8:	2200      	movs	r2, #0
 8001bba:	61bb      	str	r3, [r7, #24]
 8001bbc:	61fa      	str	r2, [r7, #28]
 8001bbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bc2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001bc6:	f7fe fb0d 	bl	80001e4 <__aeabi_uldivmod>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	4613      	mov	r3, r2
 8001bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bd2:	e053      	b.n	8001c7c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bd4:	4b35      	ldr	r3, [pc, #212]	; (8001cac <HAL_RCC_GetSysClockFreq+0x180>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	099b      	lsrs	r3, r3, #6
 8001bda:	2200      	movs	r2, #0
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	617a      	str	r2, [r7, #20]
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001be6:	f04f 0b00 	mov.w	fp, #0
 8001bea:	4652      	mov	r2, sl
 8001bec:	465b      	mov	r3, fp
 8001bee:	f04f 0000 	mov.w	r0, #0
 8001bf2:	f04f 0100 	mov.w	r1, #0
 8001bf6:	0159      	lsls	r1, r3, #5
 8001bf8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bfc:	0150      	lsls	r0, r2, #5
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	ebb2 080a 	subs.w	r8, r2, sl
 8001c06:	eb63 090b 	sbc.w	r9, r3, fp
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	f04f 0300 	mov.w	r3, #0
 8001c12:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c16:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c1a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c1e:	ebb2 0408 	subs.w	r4, r2, r8
 8001c22:	eb63 0509 	sbc.w	r5, r3, r9
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	00eb      	lsls	r3, r5, #3
 8001c30:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c34:	00e2      	lsls	r2, r4, #3
 8001c36:	4614      	mov	r4, r2
 8001c38:	461d      	mov	r5, r3
 8001c3a:	eb14 030a 	adds.w	r3, r4, sl
 8001c3e:	603b      	str	r3, [r7, #0]
 8001c40:	eb45 030b 	adc.w	r3, r5, fp
 8001c44:	607b      	str	r3, [r7, #4]
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	f04f 0300 	mov.w	r3, #0
 8001c4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c52:	4629      	mov	r1, r5
 8001c54:	028b      	lsls	r3, r1, #10
 8001c56:	4621      	mov	r1, r4
 8001c58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c5c:	4621      	mov	r1, r4
 8001c5e:	028a      	lsls	r2, r1, #10
 8001c60:	4610      	mov	r0, r2
 8001c62:	4619      	mov	r1, r3
 8001c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c66:	2200      	movs	r2, #0
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	60fa      	str	r2, [r7, #12]
 8001c6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c70:	f7fe fab8 	bl	80001e4 <__aeabi_uldivmod>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4613      	mov	r3, r2
 8001c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <HAL_RCC_GetSysClockFreq+0x180>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	0c1b      	lsrs	r3, r3, #16
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	3301      	adds	r3, #1
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001c8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c96:	e002      	b.n	8001c9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c9a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3740      	adds	r7, #64	; 0x40
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001caa:	bf00      	nop
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	00f42400 	.word	0x00f42400
 8001cb4:	017d7840 	.word	0x017d7840

08001cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cbc:	4b03      	ldr	r3, [pc, #12]	; (8001ccc <HAL_RCC_GetHCLKFreq+0x14>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	20000000 	.word	0x20000000

08001cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cd4:	f7ff fff0 	bl	8001cb8 <HAL_RCC_GetHCLKFreq>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	0a9b      	lsrs	r3, r3, #10
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	4903      	ldr	r1, [pc, #12]	; (8001cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ce6:	5ccb      	ldrb	r3, [r1, r3]
 8001ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	08002fbc 	.word	0x08002fbc

08001cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cfc:	f7ff ffdc 	bl	8001cb8 <HAL_RCC_GetHCLKFreq>
 8001d00:	4602      	mov	r2, r0
 8001d02:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	0b5b      	lsrs	r3, r3, #13
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	4903      	ldr	r1, [pc, #12]	; (8001d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d0e:	5ccb      	ldrb	r3, [r1, r3]
 8001d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	08002fbc 	.word	0x08002fbc

08001d20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e03f      	b.n	8001db2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d106      	bne.n	8001d4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7fe fcce 	bl	80006e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2224      	movs	r2, #36	; 0x24
 8001d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 fddf 	bl	8002928 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	691a      	ldr	r2, [r3, #16]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	695a      	ldr	r2, [r3, #20]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68da      	ldr	r2, [r3, #12]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2220      	movs	r2, #32
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2220      	movs	r2, #32
 8001dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b08a      	sub	sp, #40	; 0x28
 8001dbe:	af02      	add	r7, sp, #8
 8001dc0:	60f8      	str	r0, [r7, #12]
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	603b      	str	r3, [r7, #0]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b20      	cmp	r3, #32
 8001dd8:	d17c      	bne.n	8001ed4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d002      	beq.n	8001de6 <HAL_UART_Transmit+0x2c>
 8001de0:	88fb      	ldrh	r3, [r7, #6]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e075      	b.n	8001ed6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d101      	bne.n	8001df8 <HAL_UART_Transmit+0x3e>
 8001df4:	2302      	movs	r3, #2
 8001df6:	e06e      	b.n	8001ed6 <HAL_UART_Transmit+0x11c>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2221      	movs	r2, #33	; 0x21
 8001e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e0e:	f7fe ffc9 	bl	8000da4 <HAL_GetTick>
 8001e12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	88fa      	ldrh	r2, [r7, #6]
 8001e18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	88fa      	ldrh	r2, [r7, #6]
 8001e1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e28:	d108      	bne.n	8001e3c <HAL_UART_Transmit+0x82>
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d104      	bne.n	8001e3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	61bb      	str	r3, [r7, #24]
 8001e3a:	e003      	b.n	8001e44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001e4c:	e02a      	b.n	8001ea4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	2200      	movs	r2, #0
 8001e56:	2180      	movs	r1, #128	; 0x80
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f000 fb1f 	bl	800249c <UART_WaitOnFlagUntilTimeout>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e036      	b.n	8001ed6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10b      	bne.n	8001e86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	881b      	ldrh	r3, [r3, #0]
 8001e72:	461a      	mov	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	3302      	adds	r3, #2
 8001e82:	61bb      	str	r3, [r7, #24]
 8001e84:	e007      	b.n	8001e96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	781a      	ldrb	r2, [r3, #0]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	3301      	adds	r3, #1
 8001e94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1cf      	bne.n	8001e4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	2140      	movs	r1, #64	; 0x40
 8001eb8:	68f8      	ldr	r0, [r7, #12]
 8001eba:	f000 faef 	bl	800249c <UART_WaitOnFlagUntilTimeout>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e006      	b.n	8001ed6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2220      	movs	r2, #32
 8001ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	e000      	b.n	8001ed6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001ed4:	2302      	movs	r3, #2
  }
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3720      	adds	r7, #32
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b084      	sub	sp, #16
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	60f8      	str	r0, [r7, #12]
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b20      	cmp	r3, #32
 8001ef6:	d11d      	bne.n	8001f34 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d002      	beq.n	8001f04 <HAL_UART_Receive_IT+0x26>
 8001efe:	88fb      	ldrh	r3, [r7, #6]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e016      	b.n	8001f36 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d101      	bne.n	8001f16 <HAL_UART_Receive_IT+0x38>
 8001f12:	2302      	movs	r3, #2
 8001f14:	e00f      	b.n	8001f36 <HAL_UART_Receive_IT+0x58>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001f24:	88fb      	ldrh	r3, [r7, #6]
 8001f26:	461a      	mov	r2, r3
 8001f28:	68b9      	ldr	r1, [r7, #8]
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f000 fb24 	bl	8002578 <UART_Start_Receive_IT>
 8001f30:	4603      	mov	r3, r0
 8001f32:	e000      	b.n	8001f36 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001f34:	2302      	movs	r3, #2
  }
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
	...

08001f40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b0ba      	sub	sp, #232	; 0xe8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001f7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10f      	bne.n	8001fa6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f8a:	f003 0320 	and.w	r3, r3, #32
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d009      	beq.n	8001fa6 <HAL_UART_IRQHandler+0x66>
 8001f92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f96:	f003 0320 	and.w	r3, r3, #32
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 fc07 	bl	80027b2 <UART_Receive_IT>
      return;
 8001fa4:	e256      	b.n	8002454 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001fa6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 80de 	beq.w	800216c <HAL_UART_IRQHandler+0x22c>
 8001fb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d106      	bne.n	8001fca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001fc0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 80d1 	beq.w	800216c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00b      	beq.n	8001fee <HAL_UART_IRQHandler+0xae>
 8001fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d005      	beq.n	8001fee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	f043 0201 	orr.w	r2, r3, #1
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00b      	beq.n	8002012 <HAL_UART_IRQHandler+0xd2>
 8001ffa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d005      	beq.n	8002012 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f043 0202 	orr.w	r2, r3, #2
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00b      	beq.n	8002036 <HAL_UART_IRQHandler+0xf6>
 800201e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d005      	beq.n	8002036 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	f043 0204 	orr.w	r2, r3, #4
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	2b00      	cmp	r3, #0
 8002040:	d011      	beq.n	8002066 <HAL_UART_IRQHandler+0x126>
 8002042:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002046:	f003 0320 	and.w	r3, r3, #32
 800204a:	2b00      	cmp	r3, #0
 800204c:	d105      	bne.n	800205a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800204e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d005      	beq.n	8002066 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f043 0208 	orr.w	r2, r3, #8
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	2b00      	cmp	r3, #0
 800206c:	f000 81ed 	beq.w	800244a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002074:	f003 0320 	and.w	r3, r3, #32
 8002078:	2b00      	cmp	r3, #0
 800207a:	d008      	beq.n	800208e <HAL_UART_IRQHandler+0x14e>
 800207c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002080:	f003 0320 	and.w	r3, r3, #32
 8002084:	2b00      	cmp	r3, #0
 8002086:	d002      	beq.n	800208e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 fb92 	bl	80027b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002098:	2b40      	cmp	r3, #64	; 0x40
 800209a:	bf0c      	ite	eq
 800209c:	2301      	moveq	r3, #1
 800209e:	2300      	movne	r3, #0
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d103      	bne.n	80020ba <HAL_UART_IRQHandler+0x17a>
 80020b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d04f      	beq.n	800215a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 fa9a 	bl	80025f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ca:	2b40      	cmp	r3, #64	; 0x40
 80020cc:	d141      	bne.n	8002152 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	3314      	adds	r3, #20
 80020d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020dc:	e853 3f00 	ldrex	r3, [r3]
 80020e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80020e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	3314      	adds	r3, #20
 80020f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80020fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80020fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002102:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002106:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800210a:	e841 2300 	strex	r3, r2, [r1]
 800210e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002112:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1d9      	bne.n	80020ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211e:	2b00      	cmp	r3, #0
 8002120:	d013      	beq.n	800214a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002126:	4a7d      	ldr	r2, [pc, #500]	; (800231c <HAL_UART_IRQHandler+0x3dc>)
 8002128:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe ffc5 	bl	80010be <HAL_DMA_Abort_IT>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d016      	beq.n	8002168 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002144:	4610      	mov	r0, r2
 8002146:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002148:	e00e      	b.n	8002168 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f990 	bl	8002470 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002150:	e00a      	b.n	8002168 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f98c 	bl	8002470 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002158:	e006      	b.n	8002168 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f988 	bl	8002470 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002166:	e170      	b.n	800244a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002168:	bf00      	nop
    return;
 800216a:	e16e      	b.n	800244a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002170:	2b01      	cmp	r3, #1
 8002172:	f040 814a 	bne.w	800240a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800217a:	f003 0310 	and.w	r3, r3, #16
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 8143 	beq.w	800240a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002188:	f003 0310 	and.w	r3, r3, #16
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 813c 	beq.w	800240a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002192:	2300      	movs	r3, #0
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	60bb      	str	r3, [r7, #8]
 80021a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b2:	2b40      	cmp	r3, #64	; 0x40
 80021b4:	f040 80b4 	bne.w	8002320 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80021c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 8140 	beq.w	800244e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80021d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80021d6:	429a      	cmp	r2, r3
 80021d8:	f080 8139 	bcs.w	800244e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80021e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021ee:	f000 8088 	beq.w	8002302 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	330c      	adds	r3, #12
 80021f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002200:	e853 3f00 	ldrex	r3, [r3]
 8002204:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002208:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800220c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002210:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	330c      	adds	r3, #12
 800221a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800221e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002222:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002226:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800222a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800222e:	e841 2300 	strex	r3, r2, [r1]
 8002232:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002236:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1d9      	bne.n	80021f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	3314      	adds	r3, #20
 8002244:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002246:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002248:	e853 3f00 	ldrex	r3, [r3]
 800224c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800224e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002250:	f023 0301 	bic.w	r3, r3, #1
 8002254:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	3314      	adds	r3, #20
 800225e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002262:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002266:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002268:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800226a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800226e:	e841 2300 	strex	r3, r2, [r1]
 8002272:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002274:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1e1      	bne.n	800223e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	3314      	adds	r3, #20
 8002280:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002282:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002284:	e853 3f00 	ldrex	r3, [r3]
 8002288:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800228a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800228c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002290:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	3314      	adds	r3, #20
 800229a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800229e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80022a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80022a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80022a6:	e841 2300 	strex	r3, r2, [r1]
 80022aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80022ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1e3      	bne.n	800227a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2220      	movs	r2, #32
 80022b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	330c      	adds	r3, #12
 80022c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022ca:	e853 3f00 	ldrex	r3, [r3]
 80022ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80022d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022d2:	f023 0310 	bic.w	r3, r3, #16
 80022d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	330c      	adds	r3, #12
 80022e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80022e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80022e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80022ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80022ec:	e841 2300 	strex	r3, r2, [r1]
 80022f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80022f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1e3      	bne.n	80022c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe fe6e 	bl	8000fde <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800230a:	b29b      	uxth	r3, r3
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	b29b      	uxth	r3, r3
 8002310:	4619      	mov	r1, r3
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f8b6 	bl	8002484 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002318:	e099      	b.n	800244e <HAL_UART_IRQHandler+0x50e>
 800231a:	bf00      	nop
 800231c:	080026bb 	.word	0x080026bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002328:	b29b      	uxth	r3, r3
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002334:	b29b      	uxth	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	f000 808b 	beq.w	8002452 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800233c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 8086 	beq.w	8002452 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	330c      	adds	r3, #12
 800234c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800234e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002350:	e853 3f00 	ldrex	r3, [r3]
 8002354:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002358:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800235c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	330c      	adds	r3, #12
 8002366:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800236a:	647a      	str	r2, [r7, #68]	; 0x44
 800236c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800236e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002370:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002372:	e841 2300 	strex	r3, r2, [r1]
 8002376:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1e3      	bne.n	8002346 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	3314      	adds	r3, #20
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	e853 3f00 	ldrex	r3, [r3]
 800238c:	623b      	str	r3, [r7, #32]
   return(result);
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	f023 0301 	bic.w	r3, r3, #1
 8002394:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	3314      	adds	r3, #20
 800239e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80023a2:	633a      	str	r2, [r7, #48]	; 0x30
 80023a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80023a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023aa:	e841 2300 	strex	r3, r2, [r1]
 80023ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80023b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1e3      	bne.n	800237e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2220      	movs	r2, #32
 80023ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	330c      	adds	r3, #12
 80023ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	e853 3f00 	ldrex	r3, [r3]
 80023d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f023 0310 	bic.w	r3, r3, #16
 80023da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	330c      	adds	r3, #12
 80023e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80023e8:	61fa      	str	r2, [r7, #28]
 80023ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ec:	69b9      	ldr	r1, [r7, #24]
 80023ee:	69fa      	ldr	r2, [r7, #28]
 80023f0:	e841 2300 	strex	r3, r2, [r1]
 80023f4:	617b      	str	r3, [r7, #20]
   return(result);
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1e3      	bne.n	80023c4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80023fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002400:	4619      	mov	r1, r3
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f83e 	bl	8002484 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002408:	e023      	b.n	8002452 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800240a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800240e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002412:	2b00      	cmp	r3, #0
 8002414:	d009      	beq.n	800242a <HAL_UART_IRQHandler+0x4ea>
 8002416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800241a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f95d 	bl	80026e2 <UART_Transmit_IT>
    return;
 8002428:	e014      	b.n	8002454 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800242a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800242e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00e      	beq.n	8002454 <HAL_UART_IRQHandler+0x514>
 8002436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800243a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243e:	2b00      	cmp	r3, #0
 8002440:	d008      	beq.n	8002454 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f99d 	bl	8002782 <UART_EndTransmit_IT>
    return;
 8002448:	e004      	b.n	8002454 <HAL_UART_IRQHandler+0x514>
    return;
 800244a:	bf00      	nop
 800244c:	e002      	b.n	8002454 <HAL_UART_IRQHandler+0x514>
      return;
 800244e:	bf00      	nop
 8002450:	e000      	b.n	8002454 <HAL_UART_IRQHandler+0x514>
      return;
 8002452:	bf00      	nop
  }
}
 8002454:	37e8      	adds	r7, #232	; 0xe8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop

0800245c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b090      	sub	sp, #64	; 0x40
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	603b      	str	r3, [r7, #0]
 80024a8:	4613      	mov	r3, r2
 80024aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024ac:	e050      	b.n	8002550 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b4:	d04c      	beq.n	8002550 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80024b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d007      	beq.n	80024cc <UART_WaitOnFlagUntilTimeout+0x30>
 80024bc:	f7fe fc72 	bl	8000da4 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d241      	bcs.n	8002550 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	330c      	adds	r3, #12
 80024d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d6:	e853 3f00 	ldrex	r3, [r3]
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80024e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	330c      	adds	r3, #12
 80024ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024ec:	637a      	str	r2, [r7, #52]	; 0x34
 80024ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024f4:	e841 2300 	strex	r3, r2, [r1]
 80024f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80024fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1e5      	bne.n	80024cc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	3314      	adds	r3, #20
 8002506:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	e853 3f00 	ldrex	r3, [r3]
 800250e:	613b      	str	r3, [r7, #16]
   return(result);
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	f023 0301 	bic.w	r3, r3, #1
 8002516:	63bb      	str	r3, [r7, #56]	; 0x38
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	3314      	adds	r3, #20
 800251e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002520:	623a      	str	r2, [r7, #32]
 8002522:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002524:	69f9      	ldr	r1, [r7, #28]
 8002526:	6a3a      	ldr	r2, [r7, #32]
 8002528:	e841 2300 	strex	r3, r2, [r1]
 800252c:	61bb      	str	r3, [r7, #24]
   return(result);
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1e5      	bne.n	8002500 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e00f      	b.n	8002570 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	4013      	ands	r3, r2
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	429a      	cmp	r2, r3
 800255e:	bf0c      	ite	eq
 8002560:	2301      	moveq	r3, #1
 8002562:	2300      	movne	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	461a      	mov	r2, r3
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	429a      	cmp	r2, r3
 800256c:	d09f      	beq.n	80024ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3740      	adds	r7, #64	; 0x40
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	4613      	mov	r3, r2
 8002584:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	68ba      	ldr	r2, [r7, #8]
 800258a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	88fa      	ldrh	r2, [r7, #6]
 8002590:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	88fa      	ldrh	r2, [r7, #6]
 8002596:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2222      	movs	r2, #34	; 0x22
 80025a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d007      	beq.n	80025c6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68da      	ldr	r2, [r3, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025c4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	695a      	ldr	r2, [r3, #20]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f042 0201 	orr.w	r2, r2, #1
 80025d4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68da      	ldr	r2, [r3, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f042 0220 	orr.w	r2, r2, #32
 80025e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b095      	sub	sp, #84	; 0x54
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	330c      	adds	r3, #12
 8002602:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002606:	e853 3f00 	ldrex	r3, [r3]
 800260a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800260c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002612:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	330c      	adds	r3, #12
 800261a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800261c:	643a      	str	r2, [r7, #64]	; 0x40
 800261e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002620:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002622:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002624:	e841 2300 	strex	r3, r2, [r1]
 8002628:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800262a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1e5      	bne.n	80025fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	3314      	adds	r3, #20
 8002636:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002638:	6a3b      	ldr	r3, [r7, #32]
 800263a:	e853 3f00 	ldrex	r3, [r3]
 800263e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f023 0301 	bic.w	r3, r3, #1
 8002646:	64bb      	str	r3, [r7, #72]	; 0x48
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	3314      	adds	r3, #20
 800264e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002650:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002652:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002654:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002658:	e841 2300 	strex	r3, r2, [r1]
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1e5      	bne.n	8002630 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002668:	2b01      	cmp	r3, #1
 800266a:	d119      	bne.n	80026a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	330c      	adds	r3, #12
 8002672:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	e853 3f00 	ldrex	r3, [r3]
 800267a:	60bb      	str	r3, [r7, #8]
   return(result);
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f023 0310 	bic.w	r3, r3, #16
 8002682:	647b      	str	r3, [r7, #68]	; 0x44
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	330c      	adds	r3, #12
 800268a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800268c:	61ba      	str	r2, [r7, #24]
 800268e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002690:	6979      	ldr	r1, [r7, #20]
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	e841 2300 	strex	r3, r2, [r1]
 8002698:	613b      	str	r3, [r7, #16]
   return(result);
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1e5      	bne.n	800266c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2220      	movs	r2, #32
 80026a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80026ae:	bf00      	nop
 80026b0:	3754      	adds	r7, #84	; 0x54
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b084      	sub	sp, #16
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f7ff fecb 	bl	8002470 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80026da:	bf00      	nop
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b085      	sub	sp, #20
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b21      	cmp	r3, #33	; 0x21
 80026f4:	d13e      	bne.n	8002774 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026fe:	d114      	bne.n	800272a <UART_Transmit_IT+0x48>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d110      	bne.n	800272a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	461a      	mov	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800271c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	1c9a      	adds	r2, r3, #2
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	621a      	str	r2, [r3, #32]
 8002728:	e008      	b.n	800273c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	1c59      	adds	r1, r3, #1
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6211      	str	r1, [r2, #32]
 8002734:	781a      	ldrb	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002740:	b29b      	uxth	r3, r3
 8002742:	3b01      	subs	r3, #1
 8002744:	b29b      	uxth	r3, r3
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	4619      	mov	r1, r3
 800274a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10f      	bne.n	8002770 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68da      	ldr	r2, [r3, #12]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800275e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68da      	ldr	r2, [r3, #12]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800276e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002770:	2300      	movs	r3, #0
 8002772:	e000      	b.n	8002776 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002774:	2302      	movs	r3, #2
  }
}
 8002776:	4618      	mov	r0, r3
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68da      	ldr	r2, [r3, #12]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002798:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2220      	movs	r2, #32
 800279e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7ff fe5a 	bl	800245c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b08c      	sub	sp, #48	; 0x30
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b22      	cmp	r3, #34	; 0x22
 80027c4:	f040 80ab 	bne.w	800291e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027d0:	d117      	bne.n	8002802 <UART_Receive_IT+0x50>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d113      	bne.n	8002802 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fa:	1c9a      	adds	r2, r3, #2
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	629a      	str	r2, [r3, #40]	; 0x28
 8002800:	e026      	b.n	8002850 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002806:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002808:	2300      	movs	r3, #0
 800280a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002814:	d007      	beq.n	8002826 <UART_Receive_IT+0x74>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10a      	bne.n	8002834 <UART_Receive_IT+0x82>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d106      	bne.n	8002834 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	b2da      	uxtb	r2, r3
 800282e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002830:	701a      	strb	r2, [r3, #0]
 8002832:	e008      	b.n	8002846 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	b2db      	uxtb	r3, r3
 800283c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002840:	b2da      	uxtb	r2, r3
 8002842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002844:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284a:	1c5a      	adds	r2, r3, #1
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002854:	b29b      	uxth	r3, r3
 8002856:	3b01      	subs	r3, #1
 8002858:	b29b      	uxth	r3, r3
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	4619      	mov	r1, r3
 800285e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002860:	2b00      	cmp	r3, #0
 8002862:	d15a      	bne.n	800291a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0220 	bic.w	r2, r2, #32
 8002872:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68da      	ldr	r2, [r3, #12]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002882:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	695a      	ldr	r2, [r3, #20]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0201 	bic.w	r2, r2, #1
 8002892:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2220      	movs	r2, #32
 8002898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d135      	bne.n	8002910 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	330c      	adds	r3, #12
 80028b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	e853 3f00 	ldrex	r3, [r3]
 80028b8:	613b      	str	r3, [r7, #16]
   return(result);
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	f023 0310 	bic.w	r3, r3, #16
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	330c      	adds	r3, #12
 80028c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ca:	623a      	str	r2, [r7, #32]
 80028cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ce:	69f9      	ldr	r1, [r7, #28]
 80028d0:	6a3a      	ldr	r2, [r7, #32]
 80028d2:	e841 2300 	strex	r3, r2, [r1]
 80028d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1e5      	bne.n	80028aa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0310 	and.w	r3, r3, #16
 80028e8:	2b10      	cmp	r3, #16
 80028ea:	d10a      	bne.n	8002902 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028ec:	2300      	movs	r3, #0
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002906:	4619      	mov	r1, r3
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff fdbb 	bl	8002484 <HAL_UARTEx_RxEventCallback>
 800290e:	e002      	b.n	8002916 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7fe f8cd 	bl	8000ab0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002916:	2300      	movs	r3, #0
 8002918:	e002      	b.n	8002920 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800291a:	2300      	movs	r3, #0
 800291c:	e000      	b.n	8002920 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800291e:	2302      	movs	r3, #2
  }
}
 8002920:	4618      	mov	r0, r3
 8002922:	3730      	adds	r7, #48	; 0x30
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800292c:	b0c0      	sub	sp, #256	; 0x100
 800292e:	af00      	add	r7, sp, #0
 8002930:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002944:	68d9      	ldr	r1, [r3, #12]
 8002946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	ea40 0301 	orr.w	r3, r0, r1
 8002950:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	431a      	orrs	r2, r3
 8002960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	431a      	orrs	r2, r3
 8002968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002980:	f021 010c 	bic.w	r1, r1, #12
 8002984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800298e:	430b      	orrs	r3, r1
 8002990:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800299e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029a2:	6999      	ldr	r1, [r3, #24]
 80029a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	ea40 0301 	orr.w	r3, r0, r1
 80029ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	4b8f      	ldr	r3, [pc, #572]	; (8002bf4 <UART_SetConfig+0x2cc>)
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d005      	beq.n	80029c8 <UART_SetConfig+0xa0>
 80029bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	4b8d      	ldr	r3, [pc, #564]	; (8002bf8 <UART_SetConfig+0x2d0>)
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d104      	bne.n	80029d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029c8:	f7ff f996 	bl	8001cf8 <HAL_RCC_GetPCLK2Freq>
 80029cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80029d0:	e003      	b.n	80029da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029d2:	f7ff f97d 	bl	8001cd0 <HAL_RCC_GetPCLK1Freq>
 80029d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029e4:	f040 810c 	bne.w	8002c00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029ec:	2200      	movs	r2, #0
 80029ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80029f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80029f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80029fa:	4622      	mov	r2, r4
 80029fc:	462b      	mov	r3, r5
 80029fe:	1891      	adds	r1, r2, r2
 8002a00:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a02:	415b      	adcs	r3, r3
 8002a04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a0a:	4621      	mov	r1, r4
 8002a0c:	eb12 0801 	adds.w	r8, r2, r1
 8002a10:	4629      	mov	r1, r5
 8002a12:	eb43 0901 	adc.w	r9, r3, r1
 8002a16:	f04f 0200 	mov.w	r2, #0
 8002a1a:	f04f 0300 	mov.w	r3, #0
 8002a1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a2a:	4690      	mov	r8, r2
 8002a2c:	4699      	mov	r9, r3
 8002a2e:	4623      	mov	r3, r4
 8002a30:	eb18 0303 	adds.w	r3, r8, r3
 8002a34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a38:	462b      	mov	r3, r5
 8002a3a:	eb49 0303 	adc.w	r3, r9, r3
 8002a3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a4e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002a52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a56:	460b      	mov	r3, r1
 8002a58:	18db      	adds	r3, r3, r3
 8002a5a:	653b      	str	r3, [r7, #80]	; 0x50
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	eb42 0303 	adc.w	r3, r2, r3
 8002a62:	657b      	str	r3, [r7, #84]	; 0x54
 8002a64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002a6c:	f7fd fbba 	bl	80001e4 <__aeabi_uldivmod>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4b61      	ldr	r3, [pc, #388]	; (8002bfc <UART_SetConfig+0x2d4>)
 8002a76:	fba3 2302 	umull	r2, r3, r3, r2
 8002a7a:	095b      	lsrs	r3, r3, #5
 8002a7c:	011c      	lsls	r4, r3, #4
 8002a7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a82:	2200      	movs	r2, #0
 8002a84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a88:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002a8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002a90:	4642      	mov	r2, r8
 8002a92:	464b      	mov	r3, r9
 8002a94:	1891      	adds	r1, r2, r2
 8002a96:	64b9      	str	r1, [r7, #72]	; 0x48
 8002a98:	415b      	adcs	r3, r3
 8002a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002aa0:	4641      	mov	r1, r8
 8002aa2:	eb12 0a01 	adds.w	sl, r2, r1
 8002aa6:	4649      	mov	r1, r9
 8002aa8:	eb43 0b01 	adc.w	fp, r3, r1
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	f04f 0300 	mov.w	r3, #0
 8002ab4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ab8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002abc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ac0:	4692      	mov	sl, r2
 8002ac2:	469b      	mov	fp, r3
 8002ac4:	4643      	mov	r3, r8
 8002ac6:	eb1a 0303 	adds.w	r3, sl, r3
 8002aca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ace:	464b      	mov	r3, r9
 8002ad0:	eb4b 0303 	adc.w	r3, fp, r3
 8002ad4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ae4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002ae8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002aec:	460b      	mov	r3, r1
 8002aee:	18db      	adds	r3, r3, r3
 8002af0:	643b      	str	r3, [r7, #64]	; 0x40
 8002af2:	4613      	mov	r3, r2
 8002af4:	eb42 0303 	adc.w	r3, r2, r3
 8002af8:	647b      	str	r3, [r7, #68]	; 0x44
 8002afa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002afe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002b02:	f7fd fb6f 	bl	80001e4 <__aeabi_uldivmod>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	4b3b      	ldr	r3, [pc, #236]	; (8002bfc <UART_SetConfig+0x2d4>)
 8002b0e:	fba3 2301 	umull	r2, r3, r3, r1
 8002b12:	095b      	lsrs	r3, r3, #5
 8002b14:	2264      	movs	r2, #100	; 0x64
 8002b16:	fb02 f303 	mul.w	r3, r2, r3
 8002b1a:	1acb      	subs	r3, r1, r3
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002b22:	4b36      	ldr	r3, [pc, #216]	; (8002bfc <UART_SetConfig+0x2d4>)
 8002b24:	fba3 2302 	umull	r2, r3, r3, r2
 8002b28:	095b      	lsrs	r3, r3, #5
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b30:	441c      	add	r4, r3
 8002b32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b36:	2200      	movs	r2, #0
 8002b38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b3c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002b40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002b44:	4642      	mov	r2, r8
 8002b46:	464b      	mov	r3, r9
 8002b48:	1891      	adds	r1, r2, r2
 8002b4a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b4c:	415b      	adcs	r3, r3
 8002b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b54:	4641      	mov	r1, r8
 8002b56:	1851      	adds	r1, r2, r1
 8002b58:	6339      	str	r1, [r7, #48]	; 0x30
 8002b5a:	4649      	mov	r1, r9
 8002b5c:	414b      	adcs	r3, r1
 8002b5e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002b6c:	4659      	mov	r1, fp
 8002b6e:	00cb      	lsls	r3, r1, #3
 8002b70:	4651      	mov	r1, sl
 8002b72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b76:	4651      	mov	r1, sl
 8002b78:	00ca      	lsls	r2, r1, #3
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4603      	mov	r3, r0
 8002b80:	4642      	mov	r2, r8
 8002b82:	189b      	adds	r3, r3, r2
 8002b84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b88:	464b      	mov	r3, r9
 8002b8a:	460a      	mov	r2, r1
 8002b8c:	eb42 0303 	adc.w	r3, r2, r3
 8002b90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ba0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002ba4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002ba8:	460b      	mov	r3, r1
 8002baa:	18db      	adds	r3, r3, r3
 8002bac:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bae:	4613      	mov	r3, r2
 8002bb0:	eb42 0303 	adc.w	r3, r2, r3
 8002bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002bbe:	f7fd fb11 	bl	80001e4 <__aeabi_uldivmod>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	4b0d      	ldr	r3, [pc, #52]	; (8002bfc <UART_SetConfig+0x2d4>)
 8002bc8:	fba3 1302 	umull	r1, r3, r3, r2
 8002bcc:	095b      	lsrs	r3, r3, #5
 8002bce:	2164      	movs	r1, #100	; 0x64
 8002bd0:	fb01 f303 	mul.w	r3, r1, r3
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	3332      	adds	r3, #50	; 0x32
 8002bda:	4a08      	ldr	r2, [pc, #32]	; (8002bfc <UART_SetConfig+0x2d4>)
 8002bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002be0:	095b      	lsrs	r3, r3, #5
 8002be2:	f003 0207 	and.w	r2, r3, #7
 8002be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4422      	add	r2, r4
 8002bee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002bf0:	e106      	b.n	8002e00 <UART_SetConfig+0x4d8>
 8002bf2:	bf00      	nop
 8002bf4:	40011000 	.word	0x40011000
 8002bf8:	40011400 	.word	0x40011400
 8002bfc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c04:	2200      	movs	r2, #0
 8002c06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002c12:	4642      	mov	r2, r8
 8002c14:	464b      	mov	r3, r9
 8002c16:	1891      	adds	r1, r2, r2
 8002c18:	6239      	str	r1, [r7, #32]
 8002c1a:	415b      	adcs	r3, r3
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c22:	4641      	mov	r1, r8
 8002c24:	1854      	adds	r4, r2, r1
 8002c26:	4649      	mov	r1, r9
 8002c28:	eb43 0501 	adc.w	r5, r3, r1
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	00eb      	lsls	r3, r5, #3
 8002c36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c3a:	00e2      	lsls	r2, r4, #3
 8002c3c:	4614      	mov	r4, r2
 8002c3e:	461d      	mov	r5, r3
 8002c40:	4643      	mov	r3, r8
 8002c42:	18e3      	adds	r3, r4, r3
 8002c44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c48:	464b      	mov	r3, r9
 8002c4a:	eb45 0303 	adc.w	r3, r5, r3
 8002c4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	f04f 0300 	mov.w	r3, #0
 8002c6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002c6e:	4629      	mov	r1, r5
 8002c70:	008b      	lsls	r3, r1, #2
 8002c72:	4621      	mov	r1, r4
 8002c74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c78:	4621      	mov	r1, r4
 8002c7a:	008a      	lsls	r2, r1, #2
 8002c7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002c80:	f7fd fab0 	bl	80001e4 <__aeabi_uldivmod>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4b60      	ldr	r3, [pc, #384]	; (8002e0c <UART_SetConfig+0x4e4>)
 8002c8a:	fba3 2302 	umull	r2, r3, r3, r2
 8002c8e:	095b      	lsrs	r3, r3, #5
 8002c90:	011c      	lsls	r4, r3, #4
 8002c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c96:	2200      	movs	r2, #0
 8002c98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ca0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002ca4:	4642      	mov	r2, r8
 8002ca6:	464b      	mov	r3, r9
 8002ca8:	1891      	adds	r1, r2, r2
 8002caa:	61b9      	str	r1, [r7, #24]
 8002cac:	415b      	adcs	r3, r3
 8002cae:	61fb      	str	r3, [r7, #28]
 8002cb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cb4:	4641      	mov	r1, r8
 8002cb6:	1851      	adds	r1, r2, r1
 8002cb8:	6139      	str	r1, [r7, #16]
 8002cba:	4649      	mov	r1, r9
 8002cbc:	414b      	adcs	r3, r1
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	f04f 0200 	mov.w	r2, #0
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ccc:	4659      	mov	r1, fp
 8002cce:	00cb      	lsls	r3, r1, #3
 8002cd0:	4651      	mov	r1, sl
 8002cd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cd6:	4651      	mov	r1, sl
 8002cd8:	00ca      	lsls	r2, r1, #3
 8002cda:	4610      	mov	r0, r2
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4603      	mov	r3, r0
 8002ce0:	4642      	mov	r2, r8
 8002ce2:	189b      	adds	r3, r3, r2
 8002ce4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ce8:	464b      	mov	r3, r9
 8002cea:	460a      	mov	r2, r1
 8002cec:	eb42 0303 	adc.w	r3, r2, r3
 8002cf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002cfe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d00:	f04f 0200 	mov.w	r2, #0
 8002d04:	f04f 0300 	mov.w	r3, #0
 8002d08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002d0c:	4649      	mov	r1, r9
 8002d0e:	008b      	lsls	r3, r1, #2
 8002d10:	4641      	mov	r1, r8
 8002d12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d16:	4641      	mov	r1, r8
 8002d18:	008a      	lsls	r2, r1, #2
 8002d1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002d1e:	f7fd fa61 	bl	80001e4 <__aeabi_uldivmod>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	4611      	mov	r1, r2
 8002d28:	4b38      	ldr	r3, [pc, #224]	; (8002e0c <UART_SetConfig+0x4e4>)
 8002d2a:	fba3 2301 	umull	r2, r3, r3, r1
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	2264      	movs	r2, #100	; 0x64
 8002d32:	fb02 f303 	mul.w	r3, r2, r3
 8002d36:	1acb      	subs	r3, r1, r3
 8002d38:	011b      	lsls	r3, r3, #4
 8002d3a:	3332      	adds	r3, #50	; 0x32
 8002d3c:	4a33      	ldr	r2, [pc, #204]	; (8002e0c <UART_SetConfig+0x4e4>)
 8002d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d42:	095b      	lsrs	r3, r3, #5
 8002d44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d48:	441c      	add	r4, r3
 8002d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d4e:	2200      	movs	r2, #0
 8002d50:	673b      	str	r3, [r7, #112]	; 0x70
 8002d52:	677a      	str	r2, [r7, #116]	; 0x74
 8002d54:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d58:	4642      	mov	r2, r8
 8002d5a:	464b      	mov	r3, r9
 8002d5c:	1891      	adds	r1, r2, r2
 8002d5e:	60b9      	str	r1, [r7, #8]
 8002d60:	415b      	adcs	r3, r3
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d68:	4641      	mov	r1, r8
 8002d6a:	1851      	adds	r1, r2, r1
 8002d6c:	6039      	str	r1, [r7, #0]
 8002d6e:	4649      	mov	r1, r9
 8002d70:	414b      	adcs	r3, r1
 8002d72:	607b      	str	r3, [r7, #4]
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	f04f 0300 	mov.w	r3, #0
 8002d7c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d80:	4659      	mov	r1, fp
 8002d82:	00cb      	lsls	r3, r1, #3
 8002d84:	4651      	mov	r1, sl
 8002d86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d8a:	4651      	mov	r1, sl
 8002d8c:	00ca      	lsls	r2, r1, #3
 8002d8e:	4610      	mov	r0, r2
 8002d90:	4619      	mov	r1, r3
 8002d92:	4603      	mov	r3, r0
 8002d94:	4642      	mov	r2, r8
 8002d96:	189b      	adds	r3, r3, r2
 8002d98:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d9a:	464b      	mov	r3, r9
 8002d9c:	460a      	mov	r2, r1
 8002d9e:	eb42 0303 	adc.w	r3, r2, r3
 8002da2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	663b      	str	r3, [r7, #96]	; 0x60
 8002dae:	667a      	str	r2, [r7, #100]	; 0x64
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	f04f 0300 	mov.w	r3, #0
 8002db8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002dbc:	4649      	mov	r1, r9
 8002dbe:	008b      	lsls	r3, r1, #2
 8002dc0:	4641      	mov	r1, r8
 8002dc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dc6:	4641      	mov	r1, r8
 8002dc8:	008a      	lsls	r2, r1, #2
 8002dca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002dce:	f7fd fa09 	bl	80001e4 <__aeabi_uldivmod>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	4b0d      	ldr	r3, [pc, #52]	; (8002e0c <UART_SetConfig+0x4e4>)
 8002dd8:	fba3 1302 	umull	r1, r3, r3, r2
 8002ddc:	095b      	lsrs	r3, r3, #5
 8002dde:	2164      	movs	r1, #100	; 0x64
 8002de0:	fb01 f303 	mul.w	r3, r1, r3
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	3332      	adds	r3, #50	; 0x32
 8002dea:	4a08      	ldr	r2, [pc, #32]	; (8002e0c <UART_SetConfig+0x4e4>)
 8002dec:	fba2 2303 	umull	r2, r3, r2, r3
 8002df0:	095b      	lsrs	r3, r3, #5
 8002df2:	f003 020f 	and.w	r2, r3, #15
 8002df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4422      	add	r2, r4
 8002dfe:	609a      	str	r2, [r3, #8]
}
 8002e00:	bf00      	nop
 8002e02:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002e06:	46bd      	mov	sp, r7
 8002e08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e0c:	51eb851f 	.word	0x51eb851f

08002e10 <atoi>:
 8002e10:	220a      	movs	r2, #10
 8002e12:	2100      	movs	r1, #0
 8002e14:	f000 b882 	b.w	8002f1c <strtol>

08002e18 <_strtol_l.constprop.0>:
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e1e:	d001      	beq.n	8002e24 <_strtol_l.constprop.0+0xc>
 8002e20:	2b24      	cmp	r3, #36	; 0x24
 8002e22:	d906      	bls.n	8002e32 <_strtol_l.constprop.0+0x1a>
 8002e24:	f000 f88c 	bl	8002f40 <__errno>
 8002e28:	2316      	movs	r3, #22
 8002e2a:	6003      	str	r3, [r0, #0]
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e32:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8002f18 <_strtol_l.constprop.0+0x100>
 8002e36:	460d      	mov	r5, r1
 8002e38:	462e      	mov	r6, r5
 8002e3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002e3e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8002e42:	f017 0708 	ands.w	r7, r7, #8
 8002e46:	d1f7      	bne.n	8002e38 <_strtol_l.constprop.0+0x20>
 8002e48:	2c2d      	cmp	r4, #45	; 0x2d
 8002e4a:	d132      	bne.n	8002eb2 <_strtol_l.constprop.0+0x9a>
 8002e4c:	782c      	ldrb	r4, [r5, #0]
 8002e4e:	2701      	movs	r7, #1
 8002e50:	1cb5      	adds	r5, r6, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d05b      	beq.n	8002f0e <_strtol_l.constprop.0+0xf6>
 8002e56:	2b10      	cmp	r3, #16
 8002e58:	d109      	bne.n	8002e6e <_strtol_l.constprop.0+0x56>
 8002e5a:	2c30      	cmp	r4, #48	; 0x30
 8002e5c:	d107      	bne.n	8002e6e <_strtol_l.constprop.0+0x56>
 8002e5e:	782c      	ldrb	r4, [r5, #0]
 8002e60:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8002e64:	2c58      	cmp	r4, #88	; 0x58
 8002e66:	d14d      	bne.n	8002f04 <_strtol_l.constprop.0+0xec>
 8002e68:	786c      	ldrb	r4, [r5, #1]
 8002e6a:	2310      	movs	r3, #16
 8002e6c:	3502      	adds	r5, #2
 8002e6e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8002e72:	f108 38ff 	add.w	r8, r8, #4294967295
 8002e76:	f04f 0e00 	mov.w	lr, #0
 8002e7a:	fbb8 f9f3 	udiv	r9, r8, r3
 8002e7e:	4676      	mov	r6, lr
 8002e80:	fb03 8a19 	mls	sl, r3, r9, r8
 8002e84:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8002e88:	f1bc 0f09 	cmp.w	ip, #9
 8002e8c:	d816      	bhi.n	8002ebc <_strtol_l.constprop.0+0xa4>
 8002e8e:	4664      	mov	r4, ip
 8002e90:	42a3      	cmp	r3, r4
 8002e92:	dd24      	ble.n	8002ede <_strtol_l.constprop.0+0xc6>
 8002e94:	f1be 3fff 	cmp.w	lr, #4294967295
 8002e98:	d008      	beq.n	8002eac <_strtol_l.constprop.0+0x94>
 8002e9a:	45b1      	cmp	r9, r6
 8002e9c:	d31c      	bcc.n	8002ed8 <_strtol_l.constprop.0+0xc0>
 8002e9e:	d101      	bne.n	8002ea4 <_strtol_l.constprop.0+0x8c>
 8002ea0:	45a2      	cmp	sl, r4
 8002ea2:	db19      	blt.n	8002ed8 <_strtol_l.constprop.0+0xc0>
 8002ea4:	fb06 4603 	mla	r6, r6, r3, r4
 8002ea8:	f04f 0e01 	mov.w	lr, #1
 8002eac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002eb0:	e7e8      	b.n	8002e84 <_strtol_l.constprop.0+0x6c>
 8002eb2:	2c2b      	cmp	r4, #43	; 0x2b
 8002eb4:	bf04      	itt	eq
 8002eb6:	782c      	ldrbeq	r4, [r5, #0]
 8002eb8:	1cb5      	addeq	r5, r6, #2
 8002eba:	e7ca      	b.n	8002e52 <_strtol_l.constprop.0+0x3a>
 8002ebc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8002ec0:	f1bc 0f19 	cmp.w	ip, #25
 8002ec4:	d801      	bhi.n	8002eca <_strtol_l.constprop.0+0xb2>
 8002ec6:	3c37      	subs	r4, #55	; 0x37
 8002ec8:	e7e2      	b.n	8002e90 <_strtol_l.constprop.0+0x78>
 8002eca:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8002ece:	f1bc 0f19 	cmp.w	ip, #25
 8002ed2:	d804      	bhi.n	8002ede <_strtol_l.constprop.0+0xc6>
 8002ed4:	3c57      	subs	r4, #87	; 0x57
 8002ed6:	e7db      	b.n	8002e90 <_strtol_l.constprop.0+0x78>
 8002ed8:	f04f 3eff 	mov.w	lr, #4294967295
 8002edc:	e7e6      	b.n	8002eac <_strtol_l.constprop.0+0x94>
 8002ede:	f1be 3fff 	cmp.w	lr, #4294967295
 8002ee2:	d105      	bne.n	8002ef0 <_strtol_l.constprop.0+0xd8>
 8002ee4:	2322      	movs	r3, #34	; 0x22
 8002ee6:	6003      	str	r3, [r0, #0]
 8002ee8:	4646      	mov	r6, r8
 8002eea:	b942      	cbnz	r2, 8002efe <_strtol_l.constprop.0+0xe6>
 8002eec:	4630      	mov	r0, r6
 8002eee:	e79e      	b.n	8002e2e <_strtol_l.constprop.0+0x16>
 8002ef0:	b107      	cbz	r7, 8002ef4 <_strtol_l.constprop.0+0xdc>
 8002ef2:	4276      	negs	r6, r6
 8002ef4:	2a00      	cmp	r2, #0
 8002ef6:	d0f9      	beq.n	8002eec <_strtol_l.constprop.0+0xd4>
 8002ef8:	f1be 0f00 	cmp.w	lr, #0
 8002efc:	d000      	beq.n	8002f00 <_strtol_l.constprop.0+0xe8>
 8002efe:	1e69      	subs	r1, r5, #1
 8002f00:	6011      	str	r1, [r2, #0]
 8002f02:	e7f3      	b.n	8002eec <_strtol_l.constprop.0+0xd4>
 8002f04:	2430      	movs	r4, #48	; 0x30
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1b1      	bne.n	8002e6e <_strtol_l.constprop.0+0x56>
 8002f0a:	2308      	movs	r3, #8
 8002f0c:	e7af      	b.n	8002e6e <_strtol_l.constprop.0+0x56>
 8002f0e:	2c30      	cmp	r4, #48	; 0x30
 8002f10:	d0a5      	beq.n	8002e5e <_strtol_l.constprop.0+0x46>
 8002f12:	230a      	movs	r3, #10
 8002f14:	e7ab      	b.n	8002e6e <_strtol_l.constprop.0+0x56>
 8002f16:	bf00      	nop
 8002f18:	08002fc5 	.word	0x08002fc5

08002f1c <strtol>:
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	460a      	mov	r2, r1
 8002f20:	4601      	mov	r1, r0
 8002f22:	4802      	ldr	r0, [pc, #8]	; (8002f2c <strtol+0x10>)
 8002f24:	6800      	ldr	r0, [r0, #0]
 8002f26:	f7ff bf77 	b.w	8002e18 <_strtol_l.constprop.0>
 8002f2a:	bf00      	nop
 8002f2c:	200000f0 	.word	0x200000f0

08002f30 <memset>:
 8002f30:	4402      	add	r2, r0
 8002f32:	4603      	mov	r3, r0
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d100      	bne.n	8002f3a <memset+0xa>
 8002f38:	4770      	bx	lr
 8002f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f3e:	e7f9      	b.n	8002f34 <memset+0x4>

08002f40 <__errno>:
 8002f40:	4b01      	ldr	r3, [pc, #4]	; (8002f48 <__errno+0x8>)
 8002f42:	6818      	ldr	r0, [r3, #0]
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	200000f0 	.word	0x200000f0

08002f4c <__libc_init_array>:
 8002f4c:	b570      	push	{r4, r5, r6, lr}
 8002f4e:	4d0d      	ldr	r5, [pc, #52]	; (8002f84 <__libc_init_array+0x38>)
 8002f50:	4c0d      	ldr	r4, [pc, #52]	; (8002f88 <__libc_init_array+0x3c>)
 8002f52:	1b64      	subs	r4, r4, r5
 8002f54:	10a4      	asrs	r4, r4, #2
 8002f56:	2600      	movs	r6, #0
 8002f58:	42a6      	cmp	r6, r4
 8002f5a:	d109      	bne.n	8002f70 <__libc_init_array+0x24>
 8002f5c:	4d0b      	ldr	r5, [pc, #44]	; (8002f8c <__libc_init_array+0x40>)
 8002f5e:	4c0c      	ldr	r4, [pc, #48]	; (8002f90 <__libc_init_array+0x44>)
 8002f60:	f000 f818 	bl	8002f94 <_init>
 8002f64:	1b64      	subs	r4, r4, r5
 8002f66:	10a4      	asrs	r4, r4, #2
 8002f68:	2600      	movs	r6, #0
 8002f6a:	42a6      	cmp	r6, r4
 8002f6c:	d105      	bne.n	8002f7a <__libc_init_array+0x2e>
 8002f6e:	bd70      	pop	{r4, r5, r6, pc}
 8002f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f74:	4798      	blx	r3
 8002f76:	3601      	adds	r6, #1
 8002f78:	e7ee      	b.n	8002f58 <__libc_init_array+0xc>
 8002f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f7e:	4798      	blx	r3
 8002f80:	3601      	adds	r6, #1
 8002f82:	e7f2      	b.n	8002f6a <__libc_init_array+0x1e>
 8002f84:	080030d0 	.word	0x080030d0
 8002f88:	080030d0 	.word	0x080030d0
 8002f8c:	080030d0 	.word	0x080030d0
 8002f90:	080030d4 	.word	0x080030d4

08002f94 <_init>:
 8002f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f96:	bf00      	nop
 8002f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f9a:	bc08      	pop	{r3}
 8002f9c:	469e      	mov	lr, r3
 8002f9e:	4770      	bx	lr

08002fa0 <_fini>:
 8002fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fa2:	bf00      	nop
 8002fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fa6:	bc08      	pop	{r3}
 8002fa8:	469e      	mov	lr, r3
 8002faa:	4770      	bx	lr
